@model IOAS.Models.DomesticTravelBillEntryModel
@{
    ViewBag.Title = "Domestic Travel Bill Entry";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("DomesticTravelPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formDTV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Domestic Travel Bill Entry</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.TravelBillId)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @*@Html.DropDownListFor(m => m.SourceReferenceNumber, new SelectList(ViewBag.SourceRefNumberList, "id", "name"), "Select any",
                        new { @class = "form-control" })*@
                    @Html.TextBoxFor(m=>m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.Hidden("TransactionTypeCode", "DTV")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>


            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Payment Break Up</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>Transactions</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>06</span>Documents</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-8">
                                    <div class="white-bg">

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PI</label>
                                                    @*@Html.DropDownListFor(m => m.ProjectId, new SelectList(ViewBag.ProjectList, "id", "name"), new { @class = "form-control selectpicker", @disabled = "disabled" })
        @Html.HiddenFor(m => m.ProjectId)
        @Html.ValidationMessageFor(m => m.ProjectId)*@
                                                    @Html.TextBoxFor(m => m.PIName, new { @class = "form-control" })
                                                    @Html.TextBoxFor(m => m.PI, new { @class = "form-control dis-none" })
                                                    @Html.ValidationMessageFor(m => m.PI)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Place</label>
                                                    @Html.TextBoxFor(m => m.Place, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.Place)
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">From Date</label>
                                                    @Html.EditorFor(m => m.TravelFromDate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.TravelFromDate)
                                                    <label id="lblDuration"></label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">To Date</label>
                                                    @Html.EditorFor(m => m.TravelToDate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.TravelToDate)
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Purpose</label>
                                                    @Html.TextBoxFor(m => m.Purpose, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.Purpose)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>No. of Travelers</label>
                                                    @Html.TextBoxFor(m => m.NoOfTraveller, new { @value = "1", @class = "form-control", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.NoOfTraveller)
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "3" })
                                                    @Html.ValidationMessageFor(m => m.Remarks)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Invoice Attachements</label>
                                                    <input type="file" id="InvoiceAttachment" name="InvoiceAttachment">
                                                    @Html.ValidationMessage("InvoiceAttachment")
                                                    <a href="@Url.Action("ShowDocument","Project",new { file = Model.DocumentName, filepath = Model.DocumentPath })" target="_blank">@Model.DocumentActualName</a>
                                                </div>
                                            </div>                                           
                                        </div>

                                    </div>

                                </div>
                            </div>


                            <div class="col-md-4 mt30">

                                <div class="bl-lg-panel-box">
                                    <div class="bl-lg-panel-box-hd mb-null">
                                        <div class="">
                                            <h3 class="fn-s-bold">Traveller Details</h3>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="">
                                                <table class="table table-bordered mb-null">
                                                    <thead>
                                                        <tr>
                                                            <th>Category</th>
                                                            <th>Name</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="tbodyTraveller">
                                                        @if (Model.TravelerDetail.Count() > 0)
                                                        {
                                                            var count = 0;
                                                            foreach(var item in Model.TravelerDetail)
                                                            {
                                                                var catId = "TravelerDetail[" + count + "].CategoryId";
                                                                var uId = "TravelerDetail[" + count + "].UserId";
                                                                var name = "TravelerDetail[" + count + "].Name";
                                                                var autoComp = "TravelerDetail[" + count + "].autoComplete";
                                                                <tr>
                                                                    <td>
                                                                        @Html.DropDownList(@catId, new SelectList(ViewBag.CategoryList, "id", "name", item.CategoryId), "Select any", new { @class = "form-control required" })
                                                                                    @Html.ValidationMessage(@catId)
                                                                                    @Html.Hidden("TravelerDetail.Index", @count)
                                                                    </td>
                                                                    <td class="tdDDLUser">
                                                                        @Html.TextBox(@autoComp, item.Name, new { @class = "form-control" })
                                                                        @Html.TextBox(@uId, item.UserId, new { @class = "form-control dis-none" })

                                                                        @Html.ValidationMessage(@uId)
                                                                    </td>
                                                                    <td class="tdTxtName dis-none">
                                                                        @Html.TextBox(@name, item.Name, new { @class = "form-control" })
                                                                        @Html.ValidationMessage(@name)
                                                                    </td>
                                                                   <td>
                                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removePaymentBUDetail"><i class="ion-android-close"></i></a>
                                                                    </td>
                                                                </tr>
                                                                <script type="text/javascript">
                                                                    if(@item.CategoryId != 3){
                                                                        travelerCategoryChange($('select[name="'+ @catId+'"]'));
                                                                    }
                                                                </script>
                                                                count++;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.DropDownList("TravelerDetail[0].CategoryId", new SelectList(ViewBag.CategoryList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                                    @Html.ValidationMessage("TravelerDetail[0].CategoryId")
                                                                    @Html.Hidden("TravelerDetail.Index", 0)
                                                                </td>
                                                                <td class="tdDDLUser">
                                                                    @Html.TextBox("TravelerDetail[0].autoComplete", "", new { @class = "form-control" })
                                                                    @Html.TextBox("TravelerDetail[0].UserId", "", new { @class = "form-control dis-none" })

                                                                    @Html.ValidationMessage("TravelerDetail[0].UserId")
                                                                </td>
                                                                <td class="tdTxtName dis-none">
                                                                    @Html.TextBox("TravelerDetail[0].Name", "", new { @class = "form-control" })
                                                                    @Html.ValidationMessage("TravelerDetail[0].Name")
                                                                </td>                                                                
                                                                <td>
                                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeTravelerDetail"><i class="ion-android-close"></i></a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                                <div class="row p-b-sm">
                                                    <div class="col-md-12 text-center mt-md">
                                                        <button type="button" id="btnAddTraveller" class="btn-primary btn">Add New</button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-lg">
                            <div class="col-md-12">
                                <h3 class="fn-s-bold">Break Up Details</h3>
                            </div>
                            <div class="col-md-12">
                                <table class="table grey-alter-table">
                                    <thead>
                                        <tr>
                                            <td>Type of Expense</td>
                                            <td class="bg-blue">Claimed as per the Claim Statement Amount</td>
                                            <td class="bg-lg-blue">Processed as per Policy Amount</td>
                                            <td>Difference</td>
                                            <td>Remarks</td>
                                        </tr>
                                    </thead>
                                    <tbody id="tbodyBreakUpDetails">
                                        @if (Model.TravelerDetail.Count() > 0)
                                        {
                                            var count = 0;
                                            foreach (var item in Model.BreakUpDetail)
                                            {
                                                var expId = "BreakUpDetail[" + count + "].ExpenseTypeId";
                                                var cAmt = "BreakUpDetail[" + count + "].ClaimedAmount";
                                                var pAmt = "BreakUpDetail[" + count + "].ProcessedAmount";
                                                var diffAmt = "BreakUpDetail[" + count + "].DifferenceAmt";
                                                var remarks = "BreakUpDetail[" + count + "].Remarks";
                                                <tr>
                                                    <td>
                                                        @Html.DropDownList(@expId, new SelectList(ViewBag.ExpenseTypeList, "id", "name", item.ExpenseTypeId), "Select any", new { @class = "form-control required" })
                                                        @Html.ValidationMessage(@expId)
                                                        @Html.Hidden("BreakUpDetail.Index", @count)
                                                    </td>
                                                    <td class="bg-blue">
                                                        @Html.TextBox(@cAmt, item.ClaimedAmount, new { @class = "form-control required", @onblur = "calcBreakUpByRow(this)", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                        @Html.ValidationMessage(@cAmt)
                                                    </td>
                                                    
                                                    <td class="bg-lg-blue">
                                                        @Html.TextBox(@pAmt, item.ProcessedAmount, new { @class = "form-control required", @onblur = "calcBreakUpByRow(this)", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                        @Html.ValidationMessage(@pAmt)
                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@diffAmt, item.DifferenceAmt, new { @class = "form-control required", @readonly = "readonly" })
                                                        @Html.ValidationMessage(@diffAmt)
                                                    </td>
                                                    <td>
                                                        @Html.TextBox(@remarks, item.Remarks, new { @class = "form-control" })
                                                        @Html.ValidationMessage(@remarks)
                                                    </td>
                                                    <td>
                                                        <a href="javascript:void(0)" class="btn-sm btn btn-danger removeBreakUpDetail"><i class="ion-android-close"></i></a>
                                                    </td>
                                                </tr>
                                                              
                                                count++;
                                            }

                                        }
                                        else
                                        {
                                            <tr>
                                                <td>
                                                    @Html.DropDownList("BreakUpDetail[0].ExpenseTypeId", new SelectList(ViewBag.ExpenseTypeList, "id", "name"), "Select any", new { @class = "form-control required" })
                                                    @Html.ValidationMessage("BreakUpDetail[0].ExpenseTypeId")
                                                    @Html.Hidden("BreakUpDetail.Index", 0)
                                                </td>
                                                <td class="bg-blue">
                                                    @Html.TextBox("BreakUpDetail[0].ClaimedAmount", "", new { @class = "form-control required", @onblur = "calcBreakUpByRow(this)", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                    @Html.ValidationMessage("BreakUpDetail[0].ClaimedAmount")
                                                </td>

                                                <td class="bg-lg-blue">
                                                    @Html.TextBox("BreakUpDetail[0].ProcessedAmount", "", new { @class = "form-control required", @onblur = "calcBreakUpByRow(this)", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                    @Html.ValidationMessage("BreakUpDetail[0].ProcessedAmount")
                                                </td>
                                                <td>
                                                    @Html.TextBox("BreakUpDetail[0].DifferenceAmt", "", new { @class = "form-control required", @readonly = "readonly" })
                                                    @Html.ValidationMessage("BreakUpDetail[0].DifferenceAmt")
                                                </td>
                                                <td>
                                                    @Html.TextBox("BreakUpDetail[0].Remarks", "", new { @class = "form-control" })
                                                    @Html.ValidationMessage("BreakUpDetail[0].Remarks")
                                                </td>
                                                <td>
                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeBreakUpDetail"><i class="ion-android-close"></i></a>
                                                </td>
                                            </tr>
                                        }                                        
                                        <tr>
                                            <td colspan="10"></td>
                                            <td>
                                            <a href="javascript:void(0)" id="btnAddBreakUp" class="btn-circle"><i class="ion-plus-round"></i></a>
                                            </td>
                                        </tr>


                                    </tbody>
                                </table>
                            </div>
                            <div class="col-md-3 col-md-offset-9 mt-lg">
                                @Html.TextBoxFor(m => m.OverallExpense, new { @class = "form-control", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab">
                    @Html.Partial("_InvoiceBreakUp", Model.InvoiceBreakDetail)
                    @Html.Partial("_PaymentBreakUp", Model.PaymentBreakDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>


                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("DomesticTravelPaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}

@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#TravelToDate, #TravelFromDate,#SourceEmailDate').datepicker({maxDate: 0, dateFormat: 'dd-MM-yy' }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true,

        });

        applyAutoComplete($('#PIName'), $('#PI'), "@Url.Action("LoadPIList", "CoreAccounts")");
        //var comDTV = $('#formDTV');
        //comDTV.removeData('validator');
        //comDTV.removeData('unobtrusiveValidation');
        //$.validator.unobtrusive.parse(comDTV);

        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        $('#tbodyTraveller').find('select[name$=".CategoryId"]').each(function () {
            travelerCategoryChange($(this),'U');
        });
        $('#lblVendorName').html('PI');
        CalculatePaymentBUTotal();
        CalculateDeductionTotal();
        CalculateNoOfTraveller();
        CalculatePaymentValue();
        calcDateDiff();
    });
    $('#PIName').keyup(function () {
        if ($(this).val() == "") {
            $('#PI').val('')
        }
    });
    $(document).on('change', '#tbodyTraveller select[name$=".CategoryId"]', function () {
        travelerCategoryChange($(this));
    });
    $('#btnAddBreakUp').click(function () {
        var cln = $('#tbodyBreakUpDetails tr:first').clone().find("select,input").val("").end();
        var index = $('#tbodyBreakUpDetails tr:last').prev().find("input[name='BreakUpDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='BreakUpDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $('#tbodyBreakUpDetails tr:last').before(cln);
    });
    $(document).on('click', 'a.removeBreakUpDetail', function () {
        if ($('#tbodyBreakUpDetails tr').length != 2)
        {
            $(this).closest('tr').remove();
            calcOtherExpnse();
        }
    });
    function calcBreakUpByRow(ele) {
        var tr = $(ele).closest('tr');
        var cAmt = parseFloat($(tr).find('input[name$=".ClaimedAmount"]').val()) || 0;
        var pAmt = parseFloat($(tr).find('input[name$=".ProcessedAmount"]').val()) || 0;
        $(tr).find('input[name$=".DifferenceAmt"]').val((cAmt - pAmt).toFixed(2));
        $('#NeedUpdateTransDetail').val('true')
        calcOtherExpnse();
    }
    function calcOtherExpnse() {
        var ttlExp = 0;
        $('#tbodyBreakUpDetails input[name$=".ProcessedAmount"]').each(function () {
            ttlExp = ttlExp + (parseFloat($(this).val()) || 0);
        });
        $('#OverallExpense').val(ttlExp.toFixed(2));
    }
    $(document).on('click', 'a.removeTravelerDetail', function () {
        if ($('#tbodyTraveller tr').length != 1)
        {
            $(this).closest('tr').remove();
            CalculateNoOfTraveller();
        }
    });
    $('#btnAddTraveller').click(function () {
        var cln = $('#tbodyTraveller tr:first').clone().find("input,select").val("").end();
        var index = $('#tbodyTraveller tr:last').find("input[name='TravelerDetail.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='TravelerDetail.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $(cln).find('td.tdDDLUser').removeClass('dis-none');
        $(cln).find('td.tdTxtName').addClass('dis-none');
        $('#tbodyTraveller').append(cln);
        CalculateNoOfTraveller();
    });

    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function formSave(){
        var isValid = $('#formDTV').valid();
        if (!isValid)
            return false;

        $('#formDTV').submit();
    }
    $("#TravelToDate, #TravelFromDate").change(function () {
        calcDateDiff();
    });
    function calcDateDiff() {
        var strDate = $("#TravelFromDate").val();
        var clsDate = $("#TravelToDate").val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins < 0) {
                $('#alert').html("To Date must be greater than from date.");
                $('#Validation').modal('toggle');
                $("#TravelToDate").val('');
                return false;
            }
            var result = '';
            var years = closeDate.diff(startDate, 'year');
            startDate.add(years, 'years');

            var months = closeDate.diff(startDate, 'months');
            startDate.add(months, 'months');

            var days = closeDate.diff(startDate, 'days');
            if (years > 1) {
                result = years + ' years ';
            } else if (years == 1) {
                result = years + ' year ';
            }
            if (months > 1) {
                result = result + months + ' months ';
            } else if (months == 1) {
                result = result + months + ' month ';
            }
            if (days > 1) {
                result = result + days + ' days';
            } else if (days == 1) {
                result = result + days + ' day';
            }
            $('#lblDuration').html(result);
        }
    }
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    function CalculateNoOfTraveller() {
        var len = $('#tbodyTraveller tr').length;
        $('#NoOfTraveller').val(len);
    }
    $('#CommitmentAmount, #CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Amount"], #ttlCr, #ttlDr, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });


    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "DTV","tSubCode" : "1"},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    function GetTransactionDetails() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "DTV","tSubCode" : "1"},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    //var amt = 0;
                    //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                    //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                    //    var parseVal = parseFloat($(elePayment).val());
                    //    if (!isNaN(parseVal))
                    //        amt = amt + parseVal;
                    //});
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        if(item.TDSPercentage == null){
                            amtEle.val('');
                        }else{
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }

                        amtEle.addClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                        amtEle.addClass('required');
                        if(item.TDSPercentage != null){
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }



    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function validatePaymentBU(){
        var msg = 'valid';
        var payVal = parseFloat($('#OverallExpense').val()) || 0;
        var payBUTtl = parseFloat($('#PaymentBUTotal').val()) || 0;
        //var invAmt = parseFloat($('#InvoiceBUTotal').val()) || 0;
        var payeeList = [];
        if (payVal != payBUTtl) {
            msg ="Not a valid entry.The Payable value and Payment Break Up Total value are not equal.";
        }//else if (payVal < invAmt) {
        //    msg = "There is a mismatch between the total invoice amount and payable value. Please update the value to continue.";
        //}
        $('#tbodyPaymentBU input[name$=".UserId"]').each(function (idx, val) { payeeList.push($(val).val()); });
        payeeList.sort();
        for (var k = 1; k < payeeList.length; ++k) {
            if (payeeList[k] == payeeList[k - 1]) {
                msg ="Selected payee already exist. Please select a different payee.";
            }
        }
        return msg;
    }
    function validateTravelDetail() {
        var msg = 'valid';
        var travellerList = [];
        var expTypeList = [];
        var strDate = $("#TravelFromDate").val();
        var clsDate = $("#TravelToDate").val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins < 0) {
                msg = "To Date must be greater than from date.";
            }
        }
        $('#tbodyTraveller input[name$=".UserId"]').each(function (idx, val) { travellerList.push($(val).val()); });
        travellerList.sort();
        for (var k = 1; k < travellerList.length; ++k) {
            if (travellerList[k] == travellerList[k - 1]) {
                msg ="Selected traveller already exist. Please select a different traveller.";
            }
        }
        //$('#tbodyBreakUpDetails select[name$=".ExpenseTypeId"]').each(function (idx, val) { expTypeList.push($(val).val()); });
        //expTypeList.sort();
        //for (var k = 1; k < expTypeList.length; ++k) {
        //    if (expTypeList[k] == expTypeList[k - 1]) {
        //        msg ="Selected expense type already exist. Please select a different expense type.";
        //    }
        //}
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var ttlGSTElg = parseFloat($('#GSTOffsetTotal').val()) || 0;
        overallExp = overallExp - ttlGSTElg;
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(overallExp) || isNaN(commitmentAmt)) {
            msg = 'The Payable value / allocated commitment value is not a valid entry.';
        } else if (overallExp != commitmentAmt || overallExp == 0) {
            msg = 'There is a mismatch between the payable value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var overallExp = parseFloat($('#OverallExpense').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(netCrAmt) || isNaN(overallExp)) {
            msg = 'The credit value / overall expenses is not a valid entry.';
        } else if (netCrAmt != overallExp) {
            msg = 'There is a mismatch between the credit value and overall expenses value. Please update the value to continue.';
        }

        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var validationMsg = validateTravelDetail();
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment();
            }
        }else if (currentTab == 1) {
            var validationMsg = validatePaymentBU();
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }else if (currentTab == 2) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if($('#NeedUpdateTransDetail').val().toLowerCase() == 'true'){
                    GetTransactionDetails();
                }

                $("#CreditorAmount").val($('#OverallExpense').val());
                //$("#DeductionAmount, #ttlDr, #ExpenseAmount").val('');
            }
        } else if (currentTab == 3) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }else if (currentTab == 4) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
