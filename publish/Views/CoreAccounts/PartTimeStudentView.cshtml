@model IOAS.Models.PartTimePaymentModel
@{
    ViewBag.Title = "Part Time Payment";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("PartTimeStudent", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formSI", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Part Time Payment</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.PartTimePaymentId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "PTP")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.PartTimePaymentNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Student Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PI</label>
                                                    @Html.DropDownListFor(m => m.PIId, new SelectList(ViewBag.PIName, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtPI" })
                                                    @Html.ValidationMessageFor(m => m.PIId)
                                                    @Html.HiddenFor(m => m.PartTimePaymentId)
                                                    @Html.HiddenFor(m => m.PIName)
                                                </div>
                                            </div>
                                            <div class="col-md-8">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Project</label>
                                                    @Html.DropDownListFor(m => m.ProjectId, new SelectList(ViewBag.Project, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "selectproject" })
                                                    @Html.ValidationMessageFor(m => m.ProjectId)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-6">
                                                            <h3 class="mt-xs">Student Details</h3>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <a href="javascript:void(0)" id="btnAddStudent" class="btn btn-primary">Add New</a>
                                                        </div>
                                                    </div>
                                                    <div class="m-b-sm scrl-table scrl-table-po-bl">
                                                        <table class="table table-bordered" style="width: 3300px;">
                                                            <thead>
                                                                <tr>
                                                                    <th colspan="6" class="text-center">Part Time Student Details</th>
                                                                    @*<th colspan="2" class="text-center bg-blue">Advance Payment Details</th>*@
                                                                    <th></th>

                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyPO">
                                                                <tr>
                                                                    @*<td style="width: 400px;">Department </td>*@
                                                                    <td style="width: 400px;">Student Name </td>
                                                                    @*<td style="width: 200px;">(SAC / HSN) / Tax % </td>*@
                                                                    <td style="width: 200px;">Session</td>
                                                                    <td style="width: 150px;">Student Roll No.</td>
                                                                    <td style="width: 400px;">Student Course</td>
                                                                    <td style="width: 300px;">Student Email</td>
                                                                    <td style="width: 50px;">Year of Study</td>
                                                                    <td style="width: 200px;">Start Date</td>
                                                                    <td style="width: 200px;">End Date</td>
                                                                    <td style="width: 50px;">Duration (in hrs)</td>
                                                                    <td style="width: 150px;">Amount per hour</td>
                                                                    <td style="width: 150px;">Stipend Amount</td>

                                                                    <td style="width: 300px;">Bank Name</td>
                                                                    <td style="width: 300px;">Account Number</td>
                                                                    <td style="width: 300px;">Branch Name</td>
                                                                    <td style="width: 180px;">IFSC Code</td>

                                                                    @*<td class="bg-blue">Adv %</td>
                                                                        <td class="bg-blue">Advance Amt</td>
                                                                        <td class="bg-blue dis-none">TAX</td>
                                                                        <td class="bg-blue dis-none">Total</td>
                                                                        <td></td>*@
                                                                </tr>
                                                                @if (Model.StudentDetails != null)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.StudentDetails)
                                                                    {
                                                                        // var depcode = "StudentDetails[" + count + "].Department";
                                                                        var rollno = "StudentDetails[" + count + "].StudentRollNo";
                                                                        var name = "StudentDetails[" + count + "].Name";
                                                                        var session = "StudentDetails[" + count + "].Session";
                                                                        var course = "StudentDetails[" + count + "].StudentCourse";
                                                                        var email = "StudentDetails[" + count + "].StudentEmail";
                                                                        var yearofstudy = "StudentDetails[" + count + "].StudentYearofStudy";
                                                                        var startdt = "StudentDetails[" + count + "].InternFromDate";
                                                                        var enddt = "StudentDetails[" + count + "].InternToDate";
                                                                        var duration = "StudentDetails[" + count + "].Duration";
                                                                        var stiperhr = "StudentDetails[" + count + "].StipendValueperHour";
                                                                        var stipval = "StudentDetails[" + count + "].StipendValue";
                                                                        var bank = "StudentDetails[" + count + "].BankName";
                                                                        var accno = "StudentDetails[" + count + "].AccountNumber";
                                                                        var branch = "StudentDetails[" + count + "].BranchName";
                                                                        var ifsc = "StudentDetails[" + count + "].IFSCCode";
                                                                        //var detId = "StudentDetails[" + count + "].PaymentBreakUpDetailId";
                                                                        var autoComp = "StudentDetails[" + count + "].autoComplete";
                                                                        <tr id="trstudents" class="p-b-sm">
                                                                            @*<td>
                                                                                    @Html.DropDownList(@depcode, new SelectList(ViewBag.Department, "code", "name", item.Department), "Select any", new { @class = "form-control required" })
                                                                                    @Html.ValidationMessage(@depcode)
                                                                                    @Html.Hidden("StudentDetails.Index", @count)
                                                                                    @Html.Hidden("StudentDetails[0].Service_f", "False")
                                                                                    @Html.Hidden("StudentDetails[0].BillPODetailId")
                                                                                        @Html.Hidden("StudentDetails[0].TaxPct")
                                                                                        @Html.Hidden("StudentDetails[0].TaxCode")
                                                                                     @Html.DropDownList("StudentDetails[0].StudentName", new SelectList(ViewBag.Student, "code", "name"), "Select any", new { @class = "form-control required" })
                                                                                        @Html.ValidationMessage("StudentDetails[0].StudentName")
                                                                                </td>*@
                                                                            <td class="tdDDLUser">
                                                                                @Html.Hidden("StudentDetails.Index", @count)
                                                                                @Html.TextBox(@autoComp, item.Name, new { @class = "form-control" })
                                                                                @*@Html.TextBox(@rollno, item.StudentRollNo, new { @class = "form-control dis-none" })*@
                                                                            </td>
                                                                            <td class="tdTxtName dis-none">
                                                                                @Html.TextBox(@name, item.Name, new { @class = "form-control", @onkeypress = "return DepartmentChange();" })
                                                                                @Html.ValidationMessage(@name)
                                                                            </td>
                                                                            <td>
                                                                                @Html.DropDownList(@session, new SelectList(ViewBag.SessionList, "id", "name", item.Session), "Select any", new { @class = "form-control required", @onchange = "calculateamount()" })
                                                                                @Html.ValidationMessage(@session)

                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@rollno, item.StudentRollNo, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@rollno)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@course, item.StudentCourse, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@course)

                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@email, item.StudentEmail, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@email)

                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@yearofstudy, item.StudentYearofStudy, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                                @Html.ValidationMessage(@yearofstudy)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@startdt, item.InternFromDate, new { @class = "form-control required", @id = "InternFromDate", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@startdt)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@enddt, item.InternToDate, new { @class = "form-control required", @id = "InternToDate", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@enddt)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@duration, item.Duration, new { @class = "form-control", @onchange = "calculateamount()" })
                                                                                @Html.ValidationMessage(@duration)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@stiperhr, item.StipendValueperHour, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                                @Html.ValidationMessage(@stiperhr)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@stipval, item.StipendValue, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                                @Html.ValidationMessage(@stipval)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@bank, item.BankName, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@bank)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@accno, item.AccountNumber, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@accno)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@branch, item.BranchName, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@branch)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@ifsc, item.IFSCCode, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@ifsc)
                                                                            </td>
                                                                            @*<td class="bg-blue tdAdvPct"></td>
                                                                                <td class="bg-blue tdAdvAmt"></td>
                                                                                <td class="bg-blue tdTaxAmt dis-none"></td>
                                                                                <td class="bg-blue tdNetAmt dis-none"></td>*@
                                                                            <td>
                                                                                <a href="javascript:void(0)" class="btn-circle dis-none removeStudent"><i class="ion-trash-a"></i></a>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>
                                                                        @*<td>
                                                                                @Html.DropDownList("StudentDetails[0].Department", new SelectList(ViewBag.Department, "code", "name"), "Select any", new { @class = "form-control required" })
                                                                                @Html.ValidationMessage("StudentDetails[0].Department")
                                                                                @Html.Hidden("StudentDetails.Index", "0")
                                                                               // @Html.Hidden("StudentDetails[0].Service_f", "False")
                                                                               // @Html.Hidden("StudentDetails[0].BillPODetailId")
                                                                                  //  @Html.Hidden("StudentDetails[0].TaxPct")
                                                                                  //  @Html.Hidden("StudentDetails[0].TaxCode")
                                                                            </td>*@
                                                                        <td class="tdDDLUser">
                                                                            @Html.TextBox("StudentDetails[0].autoComplete", "", new { @class = "form-control" })
                                                                            @*@Html.TextBox("StudentDetails[0].StudentRollNo", "", new { @class = "form-control dis-none" })*@
                                                                            @Html.ValidationMessage("StudentDetails[0].StudentRollNo")
                                                                            @Html.Hidden("StudentDetails.Index", "0")
                                                                            @*@Html.Hidden("StudentDetails[0].Name", "")*@
                                                                        </td>
                                                                        <td class="tdTxtName dis-none">
                                                                            @Html.TextBox("StudentDetails[0].Name", "", new { @class = "form-control", @onkeypress = "return DepartmentChange();" })
                                                                            @Html.ValidationMessage("StudentDetails[0].Name")
                                                                            @*@Html.DropDownList("StudentDetails[0].StudentName", new SelectList(ViewBag.Student, "code", "name"), "Select any", new { @class = "form-control required" })
                                                                                @Html.ValidationMessage("StudentDetails[0].StudentName")*@

                                                                        </td>
                                                                        <td>
                                                                            @Html.DropDownList("StudentDetails[0].Session", new SelectList(ViewBag.SessionList, "id", "name"), "Select any", new { @class = "form-control required", @onchange = "calculateamount()" })
                                                                            @Html.ValidationMessage("StudentDetails[0].Session")

                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StudentRollNo", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StudentRollNo")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StudentCourse", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StudentCourse")

                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StudentEmail", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StudentEmail")

                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StudentYearofStudy", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StudentYearofStudy")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].InternFromDate", "", new { @class = "form-control required", @id = "fromdate", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("StudentDetails[0].InternFromDate")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].InternToDate", "", new { @class = "form-control required", @id = "todate", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("StudentDetails[0].InternToDate")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].Duration", "", new { @class = "form-control", @onchange = "calculateamount()" })
                                                                            @Html.ValidationMessage("StudentDetails[0].Duration")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StipendValueperHour", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @onchange = "calculateamount()" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StipendValueperHour")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].StipendValue", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                            @Html.ValidationMessage("StudentDetails[0].StipendValue")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].BankName", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].BankName")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].AccountNumber", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].AccountNumber")

                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].BranchName", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].BranchName")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("StudentDetails[0].IFSCCode", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("StudentDetails[0].IFSCCode")
                                                                        </td>
                                                                        @*<td class="bg-blue tdAdvPct"></td>
                                                                            <td class="bg-blue tdAdvAmt"></td>
                                                                            <td class="bg-blue tdTaxAmt dis-none"></td>
                                                                            <td class="bg-blue tdNetAmt dis-none"></td>*@
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="btn-circle dis-none removeStudent"><i class="ion-trash-a"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>

                                                    </div>

                                                </div>

                                            </div>
                                        </div>


                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remark, new { @class = "form-control", @id = "txtRemarks" })
                                                    @Html.ValidationMessageFor(m => m.Remark)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3 col-md-offset-2 pull-right">
                                                <div class="reg-no mt-m-md">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Total Stipend</label>
                                                        @Html.TextBoxFor(m => m.TotalStipendValue, new { @class = "form-control", @id = "txtTotalStipendValue", @readonly = true })
                                                        @Html.ValidationMessageFor(m => m.TotalStipendValue)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("PartTimeStudentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "") {
        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $('#btnAddPO').hide();
        $('#btnAddStudent').hide();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('#btnAddExpense').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();
    }
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
   // $('#TravelToDate, #TravelFromDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('input[name$=".InternFromDate"], input[name$=".InternToDate"]').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
            CalculateDeductionTotal();
            GetTransactionDetails();
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        var ix = $('#tbodyPO tr').find("input[name='StudentDetails.Index']");
        DepartmentChange(ix);

        var studentDetails = @Html.Raw(Json.Encode(Model.StudentDetails));
        $.each(studentDetails, function (i, result) {
            if (i == 0) {
                var trEle = $('#tbodyPO tr:nth-child(2)');
                $('#tbodyPO tr').not(':first,:nth-child(2)').remove();
                trEle.find("input[name='StudentDetails.Index']");
                DepartmentChange(trEle);
              //  trEle.find('select[name$=".Department"]').val(result.Department);
                trEle.find('input[name$=".autoComplete"]').val(result.Name);
                trEle.find('input[name$=".Name"]').val(result.Name);
                trEle.find('input[name$=".StudentRollNo"]').val(result.StudentRollNo);
                trEle.find('select[name$=".Session"]').val(result.Session);
                trEle.find('input[name$=".StudentCourse"]').val(result.StudentCourse);
                trEle.find('input[name$=".StudentEmail"]').val(result.StudentEmail);
                trEle.find('input[name$=".StudentYearofStudy"]').val(result.StudentYearofStudy);

                trEle.find('input[name$=".InternFromDate"]').val(result.InternFromDate);
                trEle.find('input[name$=".InternToDate"]').val(result.InternToDate);
                trEle.find('input[name$=".Duration"]').val(result.Duration);
                trEle.find('input[name$=".StipendValueperHour"]').val(result.StipendValueperHour);
                trEle.find('input[name$=".StipendValue"]').val(result.StipendValue);
                trEle.find('input[name$=".BankName"]').val(result.BankName);

                trEle.find('input[name$=".AccountNumber"]').val(result.AccountNumber);
                trEle.find('input[name$=".BranchName"]').val(result.BranchName);
                trEle.find('input[name$=".IFSCCode"]').val(result.IFSCCode);

            } else {
                var trEle = $('#tbodyPO tr:nth-child(2)').clone();
                $(trEle).find('a.dis-none').removeClass('dis-none');
                $(trEle).find("input[name='StudentDetails.Index']").val(i);
                $(trEle).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    $(this).attr("code", $(this).attr("id").replace(/\d+/, i));
                });
                $(trEle).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                });
                trEle.find("input[name='StudentDetails.Index']");
                DepartmentChange(trEle);
              //  trEle.find('select[name$=".Department"]').val(result.Department);
                trEle.find('input[name$=".autoComplete"]').val(result.Name);
                trEle.find('input[name$=".StudentRollNo"]').val(result.StudentRollNo);
                trEle.find('select[name$=".Session"]').val(result.Session);
                trEle.find('input[name$=".StudentCourse"]').val(result.StudentCourse);
                trEle.find('input[name$=".StudentEmail"]').val(result.StudentEmail);
                trEle.find('input[name$=".StudentYearofStudy"]').val(result.StudentYearofStudy);

                trEle.find('input[name$=".InternFromDate"]').val(result.InternFromDate);
                trEle.find('input[name$=".InternToDate"]').val(result.InternToDate);
                trEle.find('input[name$=".Duration"]').val(result.Duration);
                trEle.find('input[name$=".StipendValueperHour"]').val(result.StipendValueperHour);
                trEle.find('input[name$=".StipendValue"]').val(result.StipendValue);
                trEle.find('input[name$=".BankName"]').val(result.BankName);

                trEle.find('input[name$=".AccountNumber"]').val(result.AccountNumber);
                trEle.find('input[name$=".BranchName"]').val(result.BranchName);
                trEle.find('input[name$=".IFSCCode"]').val(result.IFSCCode);

                $(trEle).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
                    dateFormat: 'dd-MM-yy', changeYear: true
                })

                $('#tbodyPO').append(trEle);
            }
        });
       // calcDateDiff();
        var piname = $('input[name="PIName"]').val();
        $('#lblVendorName').html(piname);
       // $('#lblVendorName').html($('#txtPI option:selected').text());
        var stipendAmt = parseFloat($('#txtTotalStipendValue').val());
        $("#CreditorAmount").val(stipendAmt);
        CalculatePaymentValue();
        CalculateDeductionTotal();
        $('#NeedUpdateTransDetail').val('false');
    });

    //$('#fromdate, #todate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-10:+30' });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
		$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
		if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    function formSave(){
        var isValid = $('#formSI').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        var strDate = $('input[name$=".InternFromDate"]').val();
        var clsDate = $('input[name$=".InternToDate"]').val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins <= 0) {
                $('#MsgValidation').html("Internship End Date cannot be a date prior to Internship Start Date.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
        //var totalstipend = $("#txtTotalStipendValue").val();
        //if (totalstipend > 6500 || total < 6500) {
        //    var doctypevalues = [];
        //    $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        //    doctypevalues.sort();
        //    var count = 0;
        //    for (var k = 1; k < doctypevalues.length; ++k) {
        //        if (doctypevalues[k] == 16) {
        //            count = 1;
        //        }
        //    }
        //    if (count == 0) {
        //        $('#MsgValidation').html("Email request of PI is mandatory attachment since the total stipend value is different from the fixed level..");
        //        $('#ValidationModal').modal('toggle');
        //        return false;
        //    }
        //    else
        //    {
        //        isValid = true;
        //    }
        //}
        if (isValid)
            $('#formSI').submit();
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }


    $('#StipendValueperMonth, #TotalStipendValue, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });
    //$('input[name$=".InternshipFromDate"], input[name$=".InternshipToDate"]').change(function () {
    //    var strDate = $('input[name$=".InternshipFromDate"]').val();
    //    var clsDate = $('input[name$=".InternshipToDate"]').val();
    //    if (strDate != '' && clsDate != '') {
    //        var startDate = moment(parseDate(strDate));
    //        var closeDate = moment(parseDate(clsDate));
    //        var mins = closeDate.diff(startDate, 'minutes');
    //        if (mins <= 0) {
    //            $('#MsgValidation').html("Internship End Date cannot be a date prior to Internship Start Date.");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //    }
    //    calcDateDiff();
    //    calculateamount();
    //});
    //function calcDateDiff() {
    //    var strDate = $("#InternshipFromDate").val();
    //    var clsDate = $("#InternshipToDate").val();
    //    if (strDate != '' && clsDate != '') {
    //        var startDate = moment(parseDate(strDate));
    //        var closeDate = moment(parseDate(clsDate));

    //        var result = '';
    //        var years = closeDate.diff(startDate, 'year');
    //        startDate.add(years, 'years');

    //        var months = closeDate.diff(startDate, 'months');
    //        startDate.add(months, 'months');

    //        var days = closeDate.diff(startDate, 'days') + 1;
    //        if (years > 1) {
    //            result = years + ' years ';
    //        } else if (years == 1) {
    //            result = years + ' year ';
    //        }
    //        if (months > 1) {
    //            result = result +  months + ' months ';
    //        } else if (months == 1) {
    //            result = result + months + ' month ';
    //        }
    //        if (days > 1) {
    //            result = result + days + ' days';
    //        } else if (days == 1) {
    //            result = result + days + ' day';
    //        }

    //        $('#lblDuration').html(result);
    //        $('input[name="Duration"]').val(result);
    //    }
    //}

    $(document).on('change', 'select[name$=".Session"]', function () {
        var stipendvaluehr = $(this).closest('tr').find('input[name$=".StipendValueperHour"]').val();
        var noofhrs = $(this).closest('tr').find('input[name$=".Duration"]').val();
        var session = $(this).val();
        if (session == 1 && noofhrs > 40) {
            $('#MsgValidation').html("The Maximum Permited hours for Academic session is 40. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 1 && (stipendvaluehr < 100 || stipendvaluehr > 300) && stipendvaluehr != "" && noofhrs != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && noofhrs > 60) {
            $('#MsgValidation').html("The Maximum Permited hours for Non Academic session is 60. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && (stipendvaluehr < 100 || stipendvaluehr > 300) && stipendvaluehr != "" && noofhrs != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        calculateamount();
    });

    $(document).on('change', 'input[name$=".Duration"]', function () {
        var stipendvaluehr = $(this).closest('tr').find('input[name$=".StipendValueperHour"]').val();
        var noofhrs = $(this).val();
        var session = $(this).closest('tr').find('select[name$=".Session"]').val();
        if (session == "" || session == 0) {
            $('#MsgValidation').html("Please select Session");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 1 && noofhrs > 40) {
            $('#MsgValidation').html("The Maximum Permited hours for Academic session is 40. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 1 && (stipendvaluehr < 100 || stipendvaluehr > 300) && stipendvaluehr != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && noofhrs > 60) {
            $('#MsgValidation').html("The Maximum Permited hours for Non Academic session is 60. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && (stipendvaluehr < 100 || stipendvaluehr > 300) && stipendvaluehr != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        calculateamount();
    });

    $(document).on('change', 'input[name$=".StipendValueperHour"]', function () {
        var stipendvaluehr = $(this).val();
        var noofhrs = $(this).closest('tr').find('input[name$=".Duration"]').val();
        var session = $(this).closest('tr').find('select[name$=".Session"]').val();
        if (session == "" || session == 0) {
            $('#MsgValidation').html("Please select Session");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 1 && noofhrs > 40) {
            $('#MsgValidation').html("The Maximum Permited hours for Academic session is 40. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 1 && (stipendvaluehr < 100 || stipendvaluehr > 300) && noofhrs != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && noofhrs > 60) {
            $('#MsgValidation').html("The Maximum Permited hours for Non Academic session is 60. Please check and enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        if (session == 2 && (stipendvaluehr < 100 || stipendvaluehr > 300) && noofhrs != "") {
            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        calculateamount();
    });
    $(document).on('click', 'a.removeStudent', function () {
        $(this).closest('tr').remove();
        calculateamount();
    });
    $('#btnAddStudent').click(function () {
        var cln = $('#tbodyPO tr:nth-child(2)').clone().find("select,input").val("").end();
       // $(cln).find('.tdAdvAmt, .tdTaxAmt, .tdNetAmt, .tdTaxCode').text('');
        $(cln).find('a.dis-none').removeClass('dis-none');
        var index = $('#tbodyPO tr:last').find("input[name='StudentDetails.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='StudentDetails.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
            $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
            $(this).attr("code", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            dateFormat: 'dd-MM-yy', changeYear: true
        })
        //var cloneElement = $("#tbodyPO").find("input[name='StudentDetails.StudentName']").val(index).parent().clone();
        //cln.find("input[name='StudentDetails.StudentName']").parent().replaceWith(selectPickerApiElement($(cloneElement), "empty", [], ''));
        //$(cln).insertBefore($('#tbodyPO').find('#trstudents'));
        $('#tbodyPO').append(cln);
        var ix = $('#tbodyPO tr:last').find("input[name='StudentDetails.Index']");
        DepartmentChange(ix);
    });
    function calculateamount() {
        var totalstudentsstipend = 0;
        $('#tbodyPO tr').each(function (idx, val) {
            var stipendvaluehr = $(this).closest('tr').find('input[name$=".StipendValueperHour"]').val();
            var noofhrs = $(this).closest('tr').find('input[name$=".Duration"]').val();

            var totalstipendvalue = stipendvaluehr * noofhrs;
            //  var result = parseFloat((currreceiptOHvalue * txtpercent) / 100);
           // var result = ((txtpercent / totaloverheadpercentage) * currreceiptOHvalue).toFixed(0);
            if (!isNaN(totalstipendvalue)) {
                $(this).find('input[name$=".StipendValue"]').val(totalstipendvalue);
                totalstudentsstipend += totalstipendvalue;
            }

        });

        if (!isNaN(totalstudentsstipend)) {
            $("#txtTotalStipendValue").val(totalstudentsstipend.toFixed(0));
            $("#CreditorAmount").val(totalstudentsstipend.toFixed(0));
        }
    }


    function DepartmentChange(el, mode) {
        var selDep = $(el).val();
        if (mode != 'U') {
            $(el).closest('tr').find("input[name$='.autoComplete'],input[name$='.UserId'],input[name$='.Name']").val('');
        }

            $(el).closest('tr').find("td.tdDDLUser").removeClass('dis-none');
            $(el).closest('tr').find("td.tdTxtName").addClass('dis-none');
            $(el).closest('tr').find("input[name$='.UserId ']").addClass('required');
            var ele = $(el).closest('tr').find("input[name$='.autoComplete']");
            $(ele).addClass('required');
            $(el).closest('tr').find("input[name$='.Name']").removeClass('required');
            applyAutoComplete(ele, "../CoreAccounts/LoadStudentList", selDep, false);
    }

    @*$(document).on('change', 'select[name$=".Department"]', function () {
        DepartmentChange($(this));
        @*var trEle = $(this).closest('tr');
        var Departmentname = $(this).val();
        var trElenew = trEle.closest('td');

        //var index = $(this).closest('#primaryDiv').index();
        //var select = $(this).closest('#primaryDiv').find('select[name="CoPIname"]');
       // var index = $(this).find("input[name='StudentDetails.Index']").val();
        var select = trEle.find("select[name$='.StudentName']");
        $(select).empty().selectpicker('refresh');
        $.getJSON("@Url.Action("LoadStudentByDepartment", "CoreAccounts")", { DepartmentName: Departmentname },
                    function (locationdata) {
                        $(select).empty().selectpicker('refresh');
                        $.each(locationdata, function (index, itemData) {
                            $(select).append($('<option/>', {
                                value: itemData.code,
                                text: itemData.name
                            })).selectpicker('refresh');
                        });
                    });

    });*@
    $('#tbody').find('input[name$=".autoComplete"]').each(function () {
        DepartmentChange($(this),'U');
    });
    $(document).on('change', 'input[name$=".autoComplete"]', function () {

        var Rollno = $(this).val();
        var rollno = $(this).closest('tr').find("input[name$='.StudentRollNo']");
        var course = $(this).closest('tr').find('input[name$=".StudentCourse"]');
        $.getJSON("@Url.Action("LoadStudentDetails", "CoreAccounts")", { RollNo: Rollno },
                    function (locationdata) {
                        // $(select).selectpicker("destroy");
                        $.each(locationdata, function (index, itemData) {
                            rollno.val(itemData.code);
                            course.val(itemData.name);
                        });
                    });

    });
    $('#txtPI').change(function () {
        $('#NeedUpdateTransDetail').val('true');
        var PIID = $(this).val();
        $.getJSON("@Url.Action("LoadPIProject", "CoreAccounts")", { PIId: PIID },
                    function (locationdata) {
                        var select = $("#selectproject");
                        select.empty();

                        $.each(locationdata, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name
                            }));
                            $('#lblVendorName').html(itemData.code)
                            $('input[name="PIName"]').val(itemData.code)
                        });
                        select.selectpicker('refresh');
                    });
    });
    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "SMI","tSubCode" : "1"},
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    function GetTransactionDetails() {

        var interstate_f = false;

        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "PTP","tSubCode" : "1", },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                //var amt = 0;
                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                //    var parseVal = parseFloat($(elePayment).val());
                //    if (!isNaN(parseVal))
                //        amt = amt + parseVal;
                //});
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });

            var StipendAmt =  $('#txtTotalStipendValue').val();
            $("#CreditorAmount").val(StipendAmt);
            $('#lblPIName').html($('#txtPI option:selected').text())
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    //}
    }

    $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }

    function ValidateNumberOnly(e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
    }
    function ValidateDecimalOnly(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            $('#nextBtn').hide();
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
       // if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        // var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
        var ttlAdvAmt = parseFloat($('#txtTotalStipendValue').val());
        var advPct = parseInt($("#AdvancePercentage").val());
        var offsetValue = $("input[name='GST']:checked").val();
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(ttlAdvAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (ttlAdvAmt != commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#txtTotalStipendValue').val());
        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(ttlExpAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / Transaction value is not a valid entry.';
        } else if (ttlExpAmt != commitmentAmt) {
            msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        }

        //var groupNames = [];
        //$('#tbodyCommitmentSelList tr').find('input[name$=".HeadName"]').each(function () {
        //    var commitmentAmt = 0;
        //    var groupName = $(this).val();
        //    if(groupNames.indexOf(groupName) == -1){
        //        $("#tbodyCommitmentSelList [name$='.HeadName'][value='"+groupName+"']").each(function(){
        //            var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
        //            var parseVal = parseFloat($(elePayment).val());
        //            if (!isNaN(parseVal))
        //                commitmentAmt = commitmentAmt + parseVal;
        //        });
        //        var sumOfAmt = 0;
        //        if(!isNaN(commitmentAmt)){
        //            $('#tbodyExpenseList tr select[name$=".AccountGroupId"]').each(function () {
        //                if($(this).find("option:selected").text() == groupName){
        //                    var individualVal = $(this).closest('tr').find("input[name$='.Amount']").val();
        //                    individualVal = parseFloat(individualVal);
        //                    if(!isNaN(individualVal))
        //                        sumOfAmt = sumOfAmt + individualVal;
        //                }
        //            });
        //            if(commitmentAmt != sumOfAmt){
        //                msg = 'The amount enter for ' +groupName+ ' is not equal to commitment value.';
        //                return false;
        //            }
        //            groupNames.push(groupName)
        //        }else{
        //            msg = 'Commitment Payment Value is not valid.';
        //            return false;
        //        }
        //    }
        //});
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    //function validateForm(n) {
    //    // This function deals with validation of the form fields
    //    var isValid = false;
    //    var hadError = false;
    //    var tabs = $(".tab");
    //    var currentTabEle = tabs[currentTab];
    //    var inputs = $(":input, textarea, select"); // get all the form inputs and selects
    //    var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
    //    var count = stepElements.length; // check that there are inputs
    //    if (count <= 0) {                // if there are not no reason to loop them
    //        return true;                 // this can be used to perform other action if there are no steps
    //    } else if (currentTab == 0) {
    //        $("input[name$='.Duration']").each(function (idx, ele) {
    //        var stipendvaluehr = $(this).closest('tr').find('input[name$=".StipendValueperHour"]').val();
    //        var noofhrs = $(this).closest('tr').find('input[name$=".Duration"]').val();
    //        var session = $(this).closest('tr').find('select[name$=".Session"]').val();
    //        if (session == "" || session == 0) {
    //            $('#MsgValidation').html("Please select Session");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //        if (session == 1 && noofhrs > 40) {
    //            $('#MsgValidation').html("The Maximum Permited hours for Academic session is 40. Please check and enter correct value.");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //        if (session == 1 && (stipendvaluehr < 100 || stipendvaluehr > 300) && noofhrs != "") {
    //            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //        if (session == 2 && noofhrs > 60) {
    //            $('#MsgValidation').html("The Maximum Permited hours for Non Academic session is 60. Please check and enter correct value.");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //        if (session == 2 && (stipendvaluehr < 100 || stipendvaluehr > 300) && noofhrs != "") {
    //            $('#MsgValidation').html("Stipend amount per hour cannot be less than Rs 100 or more than Rs 300. Please enter correct value.");
    //            $('#ValidationModal').modal('toggle');
    //            return false;
    //        }
    //            var content = $('#tbodyCommitmentSrchList tr td:last').html();
    //            if (content == '') {
    //                searchCommitment()
    //            }
    //        });
    //    }
    //    else if (currentTab == 1) {
    //        var validationMsg = ValidateCommitment()
    //        if (validationMsg != 'valid') {
    //            hadError = true;
    //            $("#alert").text(validationMsg);
    //            $('#Validation').modal('show');
    //        } else {
    //            if ($('#NeedUpdateTransDetail').val() == 'true') {
    //                GetTransactionDetails();
    //            }
    //            //if(parseInt($("#AdvancePercentage").val()) == 100){
    //            CalculateDeductionTotal();
    //            //$("#CreditorAmount, #ttlCr").val($('#lblAdvTtlAmt').text());
    //            //}else{
    //            //    $("#CreditorAmount, #ttlCr").val($('#lblAdvNetAmt').text());
    //            //}
    //        }
    //    }
    //    else if (currentTab == 2) {
    //        var validationMsg = ValidateTransaction()
    //        if (validationMsg != 'valid') {
    //            hadError = true;
    //            $("#alert").text(validationMsg);
    //            $('#Validation').modal('show');
    //        }
    //    }
    //    else if (currentTab == 3) {
    //        if ($('#CheckListVerified_By').val() == '') {
    //            hadError = true;
    //            $("#alert").text('Checklist is not verified.');
    //            $('#Validation').modal('show');
    //        }
    //    }

    //    $(stepElements).each(function (idx, ele) {

    //        if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
    //            isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
    //            if (!isValid) { hadError = true; } // set our flag if there was an error
    //        }

    //    });
    //    return !hadError; // return the valid status

    //}
    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1 ; i <= selectOptionsLength ; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
