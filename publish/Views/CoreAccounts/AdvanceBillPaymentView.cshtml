@model IOAS.Models.BillEntryModel
@{
    ViewBag.Title = "AdvanceBillPayment";
    ViewBag.DocmentTypeList = ViewBag.DocmentTypeList;
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
    }
</style>
@using (Html.BeginForm("AdvanceBillPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formADV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Advance Bill</b> @*<em>(123asdf123123123)</em>*@</h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
         new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.BillId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">


                        <div class="row">

                            <div class="col-md-12">
                                <div class="bl-lg-panel-box pb-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Vendor</label>
                                                    @Html.DropDownListFor(m => m.VendorId, new SelectList(ViewBag.VendorList, "id", "name"), "Select any",
new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.VendorId)
                                                    @if (Model.VendorId != null)
                                                    {
                                                        <a href="javascript:void(0)" id="lnkBillHistory">View previous bill history</a>
                                                    }
                                                    else
                                                    {
                                                        <a href="javascript:void(0)" id="lnkBillHistory" class="dis-none">View previous bill history</a>
                                                    }
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>TDS Section</label>
                                                    @Html.DropDownListFor(m => m.VendorTDSDetailId, new SelectList(ViewBag.VendorTDSList, "id", "name"), "Select any", new { @class = "form-control selectpicker" })
                                                    @Html.ValidationMessageFor(m => m.VendorTDSDetailId)
                                                    @Html.HiddenFor(m => m.SubCode)
                                                    @Html.Hidden("TransactionTypeCode", "ADV")
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PO Number</label>
                                                    @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PONumber)
                                                    @Html.HiddenFor(m => m.PaymentType)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PO Date</label>
                                                    @Html.EditorFor(m => m.PODate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PODate)
                                                </div>

                                            </div>


                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Pro-forma Invoice Number</label>
                                                    @Html.TextBox("InvoiceNumber", "", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.InvoiceNumber)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Pro-forma Invoice Date</label>
                                                    @Html.Editor("InvoiceDate", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.InvoiceDate)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bill Type</label>
                                                    @Html.DropDownListFor(m => m.BillType, new SelectList(ViewBag.BillTypeList, "id", "name"), "Select any",
new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.BillType)
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>PAN</label>
                                                    <h4 id="lblVendorPAN"></h4>
                                                    <label id="lblStateCode" class="dis-none"></label>
                                                </div>

                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>GSTIN</label>
                                                    <h4 id="lblVendorGSTIN"></h4>
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Address</label>
                                                    <h4 id="lblVendorAddr"></h4>
                                                </div>


                                            </div>
                                            <div id="divPreBill" class="dis-none col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <a href="javascript:void(0)" data-toggle="modal" data-target="#myModal">Previous Bills</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>



                        </div>
                        <div class="row">
                            <div class="form-group custom-form-group ">
                                <div class="col-md-2">
                                    <div class="adv-blue-bg-adj">
                                        <label class="required">Advance %</label>
                                        @Html.TextBoxFor(m => m.AdvancePercentage, new { @class = "form-control", @onkeypress = "return ValidateNumberOnly(event)" })
                                        @*@Html.DropDownListFor(m => m.AdvancePercentage, new SelectList(ViewBag.AdvPctList, "id", "name"), "Select any", new { @class = "form-control required" })*@
                                        @Html.ValidationMessageFor(m => m.AdvancePercentage)
                                        <label id="lbl100Pct" class="dis-none alert-danger">Tax value will not be booked now since the advance is 100%.</label>
                                    </div>
                                </div>
                                <div class="col-md-10 dis-none">
                                    <div class="adv-bg-adj gray-bg">
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "Eligible", true)
                                            @*<input type="radio" name="GST" checked value="Eligible">*@
                                            <span></span> Eligible for GST offset<br>
                                        </label>
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "PartiallyEligible")
                                            @*<input type="radio" name="GST" value="PartiallyEligible">*@
                                            <span></span> Partially eligible for GST offset<br>
                                        </label>
                                        <label class="radio chkbox-adj">
                                            @Html.RadioButton("GST", "NotEligible")
                                            @*<input type="radio" name="GST" value="NotEligible">*@
                                            <span></span> This bill is not eligible for GST offset
                                        </label>

                                        @Html.Hidden("ExpenseRequired", "False")
                                        @Html.HiddenFor(m => m.InclusiveOfTax_f)
                                    </div>

                                </div>
                            </div>

                        </div>
                        <div class="gray-bg br-rd">
                            <div class="row">
                                <div class="col-md-12">
                                    @Html.Partial("_PODetails", Model.PODetail)
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="tb-bl-dts wht-bg">
                                                <h3>PO Value</h3>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total PO Value :</label>
                                                            <h4 id="lblPOTtlAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX :</label>
                                                            <h4 id="lblPOTtlTaxAmt"></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total:</label>
                                                            <h4 id="lblPONetAmt"></h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="tb-bl-dts alter-bg">
                                                @*<h3>Advance Value</h3>*@
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group custom-form-group ">
                                                            <h3 class="fn-s-lg">Advance value payable</h3>
                                                            <h3 class="fn-s-lg" id="lblAdvTtlAmt"></h3>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-5 dis-none">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX for Advance :</label>
                                                            <h4><span id="lblAdvTtlTaxAmt"></span> <i id="taxTT" class="ion-information-circled" data-toggle="tooltip" data-html="true" data-placement="top" title="<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br><span>IGST  :<b>0.00</b></span><br>"></i></h4>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3 dis-none">
                                                        <div class="form-group custom-form-group">
                                                            <label>Net Bill Total:</label>
                                                            <h4 id="lblAdvNetAmt"></h4>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>



                    </div>
                </div>

                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_ADVTransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("AdvanceBillPaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>
}

@Html.AntiForgeryToken()
<div id="popup"></div>
<input type="hidden" id="currentRefId" value="@Model.BillId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "")
    {

        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $('#btnAddPO').hide();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('#btnAddExpense').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();

    }
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#SourceEmailDate, #PODate, #srchFromDate, #srchToDate, #InvoiceDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    $(document).ready(function () {
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');
        $('#formADV').removeData("validator");
        $("#InvoiceNumber,#InvoiceDate").removeAttr("data-val-required");
        $.validator.unobtrusive.parse(document);

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        var vendorId = $('#VendorId').val();
        if(vendorId != ''){
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId },
                dataType: "json",
                success: function (result) {
                    $('#lblVendorPAN').text(result.PAN);
                    $('#lblVendorGSTIN').text(result.GSTIN);
                    $('#lblVendorAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    UpdateGSTSplitUp()
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }

        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        $('#lblVendorName').html($('#VendorId option:selected').text())
        CalculatePOValue();
        CalculatePaymentValue();
        CalculateDeductionTotal();
        $('#NeedUpdateTransDetail').val('false');
    });
    $('#lnkBillHistory').click(function(){
        var vendorId = $('#VendorId').val();
        if (vendorId != '') {
            var token = $("input[name=__RequestVerificationToken]").val();
            var searchData = { "__RequestVerificationToken": token, "vendorId": vendorId };
            $.ajax({
                url: "@Url.Action("_PreviousBillHistory", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $("#popup").html(data);
                    $("#preBillHistoryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });


    $('#BillType').change(function(){
        $('#NeedUpdateTransDetail').val('true');
        EmptyPODetails();
        applyACToTypeOfService();
    })
    //$('input[type=radio][name=GST]').change(function () {
    //    if (this.value == 'NotEligible' || parseInt($("#AdvancePercentage").val()) == 100) {
    //        $('#ExpenseRequired').val('False');
    //    }
    //    else {
    //        $('#ExpenseRequired').val('True');
    //    }
    //});
    $("#AdvancePercentage").blur(function () {
        if(parseInt($(this).val()) == 100){
            //$('#ExpenseRequired').val('False');
            $('#lbl100Pct').removeClass('dis-none');
        }else{
            //var offsetValue = $("input[name='GST']:checked").val();
            //if (offsetValue != 'NotEligible') {
            //    $('#ExpenseRequired').val('True');
            //}
            $('#lbl100Pct').addClass('dis-none');
        }
        CalculatePOValue();
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function resetVendor() {
        $('#lblVendorPAN, #lblVendorGSTIN, #lblVendorAddr, #lblStateCode').text('');
        //$('#divPreBill').addClass('dis-none');
    }


    //$('#srchFromDate').change(function () {
    //    $('#srchToDate').val('');
    //    var minDate = parseDate($(this).val());
    //    var maxDate = moment(minDate).add(10, 'days').toDate();
    //    $("#srchToDate").datepicker("option", "minDate", minDate);
    //    $("#srchToDate").datepicker("option", "maxDate", maxDate);
    //});

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }
    $('#VendorTDSDetailId').change(function (){
        $('#NeedUpdateTransDetail').val('true');
    });
    $('#VendorId').change(function () {
        resetVendor();
        var vendorId = $(this).val();
        $('#NeedUpdateTransDetail').val('true');
        var ele = $('#VendorTDSDetailId');
        $('#lblVendorName').html($('#VendorId option:selected').text());
        if (vendorId != '') {
            $('#lnkBillHistory').removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetVendorDetails", "CoreAccounts")",
                data: { "vendorId": vendorId,"TDSRequired" : true },
                dataType: "json",
                success: function (result) {
                    $('#lblVendorPAN').text(result.PAN);
                    $('#lblVendorGSTIN').text(result.GSTIN);
                    $('#lblVendorAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    UpdateGSTSplitUp();
                    ele.empty();
                    ele.append($('<option/>', {
                        value: "",
                        text: "Select any",
                    }));
                    $.each(result.TDSList, function (index, itemData) {
                        ele.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    ele.selectpicker('refresh');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }else{
            ele.empty();
            ele.selectpicker('refresh');
            $('#lnkBillHistory').addClass('dis-none');
        }
    });


    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        subcode = $('#SubCode').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "ADV","tSubCode" : subcode},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    function GetTransactionDetails() {
        //var commitmentDetailIds = [];
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        var tdsDetailId = $('#VendorTDSDetailId').val() || null;
        var tdsSel = $('#VendorTDSDetailId').val(); // $("#VendorTDSDetailId option:selected").text();
        var subcode = GetSubCodeByTDSSection(tdsSel);
        $('#SubCode').val(subcode);
        var interstate_f = false;
        //if ($('#lblStateCode').html() == '33')
        //    interstate_f = true;
        var ttlAdvTax = parseFloat($('#lblAdvTtlAmt').html());
        var eligibilityCheck_f = deductionEligibilityCheck(ttlAdvTax);
        //$('#tbodyCommitmentSelList input[name$=".CommitmentDetailId"]').each(function () {
        //    var cmtDetId = $(this).val();
        //    if (cmtDetId != '') { commitmentDetailIds.push(cmtDetId); }
        //});
        //if (commitmentDetailIds.length == 0) {
        //    $("#alert").text("Please select at least one commitment from the list.");
        //    $('#Validation').modal('show');
        //    return false;
        //} else {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "interstate_f": interstate_f,"typeCode": "ADV","tSubCode" : subcode,"eligibilityCheck_f" : eligibilityCheck_f,"TDSDetailId" : tdsDetailId},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    //var amt = 0;
                    //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                    //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                    //    var parseVal = parseFloat($(elePayment).val());
                    //    if (!isNaN(parseVal))
                    //        amt = amt + parseVal;
                    //});
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                   if (i == 0) {
                       var trEle = $('#tbodyDeductionList tr:first');
                       var amtEle = $(trEle).find('input[name$=".Amount"]');
                       if(item.TDSPercentage == null){
                           amtEle.val('');
                       }else{
                           tds = ttlAdvTax * item.TDSPercentage / 100;
                           amtEle.val(tds);
                       }

                        amtEle.addClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                        amtEle.addClass('required');
                        if(item.TDSPercentage != null){
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
        //}
    }

    function UpdateGSTSplitUp() {
        var ttlAdvTax = parseFloat($('#lblAdvTtlTaxAmt').html());
        var stateCode = $('#lblStateCode').html();
        if (stateCode == '33') {
            if (ttlAdvTax > 0) {
                var splitAmt = (ttlAdvTax / 2).toFixed(2);
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>' + splitAmt + '</b></span><br><span>SGST  :<b>' + splitAmt + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br>');
            }
        } else {
            if (ttlAdvTax > 0) {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>' + ttlAdvTax.toFixed(2) + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>0.00</b></span><br>')
            }
        }
    }
    function CalculatePOValue() {
        var advPct = parseInt($("#AdvancePercentage").val());
        if (isNaN(advPct))
            advPct = 0;
        var ttlPOVal = 0, ttlPOTaxVal = 0, netPOVal = 0, ttlAdvVal = 0, ttlAdvTaxVal = 0, netAdvVal = 0;
        if (advPct > 0) {
            $('#tbodyPO tr').not(':first').each(function (i, rowEle) {
                var amt = parseFloat($(rowEle).find('input[name$=".TotalAmount"]').val());
                if (!isNaN(amt))
                    ttlPOVal = ttlPOVal + amt;
                if (amt > 0) {
                    var taxPct = parseFloat($(rowEle).find('select[name$=".TaxPct"]').val());
                    if (isNaN(taxPct))
                        taxPct = 0;
                    var advTaxVal = 0, advAmt = 0, netAdvAmt = 0;
                    advAmt = amt * advPct / 100;
                    ttlAdvVal = ttlAdvVal + advAmt;
                    if (taxPct > 0) {
                        var taxAmt = amt * taxPct / 100;
                        ttlPOTaxVal = ttlPOTaxVal + taxAmt;

                        advTaxVal = advAmt * taxPct / 100;
                        ttlAdvTaxVal = ttlAdvTaxVal + advTaxVal;
                    }
                    netAdvAmt = advAmt + advTaxVal;
                    //var poTaxVal = amt * taxPct / 100;
                    //ttlPOTaxVal = ttlPOTaxVal + poTaxVal;
                    $(rowEle).find('.tdAdvPct').html(advPct.toFixed(2));
                    $(rowEle).find('.tdAdvAmt').html(advAmt.toFixed(2));
                    $(rowEle).find('.tdTaxAmt').html(advTaxVal.toFixed(2));
                    $(rowEle).find('.tdNetAmt').html(netAdvAmt.toFixed(2));
                }
            });
            $('#lblPOTtlAmt').text(ttlPOVal.toFixed(2));
            $('#lblPOTtlTaxAmt').text(ttlPOTaxVal.toFixed(2));
            netPOVal = (ttlPOVal + ttlPOTaxVal).toFixed(2);
            $('#lblPONetAmt').text(netPOVal);
            $('#lblAdvTtlAmt').text(ttlAdvVal.toFixed(2));
            $('#lblAdvTtlTaxAmt').text(ttlAdvTaxVal.toFixed(2));
            netAdvVal = (ttlAdvVal + ttlAdvTaxVal).toFixed(2);
            $('#lblAdvNetAmt').text(netAdvVal);
           // $('#NeedUpdateTransDetail').val('true');
            UpdateGSTSplitUp()
        }
    }
    function noEdit() {
        return false;
    }
    $('#CommitmentAmount, #CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });


    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            $('#nextBtn').hide();
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        //if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function formSave() {
        var isValid = $('#formADV').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
            $('#formADV').submit();
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
        var ttlAdvAmt = parseFloat($('#lblAdvTtlAmt').html());
        var advPct = parseInt($("#AdvancePercentage").val());
        $("#tbodyCommitmentSelList tr").each(function(){
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(ttlAdvAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (ttlAdvAmt != commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#lblAdvTtlAmt').html());
        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if(netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(ttlExpAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / Transaction value is not a valid entry.';
        } else if (ttlExpAmt != commitmentAmt) {
            msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        }

        //var groupNames = [];
        //$('#tbodyCommitmentSelList tr').find('input[name$=".HeadName"]').each(function () {
        //    var commitmentAmt = 0;
        //    var groupName = $(this).val();
        //    if(groupNames.indexOf(groupName) == -1){
        //        $("#tbodyCommitmentSelList [name$='.HeadName'][value='"+groupName+"']").each(function(){
        //            var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
        //            var parseVal = parseFloat($(elePayment).val());
        //            if (!isNaN(parseVal))
        //                commitmentAmt = commitmentAmt + parseVal;
        //        });
        //        var sumOfAmt = 0;
        //        if(!isNaN(commitmentAmt)){
        //            $('#tbodyExpenseList tr select[name$=".AccountGroupId"]').each(function () {
        //                if($(this).find("option:selected").text() == groupName){
        //                    var individualVal = $(this).closest('tr').find("input[name$='.Amount']").val();
        //                    individualVal = parseFloat(individualVal);
        //                    if(!isNaN(individualVal))
        //                        sumOfAmt = sumOfAmt + individualVal;
        //                }
        //            });
        //            if(commitmentAmt != sumOfAmt){
        //                msg = 'The amount enter for ' +groupName+ ' is not equal to commitment value.';
        //                return false;
        //            }
        //            groupNames.push(groupName)
        //        }else{
        //            msg = 'Commitment Payment Value is not valid.';
        //            return false;
        //        }
        //    }
        //});
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment()
            }
        } else if (currentTab == 1) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if($('#NeedUpdateTransDetail').val() == 'true'){
                    GetTransactionDetails();
                }
                //if(parseInt($("#AdvancePercentage").val()) == 100){
                CalculateDeductionTotal();
                $("#CreditorAmount").val($('#lblAdvTtlAmt').text());
                //}else{
                //    $("#CreditorAmount, #ttlCr").val($('#lblAdvNetAmt').text());
                //}
            }
        } else if (currentTab == 2) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }else if (currentTab == 3) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }
        });
        return !hadError; // return the valid status

    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
