@model IOAS.Models.ImprestPaymentModel
@{
    ViewBag.Title = "Imprest Master";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
        background: #fff;
        float: left;
    }

    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #fff;
        }

    .custom-nav-pills.nav-pills > li > a {
        color: rgba(255,255,255,0.5);
        cursor: default;
        background: transparent !important;
        border-color: transparent;
        border-top-color: transparent;
        padding: 10px 15px;
        margin: 0px 15px;
    }

        .custom-nav-pills.nav-pills > li > a span {
            width: 100%;
            float: left;
        }

    .custom-nav-pills.nav-pills > li.active > a, .custom-nav-pills.nav-pills > li.active > a:focus, .custom-nav-pills.nav-pills > li.active > a:hover {
        color: #333333;
        background-color: #fff !important;
    }

    .custom-st-fd-box {
        background: #f5f5f5;
        padding: 15px 0px;
        border-radius: 4px;
        display: inline-block;
    }

    .custom-st-fd-btn {
        color: #fff;
        font-size: 16px;
        margin-top: 15px;
        display: inline-block;
    }

    .custom-st-tb-th.table {
        border: 0px;
    }

        .custom-st-tb-th.table > tbody > tr > th {
            background: #3080e3;
            color: #fff;
            border: 0px solid #ccc;
        }

        .custom-st-tb-th.table > tbody > tr > td {
            border: 0px;
        }
</style>

@*<div class="col-md-4">
        <div class="search-btn">
            <input type="text" value="" placeholder="Search" class="form-control">
            <a href="#" id="btnsearch" class="btn"> <i class="ion-search"></i></a>
        </div>

    </div>*@


<div class="row">
    @using (Html.BeginForm("ImprestPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formIMP", enctype = "multipart/form-data" }))
    {

        <div class="row hd-tt-bg">
            <div class="col-md-12">
                <h3>Imprest Master</h3>
            </div>
        </div>

        <div class="row">
            <div class="white-bg ad-navbar">
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline "></i>
                    </div>
                    <div class="ds-tt">
                        <span class="required">Request Reference</span>
                        @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Source)
                        @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                        @Html.HiddenFor(m => m.ImprestcardId)
                        @Html.HiddenFor(m => m.ImprestProjectDetailsId)
                    </div>
                </div>
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-calendar-outline"></i>
                    </div>
                    <div class="ds-tt" id="divRefNum">
                        <span class="required">Ref Number (WF / Tapal)</span>
                        @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                        @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                        @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                        @Html.Hidden("SourceTapalOrWorkflow", "True")
                        @Html.HiddenFor(m => m.SubCode)
                        @Html.Hidden("TransactionTypeCode", "IMP")
                    </div>
                    <div class="dis-none ds-tt" id="divRefEmailDate">
                        <span class="required">Email Date</span>
                        @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                        <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                    </div>
                </div>


                <div class="col-md-3 col-md-offset-3">
                    <div class="reg-no custom-reg-no">
                        <div class="form-group custom-form-group">
                            <label>Number</label>
                            <h4>@Html.DisplayFor(m => m.ImprestNumber)</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="page-wrapper">
                <div class="col-md-12 mt30">
                    <ul class="nav nav-pills custom-nav-pills">
                        <li class="active"><a href="javascript:void(0)"><span>01</span>Card Details</a></li>
                        <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
                        <li><a href="javascript:void(0)"><span>03</span>CheckList Details</a></li>
                        <li><a href="javascript:void(0)"><span>04</span>Document Details</a></li>
                    </ul>

                    <div class="tab">
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="row mb20">

                                <div class="col-md-6 mb-lg">

                                    <div class="white-bg">
                                        <div class="row">
                                            <h3>Card Details</h3>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PI</label>
                                                    @Html.DropDownListFor(m => m.PIId, new SelectList(ViewBag.PIName, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtPI" })
                                                    @Html.ValidationMessageFor(m => m.PIId)
                                                    @Html.HiddenFor(m => m.PIFirstname)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank</label>
                                                    @Html.DropDownListFor(m => m.SelBank, new SelectList(ViewBag.Bank, "id", "name"), "Select any", new { @class = "form-control", @id = "txtImprestBank" })
                                                    @Html.ValidationMessageFor(m => m.SelBank)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            @*<div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Gender :</label>
                                                        @Html.TextBoxFor(m => m.PIGender, new { @class = "form-control", @rows = "3", @readonly = true, @required = "required", @id = "txtdescriptionofservice" })
                                                        @Html.DropDownListFor(m => m.PIGender, new SelectList(ViewBag.Gender, "id", "name"), "Select Gender", new { @id = "txtPIGender", @class = "form-control", @required = "required" })
                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIGender) </div>
                                                        @Html.Hidden("PIGender")
                                                    </div>
                                                </div>*@
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Mobile Number :</label>
                                                    @Html.TextBoxFor(m => m.PIMobile, new { @class = "form-control", @id = "txtPIMobile" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIMobile) </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Email: </label>
                                                    @Html.TextBoxFor(m => m.PIEmail, new { @class = "form-control", @id = "txtPIEmail" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIEmail)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Imprest A/C Number :</label>
                                                    @Html.TextBoxFor(m => m.ImprestBankACNumber, new { @class = "form-control required", @id = "txtbankac" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.ImprestBankACNumber)</div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Prepaid Card No. :</label>
                                                    @Html.TextBoxFor(m => m.ImprestcardNumber, new { @class = "form-control", @id = "txtprepaidcardnumber", @onkeypress = "return ValidateNumberOnly(event)", @maxlength = "16" })
                                                    @Html.HiddenFor(m => m.CurrentImprestValue)
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.ImprestcardNumber)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row dis-none" id="ExistingIMPValue">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label> <b>Existing Imprest Value :</b></label>
                                                    @Html.TextBoxFor(m => m.TotalValueofCard, new { @class = "form-control", @id = "txttotalcardvalue", @disabled = "disabled" })
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required"> <b>Enhance Value :</b></label>
                                                    @Html.TextBoxFor(m => m.EnhancedImprestValue, new { @class = "form-control", @id = "txtEnhanceImprestvalue", @onkeypress = "return ValidateNumberOnly(event)" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.EnhancedImprestValue)</div>

                                                </div>
                                            </div>
                                            @*<div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Date of Birth : </label>
                                                        @Html.TextBoxFor(m => m.DOB, new { @class = "form-control", @required = "required", @id = "txtDateofbirth" })
                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.DOB) </div>
                                                    </div>
                                                </div>*@
                                        </div>
                                        <div class="row" id="NewIMPValue">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required"> <b>Imprest Value :</b></label>
                                                    @Html.TextBoxFor(m => m.ImprestValue, new { @class = "form-control", @id = "txtNewImprestvalue", @onkeypress = "return ValidateNumberOnly(event)" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.ImprestValue)</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row dis-none" id="TotalValue">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required"> <b>Total Imprest Value :</b></label>
                                                    @Html.TextBoxFor(m => m.TotalImprestValue, new { @class = "form-control", @id = "txtTotalImprestvalue", @onkeypress = "return ValidateNumberOnly(event)", @readonly = "readonly" })
                                                    <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.TotalImprestValue)</div>
                                                    @Html.HiddenFor(m => m.CurrentImprestValue)
                                                </div>
                                            </div>
                                        </div>

                                        @*<div class="row">

                                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>Father's Name: </label>
                                                                        @Html.TextBoxFor(m => m.FatherFirstName, new { @class = "form-control", @id = "txtPIFathername"})
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.FatherFirstName)</div>
                                                                    </div>
                                                                </div>
                                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                   <div class="form-group custom-form-group">
                                                                        <label>Mother's Maiden Name :</label>
                                                                        @Html.TextBoxFor(m => m.MothersMaiden, new { @class = "form-control", @id = "txtPIMothermaidenname"})
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.MothersMaiden)</div>
                                                    </div>
                                                 </div>
                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>Address Line 1: </label>
                                                                        @Html.TextAreaFor(m => m.PIAddressLine1, new { @class = "form-control", @id = "txtPIAddressline1"})
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine1)</div>
                                                                    </div>
                                                                </div>
                                            </div>
                                            <div class="row">
                                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>Address Line 2: </label>
                                                                        @Html.TextAreaFor(m => m.PIAddressLine2, new { @class = "form-control", @id = "txtPIAddressline2" })
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine2)</div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>District: </label>
                                                                        @Html.TextBoxFor(m => m.PIdistrict, new { @class = "form-control", @id = "txtPIDistrict" })
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIdistrict)</div>
                                                                    </div>
                                                                </div>

                                                            </div>
                                            <div class="row">
                                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>City: </label>
                                                                        @Html.TextBoxFor(m => m.PICity, new { @class = "form-control", @id = "txtPICity" })
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine1)</div>
                                                                    </div>
                                                                </div>
                                                                <div class="col-md-6">
                                                                    <div class="form-group custom-form-group">
                                                                        <label>State: </label>
                                                                        @Html.TextBoxFor(m => m.PIstate, new { @class = "form-control", @id = "txtPIState" })
                                                                        <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIstate)</div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                            <div class="row">
                                                                    <div class="col-md-6">
                                                                        <div class="form-group custom-form-group">
                                                                            <label>Pincode: </label>
                                                                            @Html.TextBoxFor(m => m.PIPincode, new { @class = "form-control", @id = "txtPIPincode"})
                                                                            <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIPincode)</div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <div class="form-group custom-form-group">
                                                                            <label>PAN: </label>
                                                                            @Html.TextBoxFor(m => m.PAN, new { @class = "form-control", @id = "txtPIPAN" })
                                                                            <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PAN)</div>
                                                                        </div>
                                                                    </div>
                                                                </div>*@

                                    </div>

                                </div>
                                <div class="col-md-6">

                                    <div class="bl-panel-box custom-tab-pills ">
                                        <div class="bl-panel-hd">
                                            <ul class="nav nav-pills">
                                                <li class="active">
                                                    <a data-toggle="pill" href="#form1">Project Details</a>
                                                </li>
                                                @*<li class="">
                                                        <a data-toggle="pill" href="#form2">Instalment</a>
                                                    </li>*@
                                            </ul>
                                        </div>
                                        <div class="bl-panel-dts tab-content ">
                                            <div id="form1" class="tab-pane fade active in">
                                                <table class="table wht-table">
                                                    <thead>
                                                        <tr>
                                                            <th>Project No.</th>
                                                            <th>Project type</th>
                                                            <th>Sanctioned Value</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="ProjectList">
                                                        @if (Model.PIProjectDetails != null)
                                                        {
                                                            var count = 0;
                                                            foreach (var item in Model.PIProjectDetails)
                                                            {
                                                                var projectId = "PIProjectDetails[" + count + "].PIProjectId";
                                                                var projectNumber = "PIProjectDetails[" + count + "].PIProjectNumber";
                                                                var sanctionValue = "PIProjectDetails[" + count + "].PIProjectSanctionValue";
                                                                var projectType = "PIProjectDetails[" + count + "].PIProjectType";
                                                                <tr>
                                                                    <td style="width:40px">
                                                                        @Html.TextBox(@projectNumber, item.PIProjectNumber, new { @class = "form-control", @id = "txtPIProjectnumber", @readonly = true })
                                                                        @Html.Hidden("PIProjectDetails.Index", @count)
                                                                        @Html.Hidden("PIProjectDetails.PIProjectId", @count)
                                                                    </td>
                                                                    <td style="width:40px">
                                                                        @Html.TextBox(@projectType, item.PIProjectType, new { @class = "form-control", @id = "txtPIProjecttype", @readonly = true })
                                                                    </td>
                                                                    <td style="width:40px">
                                                                        @Html.TextBox(@sanctionValue, item.PIProjectSanctionValue, new { @class = "form-control", @id = "txtPIProjectSanctionValue", @readonly = true })
                                                                    </td>
                                                                </tr>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.TextBox("PIProjectDetails[0].PIProjectNumber", "", new { @class = "form-control required", @readonly = true })
                                                                    @Html.ValidationMessage("PIProjectDetails[0].PIProjectNumber")
                                                                    @Html.Hidden("PIProjectDetails.Index", "0")


                                                                </td>
                                                                <td class="mr20">
                                                                    @Html.TextBox("PIProjectDetails[0].PIProjectType", "", new { @class = "form-control required", @readonly = true })
                                                                    @Html.ValidationMessage("PIProjectDetails[0].PIProjectType")
                                                                    @Html.Hidden("PIProjectDetails.PIProjectId", "0")
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("PIProjectDetails[0].PIProjectSanctionValue", "", new { @class = "form-control required", @readonly = true })
                                                                    @Html.ValidationMessage("PIProjectDetails[0].PIProjectSanctionValue")
                                                                </td>

                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>

                                        </div>
                                        <div class="bl-panel-hgt">
                                            <h4><b>Total Projects Value: @Html.TextBoxFor(m => m.TotalProjectsValue, new { @class = "form-control", @id = "TotalProjectsamount", @readonly = true })</b></h4>
                                            @Html.Hidden("TotalProjectsValue")
                                        </div>


                                    </div>

                                    <div class="bl-panel-box custom-tab-pills ">
                                        <div class="bl-panel-hd">
                                            <ul class="nav nav-pills">
                                                <li class="active">
                                                    <a data-toggle="pill" href="#form1">Imprest and Recoupment History</a>
                                                </li>

                                            </ul>
                                        </div>
                                        <div class="bl-panel-dts tab-content ">
                                            <div id="form1" class="tab-pane fade active in">
                                                <table class="table wht-table">
                                                    <thead>
                                                        <tr>
                                                            <th>Date</th>
                                                            <th>Type</th>
                                                            <th>Amount</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="ImprestList">

                                                        @if (Model.PIImprestDetails != null)
                                                        {
                                                            var count = 0;
                                                            foreach (var item in Model.PIImprestDetails)
                                                            {
                                                                var detailId = "PIImprestDetails[" + count + "].DetailsId";
                                                                var type = "PIImprestDetails[" + count + "].Type";
                                                                var amount = "PIImprestDetails[" + count + "].Amount";
                                                                var crtddate = "PIImprestDetails[" + count + "].CrtdDate";
                                                                <tr>
                                                                    <td>
                                                                        @Html.TextBox(@crtddate, item.CrtdDate, new { @class = "form-control", @id = "txtCrtdDate", @readonly = true })
                                                                        @Html.Hidden("PIImprestDetails.Index", @count)
                                                                        @Html.Hidden("PIImprestDetails.DetailsId", @count)
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox(@type, item.Type, new { @class = "form-control", @id = "txttype", @readonly = true })
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBox(@amount, item.Amount, new { @class = "form-control", @id = "txtAmount", @readonly = true })
                                                                    </td>

                                                                </tr>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.TextBox("PIImprestDetails[0].CrtdDate", "", new { @class = "form-control", @readonly = true })
                                                                    @Html.Hidden("PIImprestDetails.Index", "0")


                                                                </td>
                                                                <td class="mr20">
                                                                    @Html.TextBox("PIImprestDetails[0].Type", "", new { @class = "form-control", @readonly = true })
                                                                    @Html.Hidden("PIImprestDetails.DetailsId", "0")
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("PIImprestDetails[0].Amount", "", new { @class = "form-control", @readonly = true })
                                                                </td>

                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="bl-panel-hgt">
                                            <h4><b>Total Imprest Value: @Html.TextBoxFor(m => m.TotalPrevImprestValue, new { @class = "form-control", @id = "TotalImprestamount", @readonly = true })</b></h4>
                                            @Html.Hidden("TotalPrevImprestValue")
                                        </div>
                                        <div class="bl-panel-hgt">
                                            <h4><b>Total Recoupment Value: @Html.TextBoxFor(m => m.TotalPrevRecoupValue, new { @class = "form-control", @id = "TotalRecoupamount", @readonly = true })</b></h4>
                                            @Html.Hidden("TotalPrevRecoupValue")
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="tab">
                        @Html.Partial("_TransactionDetails", Model)
                    </div>
                    <div class="tab">
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="">
                                @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                            </div>
                            <div>
                                @Html.HiddenFor(m => m.CheckListVerified_By)
                                @Html.HiddenFor(m => m.CheckListVerifierName)
                                <div class="col-md-3 col-md-offset-9">
                                    <div class="form-group custom-form-group">
                                        <label>Verified by</label>
                                        <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab">
                        <div class="col-md-12 col-sm-12 m-b-sm">
                            <div class="">
                                @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                            </div>
                        </div>
                    </div>
                    @*<div class="tab" id="docview">
                            <div class="col-md-12 col-sm-12 m-b-sm">
                                <div class="">
                                    @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                                </div>
                            </div>
                        </div>*@

                    <div class="custom-nav-btn text-right">
                        @*<input type="submit" class="btn btn-primary" value="Save" name="Button" id="btnNewSave" />*@
                        <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                        <a href="@Url.Action("ImprestPaymentList", "CoreAccounts")" class="btn btn-primary">Close</a>
                    </div>

                </div>

            </div>
        </div>
    }
</div>

@if (ViewBag.succMsg != null)
{
    <div id="myModal" class="modal fade modal-success" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("ImprestPaymentList", "CoreAccounts")';">&times;</button>
                    <i class="ion-android-checkmark-circle"></i>
                    <h3 class="modal-title">Saved successfully</h3>
                </div>
                <div class="modal-body">

                    <p>@ViewBag.succMsg</p>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("ImprestPaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal').modal('show');
        });

    </script>

}
@if (ViewBag.errMsg != null)
{
    <div id="myModal1" class="modal fade modal-error" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("ImprestPaymentList", "CoreAccounts")';">&times;</button>
                    <i class="ion-android-cancel"></i>
                    <h3 class="modal-title">Error Message</h3>
                </div>
                <div class="modal-body">

                    <p>@ViewBag.errMsg</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("ImprestPaymentList", "CoreAccounts")';">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal1').modal('show');
        });

    </script>
}

<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "") {
        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('#btnAddExpense').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();
    }
    var errMsg = '@ViewBag.errMsg';
    var tmperr = '@TempData["errMsg"]';
    if (tmperr != '') {
        $('input[name="NeedUpdateTransDetail"]').val(true);
    }
    var errMsg = '@ViewBag.errMsg';
    var tmperr = '@TempData["errMsg"]';
    if (tmperr != '') {
        $('input[name="NeedUpdateTransDetail"]').val(true);
    }
    var piList = '@Html.Raw(Json.Encode(ViewBag.PI))';
    var allocationHeads = '@Html.Raw(Json.Encode(ViewBag.allocatehead))'
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    @*var modelData = '@Html.Raw(Json.Encode(Model))'*@
    $(document).ready(function () {
        //get the relevant form
        //  var form = $('#frmSRB');

        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');

        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
  if(@Model.ImprestProjectDetailsId == 0)
     {
        $('#txtPI').each(function () {
            var PI = $(this).val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("LoadImprestProjectDetails", "CoreAccounts")",
            data: { "PIId": PI },
        traditional: true,
        dataType: "json",
        success: function (result) {

            $.each(result.PIProjectDetails, function (i, item) {

                        if (i == 0) {
                            var trEle = $('#ProjectList tr:first');
                            $('#ProjectList tr').not(':first').remove();
                            $(trEle).find('input[name$=".PIProjectId"]').val(item.PIProjectId);
                            $(trEle).find('input[name$=".PIProjectNumber"]').val(item.PIProjectNumber);
                            $(trEle).find('input[name$=".PIProjectType"]').val(item.PIProjectType);
                            $(trEle).find('input[name$=".PIProjectSanctionValue"]').val(item.PIProjectSanctionValue);
                            $(trEle).find("input[name='PIProjectDetails.Index']").val(i);


                        } else {
                            var trEleNew = $('#ProjectList tr:first').clone().find('input').val('').end();
                            $(trEleNew).find('input[name$=".PIProjectId"]').val(item.PIProjectId);
                            $(trEleNew).find('input[name$=".PIProjectSanctionValue"]').val(item.PIProjectSanctionValue);
                            $(trEleNew).find('input[name$=".PIProjectNumber"]').val(item.PIProjectNumber);
                            $(trEleNew).find('input[name$=".PIProjectType"]').val(item.PIProjectType);
                            $(trEleNew).find("input[name='PIProjectDetails.Index']").val(i);

                            $('#ProjectList').append(trEleNew);
                        }
                        //if (i == 0) {
                        //    document.getElementsByName('PIProjectId')[0].value = ProjectId[0];
                        //    document.getElementsByName('PIProjectType')[0].value = ProjectType[0];
                        //    document.getElementsByName('PIProjectSanctionValue')[0].value = SanctionValue[0];
                        //    document.getElementsByName('TotalProjectsValue')[0].value = Totalprojectvalue[0];

                        //} else {
                        //    document.getElementsByName('PIProjectId')[i].value = ProjectId[i];
                        //    document.getElementsByName('PIProjectType')[i].value = ProjectType[i];
                        //    document.getElementsByName('PIProjectSanctionValue')[i].value = SanctionValue[i];
                        //    document.getElementsByName('TotalProjectsValue')[i].value = Totalprojectvalue[i];
                        //}
                    });


            $.each(result.PIImprestDetails, function (i, item) {
                        if (i == 0) {
                            var trEle = $('#ImprestList tr:first');
                    $(trEle).find('input[name$=".DetailsId"]').val(item.DetailsId);
                    $(trEle).find('input[name$=".Type"]').val(item.Type);
                    $(trEle).find('input[name$=".Amount"]').val(item.Amount);
                    $(trEle).find('input[name$=".CrtdDate"]').val(item.CrtdDate);
                    $(trEle).find("input[name='PIImprestDetails.Index']").val(i);


                        } else {
                            var trEleNew = $('#ImprestList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".DetailsId"]').val(item.DetailsId);
                    $(trEleNew).find('input[name$=".Type"]').val(item.Type);
                    $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
                    $(trEleNew).find('input[name$=".CrtdDate"]').val(item.CrtdDate);
                    $(trEleNew).find("input[name='PIImprestDetails.Index']").val(i);

                    $('#ImprestList').append(trEleNew);
                        }
                    });
            $('#TotalProjectsamount').val(result.TotalProjectsValue);
            $('input[name="PIFirstname"]').val(result.PIFirstname);
            $('input[name="PIEmail"]').val(result.PIEmail);
            $('input[name="TotalPrevImprestValue"]').val(result.TotalPrevImprestValue);
            $('input[name="TotalPrevRecoupValue"]').val(result.TotalPrevRecoupValue);

            $('select[name="SelBank"]').val(result.SelBank);
            $('#txtbankac').val(result.ImprestBankACNumber);
            $('#txtprepaidcardnumber').val(result.ImprestcardNumber);
            if(result.PIImprestDetails.length > 0 && result.PIImprestDetails.length == 1)
            {
                $('input[name="ImprestValue"]').val(result.ImprestValue);
                $('input[name="CurrentImprestValue"]').val(result.CurrentImprestValue);
            }
            if(result.PIImprestDetails.length > 1)
            {
                $('#txtEnhanceImprestvalue').val(result.EnhancedImprestValue);
                $('#txtTotalImprestvalue').val(result.ImprestValue);
                $('input[name="CurrentImprestValue"]').val(result.CurrentImprestValue);
            }

            $('#txtDateofbirth').val(result.DOB);
            $('#txtPIGender').val(result.PIGender);
            $('#txtPIMobile').val(result.PIMobile);

            $('#txtPIFathername').val(result.FatherFirstName);
            $('#txtPIMothermaidenname').val(result.MothersMaiden);
            $('#txtPIAddressline1').val(result.PIAddressLine1);
            $('#txtPIAddressline2').val(result.PIAddressLine2);

            $('#txtPIDistrict').val(result.PIdistrict);
            $('#txtPICity').val(result.PICity);
            $('#txtPIState').val(result.PIstate);
            $('#txtPIPincode').val(result.PIPincode);
            $('#txtPIPAN').val(result.PAN);
            $('input[name="ImprestcardId"]').val(result.ImprestcardId);

            $('#lblVendorName').html(result.PIFirstname);
            $('#NeedUpdateTransDetail').val('True');
                },
        error: function (err) {
                    console.log("error : " + err);
                }
            });
        });
            }
        //if (errMsg) {
        //    $('#FailedAlert').html(errMsg);
        //    $('#Failed').modal('toggle');
        //    var jsonData = JSON.parse(modelData);
        //    $('#addnewpage').hide();
        //    $('#SBIPrepaidECard').show();
        //    $('#gridlist').hide();
        //    $('#viewdoc').hide();
        //    fillData(jsonData);

        //} else {
        //    $('#SBIPrepaidECard').hide();
        //    $('#viewdoc').hide();
        //}
        //var piname = $('input[name="PIFirstname"]').val();
        //$('#lblVendorName').html(piname);
        //var Amt = parseFloat($('#txtImprestvalue').val());
        $('#lblVendorName').html($('#txtPI option:selected').text());
        var newvalue = parseFloat(($('#txtNewImprestvalue').val()));
        var enhancedvalue = parseFloat(($('#txtTotalImprestvalue').val()));
        var total = newvalue + enhancedvalue;
        if (newvalue > 0)
        {
            $("#CreditorAmount").val(newvalue);
        }
        else if (enhancedvalue > 0)
        {
            $("#CreditorAmount").val(enhancedvalue);
        }

        CalculateDeductionTotal();
        //CalculatePOValue();
        $('#NeedUpdateTransDetail').val('false');
    });

    $("#FromDate, #ToDate, #txtDateofbirth, #txtEDateofbirth").datepicker
              ({
                  dateFormat: 'dd-MM-yy',
                  showStatus: true,
                  showWeeks: true,
                  changeYear: true,
                  yearRange: '-100:+0',
                  highlightWeek: true,
                  numberOfMonths: 1,
                  showAnim: "scale",
                  showOptions: {
                      origin: ["top", "left"]
                  }
              });


    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function noedit() {
        return false;
    }
    $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr, #txtprepaidcardnumber, #txtEnhanceImprestvalue, #txtNewImprestvalue').on("copy cut paste drop", function () {
        return false;
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
		$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
		if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function ValidateNumberOnly(e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
    }
    function ValidateDecimalOnly(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    $('#txtprepaidcardnumber').change(function () {
        var cardnumber = $(this).val();
        if ((cardnumber.length < 16)) {
            $("#alert").text("Please enter 16 digit card number.");
            $('#Validation').modal('show');
            return false;
        }
    });
    $('#txtNewImprestvalue').change(function () {

        var amt = parseFloat($(this).val());
        var pi = $("#txtPI").val()
        var sancamt = parseFloat($('input[name="TotalProjectsValue"]').val());
        var previmptotal = parseFloat($('input[name="TotalPrevImprestValue"]').val());
        var currentimpvalue = parseFloat($('input[name="CurrentImprestValue"]').val());
        var imprestpercent = parseFloat((sancamt * 20) / 100);
        var balance = 0;
        if (pi == "")
        {
            $("#alert").text("Please select PI");
            $('#Validation').modal('show');
            return false;
        }
        if (imprestpercent <= 500000) {
            var balance = imprestpercent - (previmptotal - currentimpvalue);
            if (balance < amt)
            {
                $("#alert").text("Imprest amount claimed cannot be greater than 20% of total projects sanctioned value.");
                $('#Validation').modal('show');
                return false;
            }
        }
        if (imprestpercent > 500000) {
            var balance = 500000 - (previmptotal - currimpvalue);
            if (balance < amt) {
                $("#alert").text("Imprest amount claimed cannot be greater than Rs 500000.");
                $('#Validation').modal('show');
                return false;
            }
        }
        $("#CreditorAmount").val(amt);
    });
    $('#txtPI').change(function () {
        var PI = $(this).val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("LoadImprestProjectDetails", "CoreAccounts")",
            data: { "PIId": PI },
        traditional: true,
        dataType: "json",
        success: function (result) {
            if (result.PIImprestDetails != null)
            {
                $("#alert").text("The selected PI already has Imprest Account. Please select a different PI.");
                $('#Validation').modal('show');
                return false;
            }
            if(result.PIProjectDetails == null || result.PIProjectDetails == '')
            {
                var trEle = $('#ProjectList tr:first');
                $('#ProjectList tr').not(':first').remove();
                $(trEle).find('input[name$=".PIProjectId"]').val('');
                $(trEle).find('input[name$=".PIProjectNumber"]').val('');
                $(trEle).find('input[name$=".PIProjectType"]').val('');
                $(trEle).find('input[name$=".PIProjectSanctionValue"]').val('');
                $(trEle).find("input[name='PIProjectDetails.Index']").val(0);
            }else{
                $.each(result.PIProjectDetails, function (i, item) {

                    if (i == 0) {
                        var trEle = $('#ProjectList tr:first');
                        $('#ProjectList tr').not(':first').remove();
                        $(trEle).find('input[name$=".PIProjectId"]').val(item.PIProjectId);
                        $(trEle).find('input[name$=".PIProjectNumber"]').val(item.PIProjectNumber);
                        $(trEle).find('input[name$=".PIProjectType"]').val(item.PIProjectType);
                        $(trEle).find('input[name$=".PIProjectSanctionValue"]').val(item.PIProjectSanctionValue);
                        $(trEle).find("input[name='PIProjectDetails.Index']").val(i);

                    }
                    else {
                        var trEleNew = $('#ProjectList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".PIProjectId"]').val(item.PIProjectId);
                        $(trEleNew).find('input[name$=".PIProjectSanctionValue"]').val(item.PIProjectSanctionValue);
                        $(trEleNew).find('input[name$=".PIProjectNumber"]').val(item.PIProjectNumber);
                        $(trEleNew).find('input[name$=".PIProjectType"]').val(item.PIProjectType);
                        $(trEleNew).find("input[name='PIProjectDetails.Index']").val(i);

                        $('#ProjectList').append(trEleNew);
                    }
                    //if (i == 0) {
                    //    document.getElementsByName('PIProjectId')[0].value = ProjectId[0];
                    //    document.getElementsByName('PIProjectType')[0].value = ProjectType[0];
                    //    document.getElementsByName('PIProjectSanctionValue')[0].value = SanctionValue[0];
                    //    document.getElementsByName('TotalProjectsValue')[0].value = Totalprojectvalue[0];

                    //} else {
                    //    document.getElementsByName('PIProjectId')[i].value = ProjectId[i];
                    //    document.getElementsByName('PIProjectType')[i].value = ProjectType[i];
                    //    document.getElementsByName('PIProjectSanctionValue')[i].value = SanctionValue[i];
                    //    document.getElementsByName('TotalProjectsValue')[i].value = Totalprojectvalue[i];
                    //}
                });
            }

            if (result.PIImprestDetails == null || result.PIImprestDetails == '')
            {
                var trEle = $('#ImprestList tr:first');
                $('#ImprestList tr').not(':first').remove();
                $(trEle).find('input[name$=".DetailsId"]').val('');
                $(trEle).find('input[name$=".Type"]').val('');
                $(trEle).find('input[name$=".Amount"]').val('');
                $(trEle).find('input[name$=".CrtdDate"]').val('');
                $(trEle).find("input[name='PIImprestDetails.Index']").val(0);
            }
            else if (result.PIImprestDetails != null)
            {
                $("#alert").text("The selected PI already has Imprest Account. Please select a different PI.");
                $('#Validation').modal('show');
                return false;
            }
            //else {
            //    $.each(result.PIImprestDetails, function (i, item) {
            //        if (i == 0) {
            //            var trEle = $('#ImprestList tr:first');
            //            $('#ImprestList tr').not(':first').remove();
            //            $(trEle).find('input[name$=".DetailsId"]').val(item.DetailsId);
            //            $(trEle).find('input[name$=".Type"]').val(item.Type);
            //            $(trEle).find('input[name$=".Amount"]').val(item.Amount);
            //            $(trEle).find('input[name$=".CrtdDate"]').val(item.CrtdDate);
            //            $(trEle).find("input[name='PIImprestDetails.Index']").val(i);

            //        } else {
            //            var trEleNew = $('#ImprestList tr:first').clone().find('input').val('').end();
            //            $(trEleNew).find('input[name$=".DetailsId"]').val(item.DetailsId);
            //            $(trEleNew).find('input[name$=".Type"]').val(item.Type);
            //            $(trEleNew).find('input[name$=".Amount"]').val(item.Amount);
            //            $(trEleNew).find('input[name$=".CrtdDate"]').val(item.CrtdDate);
            //            $(trEleNew).find("input[name='PIImprestDetails.Index']").val(i);

            //            $('#ImprestList').append(trEleNew);
            //        }
            //    });
            //}
            $('#TotalProjectsamount').val(result.TotalProjectsValue);
            $('input[name="PIFirstname"]').val(result.PIFirstname);
            $('input[name="PIEmail"]').val(result.PIEmail);
            $('input[name="TotalPrevImprestValue"]').val(result.TotalPrevImprestValue);
            $('input[name="TotalPrevRecoupValue"]').val(result.TotalPrevRecoupValue);

            $('select[name="SelBank"]').val(result.SelBank);
            $('#txtbankac').val(result.ImprestBankACNumber);
            $('#txtprepaidcardnumber').val(result.ImprestcardNumber);
            if(result.ImprestBankACNumber != null)
            {
                $('#ExistingIMPValue').removeClass('dis-none');
                $('#TotalValue').removeClass('dis-none');
                $('#NewIMPValue').addClass('dis-none');
                $('#txtNewImprestvalue').removeClass('required');
            }
            if(result.ImprestBankACNumber == null)
            {
                $('#ExistingIMPValue').addClass('dis-none');
                $('#TotalValue').addClass('dis-none');
                $('#NewIMPValue').removeClass('dis-none');
                $('#txtNewImprestvalue').addClass('required');
            }
            $('#txtEnhanceImprestvalue').val('');
            $('#txttotalcardvalue').val(result.TotalValueofCard);

            $('#txtDateofbirth').val(result.DOB);
            $('#txtPIGender').val(result.PIGender);
            $('#txtPIMobile').val(result.PIMobile);

            $('#txtPIFathername').val(result.FatherFirstName);
            $('#txtPIMothermaidenname').val(result.MothersMaiden);
            $('#txtPIAddressline1').val(result.PIAddressLine1);
            $('#txtPIAddressline2').val(result.PIAddressLine2);

            $('#txtPIDistrict').val(result.PIdistrict);
            $('#txtPICity').val(result.PICity);
            $('#txtPIState').val(result.PIstate);
            $('#txtPIPincode').val(result.PIPincode);
            $('#txtPIPAN').val(result.PAN);
            $('input[name="ImprestcardId"]').val(result.ImprestcardId);

            $('#lblVendorName').html(result.PIFirstname);
            $('#NeedUpdateTransDetail').val('True');
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    });
    $('#txtEnhanceImprestvalue').change(function () {
        var previmp = parseFloat($('#txttotalcardvalue').val() || 0);
        var enhancimp = parseFloat($(this).val() || 0);
        var total = previmp + enhancimp;
        if(!isNaN (total))
        {
            $("#txtTotalImprestvalue").val(total.toFixed(0));
        }
        $("#CreditorAmount").val(enhancimp);
    });
    //function ValidateCommitment() {
    //    var msg = 'valid';
    //    var commitmentAmt = parseFloat($('#CommitmentAmount').val());
    //    // var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
    //    var ttlAdvAmt = parseFloat($('#txtCurrentProjectcardvalue').val());
    //    var advPct = parseInt($("#AdvancePercentage").val());
    //   // var offsetValue = $("input[name='GST']:checked").val();
    //    $("#tbodyCommitmentSelList tr").each(function () {
    //        var elePayment = $(this).find("input[name$='.PaymentAmount']");
    //        var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
    //        var parseVal = parseFloat($(elePayment).val()) || 0;
    //        var avlBal = parseFloat($(eleAvlBal).val()) || 0;
    //        if (parseVal > avlBal)
    //            msg = "Commitment payment value should not be greater than available balance."
    //    });
    //    if (isNaN(ttlAdvAmt) || isNaN(commitmentAmt)) {
    //        msg = 'The requested advance value / allocated commitment value is not a valid entry.';
    //    } else if (ttlAdvAmt != commitmentAmt) {
    //        msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
    //    }

    //    return msg;
    //}
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
     //   var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var newvalue = parseFloat($('#txtNewImprestvalue').val());
        var enhancevalue = parseFloat($('#txtEnhanceImprestvalue').val());
        var ttlAdvAmt = 0;
        if (newvalue > 0)
        {
            ttlAdvAmt = newvalue;
        }
        else if (enhancevalue > 0)
        {
            ttlAdvAmt = enhancevalue;
        }

        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        else if (isNaN(ttlExpAmt) || isNaN(ttlAdvAmt)) {
            msg = 'The requested imprest value / Transaction value is not a valid entry.';
        }
        //else if (ttlExpAmt != commitmentAmt) {
        //    msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        //}

        var hdList = [];
        var hdJVList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
            if (jv.toLowerCase()== "true")
                hdJVList.push($(val).val());
            else
                hdList.push($(val).val());
        });
        hdList.sort();
        hdJVList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        //for (var k = 1; k < hdJVList.length; ++k) {
        //    if (hdJVList[k] == hdJVList[k - 1]) {
        //        msg = "Duplicate account head exist in expense details. Please select a different head.";
        //    }
        //}
        return msg;
    }
    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "IMP","tSubCode" : "1"},
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            $('#nextBtn').hide();
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        // if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }


    function GetTransactionDetails() {
        //var commitmentDetailIds = [];
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        // var tdsDetailId = $('#VendorTDSDetailId').val() || null;
        var interstate_f = false;
        //if ($('#lblStateCode').html() == '33')
        //    interstate_f = true;
        //$('#tbodyCommitmentSelList input[name$=".CommitmentDetailId"]').each(function () {
        //    var cmtDetId = $(this).val();
        //    if (cmtDetId != '') { commitmentDetailIds.push(cmtDetId); }
        //});
        //if (commitmentDetailIds.length == 0) {
        //    $("#alert").text("Please select at least one commitment from the list.");
        //    $('#Validation').modal('show');
        //    return false;
        //} else {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "IMP","tSubCode" : "1", },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                //var amt = 0;
                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                //    var parseVal = parseFloat($(elePayment).val());
                //    if (!isNaN(parseVal))
                //        amt = amt + parseVal;
                //});
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    if(item.TDSPercentage == null){
                        amtEle.val('');
                    }else{
                        tds = ttlAdvTax * item.TDSPercentage / 100;
                        amtEle.val(tds);
                    }

                    amtEle.addClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                    amtEle.addClass('required');
                    if(item.TDSPercentage != null){
                        tds = ttlAdvTax * item.TDSPercentage / 100;
                        amtEle.val(tds);
                    }
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            //var AllocAmt = $('#txtImprestvalue').val();
            //$("#CreditorAmount").val(AllocAmt);
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    //}
    }
    function formSave() {

        var isValid = $('#formIMP').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
        $('#formIMP').submit();
    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
