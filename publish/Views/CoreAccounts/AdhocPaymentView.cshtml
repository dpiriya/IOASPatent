@model IOAS.Models.AdhocPaymentModel
@{
    ViewBag.Title = "Reimbursement Payment";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("AdhocPayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formSI", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Reimbursement Payment</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
         new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.AdhocId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                   @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>

            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.AdhocPaymentNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Beneficiary Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row mb30">
                                            <div class="col-md-3">
                                                <table class="table alter-table">
                                                    <thead>
                                                        <tr>
                                                            <th>Payment Type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td>
                                                                @Html.DropDownListFor(m => m.PaymentType, new SelectList(ViewBag.PaymentType, "id", "name"), "Select any", new { @class = "form-control required", @id = "txtpaymenttype" })
                                                                @Html.ValidationMessageFor(m => m.PaymentType)
                                                                @Html.HiddenFor(m => m.TransactionTypeCode, new { @id = "transtypecode" })
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="col-md-9">
                                                <div class="">
                                                    <table class="table alter-table">
                                                        <thead>
                                                            <tr>
                                                                <th>Payee Type</th>
                                                                <th>Payee Name</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="tbodyPayee">
                                                            <tr>
                                                                <td>
                                                                    @Html.DropDownListFor(m => m.CategoryId, new SelectList(ViewBag.CategoryList, "id", "name"), "Select any", new { @class = "form-control required", @id = "txtcategory" })
                                                                    @Html.ValidationMessageFor(m => m.CategoryId)
                                                                    @Html.HiddenFor(m => m.AdhocId)
                                                                </td>
                                                                <td class="tdDDLUser">
                                                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @id = "txtname" })
                                                                    @Html.TextBoxFor(m => m.UserId, new { @class = "form-control dis-none" })
                                                                    @Html.ValidationMessageFor(m => m.Name)
                                                                </td>
                                                                <td class="tdTxtName dis-none">
                                                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                                                                    @Html.ValidationMessageFor(m => m.Name)
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="gray-bg br-rd">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="row m-b-sm">
                                                        <div class="col-md-6">
                                                            <h3 class="mt-xs">Payment Details</h3>
                                                        </div>
                                                        <div class="col-md-6 text-right">
                                                            <a href="javascript:void(0)" id="btnAddPayment" class="btn btn-primary">Add New</a>
                                                        </div>
                                                    </div>
                                                    <div class="m-b-sm scrl-table scrl-table-po-bl">
                                                        <table class="table table-bordered" style="width: 1250px;">
                                                            <thead>
                                                                <tr>
                                                                    <th colspan="6" class="text-center">Payment Details</th>
                                                                    @*<th colspan="2" class="text-center bg-blue">Advance Payment Details</th>*@
                                                                    <th></th>

                                                                </tr>
                                                            </thead>
                                                            <tbody id="tbodyPO">
                                                                <tr>
                                                                    @*<td style="width: 400px;">Department </td>*@
                                                                    <td style="width: 200px;">Invoice Number </td>
                                                                    @*<td style="width: 200px;">(SAC / HSN) / Tax % </td>*@
                                                                    <td style="width: 200px;">Invoice Date</td>
                                                                    <td style="width: 200px;">Description</td>
                                                                    <td style="width: 150px;">Amount</td>
                                                                    <td style="width: 90px;">Tax %</td>
                                                                    <td style="width: 150px;">Tax Amount</td>
                                                                    <td style="width: 220px;">GSTIN</td>
                                                                    <td style="width: 20px;">Tax Eligible</td>

                                                                    @*<td class="bg-blue">Adv %</td>
                                                                        <td class="bg-blue">Advance Amt</td>
                                                                        <td class="bg-blue dis-none">TAX</td>
                                                                        <td class="bg-blue dis-none">Total</td>
                                                                        <td></td>*@
                                                                </tr>
                                                                @if (Model.PaymentDetails != null)
                                                                {
                                                                    var count = 0;
                                                                    foreach (var item in Model.PaymentDetails)
                                                                    {
                                                                        var detailId = "PaymentDetails[" + count + "].AdhocDetailId";
                                                                        var invoicenumber = "PaymentDetails[" + count + "].InvoiceNumber";
                                                                        var invoicedate = "PaymentDetails[" + count + "].InvDate";
                                                                        var description = "PaymentDetails[" + count + "].Description";
                                                                        var amount = "PaymentDetails[" + count + "].Amount";
                                                                        var taxpercent = "PaymentDetails[" + count + "].TaxablePercentage";
                                                                        var taxvalue = "PaymentDetails[" + count + "].TaxValue";
                                                                        var gstin = "PaymentDetails[" + count + "].GSTIN";
                                                                        var taxEligible = "PaymentDetails[" + count + "].IsTaxEligible";
                                                                        count++;
                                                                        <tr id="trdetails" class="p-b-sm">
                                                                            <td>
                                                                                @Html.TextBox(@invoicenumber, item.InvoiceNumber, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@invoicenumber)
                                                                                @Html.Hidden("PaymentDetails.Index", @count)
                                                                                @Html.TextBox(@detailId, item.AdhocDetailId, new { @class = "form-control dis-none" })
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@invoicedate, item.InvDate, new { @class = "form-control required", @id = "InvDate", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@invoicedate)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextArea(@description, item.Description, new { @class = "form-control" })
                                                                                @Html.ValidationMessage(@description)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@amount, item.Amount, new { @class = "form-control required" })
                                                                                @Html.ValidationMessage(@amount)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@taxpercent, item.TaxablePercentage, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)" })
                                                                                @Html.ValidationMessage(@taxpercent)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@taxvalue, item.TaxValue, new { @class = "form-control", @readonly = true, @id = "InternToDate", @autocomplete = "off" })
                                                                                @Html.ValidationMessage(@taxvalue)
                                                                            </td>
                                                                            <td>
                                                                                @Html.TextBox(@gstin, item.GSTIN, new { @class = "form-control", @onchange = "calculateamount()" })
                                                                                @Html.ValidationMessage(@gstin)
                                                                            </td>
                                                                            <td>
                                                                                @Html.CheckBox(@taxEligible, item.IsTaxEligible)
                                                                                @Html.ValidationMessage(@taxEligible)
                                                                            </td>
                                                                            <td>
                                                                                <a href="javascript:void(0)" class="btn-circle dis-none removeStudent"><i class="ion-trash-a"></i></a>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <tr>

                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].InvoiceNumber", "", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].InvoiceNumber")
                                                                            @Html.Hidden("PaymentDetails.Index", 0)
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].InvDate", "", new { @class = "form-control required", @id = "invdate", @autocomplete = "off" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].InvDate")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextArea("PaymentDetails[0].Description", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].Description")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].Amount", "", new { @class = "form-control required" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].Amount")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].TaxablePercentage", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].TaxablePercentage")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].TaxValue", "", new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = true })
                                                                            @Html.ValidationMessage("PaymentDetails[0].TaxValue")
                                                                        </td>
                                                                        <td>
                                                                            @Html.TextBox("PaymentDetails[0].GSTIN", "", new { @class = "form-control" })
                                                                            @Html.ValidationMessage("PaymentDetails[0].GSTIN")
                                                                        </td>
                                                                        <td>
                                                                            @Html.CheckBox("PaymentDetails[0].IsTaxEligible")
                                                                            @Html.ValidationMessage("PaymentDetails[0].IsTaxEligible")
                                                                        </td>
                                                                        <td>
                                                                            <a href="javascript:void(0)" class="btn-circle dis-none removeDetail"><i class="ion-trash-a"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>

                                                    </div>

                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remark, new { @class = "form-control", @id = "txtRemarks" })
                                                    @Html.ValidationMessageFor(m => m.Remark)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Mode of Payment</label>
                                                    @Html.DropDownListFor(m => m.PaymentMode, new SelectList(ViewBag.PaymentMode, "id", "name"), "Select any", new { @class = "form-control required", @id = "txtpaymentmode" })
                                                    @Html.ValidationMessageFor(m => m.PaymentMode)
                                                </div>
                                            </div>                                            
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Description</label>
                                                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.Description)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row" id="bankdetails">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank Name</label>
                                                    @Html.TextBoxFor(m => m.BankName, new { @class = "form-control", @id = "txtBankname" })
                                                    @Html.ValidationMessageFor(m => m.BankName)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Branch</label>
                                                    @Html.TextBoxFor(m => m.BranchName, new { @class = "form-control", @id = "txtBranchname" })
                                                    @Html.ValidationMessageFor(m => m.BranchName)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Account Number</label>
                                                    @Html.TextBoxFor(m => m.AccountNumber, new { @class = "form-control", @id = "txtAccountnumber" })
                                                    @Html.ValidationMessageFor(m => m.AccountNumber)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">IFSC</label>
                                                    @Html.TextBoxFor(m => m.IFSCCode, new { @class = "form-control", @id = "txtIFSC" })
                                                    @Html.ValidationMessageFor(m => m.IFSCCode)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Eligible Tax Amount</label>
                                                    @Html.TextBoxFor(m => m.EligibleTaxValue, new { @class = "form-control", @id = "txtEligibleTaxValue" })
                                                    @Html.ValidationMessageFor(m => m.EligibleTaxValue)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Total Tax Amount</label>
                                                    @Html.TextBoxFor(m => m.TotalTaxValue, new { @class = "form-control", @id = "txtTotalTaxValue" })
                                                    @Html.ValidationMessageFor(m => m.TotalTaxValue)
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Total Payment Amount</label>
                                                    @Html.TextBoxFor(m => m.TotalAdhocPayValue, new { @class = "form-control", @id = "txtAdhocPayValue" })
                                                    @Html.ValidationMessageFor(m => m.TotalAdhocPayValue)

                                                </div>
                                            </div>
                                            <div class="col-md-3 pull-right">
                                                <div class="reg-no custom-reg-no">
                                                    <div class="form-group custom-form-group">
                                                        <label>Net Payable Amount</label>
                                                        @Html.TextBoxFor(m => m.NetPayableValue, new { @class = "form-control", @id = "txtNetPayableValue", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <p> * Commitment shall be booked for an amount <label style="color:black; font-weight: bold" id="lblcommitamt"></label> (Net Payable Amount - Eligible Tax Amount) </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("AdhocPaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "") {
        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $('#btnAddPO').hide();
        $('#btnAddPayment').hide();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('#btnAddExpense').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();
    }
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
   // $('#TravelToDate, #TravelFromDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('input[name$=".InvDate"]').datepicker({maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
            CalculateDeductionTotal();
            GetTransactionDetails();
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        $('select[name="PaymentMode"]').val(@Model.PaymentMode);
        $('select[name="PaymentType"]').val(@Model.PaymentType);
        $('#txtpaymentmode').each(function () {
            var paymentmode = $(this).val();
            if(paymentmode == "" || paymentmode == "Select any")
            {
                $('#bankdetails').hide();
            }
            if(paymentmode == 1)
            {
                $('#bankdetails').hide();
            }
            if(paymentmode == 2)
            {
                $('#bankdetails').show();
            }
        });
        $(document).on('change', 'select[name="CategoryId"]', function () {
            categoryChange($(this));
            var category = $(this).val();
            var type = "";
            if(category == 1)
            {
                type = "PI";
            }
            if(category == 2)
            {
                type = "Student";
            }
            if(category == 3)
            {
                type = "Others";
            }
            $("input[name='CreditorType']").val(type);
        });
        $('#tbodyPaymentBU').find('select[name="CategoryId"]').each(function () {
            categoryChange($(this),'U');
            var category = $(this).val();
            var type = "";
            if(category == 1)
            {
                type = "PI";
            }
            if(category == 2)
            {
                type = "Student";
            }
            if(category == 3)
            {
                type = "Others";
            }
            $("input[name='CreditorType']").val(type);
        });

        var paymentDetails = @Html.Raw(Json.Encode(Model.PaymentDetails));
        $.each(paymentDetails, function (i, result) {
            if (i == 0) {
                var trEle = $('#tbodyPO tr:nth-child(2)');
                $('#tbodyPO tr').not(':first,:nth-child(2)').remove();
                $(trEle).find("input[name='PaymentDetails.Index']").val(i);
                //trEle.find("input[name='PaymentDetails.Index']");
                //trEle.find('select[name$=".CategoryId"]');
              //  paymentCategoryChange(trEle);
              ////  trEle.find('select[name$=".Department"]').val(result.Department);
              //  trEle.find('input[name$=".autoComplete"]').val(result.Name);
              //  trEle.find('input[name$=".Name"]').val(result.Name);
              //  if(result.Name != "")
              //  {
              //      trEle.find('input[name$=".UserId"]').val("0");
              //  }

                trEle.find('input[name$=".AdhocDetailId"]').val(result.AdhocDetailId);
                trEle.find('input[name$=".InvoiceNumber"]').val(result.InvoiceNumber);
                trEle.find('input[name$=".InvDate"]').val(result.InvDate);
                trEle.find('input[name$=".Description"]').val(result.Description);

                trEle.find('input[name$=".Amount"]').val(result.Amount);
                trEle.find('input[name$=".TaxablePercentage"]').val(result.TaxablePercentage);
                trEle.find('input[name$=".TaxValue"]').val(result.TaxValue);
                trEle.find('input[name$=".GSTIN"]').val(result.GSTIN);
                if (result.IsTaxEligible == true)
                {
                    trEle.find('input[name$=".IsTaxEligible"]').attr('checked', true);
                }
                if (result.IsTaxEligible == false)
                {
                    trEle.find('input[name$=".IsTaxEligible"]').attr('checked', false);
                }

            } else {
                var trEle = $('#tbodyPO tr:nth-child(2)').clone();
                $(trEle).find('a.dis-none').removeClass('dis-none');
                $(trEle).find("input[name='PaymentDetails.Index']").val(i);
                $(trEle).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                    //$(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    //$(this).attr("code", $(this).attr("id").replace(/\d+/, i));
                });
                $(trEle).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                });
              //  trEle.find("input[name='PaymentDetails.Index']");
              //  DepartmentChange(trEle);
              ////  trEle.find('select[name$=".Department"]').val(result.Department);
              //  trEle.find('input[name$=".autoComplete"]').val(result.Name);
              //  trEle.find('input[name$=".Name"]').val(result.Name);
              //  if(result.Name != "")
              //  {
              //      trEle.find('input[name$=".UserId"]').val("0");
              //  }
                trEle.find('input[name$=".AdhocDetailId"]').val(result.AdhocDetailId);
                trEle.find('input[name$=".InvoiceNumber"]').val(result.InvoiceNumber);
                trEle.find('input[name$=".InvDate"]').val(result.InvDate);
                trEle.find('input[name$=".Description"]').val(result.Description);

                trEle.find('input[name$=".Amount"]').val(result.Amount);
                trEle.find('input[name$=".TaxablePercentage"]').val(result.TaxablePercentage);
                trEle.find('input[name$=".TaxValue"]').val(result.TaxValue);
                trEle.find('input[name$=".GSTIN"]').val(result.GSTIN);
                if (result.IsTaxEligible == true)
                {
                    trEle.find('input[name$=".IsTaxEligible"]').attr('checked', true);
                }
                if (result.IsTaxEligible == false)
                {
                    trEle.find('input[name$=".IsTaxEligible"]').attr('checked', false);
                }

                $('#tbodyPO').append(trEle);
            }
        });
       // calcDateDiff();
        var piname = $('input[name="Name"]').val();
        $('#lblVendorName').html(piname);
       // $('#lblVendorName').html($('#txtPI option:selected').text());
        //var stipendAmt = parseFloat($('#txtTotalStipendValue').val());
        //$("#CreditorAmount").val(stipendAmt);
        CalculatePaymentValue();
        calculateeligibletaxamount();
        CalculateDeductionTotal();
        $('#NeedUpdateTransDetail').val('false');
    });

    //$('#fromdate, #todate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-10:+30' });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    function formSave(){
        var isValid = $('#formSI').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }

        //var totalstipend = $("#txtTotalStipendValue").val();
        //if (totalstipend > 6500 || total < 6500) {
        //    var doctypevalues = [];
        //    $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        //    doctypevalues.sort();
        //    var count = 0;
        //    for (var k = 1; k < doctypevalues.length; ++k) {
        //        if (doctypevalues[k] == 16) {
        //            count = 1;
        //        }
        //    }
        //    if (count == 0) {
        //        $('#MsgValidation').html("Email request of PI is mandatory attachment since the total stipend value is different from the fixed level..");
        //        $('#ValidationModal').modal('toggle');
        //        return false;
        //    }
        //    else
        //    {
        //        isValid = true;
        //    }
        //}
        if (isValid)
            $('#formSI').submit();
    }
    function aplyAutoComplete(ele, url, setId) {
        $(ele).autocomplete({
            select: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
                //$(ele).closest('tr').find(".lblSelId").text(ui.item.label);
                if (setId == true) {
                    $(ele).closest('tr').find("input[name='UserId']").val(ui.item.value);
                    $(ele).closest('tr').find("input[name='Name']").val(ui.item.label);
                } else {
                    $(ele).closest('tr').find("input[name='UserId']").val('0');
                    $(ele).closest('tr').find("input[name='Name']").val(ui.item.label);
                }
            },
            focus: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
            },
            source: function (request, response) {
                $.getJSON(url, { term: request.term },
                 function (locationdata) {
                     response(locationdata);
                 });
            },
            minLength: 3
        });
    }
    function categoryChange(el, mode) {
        var selCat = $(el).val();
        if (mode != 'U') {
            $(el).closest('tr').find("input[name='UserId'],input[name='Name']").val('');
            //$(el).closest('tr').find("input[name='autoComplete'],input[name='UserId'],input[name='Name']").val('');
        }
        if (selCat == 1) {
            $(el).closest('tr').find("input[name='UserId']").addClass('required');
            var ele = $(el).closest('tr').find("input[name='Name']");
            $(ele).addClass('required');
            //$(el).closest('tr').find("input[name='Name']").removeClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadPIList", true)
        } else if (selCat == 2) {
            $(el).closest('tr').find("input[name='UserId']").addClass('required');
            var ele = $(el).closest('tr').find("input[name='Name']");
            $(ele).addClass('required');
            // $(el).closest('tr').find("input[name='Name']").removeClass('required');
            aplyAutoComplete(ele, "../CoreAccounts/LoadStudentList", false);
        } else if (selCat == 3) {
            //   $(el).closest('tr').find("input[name='UserId']").addClass('required');
            //   var ele = $(el).closest('tr').find("input[name='Name']");
            //   $(ele).addClass('required');
            ////   $(el).closest('tr').find("input[name='Name']").removeClass('required');
            //   applyAutoComplete(ele, "../CoreAccounts/LoadClearanceAgentList", true)

        }
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    $('#StipendValueperMonth, #TotalStipendValue, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });

    $(document).on('change', 'input[name$=".Amount"]', function () {
        calculateamount();
        calculateeligibletaxamount();
    });

    $(document).on('change', 'input[name$=".TaxablePercentage"]', function () {
        var value = $(this).val();
        if(value > 100)
        {
            $('#MsgValidation').html("Percentage value cannot be greater than 100. Please enter a value less than 100");
            $('#ValidationModal').modal('toggle');
            return false;
        }

        calculateamount();
        calculateeligibletaxamount();
    });

    $(document).on('change', 'input[name$=".TaxValue"]', function () {
        calculateamount();
        calculateeligibletaxamount();
    });
    $(document).on('click', 'a.removeDetail', function () {
        $(this).closest('tr').remove();
        calculateamount();
        calculateeligibletaxamount();
    });

    $('#txtpaymenttype').change(function () {
        $('#NeedUpdateTransDetail').val('true');
        var PaymentType = $(this).val();
        $.getJSON("@Url.Action("GetTransactionTypecode", "CoreAccounts")", { Paymenttype: PaymentType },
                    function (locationdata) {
                        $.each(locationdata, function (index, itemData) {
                            $('#transtypecode').val(itemData.name)
                        });
                    });
    });
    $('#txtpaymentmode').change(function () {
        var paymentmode = $(this).val();
        if(paymentmode == "" || paymentmode == "Select any")
        {
            $('#bankdetails').hide();
        }
        if(paymentmode == 1)
        {
            $('#bankdetails').hide();
            $("input[name='BankName']").removeClass('required')
            $("input[name='BranchName']").removeClass('required')
            $("input[name='AccountNumber']").removeClass('required')
            $("input[name='IFSCCode']").removeClass('required')
        }
        if(paymentmode == 2)
        {
            $('#bankdetails').show();
            $("input[name='BankName']").addClass('required')
            $("input[name='BranchName']").addClass('required')
            $("input[name='AccountNumber']").addClass('required')
            $("input[name='IFSCCode']").addClass('required')
        }
    });

    $('#btnAddPayment').click(function () {
        var cln = $('#tbodyPO tr:nth-child(2)').clone().find("select,input").val("").end();
       // $(cln).find('.tdAdvAmt, .tdTaxAmt, .tdNetAmt, .tdTaxCode').text('');
        $(cln).find('a.dis-none').removeClass('dis-none');
        var index = $('#tbodyPO tr:last').find("input[name='PaymentDetails.Index']").val();
        index = parseInt(index) + 1;
        $(cln).find("input[name='PaymentDetails.Index']").val(index);
        $(cln).find("input, select").each(function () {
            $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
           // $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
           // $(this).attr("code", $(this).attr("id").replace(/\d+/, index));
        });
        $(cln).find("span[data-valmsg-for]").each(function () {
            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
        });
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true
        })

        $('#tbodyPO').append(cln);

    });
    function calculateamount() {
        var totalamount = 0;
        var totaltax = 0;
        var eligibletaxtotal = 0;
        var netpayabletotal = 0;
        $('#tbodyPO tr').each(function (idx, val) {
            var amount = parseFloat($(this).closest('tr').find('input[name$=".Amount"]').val());
            var taxpercent = parseFloat($(this).closest('tr').find('input[name$=".TaxablePercentage"]').val());
            var taxvalue = parseFloat($(this).closest('tr').find('input[name$=".TaxValue"]').val());
            var taxamount = parseFloat((amount * taxpercent)/100);

            if (!isNaN(taxamount)) {
                $(this).find('input[name$=".TaxValue"]').val(taxamount);
                totaltax += taxamount;
            }
            if (!isNaN(amount)) {
                totalamount += amount;
            }
        });
        netpayabletotal = totalamount + totaltax;
        if (!isNaN(netpayabletotal)) {
            $("#txtNetPayableValue").val(netpayabletotal.toFixed(0));
           // $("#CreditorAmount").val(netpayabletotal.toFixed(0));
        }
        if (!isNaN(totaltax)) {
            $("#txtTotalTaxValue").val(totaltax.toFixed(0));
        }
        if (!isNaN(totalamount)) {
            $("#txtAdhocPayValue").val(totalamount.toFixed(0));
        }
    }

    $(document).on('click', 'input[name$=".IsTaxEligible"]', function () {
        calculateeligibletaxamount();
        if ($(this).checked)
        {
            var gstin = $(this).closest('tr').find('input[name$=".GSTIN"]');
            $(gstin).addClass('required');
        }
        else
        {
            var gstin = $(this).closest('tr').find('input[name$=".GSTIN"]');
            $(gstin).removeClass('required');
        }

    });

    function calculateeligibletaxamount() {
        var eligibletaxtotal = 0;
        $('#tbodyPO input[name$=".IsTaxEligible"]:checked').each(function (idx, val) {

               // var taxeligible = $('#tbodyPO input[name$=".IsTaxEligible"]:checked');
                var taxeligiblevalue = parseFloat($(this).closest('tr').find('input[name$=".TaxValue"]').val());
                if (!isNaN(taxeligiblevalue)) {
                    eligibletaxtotal += taxeligiblevalue;
                }

        });
        if (!isNaN(eligibletaxtotal)) {
            $("#txtEligibleTaxValue").val(eligibletaxtotal.toFixed(0));
            var netpayamt = parseFloat($('#txtNetPayableValue').val());
            var commitamt = netpayamt - eligibletaxtotal;
            $('#lblcommitamt').html(commitamt);
        }
    }
    //function applyAutoComplete(ele, url, setId) {
    //    $(ele).autocomplete({
    //        select: function (event, ui) {
    //            event.preventDefault();
    //            $(ele).val(ui.item.label);
    //            //$(ele).closest('tr').find(".lblSelId").text(ui.item.label);
    //            if (setId == true) {
    //                $(ele).closest('tr').find("input[name$='.StudentRollNo']").val(ui.item.value);
    //                $(ele).closest('tr').find("input[name$='.StudentName']").val(ui.item.label);
    //            } else {
    //                $(ele).closest('tr').find("input[name$='.StudentRollNo']").val('0');
    //                $(ele).closest('tr').find("input[name$='.StudentName']").val(ui.item.label);
    //            }
    //        },
    //        focus: function (event, ui) {
    //            event.preventDefault();
    //            $(ele).val(ui.item.label);
    //        },
    //        source: function (request, response) {
    //            $.getJSON(url, { term: request.term },
    //             function (locationdata) {
    //                 response(locationdata);
    //             });
    //        },
    //        minLength: 3
    //    });
    //}

    @*$('#tbody').find('input[name$=".autoComplete"]').each(function () {
        DepartmentChange($(this),'U');
    });
    $(document).on('change', 'input[name$=".autoComplete"]', function () {
        var name = $(this).val();
        var user = $(this).closest('tr').find("input[name$='.UserId']");
        var userid = $(this).closest('tr').find("input[name$='.UserId']").val();
        var rollno = $(this).closest('tr').find("input[name$='.StudentRollNo']");
        var course = $(this).closest('tr').find('input[name$=".StudentCourse"]');
        var roll = rollno.val();
        if(userid != "")
        {
        $.getJSON("@Url.Action("LoadStudentDetails", "CoreAccounts")", { RollNo: name },
                    function (locationdata) {
                            // $(select).selectpicker("destroy");
                            $.each(locationdata, function (index, itemData) {
                                rollno.val(itemData.code);
                                course.val(itemData.name);
                                if(itemData.code == "")
                                {
                                    user.val('');
                                    $(this).val('');
                                    $('#MsgValidation').html("Student Name does not exist. Please select a valid name");
                                    $('#ValidationModal').modal('toggle');
                                    return false;
                                }
                            });

                    });
        }
        else if (userid == "")
        {
            rollno.val('');
            course.val('');
            $(this).val('');
            $('#MsgValidation').html("Student Name does not exist. Please select a valid name");
            $('#ValidationModal').modal('toggle');
            return false;
        }
    });*@

    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "SMI","tSubCode" : "1"},
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                $(cln).find('#lblTransType').text(item.TransactionType);
                $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    function GetTransactionDetails() {
        var interstate_f = false;
        var typecode = $('#transtypecode').val();
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": typecode, "tSubCode" : "1", },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                //var amt = 0;
                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                //    var parseVal = parseFloat($(elePayment).val());
                //    if (!isNaN(parseVal))
                //        amt = amt + parseVal;
                //});
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    $(trEle).find('input').val('');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    amtEle.removeClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                    amtEle.removeClass('required');
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            var Name =  $("input[name='Name']").val();
            // $("#CreditorAmount").val(StipendAmt);
            $('#lblVendorName').html(Name);
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    //}
    }

    $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            $('#nextBtn').hide();
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        //if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    var selectPickerApiElement = function (el, choice, options, select) {
        $(el).find('select').selectpicker({
            liveSearch: true
        });
        $(el).children().eq(2).siblings().remove();
        if (choice == "add") {
            $(el).find('.selectpicker').append("<option>" + options + "</option>");
        } else if (choice == "all" && select != '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
            $(el).find('.selectpicker option[value=' + select + ']').attr('selected', 'selected');
        } else if (choice == "all" && select == '') {
            $(el).find('.selectpicker').children().remove();
            for (var i = 0 ; i < options.length ; i++) {
                $(el).find('.selectpicker').append("<option value=" + options[i].id + ">" + options[i].name + "</option>");
            }
        } else if (choice == "empty") {
            $(el).find('.selectpicker').children().remove();
            $(el).find('.selectpicker').append("<option value=''>Select any</option>");
        } else {
            var selectOptionsLength = $(el).find('.selectpicker').children().length;
            for (var i = 1 ; i <= selectOptionsLength ; i++) {
                if (options == $(el).find('.selectpicker').children().eq(i).val()) {
                    $(el).find('.selectpicker').children().eq(i).remove();
                    break;
                } else {
                    continue;
                }

            }

        }
        $(el).find('select').selectpicker('refresh');
        return $(el).children().first().unwrap();

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
