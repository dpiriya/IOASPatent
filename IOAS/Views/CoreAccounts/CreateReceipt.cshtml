@model IOAS.Models.CreateReceiptModel
@{
    ViewBag.Title = "Create Receipt";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
        background: #fff;
        float: left;
    }

    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #fff;
        }

    .custom-nav-pills.nav-pills > li > a {
        color: rgba(255,255,255,0.5);
        cursor: default;
        background: transparent !important;
        border-color: transparent;
        border-top-color: transparent;
        padding: 10px 15px;
        margin: 0px 15px;
    }

        .custom-nav-pills.nav-pills > li > a span {
            width: 100%;
            float: left;
        }

    .custom-nav-pills.nav-pills > li.active > a, .custom-nav-pills.nav-pills > li.active > a:focus, .custom-nav-pills.nav-pills > li.active > a:hover {
        color: #333333;
        background-color: #fff !important;
    }

    .custom-st-fd-box {
        background: #f5f5f5;
        padding: 15px 0px;
        border-radius: 4px;
        display: inline-block;
    }

    .custom-st-fd-btn {
        color: #fff;
        font-size: 16px;
        margin-top: 15px;
        display: inline-block;
    }

    .custom-st-tb-th.table {
        border: 0px;
    }

        .custom-st-tb-th.table > tbody > tr > th {
            background: #3080e3;
            color: #fff;
            border: 0px solid #ccc;
        }

        .custom-st-tb-th.table > tbody > tr > td {
            border: 0px;
        }
</style>
<div class="row hd-tt-bg">
    <div class="col-md-4">
        <h3>Create Receipt</h3>
    </div>
    @*<div class="col-md-4">
            <div class="search-btn">
                <input type="text" value="" placeholder="Search" class="form-control">
                <a href="#" id="btnsearch" class="btn"> <i class="ion-search"></i></a>
            </div>

        </div>
    <div id="addnewpage" class="col-md-8 flt-nav-links">

        <a href="Javascript:void(0)" id="btnFilter" class="pull-right"> <i class="ion-android-funnel"></i>Filters</a>
        <a href="#" id="btnaddnew" data-toggle="modal" data-target="#AddNewEntryModel"> <i class="ion-plus"></i>Add New</a>

    </div>*@
</div>
<div class="row">
    @using (Html.BeginForm("CreateReceipt", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formPO", enctype = "multipart/form-data" }))

    {
        <div class="col-md-12 mt30">

            <div class="page-wrapper" id="createreceipt">

                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Allocation and Entries</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Mode of Receipt</a></li>
                </ul>
                
            </div>

            <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                    <div class="row m-b-sm">
                        <div class="col-md-4">
                            <div class="reg-no bg-blue">
                                <div class="form-group custom-form-group">
                                    <label>Receipt Date</label>
                                    <h4>@Html.TextBoxFor(m => m.ReceiptDateString, new { @class = "form-control", @id = "Receiptdate", @readonly = "true" })</h4>
                                    @*@Html.Hidden("ReceiptDate")*@
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4" id="Proposalidfield">

                        </div>
                        <div class="col-md-4" id="Projectidfield">
                            <div class="reg-no">
                                <div class="form-group custom-form-group">
                                    <label>Receipt Number</label>
                                    <h4>
                                        @Html.TextBoxFor(m => m.ReceiptNumber, new { @class = "form-control", @id = "Receiptnumber" })
                                        @Html.ValidationMessageFor(m => m.ReceiptNumber)
                                        @Html.Hidden("ReceiptID")
                                    </h4>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-12">
                            <div class="bl-lg-panel-box pb-null">
                                <div class="cmn-panel-box">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">

                                                <label>Project Type</label>
                                                <h4>
                                                    @Html.TextBoxFor(m => m.ProjectTypeName, new { @class = "form-control", @id = "txtprojecttype", @readonly = true })
                                                    @Html.HiddenFor(m => m.ProjectType)
                                                    @*@Html.DropDownListFor(m => m.ProjectType, new SelectList(ViewBag.projecttype, "CodeValAbbr", "CodeValDetail"), "Select Project Type",
                                                new { @class = "form-control", @id = "selecttypeofproject", @disabled = "disabled" })*@
                                                </h4>

                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Project Number</label>
                                                <h4>@Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control", @id = "txtprojectnumber", @readonly = true })</h4>
                                                @Html.Hidden("ProjectID")
                                            </div>
                                        </div>
                                        <div class="col-md-6">

                                            <div class="form-group custom-form-group">
                                                <label>Title</label>
                                                <h4 class="sb-dts">@Html.DisplayFor(m => m.Projecttitle, new { @class = "form-control", @id = "prjcttitle", @readonly = true })</h4>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-3">

                                            <div class="form-group custom-form-group">
                                                <label>PI Name</label>
                                                <h4 class="sb-dts">@Html.DisplayFor(m => m.NameofPI, new { @class = "form-control", @id = "txtPIname", @readonly = true })</h4>
                                                @Html.Hidden("PIId")
                                                @Html.Hidden("NameofPI")
                                            </div>
                                        </div>
                                        <div class="col-md-3">

                                            <div class="form-group custom-form-group">
                                                <label>Sanctioned Value</label>
                                                <h4 class="sb-dts">@Html.DisplayFor(m => m.SanctionedValue, new { @class = "form-control", @id = "txtsanctionvalue", @readonly = true })</h4>
                                            </div>
                                            
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Total Received</label>
                                                <h4 class="sb-dts">@Html.DisplayFor(m => m.TotalReceivedValue, new { @class = "form-control", @id = "txttotalreceipt", @readonly = true })</h4>
                                            </div>

                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Total Credit Note Amount</label>
                                                <h4 class="sb-dts">@Html.DisplayFor(m => m.TotalCreditNoteAmount, new { @class = "form-control", @id = "txttotalreceipt", @readonly = true })</h4>
                                            </div>

                                        </div>
                                        @if(Model.ProjectType == 1)
                                        { 
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Project Type</label>
                                                    <h4 class="sb-dts">@Html.DisplayFor(m => m.ProjectCategory, new { @class = "form-control", @id = "txttotalreceipt", @readonly = true })</h4>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                            </div>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-md-5">
                            <div class="form-group custom-form-group ">
                                <label class="required">Invoice No</label>
                                @Html.TextBoxFor(m => m.InvoiceNumber, new { @class = "form-control", @id = "txtinvoicenumber", @readonly = true })
                                @*@Html.DropDownListFor(m => m.InvoiceNumber, new SelectList(ViewBag.invoice, "id", "name"), "Select Invoice",
                            new { @class = "form-control", @id = "selectinvoicenumber" })*@
                                @Html.Hidden("InvoiceId")
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group ">
                                        <label>Invoice Date</label>
                                        <h4 class="sb-dts">@Html.TextBoxFor(m => m.Invoicedatestrng, new { @class = "form-control", @id = "txtinvoicedate", @readonly = true })</h4>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group ">
                                        <label>Invoice Val. (incl. of Tax)</label>
                                        <h4 class="sb-dts">@Html.TextBoxFor(m => m.InvoiceValue, new { @class = "form-control", @id = "txtinvoicevalue", @readonly = true })</h4>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group ">
                                        <label>Previous Receipts Total for this Invoice</label>
                                        @Html.TextBoxFor(m => m.PreviousReceiptTotal, new { @class = "form-control", @id = "txtinvoicedetails", @readonly = true })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group custom-form-group ">
                                        <label>Pending Amount in this Invoice</label>
                                        @Html.TextBoxFor(m => m.BalanceinCurrentInvoice, new { @class = "form-control", @id = "txtbalanceininvoice", @readonly = true })
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group custom-form-group ">
                                        <label>Description</label>
                                        @Html.TextAreaFor(m => m.InvoiceDetails, new { @class = "form-control", @rows = "4", @id = "txtinvoicedetails", @readonly = true })
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="col-md-3">
                            <div class="tx-dts">
                                <h3 class="mt-null">Invoice Details</h3>
                                <div class="row">
                                    <label class="col-md-4">Taxable Value</label>
                                    <h4 class="sb-dts col-md-6">@Html.TextBoxFor(m => m.InvoiceValueWithoutTax, new { @class = "form-control", @id = "txtinvvaluewithouttax", @readonly = true })</h4>

                                </div>
                                <div class="row">
                                    <label class="col-md-4">CGST :</label>
                                    <h4 class="sb-dts col-md-6">@Html.TextBoxFor(m => m.CGSTAmount, new { @class = "form-control", @id = "txtcgstamount", @readonly = true })</h4>

                                </div>
                                <div class="row">
                                    <label class="col-md-4">SGST :</label>
                                    <h4 class="sb-dts col-md-6">@Html.TextBoxFor(m => m.SGSTAmount, new { @class = "form-control", @id = "txtsgstamount", @readonly = true }) </h4>

                                </div>
                                <div class="row">
                                    <label class="col-md-4">IGST :</label>
                                    <h4 class="sb-dts col-md-6">@Html.TextBoxFor(m => m.IGSTAmount, new { @class = "form-control", @id = "txtigstamount", @readonly = true }) </h4>

                                </div>
                                <div class="row dts-bm">
                                    <label class="col-md-4">Total Tax :</label>
                                    <h4 class="sb-dts col-md-6">@Html.TextBoxFor(m => m.TotalTaxAmount, new { @class = "form-control", @id = "txttotaltaxamount", @readonly = true }) </h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h3>Receipt History</h3>

                            <div class="m-b-sm">
                                <div class="rec-tb-scrl">
                                    <table class="table alter-table">
                                        <thead>
                                            <tr>
                                                <th>Receipt No</th>
                                                <th>Date</th>
                                                <th>Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                            if (Model.PreviousReceiptId != null)
                                            {
                                                for (int i = 0; i < Model.PreviousReceiptNumber.Count(); i++)
                                                {
                                                        <tr>
                                                            <td>@Html.DisplayFor(m => m.PreviousReceiptNumber[i], new { @class = "form-control", @id = "txtPreviousReceiptnumber", @readonly = true })</td>
                                                            <td>@Html.DisplayFor(m => m.PreviousReceiptDate[i], new { @class = "form-control", @id = "txtPreviousReceiptdate", @readonly = true })</td>
                                                            <td>@Html.DisplayFor(m => m.PreviousReceiptvalue[i], new { @class = "form-control", @align = "right", @id = "txtPreviousReceiptvalue", @readonly = true })</td>
                                                        </tr>
                                                }
                                            }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">

                                </div>
                                <div class="col-md-6">

                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
            <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="reg-no bg-blue">
                                <div class="form-group custom-form-group">
                                    <label class="required">Receipt Amount </label>
                                    @Html.TextBoxFor(m => m.ReceiptAmount, new { @class = "form-control", @id = "txtreceiptamount", @onkeypress = "return isNumberKey(event)", @autocomplete = "off" })
                                    @Html.HiddenFor(m => m.TotalPrevReceiptVal, new { @id = "txtTotalPrevReceiptValue" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                                @*<h3>Receivables (Dr)</h3>*@
                            <div class="">
                                <div class="">
                                    <table class="table alter-table mb-lg" id="divAgencyshareContent">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <label>Agency</label>
                                                </th>
                                                <th>
                                                    <label>Amount</label>
                                                </th>
                                                <th>
                                                </th>
                                            </tr>
                                        </thead>

                                        <tbody class="m-b-sm">
                                            @if (Model.AgencyId != null)
                                            {
                                                for (int i = 0; i < Model.AgencyId.Count(); i++)
                                                {
                                                    <tr id="primaryAgencyshareDiv">
                                                        <td class="col-md-6">
                                                            @Html.TextBoxFor(m => m.Agencyname[i], new { @class = "form-control", @id = "txtagencyname", @readonly = "true" })
                                                            @Html.HiddenFor(m => m.AgencyId[i])
                                                        </td>
                                                        <td class="col-md-6">
                                                            @Html.TextBoxFor(m => m.AgencyShareAmount[i], new { @class = "form-control agencyamt", @id = "txtagencyamount", @onkeypress = "return isNumberKey(event)" })
                                                            @Html.ValidationMessageFor(m => m.AgencyShareAmount[i])
                                                        </td>
                                                        <td>
                                                            <label></label>
                                                            <div class="col-md-1">
                                                                <button class="dis-none" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                            </div>
                                                            @*<button type="button" id="btnAddReceivables" class="btn-circle mt-ys dis-block"><i class="ion-plus"></i></button>
                                        <a href="#" class="btn-circle mt-xs"><i class="ion-plus"></i></a>*@
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div> 
                        </div>
                        @*<div class="col-md-7">
                            <div class="gray-bg br-rd">
                                
                                <div class="col-md-11" id="divAllocateContent">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <label class="required">Allocation Head</label>
                                        </div>
                                        <div class="col-md-5">
                                            <label class="required">Amount</label>
                                        </div>
                                    </div>
       
                                    <div class="row mb20" id="primaryAllocateDiv">
                                        <div class="col-md-5">
                                            @Html.DropDownListFor(m => m.BudgetHead, new SelectList(ViewBag.budgethead, "id", "name"), "Select Budget Head",
                                            new { @class = "form-control", @required = "required", @id = "selectbudgethead", @onchange = "allocationheadValidation()" })
                                            @Html.Hidden("AllocationId")
                                            @Html.ValidationMessageFor(m => m.BudgetHead)
                                        </div>
                                        <div class="col-md-5">
                                            @Html.TextBoxFor(m => m.Allocationvalue, new { @class = "form-control allocamt", @required = "required", @id = "txtallocationamount", @onkeypress = "return isNumberKey(event)" })
                                            @Html.ValidationMessageFor(m => m.Allocationvalue)
                                        </div>
                                        @Html.Hidden("AllocationTotal")
                                        <div class="col-md-1">
                                            <button class="dis-none" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                        </div>
                                    </div>
                        
                                </div>
                                <div class="col-md-1">
                                    <label></label>
                                    <button type="button" id="btnAddAllocationhead" class="btn-circle mt-xs"><i class="ion-plus"></i></button>
                                    @*<a href="#" class="btn-circle mt-xs"><i class="ion-plus"></i></a>*@
                               @* </div>
            <div class="row">

            </div>
        </div>
    </div>*@
                    </div>
                    
                      <h3 ><b> Entries </b></h3> 
                    
                    <div class="br-rd">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="bl-lg-panel-box bl-lg-adj">
                                    <div class="col-md-5 mb-lg">
                                        <div class="tx-dts">
                                            <div class="row">

                                            </div>
                                            <div class="row">
                                                <label class="col-md-4 required">Received From <span class="cr">(Cr)</span></label>
                                                <div class="col-md-4">
                                                    @*@Html.DropDownListFor(m => m.ReceivedFromCr, new SelectList(ViewBag.receivedfrom, "id", "name"), "Select Agency",
                            new { @class = "form-control", @id = "selectreceivedfrom" })*@
                                                    @Html.TextBoxFor(m => m.ReceivedFromAgencyName, new { @class = "form-control", @required = "required", @id = "txtreceivedfrom", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.ReceivedFromCr)
                                                    @Html.HiddenFor(m => m.ReceivedFromCr)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(m => m.ReceivedAmountCr, new { @class = "form-control", @required = "required", @id = "txtreceivedfromamount", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.ReceivedAmountCr)
                                                </div>
                                            </div>
                                            <div class="row">
                                                <label class="col-md-4 required">Bank <span class="dr">(Dr)</span></label>
                                                <div class="col-md-4">
                                                    @Html.DropDownListFor(m => m.BankACHeadDr, new SelectList(ViewBag.bankcredithead, "id", "name"), "Select Head",
                                            new { @class = "form-control", @id = "selectCreditBank" })
                                                    @Html.ValidationMessageFor(m => m.BankACHeadDr)
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBoxFor(m => m.BankAmountDr, new { @class = "form-control", @required = "required", @id = "txtbankDramount", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.BankAmountDr)
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row mt15">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group ">
                                                    <label>Narration</label>
                                                    @Html.TextAreaFor(m => m.Narration, new { @class = "form-control", @id = "txtnarration", @rows = "4" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-7">
                                        <h3>Receivables (Dr)</h3>
                                        <div class="m-b-sm">
                                            <table class="table table-bordered" id="divReceivablesContent">
                                                <thead>
                                                    <tr>
                                                        <th>
                                                            <label class="required">Head</label>
                                                        </th>
                                                        <th>
                                                            <label class="required">Amount</label>
                                                        </th>
                                                        <th>
                                                        </th>
                                                    </tr>
                                                </thead>

                                                <tbody class="m-b-sm">
                                                    @if (Model.ReceivablesHeadId != null)
                                            {
                                            for (int i = 0; i < Model.ReceivablesHeadId.Count(); i++)
                                            {
                                                            <tr id="primaryReceivablesDiv">
                                                                <td class="col-md-6">
                                                                    @Html.TextBoxFor(m => m.Receivablesheadname[i], new { @class = "form-control", @onchange = "receivableheadValidation()", @id = "selectreceivableshead", @readonly = "true" })
                                                                    @*@Html.DropDownListFor(m => m.ReceivablesHeadId[i], new SelectList(ViewBag.receivableshead, "id", "name"), "Select Head",
                                            new { @class = "form-control", @onchange = "receivableheadValidation()", @id = "selectreceivableshead" })*@

                                                                    @Html.HiddenFor(m => m.ReceivablesHeadId[i])
                                                                </td>
                                                                <td class="col-md-6">
                                                                    @Html.TextBoxFor(m => m.ReceivablesAmount[i], new { @class = "form-control receivableamt", @required = "required", @onchange = "calculatereceivablesSum()", @onkeyup = "calculatenettotal()", @id = "txtreceivablesamount", @onkeypress = "return isNumberKey(event)" })
                                                                    @Html.ValidationMessageFor(m => m.ReceivablesAmount[i])
                                                                </td>
                                                                <td>
                                                                    <label></label>
                                                                    <div class="col-md-1">
                                                                        <button class="dis-none" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                                    </div>
                                                                    @*<button type="button" id="btnAddReceivables" class="btn-circle mt-ys dis-block"><i class="ion-plus"></i></button>
                                            <a href="#" class="btn-circle mt-xs"><i class="ion-plus"></i></a>*@
                                                                </td>
                                                            </tr>
                                            }
                                            }
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group ">
                                                    <label class="required">Receivables Total (Dr) :</label>
                                                    @Html.TextBoxFor(m => m.ReceivablesTotal, new { @class = "form-control", @required ="required", @id = "txtreceivablestotal", @onkeypress = "return isNumberKey(event)", @readonly = "true" })
                                                    @Html.ValidationMessageFor(m => m.ReceivablesTotal)
                                                </div>
                                            </div>
                                            @*<div class="col-md-6">
                    <div class="form-group custom-form-group">
                    <label>Net Total :</label>
                    @Html.TextBoxFor(m => m.NetTotal, new { @class = "form-control", @id = "txtnettotal", @onkeypress = "return isNumberKey(event)", @readonly = "true" })
                    <p class="m-b-sm hint">Total Allocation + Tax - Deduction<p>
                    </div>
                    </div>*@
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="bl-lg-panel-box bl-lg-adj">
                                    <div class="col-md-9">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group ">
                                                    <label class="required">Overheads Amount:</label>
                                                    @Html.TextBoxFor(m => m.CurrentReceiptOverheads, new { @class = "form-control", @required = "required", @id = "txtcurrentreceiptoverheads", @onchange = "calcllocbreakup()", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.CurrentReceiptOverheads)
                                                    @Html.HiddenFor(m => m.ProjectTotalValue, new { @id = "txtProjectValue" })
                                                    @Html.HiddenFor(m => m.PrevReceiptsOverheads, new { @id = "txtPrevReceiptOH" })
                                                    @Html.HiddenFor(m => m.ProjectTotalOverheadsvalue, new { @id = "txtProjecttotalOH" })
                                                    @Html.HiddenFor(m => m.TotalOverheadPercentage, new { @id = "txtOHpercenttotal" })
                                                </div>
                                            </div>
                                            @if (Model.ProjectType == 1)
                                            {
                                                <div class="col-md-6 mt-lg">
                                                    <label class="radio chkbox-adj">
                                                        @Html.RadioButton("RMForCMF", "RMF", true)
                                                        <span></span> RMF<br>
                                                    </label>
                                                    <label class="radio chkbox-adj">
                                                        @Html.RadioButton("RMForCMF", "CMF")
                                                        <span></span> CMF<br>
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                        <div class="rec-tb-scrl">
                                            <table>
                                                <thead>
                                                    <tr>
                                                        <th></th>
                                                        <th style="width:150px" class="text-center"></th>
                                                        @*<th>Sanctioned Value</th>*@
                                                    </tr>
                                                </thead>
                                                <tbody id="ProjectList">
                                                    @if (Model.ReceiptOverheads != null)
                                            {
                                                var count = 0;
                                                foreach (var item in Model.ReceiptOverheads)
                                                {
                                                    var overheadtypeid = "ReceiptOverheads[" + count + "].OverheadtypeId";
                                                    var overheadtype = "ReceiptOverheads[" + count + "].Overheadtypename";
                                                    var overheadpercent = "ReceiptOverheads[" + count + "].OverheadPercentage";
                                                    var overheadamount = "ReceiptOverheads[" + count + "].OverheadAmount";
                                                            <tr>
                                                                <td>
                                                                    <span class="tdOHtype">
                                                                        @Html.DisplayFor(m => item.Overheadtypename, new { @class = "form-control", @id = "txtPIProjectnumber", @readonly = true })
                                                                    </span>
                                                                    @Html.Hidden("ReceiptOverheads.Index", @count)
                                                                    @Html.Hidden(@overheadtypeid, item.OverheadtypeId)
                                                                    @Html.Hidden(@overheadtype, item.Overheadtypename)
                                                                    @Html.Hidden(@overheadpercent, item.OverheadPercentage)
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox(@overheadamount, item.OverheadAmount, new { @class = "form-control mb-md", @id = "txtOverheadamt", @readonly = true })
                                                                </td>

                                                            </tr>
                                                    count++;
                                                }
                                            }

                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                    <div class="col-md-3 ">
                                        <div class="tx-dts-wht bl-lg-adj">
                                            <h3 class="mt-null">Taxes:</h3>
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group ">
                                                    <label class="required">CGST :</label>
                                                    @Html.TextBoxFor(m => m.ReceiptCGST, new { @class = "form-control", @id = "txtreceiptCGST", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.ReceiptCGST)
                                                    @Html.Hidden("CGSTPercentage")
                                                </div>
                                            </div>
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group ">
                                                    <label class="required">SGST :</label>
                                                    @Html.TextBoxFor(m => m.ReceiptSGST, new { @class = "form-control", @id = "txtreceiptSGST", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.ReceiptSGST)
                                                    @Html.Hidden("SGSTPercentage")
                                                </div>
                                            </div>

                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group ">
                                                    <label class="required">IGST :</label>
                                                    @Html.TextBoxFor(m => m.ReceiptIGST, new { @class = "form-control", @id = "txtreceiptIGST", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.ReceiptIGST)
                                                    @Html.Hidden("IGSTPercentage")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="m-b-sm">

                                    </div>
                                </div>

                            </div>
                        </div>

                </div>
            </div>

            <div class="tab">
                <div class="col-md-12 col-sm-12 m-b-sm">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="reg-no bg-blue">
                                <div class="form-group custom-form-group">
                                    <label class="required">Mode of Receipt</label>
                                    @Html.DropDownListFor(m => m.ModeofReceipt, new SelectList(ViewBag.receiptmode, "CodeValAbbr", "CodeValDetail"), "Select Head",
new { @class = "form-control", @id = "selectmodeofreceipt" })
                                    @Html.ValidationMessageFor(m => m.ModeofReceipt)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="cheQue" >
                        <div class="row">
                            <div class="col-md-12">
                                <h3>Cheque</h3>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-8" >
                                <div>
                                    <div class="form-group custom-form-group scrl-table scrl-table-po-bl">
                                        <table class="table alter-table" id="divChequeContent" style="width:1000px">

                                            <thead>
                                                <tr>
                                                    <th style="width:150px">
                                                        <label class="required">Cheque Number</label>
                                                    </th>
                                                    <th style="width:200px">
                                                        <label class="required"> Cheque Date</label>
                                                    </th>
                                                    <th style="width:200px">
                                                        <label class="required">Bank Name</label>
                                                    </th>
                                                    <th style="width:200px">
                                                        <label class="required">Bank Branch</label>
                                                    </th>
                                                    <th style="width:200px">
                                                        <label> Cheque Clearance Date</label>
                                                    </th>
                                                    <th style="width:160px">
                                                        <label class="required"> Cheque Value</label>
                                                    </th>
                                                    <th>
                                                    </th>
                                                </tr>
                                            </thead>

                                            <tbody>

                                                <tr id="primaryChequeDiv">

                                                    <td>
                                                        @Html.TextBoxFor(m => m.ChequeNumber, new { @class = "form-control", @id = "txtchequenumber", @onkeypress = "return isNumberKey(event)" })
                                                        @Html.ValidationMessageFor(m => m.ChequeNumber)
                                                    </td>

                                                    <td>
                                                        @*@Html.Editor("ChequeDate", null, "ChequeDate", new { @class = "form-control che-qdt", @id = "Chqdate" })*@
                                                        @Html.TextBox("Chqdate", null, "Chqdate", new { @class = "form-control", @id = "Chqdate" })
                                                        @Html.ValidationMessageFor(m => m.Chqdate)
                                                        @Html.Hidden("ChequeDate")
                                                    </td>

                                                    <td>
                                                        @Html.TextBoxFor(m => m.ChequeBankName, new { @class = "form-control", @id = "txtchequebank" })
                                                        @Html.ValidationMessageFor(m => m.ChequeBankName)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(m => m.ChequeBankBranch, new { @class = "form-control", @id = "txtchequebankbranch" })
                                                        @Html.ValidationMessageFor(m => m.ChequeBankBranch)
                                                    </td>
                                                    <td>                                                       
                                                        @Html.TextBox("Chqclrdate", null, "Chqclrdate", new { @class = "form-control", @id = "Chqclrdate" })
                                                        @Html.ValidationMessageFor(m => m.Chqclrdate)
                                                        @Html.Hidden("ChequeClearanceDate")
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(m => m.ChequeValue, new { @class = "form-control", @id = "txtchequevalue", @onkeypress = "return isNumberKey(event)", @onkeyup = "calculatechequeSum()", @autocomplete = "off" })
                                                        @Html.ValidationMessageFor(m => m.ChequeValue)
                                                    </td>
                                                    <td>
                                                        <button class="dis-none mt5" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                        <button type="button" id="btnAddChequedtls" class="btn-circle dis-block"><i class="ion-plus"></i></button>
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="tx-dts">

                                    <div class="row">
                                        <div class="col-md-10">
                                            <h3 class="mt-null required">Net Transaction Value</h3>
                                            <h4 class="fn-s-lg" id="txttotalchequevalue"> @Html.DisplayFor(m => m.TotalChequeValue, new { @class = "form-control"@*, @id = "txttotalchequevalue"*@, @readonly = "true" })</h4>
                                            @Html.ValidationMessageFor(m => m.TotalChequeValue)
                                          @Html.Hidden("TotalChequeValue")
                                        </div>
                                    </div>

                                </div>

                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                    </div>

                    <div id="bankTrans" >
                        <div class="row">
                            <div class="col-md-12">
                                <h3>Bank Transfer Details</h3>
                            </div>
                        </div>


                        <div class="row">
                            <div class="col-md-8">

                                <div class="form-group custom-form-group scrl-table scrl-table-po-bl">
                                    <table class="table alter-table" id="divBankContent" style="width:1200px">
                                        <thead>
                                            <tr>
                                                <th style="width:160px">
                                                    <label class="required">Transaction Type:</label>
                                                </th>
                                                <th style="width:200px">
                                                    <label class="required"> Bank Name</label>
                                                </th>
                                                <th style="width:200px">
                                                    <label class="required">Bank Branch</label>
                                                </th>
                                                <th style="width:200px">
                                                    <label class="required"> Transaction Ref No:</label>
                                                </th>

                                                <th style="width:200px">
                                                    <label class="required">Transaction Date:</label>
                                                </th>
                                                <th style="width:160px">
                                                    <label class="required"> Transaction Amount:</label>
                                                </th>
                                                <th>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            <tr id="primaryBankDiv">
                                                <td>
                                                    @Html.DropDownListFor(m => m.BankTransactiontype, new SelectList(ViewBag.banktrnsctntyp, "CodeValAbbr", "CodeValDetail"), "Select Head",
                                                    new { @class = "form-control", @id = "selectbanktransfertype" })
                                                    @Html.ValidationMessageFor(m => m.BankTransactiontype)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.BankTransferBankName, new { @class = "form-control", @id = "txtbanktransferbank" })
                                                    @Html.ValidationMessageFor(m => m.BankTransferBankName)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.BankTransferBankBranch, new { @class = "form-control", @id = "txtbankbranch" })
                                                    @Html.ValidationMessageFor(m => m.BankTransferBankBranch)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.BankTransactionrefno, new { @class = "form-control", @id = "txtbanktransferrefno" })
                                                    @Html.ValidationMessageFor(m => m.BankTransactionrefno)
                                                </td>

                                                <td>
                                                    @Html.TextBox("Banktransdate", null, "Banktransdate", new { @class = "form-control", @id = "BankTransactionDate" })
                                                    @Html.ValidationMessageFor(m => m.Banktransdate)
                                                @Html.Hidden("BankTransactionDate")
                                                </td>

                                                <td>
                                                    @Html.TextBoxFor(m => m.BankTransferAmount, new { @class = "form-control", @id = "txtbanktransamount", @onkeypress = "return isNumberKey(event)", @onkeyup = "calculateBanktransferSum()", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.BankTransferAmount)
                                                </td>
                                                <td>
                                                    <button class="dis-none mt5" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                    <button type="button" id="btnAddBanktransdtls" class="btn-circle dis-block"><i class="ion-plus"></i></button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div class="col-md-4">
                                <div class="tx-dts">

                                    <div class="row">
                                        <div class="col-md-10">
                                            <h3 class="mt-null required">Net Transaction Value</h3>
                                            <h4 class="fn-s-lg" id="txttotalbanktransferamount">
                                                @Html.DisplayFor(m => m.TotalBankTransactionAmount, new { @class = "form-control", @id = "txttotalbanktransferamount", @readonly = "true" })
                                                </h4>
                                                @Html.ValidationMessageFor(m => m.TotalBankTransactionAmount)
                                            @Html.Hidden("TotalBankTransactionAmount")
                                       
</div>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>

                    <div id="dd" >
                        <div class="row">
                            <div class="col-md-12">
                                <h3>DD</h3>
                            </div>
                        </div>


                        <div class="row">
                            <div class="col-md-8">

                                <div class="form-group custom-form-group scrl-table scrl-table-po-bl">
                                    <table class="table alter-table" id="divDDContent"style="width:1000px">
                                        <thead>
                                            <tr>
                                                <th style="width:275px">
                                                    <label class="required">DD Number</label>
                                                </th>
                                                <th style="width:275px">
                                                    <label class="required"> DD Date</label>
                                                </th>
                                                <th style="width:275px">
                                                    <label class="required">DD Bank Name </label>
                                                </th>
                                                <th style="width:275px">
                                                    <label class="required">DD Bank Branch </label>
                                                </th>
                                                <th style="width:275px">
                                                    <label class="required">DD Value </label>
                                                </th>
                                                <th>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            <tr id="primaryDDDiv">
                                                <td>
                                                    @Html.TextBoxFor(m => m.DDNumber, new { @class = "form-control", @id = "txtDDvalue" })
                                                    @Html.ValidationMessageFor(m => m.DDNumber)
                                                </td>
                                                <td>
                                                    @*@Html.EditorFor(m => m.DDDate, null, "DDDate", new { @class = "form-control", @id = "DDdate" })*@
                                                    @Html.TextBox("Dddte", null, "Dddte", new { @class = "form-control", @id = "Dddte" })
                                                    @Html.ValidationMessageFor(m => m.Dddte)
                                                    @Html.Hidden("DDDate")
                                                </td>

                                                <td>
                                                    @Html.TextBoxFor(m => m.DDBankName, new { @class = "form-control", @id = "txtDDBank" })
                                                    @Html.ValidationMessageFor(m => m.DDBankName)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.DDBankBranch, new { @class = "form-control", @id = "txtDDBankBranch" })
                                                    @Html.ValidationMessageFor(m => m.DDBankBranch)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.DDValue, new { @class = "form-control", @id = "txtDDamount", @onkeypress = "return isNumberKey(event)", @onkeyup = "calculateDDSum()", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.DDValue)
                                                </td>
                                                <td>
                                                    <button class="dis-none mt5" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                    <button type="button" id="btnAddDDdtls" class="btn-circle dis-block"><i class="ion-plus"></i></button>
                                                </td>
                                            </tr>                                          
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div class="col-md-4">
                                <div class="tx-dts">

                                    <div class="row">
                                        <div class="col-md-10">
                                            <h3 class="mt-null required">Net Transaction Value</h3>
                                            <h4 class="fn-s-lg" id="txttotalddamount">
                                                @Html.DisplayFor(m => m.TotalDDValue, new { @class = "form-control", @id = "txttotalddamount", @readonly = "true" })
                                                @Html.ValidationMessageFor(m => m.TotalDDValue) </h4>
                                            @Html.Hidden("TotalDDValue")
                                          
</div>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>

                    <div id="foreignremit">
                        <div class="row">
                            <div class="col-md-12">
                                <h3>Foreign Remitance / Transfer</h3>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">

                                <div class="form-group custom-form-group scrl-table scrl-table-po-bl">
                                    <table class="table alter-table" id="divForgnRemitContent" style="width:2000px">
                                        <thead>
                                            <tr>
                                                <th style="width:275px">
                                                    <label class="required">Country from which transfer is initiated</label>
                                                </th>
                                                <th style="width:300px">
                                                    <label class="required">Currency</label>
                                                </th>
                                                <th style="width:150px">
                                                    <label class="required">Forex Amount </label>
                                                </th>
                                                <th >
                                                    <label class="required">Conversion Rate </label>
                                                </th>
                                                <th style="width:150px">
                                                    <label class="required">Amount (in ₹) </label>
                                                </th>
                                                <th style="width:250px">
                                                    <label class="required">Transaction Bank</label>
                                                </th>
                                                <th style="width:250px">
                                                    <label class="required">Transaction Bank Branch</label>
                                                </th>
                                                <th>
                                                    <label class="required">Transaction Ref. No.</label>
                                                </th>
                                                <th style="width:200px">
                                                    <label class="required">Transaction Date</label>
                                                </th>
                                                <th>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            <tr id="primaryForgnRemitDiv">
                                                <td>
                                                    @Html.DropDownListFor(m => m.Foreigntransfercountry, new SelectList(ViewBag.country, "CountryID", "CountryName"), "Select Any",
 new { @class = "form-control", @id = "selecttransfercountry" })
                                                    @Html.ValidationMessageFor(m => m.Foreigntransfercountry)
                                                </td>
                                                <td>
                                                    @Html.DropDownList("Foreigntransfercurrency", new SelectList(ViewBag.currency, "id", "name"), "Select Any",
 new { @class = "form-control", @id = "selecttransfercurrency" })
                                                    @Html.ValidationMessageFor(m => m.Foreigntransfercurrency)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.Foreigncurrencyamount, new { @class = "form-control", @id = "txtforgncurrencyamt", @onkeypress = "return isNumberKey(event)" })
                                                    @Html.ValidationMessageFor(m => m.Foreigncurrencyamount)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.Conversionrate, new { @class = "form-control", @id = "txtforgncurncyconversionrate" })
                                                    @Html.ValidationMessageFor(m => m.Conversionrate)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.INRValue, new { @class = "form-control", @id = "txtIndianvalueamount", @onkeypress = "return isNumberKey(event)", @onkeyup = "calculateForgnremitSum()", @onfocus = "calculateForgnremitSum()", @autocomplete = "off" })
                                                    @Html.ValidationMessageFor(m => m.INRValue)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.Foreignremitbankname, new { @class = "form-control", @id = "txtforgnremitbank" })
                                                    @Html.ValidationMessageFor(m => m.Foreignremitbankname)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.Foreignremitbankbranch, new { @class = "form-control", @id = "txtforgnremitbank" })
                                                    @Html.ValidationMessageFor(m => m.Foreignremitbankbranch)
                                                </td>
                                                <td>
                                                    @Html.TextBoxFor(m => m.Foreignremittransrefno, new { @class = "form-control", @id = "txtforgntransactrefno" })
                                                    @Html.ValidationMessageFor(m => m.Foreignremittransrefno)
                                                </td>
                                                <td>
                                                    @*@Html.EditorFor(m => m.ForeignremittransDate, null, "ForeignremittransDate", new { @class = "form-control", @id = "txtforgnremittransdate" })*@
                                                    @Html.TextBox("Forgnremitdate", null, "Forgnremitdate", new { @class = "form-control", @id = "Forgnremitdate" })
                                                    @Html.ValidationMessageFor(m => m.Forgnremitdate)
                                                    @Html.Hidden("ForeignremittransDate")
                                                </td>
                                                <td>
                                                    <button class="dis-none mt5" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                                    <button type="button" id="btnAddForgnremitdtls" class="btn-circle dis-block"><i class="ion-plus"></i></button>
                                                </td>
                                            </tr>
                                            
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            
                        </div>

                        <div class="row">
                          
                            <div class="col-md-4 pull-right">
                                <div class="tx-dts">
                                    <div class="row">
                                        <div class="col-md-10">
                                            <h3 class="mt-null">Net Transaction Value</h3>
                                            <h4 class="fn-s-lg" id="txtforgnremittotal">
                                                @Html.DisplayFor(m => m.Foreignremittotalamount, new { @class = "form-control", @id = "txtforgnremittotal" })
                                                @Html.ValidationMessageFor(m => m.Foreignremittotalamount)
                                                @Html.Hidden("Foreignremittotalamount")
                                            </h4>                                         
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="tdscertificate">
                        <div class="row">
                            <div class="col-md-12">
                                <h3>TDS Certificate</h3>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-8">
                                <div>
                                    <div class="form-group custom-form-group scrl-table scrl-table-po-bl">
                                        <table class="table alter-table" id="divTDSContent" style="width:700px">

                                            <thead>
                                                <tr>
                                                    <th style="width:300px">
                                                        <label class="required">TDS Certificate Number</label>
                                                    </th>
                                                    <th style="width:200px">
                                                        <label class="required"> Attachment (pdf, doc, docx)</label>
                                                    </th>
                                                    
                                                    <th>
                                                    </th>
                                                </tr>
                                            </thead>

                                            <tbody>

                                                <tr id="primaryTDSDiv">

                                                    <td>
                                                        @Html.TextBoxFor(m => m.TDSCertificateNumber, new { @class = "form-control", @id = "txtchequenumber", @onkeypress = "return isNumberKey(event)" })
                                                        @Html.ValidationMessageFor(m => m.TDSCertificateNumber)
                                                    </td>

                                                    <td>                                                        
                                                        <input type="file" name="tdsfile" id="tdsdoc" />&nbsp;&nbsp;&nbsp;
                                                    </td>
                                                    <td class="doclink">
                                                        <a href="#" class="link1" target="_blank"></a>
                                                        @Html.Hidden("DocPath", "", new { @class = "HiddenDocPath" })
                                                        @Html.Hidden("DocName", "", new { @class = "HiddenDocName" })
                                                    </td>
                                                    
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div> 
                        </div>
                    </div>
                </div>
            </div>

            <div class="custom-nav-btn text-right">
                <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>

                <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                @if (Model.ReceiptID == 0 || Model.ReceiptID == null || Model.ReceiptStatus == "Completed")
                {
                <button type="button" class="btn btn-primary pull-right" disabled="disabled" id="approvBtn" >Approve</button>
                }
                @if (Model.ReceiptID > 0 && Model.ReceiptStatus != "Completed")
                {
                    <input type="submit" class="btn btn-primary pull-right" id="approvBtn" name="Buttonvalue" value="Approve" onclick="nextPrev(1)" />
                    @*<button type="button" class="btn btn-primary pull-right" name="Buttonvalue" id="approvBtn"  value="">Approve</button>*@
                }
                @if (Model.ProjectType == 1)
                {
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("SponReceiptList", "CoreAccounts")';">Close</button>
                }
                @if (Model.ProjectType == 2)
                {
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("ConsReceiptList", "CoreAccounts")';">Close</button>
                }
            </div>
           
        </div>
        
                                        }
</div>

@if (ViewBag.succMsg != null)
{
    <div id="myModal" class="modal fade modal-success" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
            @if (Model.ProjectType == 1)
            {
                <div class="modal-header">                   
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("SponReceiptList", "CoreAccounts")';">&times;</button>
                    <i class="ion-android-checkmark-circle"></i>
                    <h3 class="modal-title">Saved successfully</h3>
                </div>
            }
            @if (Model.ProjectType == 2)
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("ConsReceiptList", "CoreAccounts")';">&times;</button>
                    <i class="ion-android-checkmark-circle"></i>
                    <h3 class="modal-title">Saved successfully</h3>
                </div>
            }
                <div class="modal-body">

                    <p>@ViewBag.succMsg</p>

                </div>
            @if (Model.ProjectType == 1)
            {
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("SponReceiptList", "CoreAccounts")';">Close</button>
                </div>
            }
                @if (Model.ProjectType == 2)
                {
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("ConsReceiptList", "CoreAccounts")';">Close</button>
                    </div>
                }
            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal').modal('show');
        });

    </script>

}

<div id="myModal2" class="modal fade modal-success" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-checkmark-circle"></i>
                <h3 class="modal-title">Deleted successfully</h3>
            </div>
            <div class="modal-body">

                <p>The Proposal has been Deleted successfully.</p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<script>
    var errMsg = '@ViewBag.errMsg';
    var piList = '@Html.Raw(Json.Encode(ViewBag.PI))';
    var allocationHeads = '@Html.Raw(Json.Encode(ViewBag.allocatehead))'
    var modelData = '@Html.Raw(Json.Encode(Model))'
    $(document).ready(function () {
        //get the relevant form
        //  var form = $('#frmSRB');
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');
        if (errMsg) {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
            var jsonData = JSON.parse(modelData);
            $('#addnewpage').hide();
            $('#projectopening').show();
            $('#gridlist').hide();
            $('#viewdoc').hide();
            fillData(jsonData);
            calcllocbreakup()
        } else {
            $('#projectopening').hide();
            $('#viewdoc').hide();
        }

    });

    //$("#ProposalApprovedDate").datepicker({ minDate: -1, maxDate: -2 }).attr('readonly', 'readonly');
    $(document).ready(function () {
        var SearchBy = $('input[name^="SearchField.SearchBy"]:checked').val();
        if (SearchBy == 'SODate') {
            $('#DivSODate').show();
            $('#DivCrtdDate').hide();
        }
        else {
            $('#DivCrtdDate').show();
            $('#DivSODate').hide();
        }
        $("#FromSODate, #ToSODate, #FromDate, #ToDate, #BankTransactionDate, #Chqdate, #Chqclrdate, #Dddte, #Forgnremitdate").datepicker
           ({
               dateFormat: 'dd-MM-yy',
               showStatus: true,
               showWeeks: true,
               changeYear: true,
               yearRange: '-100:+0',
               highlightWeek: true,
               numberOfMonths: 1,
               showAnim: "scale",
               showOptions: {
                   origin: ["top", "left"]
               }
           });

    });

    $('#btnAddAllocationhead').click(function () {
        var cln = $("#primaryAllocateDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $('#divAllocateContent').append(cln)

    });

    $(document).on('click', '#primaryAllocateDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryAllocateDiv').remove();
        sumAllocation();
    });

    $('#btnAddReceivables').click(function () {
        var cln = $("#primaryReceivablesDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.dis-block').addClass('dis-none');
        $('#divReceivablesContent').append(cln)

    });

    $(document).on('click', '#primaryReceivablesDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryReceivablesDiv').remove();
        sumReceivables();
    });

    $('#btnAddChequedtls').click(function () {

        var cln = $("#primaryChequeDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.dis-block').addClass('dis-none');
        // $('.cloned-input').removeClass('hasDatepicker').datepicker();
        // $('input[id^=Chqdate]').removeClass('hasDatepicker');
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            dateFormat: 'dd-MM-yy', changeYear: true
        })

        $('#divChequeContent').append(cln)
    });

    $(document).on('click', '#primaryChequeDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryChequeDiv').remove();
        calculatechequeSum();
    });

    $('#btnAddBanktransdtls').click(function () {
        var cln = $("#primaryBankDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.dis-block').addClass('dis-none');
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            dateFormat: 'dd-MM-yy', changeYear: true
        })
        $('#divBankContent').append(cln)

    });

    $(document).on('click', '#primaryBankDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryBankDiv').remove();
        calculateBanktransferSum();
    });

    $('#btnAddDDdtls').click(function () {
        var cln = $("#primaryDDDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.dis-block').addClass('dis-none');
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            dateFormat: 'dd-MM-yy', changeYear: true
        })
        $('#divDDContent').append(cln)

    });

    $(document).on('click', '#primaryDDDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryDDDiv').remove();
        calculateDDSum();
    });
    $('#btnAddForgnremitdtls').click(function () {
        var cln = $("#primaryForgnRemitDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $(cln).find('.dis-block').addClass('dis-none');
        $(cln).find('.hasDatepicker').attr("id", "").removeClass('hasDatepicker').removeData('datepicker').unbind().datepicker({
            dateFormat: 'dd-MM-yy', changeYear: true
        })
        $('#divForgnRemitContent').append(cln)

    });

    $(document).on('click', '#primaryForgnRemitDiv button[name="removeButton"]', function () {
        $(this).closest('#primaryForgnRemitDiv').remove();
        calculateForgnremitSum();
    });
    $('input[id^="SearchBy_"]').change(function () {
        var value = $(this).val();
        if (value == 'SODate') {
            $('#DivSODate').show();
            $('#DivCrtdDate').hide();
        }
        else {
            $('#DivCrtdDate').show();
            $('#DivSODate').hide();
        }
        $('#FromSODate').val('');
        $('#ToSODate').val('');
        $('#FromDate').val('');
        $('#ToDate').val('');
    });

    $('a[name="btnClose"],button[name="btnClose"]').click(function () {
        $('#popupFilter').css("display", "none");
    });
    $("#btnFilter").click(function () {
        $('#popupFilter').css("display", "Block");
    });


    $('#Prjcttype').prop("selectedIndex", 0);
    $('#datepickerid').val("");
    $('#txtprpslsrc').val("");
    $('#txtprjcttitle').val("");
    $('#Agncy').prop("selectedIndex", 0);
    $('#txtprpslval').val("");
    $('#txtprjctduratn').val("");
    $('#txtpersonapplied').val("");
    $('#schemename').prop("selectedIndex", 0);
    $('#txtremarks').val("");
    $('#tentstartdatepickerid').val("");
    //$('#startdatepickerid').val("");
    $('#tentclosedatepickerid').val("");
    $('#closedatepickerid').val("");
    $('#ProposalApprovedDate').val("");
    $('#SOdatepickerid').val("");
    //$('#inputdatepickerid').val("");

    $('#SanctionOrderDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });
    //$('#ProposalApprovedDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });

    $('#TentativeStartdate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
    //$('#Startdate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
    $('#TentativeClosedate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
    $('#Closedate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+30' });
    //$('#Inputdate').datepicker({ maxDate: 0, minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true, yearRange: '-30:+0' });

    $('#department').prop("selectedIndex", 0);
    $('#PI').prop("selectedIndex", 0);
    $('#txtPIemail').val("");

    $('#copidepartment').prop("selectedIndex", 0);
    $('#CoPI').prop("selectedIndex", 0);
    $('#txtcopiemail').val("");

    $('#doctype').prop("selectedIndex", 0);
    $('#docname').val("");

    $('input[type=radio][name=RMForCMF]').change(function () {
        var value = this.value;
        if (value == 'RMF') {
            var trEle = $('#ProjectList tr:nth-child(2)');
            $('input[name="ReceiptOverheads[1].Overheadtypename"]').val('Expenses Payable RMF (4.00 %)');
            trEle.find('.tdOHtype').html('Expenses Payable RMF (4.00 %)')
        }
        else if (value == 'CMF'){
            var trEle = $('#ProjectList tr:nth-child(2)');
            $('input[name="ReceiptOverheads[1].Overheadtypename"]').val('Expenses Payable CMF (4.00 %)');
            trEle.find('.tdOHtype').html('Expenses Payable CMF (4.00 %)')
        }
    });
    $('#btnSearch').on('click', function () {
        // var token = $("input[name=__RequestVerificationToken]").val();
        getData();
    });
    var searchProjectURL = 'SearchProjectList';
    function getData() {
        var Projecttype = $('#srchPrjcttype').val();
        var Proposalnumber = $('#proposalnumber').val();
        var Projectnumber = $('#projectnumber').val();
        var PIName = $('#srchPIName').val();
        //  var SearchBy = $('input[name^="SearchField.SearchBy"]:checked').val();
        var FromSODate = $('#FromSODate').val();
        var ToSODate = $('#ToSODate').val();
        var FromDate = $('#FromDate').val();
        var ToDate = $('#ToDate').val();

        if (Projecttype == "") {
            Projecttype = 0;
        }
        if (FromSODate == "") {
            FromSODate = null;
        }
        if (ToSODate == "") {
            ToSODate = null;
        }
        //  var searchdata = { "__RequestVerificationToken": token, "ProjectType": Projecttype,"ProposalNumber": Proposalnumber, "PIname": PIName, "Searchby": SearchBy, "FromSOdate": FromSODate, "ToSOdate": ToSODate, "Fromdate": FromDate, "Todate": ToDate };
        var searchdata = {
            ProjectType: Projecttype,
            ProposalNumber: Proposalnumber,
            FromSODate: FromSODate,
            ToSODate: ToSODate
        };

        $.ajax({
            type: "GET",
            url: searchProjectURL,
            data: searchdata,
            //data: { "ProjectType": Projecttype, "ProposalNumber": Proposalnumber, "FromSOdate": FromSODate, "ToSOdate": ToSODate, },
            //contentType: "application/x-www-form-urlencoded",
            dataType: "json",
            success: function (result) {
                // dataProposal = result;
                $("#gridProjectList").jsGrid({ data: result });
                $('#projectopening').hide();
                $('#gridlist').show();
                $('#popupFilter').hide();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    function formSave() {
        //d.preventDefault();
        
        var isValid = $('#formPO').valid();
        if (!isValid)
            return false;
        // var isValid = $(this).closest("form").valid();
        var bankvalue = parseInt($('#txtbankDramount').val());
       // var receiptvalue = parseInt($('#txtreceiptamount').val());

        var modeofreceipt = $('#selectmodeofreceipt').val();
        if (modeofreceipt == 1) {
            var nettransactionvalue = parseInt($('#TotalChequeValue').val());
        }
        if (modeofreceipt == 2) {
            var nettransactionvalue = parseInt($('#TotalDDValue').val());
        }
        if (modeofreceipt == 3) {
            var nettransactionvalue = parseInt($('#TotalBankTransactionAmount').val());
        }
        if (modeofreceipt == 4) {
            var nettransactionvalue = parseInt($('#Foreignremittotalamount').val());
        }
        if (modeofreceipt == 5) {
            var nettransactionvalue = 0;
        }

        if (nettransactionvalue != bankvalue) {
            $('#MsgValidation').html("Net Transaction Value is not equal to Bank Debit Amount");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        // to validate if copi department or copiname is left unselected when either one of them is selected
        var receivablesvalues = [];

        $('select[name="ReceivablesHeadId"]').each(function (idx, val) { receivablesvalues.push($(val).val()); });

        //// Sort it
        receivablesvalues.sort();

        // duplicate check
        for (var k = 1; k < receivablesvalues.length; ++k) {
            if (receivablesvalues[k] == receivablesvalues[k - 1]) {
                $('#MsgValidation').html("Receivables head already selected. Please select a different head.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
        var validationMsg = validateCrandDrtotal()
        if (validationMsg != 'valid') {
            $('#MsgValidation').html(validationMsg);;
            $('#ValidationModal').modal('toggle');
            return false;
        }
        //else if (validationMsg == 'valid') {
        //    var alloctotalvalidationMsg = validatealloctotal()
        //    if (alloctotalvalidationMsg != 'valid') {
        //        $('#MsgValidation').html(alloctotalvalidationMsg);
        //        $('#ValidationModal').modal('toggle');
        //        return false;
        //    }
        //    else if (alloctotalvalidationMsg == 'valid') {
        //        var allocheadvalidationMsg = validateAllocation()
        //        if (allocheadvalidationMsg != 'valid') {
        //            hadError = true;
        //            $('#MsgValidation').html(allocheadvalidationMsg);
        //            $('#ValidationModal').modal('toggle');
        //        }
        //    }
        //}
        var receiptid = $('input[name="ReceiptID"]').val();

        // duplicate check allocation head

            var allocateheads = [];
            $('select[name="Allocationhead"]').each(function (idx, val) { allocateheads.push($(val).val()); });
            allocateheads.sort();
            for (var k = 1; k < allocateheads.length; ++k) {

                if (allocateheads[k] == 1) {
                    if (allocateheads[k] == allocateheads[k - 1]) {
                        $('#MsgValidation').html("Allocation head already exist. Please select a different allocation.");
                        $('#ValidationModal').modal('toggle');
                        return false;
                    }
                }
                isValid = true;
            }

        if (isValid)
            $('#formPO').submit();

    }
    function receivableheadValidation() {
        // to validate if copi department or copiname is left unselected when either one of them is selected
        var receivablesvalues = [];

        $('select[name="ReceivablesHeadId"]').each(function (idx, val) { receivablesvalues.push($(val).val()); });

        //// Sort it
        receivablesvalues.sort();

        // duplicate check
        for (var k = 1; k < receivablesvalues.length; ++k) {
            if (receivablesvalues[k] == receivablesvalues[k - 1]) {
                $('#MsgValidation').html("Receivable head already selected. Please select a different head.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
        }
    }
    function allocationheadValidation() {
        // duplicate check allocation head

            var allocateheads = [];
            $('select[name="BudgetHead"]').each(function (idx, val) { allocateheads.push($(val).val()); });
            allocateheads.sort();
            for (var k = 1; k < allocateheads.length; ++k) {

                if (allocateheads[k] == allocateheads[k - 1]) {
                    $('#MsgValidation').html("Allocation head already exist. Please select a different allocation.");
                    $('#ValidationModal').modal('toggle');
                    return false;
                }

                isValid = true;
            }
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    $('#approvBtn').hide();
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");

        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {

            document.getElementById("nextBtn").innerHTML = "Save";
            document.getElementById("nextBtn").name = "Buttonvalue";
            document.getElementById("nextBtn").value = "Save";
            $('#approvBtn').show();
            var status = '@Model.ReceiptStatus';
            if (status == "Completed") {
                $('#nextBtn').hide();               
            }

        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#approvBtn').hide();
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {

        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");

        var allocateheads = [];

        $('select[name="BudgetHead"]').each(function (idx, val) { allocateheads.push($(val).val()); });
        allocateheads.sort();
        for (var k = 1; k < allocateheads.length; ++k) {
            if (allocateheads[k] == allocateheads[k - 1]) {
                $('#MsgValidation').html("Allocation head already exist. Please select a different allocation.");
                $('#ValidationModal').modal('toggle');
                return false;
            }
            isValid = true;
        }

        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 1) {
            var validationMsg = validateCrandDrtotal()
            if (validationMsg != 'valid') {
                hadError = true;
                $('#MsgValidation').html(validationMsg);
                $('#ValidationModal').modal('toggle');
            }
            var currreceiptOHvalue = parseFloat($("#txtcurrentreceiptoverheads").val());
            var totaloverheads = parseFloat($("#txtProjecttotalOH").val());
            var totalprevrcvoverheads = parseFloat($("#txtPrevReceiptOH").val());
            var receiptid = $('input[name="ReceiptID"]').val();
            var projecttype = parseFloat($('input[name="ProjectType"]').val());
            
            var totalrcvOH = 0;
            if (receiptid > 0)
            {
                totalrcvOH = totalprevrcvoverheads
            }
            else
            {
                totalrcvOH = currreceiptOHvalue + totalprevrcvoverheads;
            }

            if(projecttype == 1 && totalrcvOH > totaloverheads)
            {
                hadError = true;
                $('#MsgValidation').html("The total Receipt Overhead value cannot exceed the total Overheads allocated for the current project");
                $('#ValidationModal').modal('toggle');
            }
            //else if (validationMsg == 'valid') {
            //    var alloctotalvalidationMsg = validatealloctotal()
            //    if (alloctotalvalidationMsg != 'valid') {
            //        hadError = true;
            //        $('#MsgValidation').html(alloctotalvalidationMsg);
            //        $('#ValidationModal').modal('toggle');
            //    }
            //    else {
            //        var allocheadvalidationMsg = validateAllocation()
            //        if (allocheadvalidationMsg != 'valid') {
            //            hadError = true;
            //            $('#MsgValidation').html(allocheadvalidationMsg);
            //            $('#ValidationModal').modal('toggle');
            //        }
            //    }
            //}


        } else if (currentTab == 2) {

        }
        //else if (currentTab == 3) {
        //    if ($('#IsYearWiseAllocation').is(":checked")) {
        //        var validationMsg = validateYWAllocation()
        //        if (validationMsg != 'valid') {
        //            hadError = true;
        //            $('#MsgValidation').html(validationMsg);
        //            $('#ValidationModal').modal('toggle');
        //        }
        //    } else {
        //        var validationMsg = validateAllocation();
        //        if (validationMsg != 'valid') {
        //            hadError = true;
        //            $('#MsgValidation').html(validationMsg);
        //            $('#ValidationModal').modal('toggle');
        //        }
        //    }
        //} else if (currentTab == 4) {
        //    var validationMsg = validateStaffSalary();
        //    if (validationMsg != 'valid') {
        //        hadError = true;
        //        $('#MsgValidation').html(validationMsg);
        //        $('#ValidationModal').modal('toggle');
        //    }
        //}//else if (currentTab == 5) {
        //    var tentativestartdate = $("#TentativeStartdate").val();
        //    var tentativeclosedate = $("#TentativeClosedate").val();
        //    if (tentativestartdate != '' && tentativeclosedate != '') {
        //        hadError = !projectDurationValidation();
        //    }
        //}
        $(stepElements).each(function (idx) {
            if (!$(this).is(':radio') && !$(this).is(':checkbox')) {
                isValid = $(this).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }
    // To calculate the Receivables Total
    function calculatereceivablesSum() {

        var item = document.getElementsByClassName("receivableamt");
        var itemcount = item.length;
        var totalreceivables = 0;

        for (var i = 0; i < itemcount; i++) {
            if (item[i].value != 'NaN' && item[i].value != '') {
                totalreceivables = totalreceivables + parseFloat(item[i].value);;
            }
            else {
                totalreceivables;;
            }
        }
        $("#txtreceivablestotal").val(totalreceivables.toFixed(0));;

    }

    //function calculatealloctotal() {

    //    var allocationtotalvalue = [];

    //    $('input[name="Allocationvalue"]').each(function (idx, val) { allocationtotalvalue.push($(val).val()); });

    //    allocationtotalvalue.sort();

    //    var totalallocation = 0;

    //    $.each(allocationtotalvalue, function (i, val) {

    //        if (i == 0) {

    //            var txtallocationValue = document.getElementsByName('Allocationvalue')[0].value;
    //            totalallocation += parseFloat(txtallocationValue);

    //        } else {
    //            var txtallocationValue = document.getElementsByName('Allocationvalue')[i].value;
    //            totalallocation += parseFloat(txtallocationValue);

    //        }
    //    });
    //    $('input[name="AllocationTotal"]').val(totalallocation.toFixed(0));;
    //    AllocationTotal
    //}
    // To validate the total of allocation amount does not exceed receipt amount
    //function validatealloctotal() {

    //    var msg = 'valid';
    //    var allocationtotalvalue = [];
    //    var receiptid = $('input[name="ReceiptID"]').val();

    //        var receiptamount = $('#txtreceiptamount').val();
    //        $('input[name="Allocationvalue"]').each(function (idx, val) { allocationtotalvalue.push($(val).val()); });

    //        allocationtotalvalue.sort();

    //        var totalallocation = 0;

    //        $.each(allocationtotalvalue, function (i, val) {

    //            if (i == 0) {

    //                var txtallocationValue = document.getElementsByName('Allocationvalue')[0].value;
    //                totalallocation += parseFloat(txtallocationValue);

    //            } else {
    //                var txtallocationValue = document.getElementsByName('Allocationvalue')[i].value;
    //                totalallocation += parseFloat(txtallocationValue);

    //            }
    //        });

    //        if (totalallocation != receiptamount) {
    //            msg = "Sum of allocation should be equal to receipt value.";
    //        }


    //        if (totalallocation != receiptamount) {
    //            msg = "Sum of allocation should be equal to receipt value.";
    //        }

    //    return msg;
    //}
    //function validateAllocation() {

    //    var msg = 'valid';
    //    var Allocationvalue = [];
    //    var Allocationhead = [];
    //    var receiptid = $('input[name="ReceiptID"]').val();

    //        $("input[name ='Allocationvalue']").each(function (idx, val) { Allocationvalue.push($(val).val()); });
    //        $("input[name ='BudgetHead']").each(function (idx, val) { Allocationhead.push($(val).val()); });
    //        Allocationvalue.sort();
    //        Allocationhead.sort();

    //        $.each(Allocationvalue, function (i, val) {
    //            if (i == 0) {
    //                var Allocvalue = document.getElementsByName('Allocationvalue')[0].value;
    //                if (Allocvalue == null || Allocvalue == "") {
    //                    msg = 'Allocation value cannot be null.';
    //                }

    //            } else {
    //                var Allocvalue = document.getElementsByName('Allocationvalue')[i].value;
    //                if (Allocvalue == null || Allocvalue == "") {
    //                    msg = 'Allocation value cannot be null.';
    //                }
    //            }
    //        });

    //        $.each(Allocationvalue, function (i, val) {
    //            if (i == 0) {
    //                var Allochead = document.getElementsByName('BudgetHead')[0].value;
    //                if (Allochead == null || Allochead == "") {
    //                    msg = 'Allocation head cannot be left unselected.';
    //                }

    //            } else {
    //                var Allochead = document.getElementsByName('BudgetHead')[i].value;
    //                if (Allochead == null || Allochead == "") {
    //                    msg = 'Allocation head cannot be left unselected.';
    //                }
    //            }
    //        });


    //    return msg;
    //}
    function validateCrandDrtotal() {
        var msg = 'valid';
        var receiptamount = parseInt($('#txtreceiptamount').val());
        var creditamount = parseInt($('#txtreceivedfromamount').val());
        var debitamount = parseInt($('#txtbankDramount').val());

        var item = document.getElementsByClassName("receivableamt");
        var itemcount = item.length;
        var totalreceivables = 0;

        for (var i = 0; i < itemcount; i++) {
            if (item[i].value != 'NaN' && item[i].value != '') {
                totalreceivables = totalreceivables + parseFloat(item[i].value);;
            }
            else {
                totalreceivables;;
            }
        }

        var debittotal = totalreceivables + debitamount;
        if (debittotal != creditamount) {
            msg = "The Credit and Debit total should be equal. Please check.";
        }
        if (debittotal != receiptamount) {
            msg = "The Debit total should be equal to the receipt amount. Please check.";
        }
        if (creditamount != receiptamount) {
            msg = "The Credit amount should be equal to the receipt amount. Please check.";
        }
        return msg;
    }
    function calculatechequeSum() {

        var chequevalue = [];

        $('input[name="ChequeValue"]').each(function (idx, val) { chequevalue.push($(val).val()); });
        chequevalue.sort();
        var totalvalue = 0;
        $.each(chequevalue, function (i, val) {
            if (i == 0) {
                var ChequeValue = document.getElementsByName('ChequeValue')[0].value;
                totalvalue += parseFloat(ChequeValue);
                if (!isNaN(totalvalue)) {
                    $("#txttotalchequevalue").html(totalvalue.toFixed(0));
                    $("#txttotalchequevalue").val(totalvalue.toFixed(0));
                    $('input[name="TotalChequeValue"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }

            } else {

                var ChequeValue = document.getElementsByName('ChequeValue')[i].value;
                totalvalue += parseFloat(ChequeValue);

                if (!isNaN(totalvalue)) {
                    $("#txttotalchequevalue").html(totalvalue.toFixed(0));
                    $("#txttotalchequevalue").val(totalvalue.toFixed(0));
                    $('input[name="TotalChequeValue"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }
            }
        });
    }
    function calculateDDSum() {

        var ddvalue = [];

        $('input[name="DDValue"]').each(function (idx, val) { ddvalue.push($(val).val()); });
        ddvalue.sort();
        var totalvalue = 0;
        $.each(ddvalue, function (i, val) {
            if (i == 0) {
                var DDValue = document.getElementsByName('DDValue')[0].value;
                totalvalue += parseFloat(DDValue);
                if (!isNaN(totalvalue)) {
                    $("#txttotalddamount").html(totalvalue.toFixed(0));
                    $("#txttotalddamount").val(totalvalue.toFixed(0));
                    $('input[name="TotalDDValue"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }

            } else {

                var DDValue = document.getElementsByName('DDValue')[i].value;
                totalvalue += parseFloat(DDValue);
                if (!isNaN(totalvalue)) {
                    $("#txttotalddamount").html(totalvalue.toFixed(0));
                    $("#txttotalddamount").val(totalvalue.toFixed(0));
                    $('input[name="TotalDDValue"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }
            }
        });
    }
    function calculateBanktransferSum() {

        var banktransfervalue = [];

        $('input[name="BankTransferAmount"]').each(function (idx, val) { banktransfervalue.push($(val).val()); });
        banktransfervalue.sort();
        var totalvalue = 0;
        $.each(banktransfervalue, function (i, val) {
            if (i == 0) {
                var BankTransferValue = document.getElementsByName('BankTransferAmount')[0].value;
                totalvalue += parseFloat(BankTransferValue);
                if (!isNaN(totalvalue)) {
                    $("#txttotalbanktransferamount").html(totalvalue.toFixed(0));
                    $("#txttotalbanktransferamount").val(totalvalue.toFixed(0));
                    $('input[name="TotalBankTransactionAmount"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }

            } else {

                var BankTransferValue = document.getElementsByName('BankTransferAmount')[i].value;
                totalvalue += parseFloat(BankTransferValue);
                if (!isNaN(totalvalue)) {
                    $("#txttotalbanktransferamount").html(totalvalue.toFixed(0));
                    $("#txttotalbanktransferamount").val(totalvalue.toFixed(0));
                    $('input[name="TotalBankTransactionAmount"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }
            }
        });
    }
    function calculateForgnremitSum() {

        var forgnremitvalue = [];

        $('input[name="INRValue"]').each(function (idx, val) { forgnremitvalue.push($(val).val()); });
        forgnremitvalue.sort();
        var totalvalue = 0;
        $.each(forgnremitvalue, function (i, val) {
            if (i == 0) {
                var ForgnRemitValue = document.getElementsByName('INRValue')[0].value;
                totalvalue += parseFloat(ForgnRemitValue);
                if (!isNaN(totalvalue)) {
                    $("#txtforgnremittotal").html(totalvalue.toFixed(0));
                    $("#txtforgnremittotal").val(totalvalue.toFixed(0));
                    $('input[name="Foreignremittotalamount"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }

            } else {

                var ForgnRemitValue = document.getElementsByName('INRValue')[i].value;
                totalvalue += parseFloat(ForgnRemitValue);
                if (!isNaN(totalvalue)) {
                    $("#txtforgnremittotal").html(totalvalue.toFixed(0));
                    $("#txtforgnremittotal").val(totalvalue.toFixed(0));
                    $('input[name="Foreignremittotalamount"]').val(totalvalue.toFixed(0));
                    // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
                }
            }
        });
    }
    $('#cheQue').hide();
    $('#bankTrans').hide();
    $('#dd').hide();
    $('#foreignremit').hide();
    $("#selectmodeofreceipt").change(function () {

        var modeofreceipt = $(this).val();
        if (modeofreceipt == 0) {
            $('#cheQue').hide();
            $('#bankTrans').hide();
            $('#dd').hide();
            $('#foreignremit').hide();
            $('#tdscertificate').hide();
        }
        if (modeofreceipt == 1) {
            $('#cheQue').show();
            $('#bankTrans').hide();
            $('#dd').hide();
            $('#foreignremit').hide();
            $('#tdscertificate').hide();
        }
        if (modeofreceipt == 2) {
            $('#cheQue').hide();
            $('#bankTrans').hide();
            $('#dd').show();
            $('#foreignremit').hide();
            $('#tdscertificate').hide();
        }
        if (modeofreceipt == 3) {
            $('#cheQue').hide();
            $('#bankTrans').show();
            $('#dd').hide();
            $('#foreignremit').hide();
            $('#tdscertificate').hide();
        }
        if (modeofreceipt == 4) {
            $('#cheQue').hide();
            $('#bankTrans').hide();
            $('#dd').hide();
            $('#foreignremit').show();
            $('#tdscertificate').hide();
        }
        if (modeofreceipt == 5) {
            $('#cheQue').hide();
            $('#bankTrans').hide();
            $('#dd').hide();
            $('#foreignremit').hide();
            $('#tdscertificate').show();
        }

        $('#txtchequenumber').val('');
        $('input[name="ChequeDate"]').val('');
        $('#txtchequebank').val('');
        $('#txtchequebankbranch').val('');
        $('#txtchequevalue').val('');
        $('#txttotalchequevalue').val('');

        $('#txtDDvalue').val('');
        $('input[name="DDDate"]').val('');
        $('#txtDDBank').val('');
        $('#txtDDamount').val('');
        $('#txttotalddamount').val('');

        $('#selectbanktransfertype').val('');
        $('input[name="BankTransactionDate"]').val('');
        $('#txtbanktransferbank').val('');
        $('#txtbanktransferrefno').val('');
        $('#txtbanktransamount').val('');
        $('#txttotalbanktransferamount').val('');

        $('#selecttransfercountry').val('');
        $('#selecttransfercurrency').val('');
        $('#txtforgncurrencyamt').val('');
        $('#txtforgncurncyconversionrate').val('');
        $('#txtIndianvalueamount').val('');
        $('#txtforgntransactrefno').val('');
        $('input[name="ForeignremittransDate"]').val('');
        $('#txtforgnremittotal').val('');

    });

    $(document).on('change', 'select[name="Foreigntransfercurrency"]', function () {

        var currencyid = $(this).val();
        var txtbox = $(this).closest('#primaryForgnRemitDiv').find('input[name="Conversionrate"]');
        var getexchangerate = 'Loadexchangerate';
        $.ajax({
            type: "POST",
            url: getexchangerate,
            data: { Currencyid: currencyid },
            //contentType: "application/json; charset=utf-8",
            //dataType: "json",
            success: function (result) {
                $(txtbox).val(result.value);
            }
        });
    });

 window.onload = function () {

        $("#selectmodeofreceipt").each(function () {

            var modeofreceipt = $(this).val();
            if (modeofreceipt == 0) {
                $('#cheQue').hide();
                $('#bankTrans').hide();
                $('#dd').hide();
                $('#foreignremit').hide();
                $('#tdscertificate').hide();
            }
            if (modeofreceipt == 1) {
                $('#cheQue').show();
                $('#bankTrans').hide();
                $('#dd').hide();
                $('#foreignremit').hide();
                $('#tdscertificate').hide();
            }
            if (modeofreceipt == 2) {
                $('#cheQue').hide();
                $('#bankTrans').hide();
                $('#dd').show();
                $('#foreignremit').hide();
                $('#tdscertificate').hide();
            }
            if (modeofreceipt == 3) {
                $('#cheQue').hide();
                $('#bankTrans').show();
                $('#dd').hide();
                $('#foreignremit').hide();
                $('#tdscertificate').hide();
            }
            if (modeofreceipt == 4) {
                $('#cheQue').hide();
                $('#bankTrans').hide();
                $('#dd').hide();
                $('#foreignremit').show();
                $('#tdscertificate').hide();
            }
            if (modeofreceipt == 5) {
                $('#cheQue').hide();
                $('#bankTrans').hide();
                $('#dd').hide();
                $('#foreignremit').hide();
                $('#tdscertificate').show();
            }
        });


        var Budgethead = @Html.Raw(Json.Encode(Model.BudgetHead));
        var Allocvalue = @Html.Raw(Json.Encode(Model.Allocationvalue));

        $.each(Budgethead, function (i, val) {

            if (i == 0) {
                document.getElementsByName('BudgetHead')[0].value = Budgethead[0];
                document.getElementsByName('Allocationvalue')[0].value = Allocvalue[0];

            } else {
                var cln = $("#primaryAllocateDiv").clone().find("input").val("").end();
                $(cln).find('.dis-none').removeClass('dis-none');
                $('#divAllocateContent').append(cln)
                document.getElementsByName('BudgetHead')[i].value = Budgethead[i];
                document.getElementsByName('Allocationvalue')[i].value = Allocvalue[i];
            }
        });
        var modeofreceipt =  $("#selectmodeofreceipt").val();
        if(modeofreceipt == 1)
        {
            var Chequenumber = @Html.Raw(Json.Encode(Model.ChequeNumber));
            var Chequedate = @Html.Raw(Json.Encode(Model.ChequeDate));
            var Cheqdte = @Html.Raw(Json.Encode(Model.Chqdate));
            var Cheqclrdte = @Html.Raw(Json.Encode(Model.Chqclrdate));
            var Chequevalue = @Html.Raw(Json.Encode(Model.ChequeValue));
            var Chequevaluebank = @Html.Raw(Json.Encode(Model.ChequeBankName));
            var Chequebankbranch = @Html.Raw(Json.Encode(Model.ChequeBankBranch));
            $.each(Chequenumber, function (i, val) {

                if (i == 0) {
                    document.getElementsByName('ChequeNumber')[0].value = Chequenumber[0];
                    document.getElementsByName('ChequeDate')[0].value = Chequedate[0];
                    document.getElementsByName('Chqdate')[0].value = Cheqdte[0];
                    if(Cheqclrdte != null)
                    {
                        document.getElementsByName('Chqclrdate')[0].value = Cheqclrdte[0];
                    }
                    document.getElementsByName('ChequeValue')[0].value = Chequevalue[0];
                    document.getElementsByName('ChequeBankName')[0].value = Chequevaluebank[0];
                    document.getElementsByName('ChequeBankBranch')[0].value = Chequebankbranch[0];

                } else {
                    var cln = $("#primaryChequeDiv").clone().find("input").val("").end();
                    $(cln).find('.dis-none').removeClass('dis-none');
                    $(cln).find('.dis-block').addClass('dis-none');
                    $('#divChequeContent').append(cln)
                    document.getElementsByName('ChequeNumber')[i].value = Chequenumber[i];
                    document.getElementsByName('ChequeDate')[i].value = Chequedate[i];
                    document.getElementsByName('Chqdate')[i].value = Cheqdte[i];
                    if(Cheqclrdte != null)
                    {
                        document.getElementsByName('Chqclrdate')[i].value = Cheqclrdte[i];
                    }
                    document.getElementsByName('ChequeValue')[i].value = Chequevalue[i];
                    document.getElementsByName('ChequeBankName')[i].value = Chequevaluebank[i];
                    document.getElementsByName('ChequeBankBranch')[i].value = Chequebankbranch[i];
                }
            });
        }

        if(modeofreceipt == 2)
        {
            var DDnumber = @Html.Raw(Json.Encode(Model.DDNumber));
            var DDdate = @Html.Raw(Json.Encode(Model.DDDate));
            var Dddte = @Html.Raw(Json.Encode(Model.Dddte));
            var DDvalue = @Html.Raw(Json.Encode(Model.DDValue));
            var DDbank = @Html.Raw(Json.Encode(Model.DDBankName));
            var DDbankbranch = @Html.Raw(Json.Encode(Model.DDBankBranch));
            $.each(DDnumber, function (i, val) {

                if (i == 0) {
                    document.getElementsByName('DDNumber')[0].value = DDnumber[0];
                    document.getElementsByName('DDDate')[0].value = DDdate[0];
                    document.getElementsByName('Dddte')[0].value = Dddte[0];
                    document.getElementsByName('DDValue')[0].value = DDvalue[0];
                    document.getElementsByName('DDBankName')[0].value = DDbank[0];
                    document.getElementsByName('DDBankBranch')[0].value = DDbankbranch[0];
                } else {
                    var cln = $("#primaryDDDiv").clone().find("input").val("").end();
                    $(cln).find('.dis-none').removeClass('dis-none');
                    $(cln).find('.dis-block').addClass('dis-none');
                    $('#divDDContent').append(cln)
                    document.getElementsByName('DDNumber')[i].value = DDnumber[i];
                    document.getElementsByName('DDDate')[i].value = DDdate[i];
                    document.getElementsByName('Dddte')[i].value = Dddte[i];
                    document.getElementsByName('DDValue')[i].value = DDvalue[i];
                    document.getElementsByName('DDBankName')[i].value = DDbank[i];
                    document.getElementsByName('DDBankBranch')[i].value = DDbankbranch[i];
                }
            });
        }
        if(modeofreceipt == 3)
        {
            var Banktransnumber = @Html.Raw(Json.Encode(Model.BankTransactionrefno));
            var Banktransdate = @Html.Raw(Json.Encode(Model.BankTransactionDate));
            var Banktransdte = @Html.Raw(Json.Encode(Model.Banktransdate));
            var Banktransamount = @Html.Raw(Json.Encode(Model.BankTransferAmount));
            var Banktransbank = @Html.Raw(Json.Encode(Model.BankTransferBankName));
            var Banktransbankbranch = @Html.Raw(Json.Encode(Model.BankTransferBankBranch));
            var Banktranstype = @Html.Raw(Json.Encode(Model.BankTransactiontype));
            $.each(Banktransnumber, function (i, val) {

                if (i == 0) {
                    document.getElementsByName('BankTransactionrefno')[0].value = Banktransnumber[0];
                    document.getElementsByName('BankTransactionDate')[0].value = Banktransdate[0];
                    document.getElementsByName('Banktransdate')[0].value = Banktransdte[0];
                    document.getElementsByName('BankTransferAmount')[0].value = Banktransamount[0];
                    document.getElementsByName('BankTransferBankName')[0].value = Banktransbank[0];
                    document.getElementsByName('BankTransactiontype')[0].value = Banktranstype[0];
                    document.getElementsByName('BankTransferBankBranch')[0].value = Banktransbankbranch[0];

                } else {
                    var cln = $("#primaryBankDiv").clone().find("input").val("").end();
                    $(cln).find('.dis-none').removeClass('dis-none');
                    $(cln).find('.dis-block').addClass('dis-none');
                    $('#divBankContent').append(cln)
                    document.getElementsByName('BankTransactionrefno')[i].value = Banktransnumber[i];
                    document.getElementsByName('BankTransactionDate')[i].value = Banktransdate[i];
                    document.getElementsByName('Banktransdate')[i].value = Banktransdte[i];
                    document.getElementsByName('BankTransferAmount')[i].value = Banktransamount[i];
                    document.getElementsByName('BankTransferBankName')[i].value = Banktransbank[i];
                    document.getElementsByName('BankTransactiontype')[i].value = Banktranstype[i];
                    document.getElementsByName('BankTransferBankBranch')[i].value = Banktransbankbranch[i];
                }
            });
        }
        if(modeofreceipt == 4)
        {
            var Forgnremitrefnumber = @Html.Raw(Json.Encode(Model.Foreignremittransrefno));
            var Forgnremitdate = @Html.Raw(Json.Encode(Model.ForeignremittransDate));
            var Forgnremtdte = @Html.Raw(Json.Encode(Model.Forgnremitdate));
            var ForgnCurramount = @Html.Raw(Json.Encode(Model.Foreigncurrencyamount));
            var ForgnCurrency = @Html.Raw(Json.Encode(Model.Foreigntransfercurrency));
            var Forgncurrconversnrate = @Html.Raw(Json.Encode(Model.Conversionrate));
            var ForgnremitINR = @Html.Raw(Json.Encode(Model.INRValue));
            var Forgnremitbank = @Html.Raw(Json.Encode(Model.Foreignremitbankname));
            var Forgnremitbankbranch = @Html.Raw(Json.Encode(Model.Foreignremitbankbranch));
            var Forgnremitcountry = @Html.Raw(Json.Encode(Model.Foreigntransfercountry));

            $.each(Forgnremitrefnumber, function (i, val) {

                if (i == 0) {
                    document.getElementsByName('Foreignremittransrefno')[0].value = Forgnremitrefnumber[0];
                    document.getElementsByName('ForeignremittransDate')[0].value = Forgnremitdate[0];
                    document.getElementsByName('Forgnremitdate')[0].value = Forgnremtdte[0];
                    document.getElementsByName('Foreigncurrencyamount')[0].value = ForgnCurramount[0];
                    document.getElementsByName('Foreigntransfercurrency')[0].value = ForgnCurrency[0];
                    document.getElementsByName('Conversionrate')[0].value = Forgncurrconversnrate[0];
                    document.getElementsByName('INRValue')[0].value = ForgnremitINR[0];
                    document.getElementsByName('Foreignremitbankname')[0].value = Forgnremitbank[0];
                    document.getElementsByName('Foreignremitbankbranch')[0].value = Forgnremitbankbranch[0];
                    document.getElementsByName('Foreigntransfercountry')[0].value = Forgnremitcountry[0];

                } else {
                    var cln = $("#primaryForgnRemitDiv").clone().find("input").val("").end();
                    $(cln).find('.dis-none').removeClass('dis-none');
                    $(cln).find('.dis-block').addClass('dis-none');
                    $('#divForgnRemitContent').append(cln)
                    document.getElementsByName('Foreignremittransrefno')[i].value = Forgnremitrefnumber[i];
                    document.getElementsByName('ForeignremittransDate')[i].value = Forgnremitdate[i];
                    document.getElementsByName('Forgnremitdate')[i].value = Forgnremtdte[i];
                    document.getElementsByName('Foreigncurrencyamount')[i].value = ForgnCurramount[i];
                    document.getElementsByName('Foreigntransfercurrency')[i].value = ForgnCurrency[i];
                    document.getElementsByName('Conversionrate')[i].value = Forgncurrconversnrate[i];
                    document.getElementsByName('INRValue')[i].value = ForgnremitINR[i];
                    document.getElementsByName('Foreignremitbankname')[i].value = Forgnremitbank[i];
                    document.getElementsByName('Foreignremitbankbranch')[i].value = Forgnremitbankbranch[i];
                    document.getElementsByName('Foreigntransfercountry')[i].value = Forgnremitcountry[i];
                }
            });
        }
        if(modeofreceipt == 5)
        {
            var TDSCertificateno = @Html.Raw(Json.Encode(Model.TDSCertificateNumber));
            var TDSDocNme = @Html.Raw(Json.Encode(Model.TDSDocName));
            var TDSDocmntpath = @Html.Raw(Json.Encode(Model.TDSDocPath));
            $.each(TDSCertificateno, function (i, val) {

                if (i == 0) {
                    document.getElementsByName('TDSCertificateNumber')[0].value = TDSCertificateno[0];

                    document.getElementsByClassName('link1')[0].text = TDSDocNme[0];
                    document.getElementsByClassName('HiddenDocName')[i].value = TDSDocNme[i];
                    document.getElementsByClassName('HiddenDocPath')[i].value = TDSDocmntpath[i];
                    document.getElementsByClassName('link1')[0].href = "ShowDocument?file=" + TDSDocmntpath[0] + "&filepath=~%2FContent%2FOtherDocuments%2F";
                } else {
                    var cln = $("#primaryTDSDiv").clone().find("input").val("").end();
                    $(cln).find('.dis-none').removeClass('dis-none');
                    $(cln).find('.dis-block').addClass('dis-none');
                    $('#divTDSContent').append(cln)
                    document.getElementsByName('TDSCertificateNumber')[i].value = TDSCertificateno[i];

                    document.getElementsByClassName('link1')[i].text = TDSDocNme[i];
                    document.getElementsByClassName('HiddenDocName')[i].value = TDSDocNme[i];
                    document.getElementsByClassName('HiddenDocPath')[i].value = TDSDocmntpath[i];
                    document.getElementsByClassName('link1')[i].href = "ShowDocument?file=" + TDSDocmntpath[i] + "&filepath=~%2FContent%2FOtherDocuments%2F";
                }
            });
        }
    }

    $("#selecttransfercountry").change(function () {
            var CountryID = $(this).val();
            $.getJSON("@Url.Action("LoadCurrency", "CoreAccounts")", { CountryId: CountryID },
                        function (locationdata) {
                            var select = $("#selecttransfercurrency");
                            //select.empty();

                            $.each(locationdata, function (index, itemData) {
                                $("#selecttransfercurrency").val(itemData.id) ; ;
                                //select.append($('<option/>', {
                                //    value: itemData.id,
                                //    text: itemData.name
                                //}));
                            });
                        });


                var currencyid = $("#selecttransfercurrency").val();
                var txtbox = $(this).closest('#primaryForgnRemitDiv').find('input[name="Conversionrate"]');
                var getexchangerate = 'Loadexchangerate';
                $.ajax({
                    type: "POST",
                    url: getexchangerate,
                    data: { Currencyid: currencyid },
                    //contentType: "application/json; charset=utf-8",
                    //dataType: "json",
                    success: function (result) {
                        $(txtbox).val(result.value);
                    }
                });


    });

    $("#txtforgncurrencyamt").change(function () {

        var amount = $(this).val();
        var conversionrate = $("#txtforgncurncyconversionrate").val();

        var convertedamount = amount * conversionrate;

        $("#txtIndianvalueamount").val(convertedamount.toFixed(0));


    });
    $("#txtreceiptamount").change(function () {
        var rcvamount = $(this).val();
        var invoiceval = parseFloat($("#txtinvoicevalue").val());
        var prevreceipttotl = parseFloat($("#txtTotalPrevReceiptValue").val());
        var balreceiptval = invoiceval - prevreceipttotl;
        //if(rcvamount > balreceiptval)
        //{
        //    $('#MsgValidation').html("The Receipt value cannot exceed the Invoice value");
        //    $('#ValidationModal').modal('toggle');
        //    return false;
        //}
        var curroverheadamt = $("#txtcurrentreceiptoverheads").val();
        var sancvalue = $("#txtProjectValue").val();
        var totalpjctoh = $("#txtProjecttotalOH").val();
        var currohamount = (rcvamount / sancvalue) * totalpjctoh;
        $("#txtcurrentreceiptoverheads").val(currohamount.toFixed(0));
        calcllocbreakup();
        calctaxamount();
    });
    function calcllocbreakup() {
        // var amount = parseFloat($("#txtcurrentreceiptoverheads").val());
        var sanctionval = parseFloat($("#txtProjectValue").val());
        var receiptvalue = parseFloat($("#txtreceiptamount").val());
        var currreceiptOHvalue = parseFloat($("#txtcurrentreceiptoverheads").val());
        var totaloverheads = parseFloat($("#txtProjecttotalOH").val());
        var totalprevrcvoverheads = parseFloat($("#txtPrevReceiptOH").val());
        var totaloverheadpercentage = parseFloat($("#txtOHpercenttotal").val());
        var projecttype = parseFloat($('input[name="ProjectType"').val());
        //var newcurrrcvOH = (receiptvalue / sanctionval) * totaloverheads;
        //document.getElementsByName('CurrentReceiptOverheads')[0].value = newcurrrcvOH;
        var totalrcvOH = currreceiptOHvalue + totalprevrcvoverheads;

        if (projecttype == 1 && totalrcvOH > totaloverheads)
        {
            $('#MsgValidation').html("The total Receipt Overhead value cannot exceed the total Overheads allocated for the current project");
            $('#ValidationModal').modal('toggle');
            return false;
        }
        var totalbreakup = 0;
        $('#ProjectList tr').each(function (idx, val) {
            var percentage = $(this).find('input[name$=".OverheadPercentage"]').val();
            var txtpercent = parseFloat(percentage);
            //  var result = parseFloat((currreceiptOHvalue * txtpercent) / 100);
            var result = ((txtpercent / totaloverheadpercentage) * currreceiptOHvalue).toFixed(0);
            if (!isNaN(result)) {
                $(this).find('input[name$=".OverheadAmount"]').val(result);
            }
            totalbreakup += parseFloat(result);
        });
        if(totalbreakup > currreceiptOHvalue)
        {
            var roundoffdiff = parseFloat(totalbreakup - currreceiptOHvalue).toFixed(0);
        }
        if(totalbreakup < currreceiptOHvalue)
        {
            var roundoffdiff = parseFloat(currreceiptOHvalue - totalbreakup).toFixed(0);
        }
        if(parseFloat(totalbreakup) > currreceiptOHvalue && roundoffdiff > 0 && roundoffdiff < 5)
        {
            $('#ProjectList tr').each(function (idx, val) {
                var percentage = $(this).find('input[name$=".OverheadPercentage"]').val();
                var overheadsid = $(this).find('input[name$=".OverheadtypeId"]').val();
                var txtpercent = parseFloat(percentage);
                //  var result = parseFloat((currreceiptOHvalue * txtpercent) / 100);
                var result = ((txtpercent / totaloverheadpercentage) * currreceiptOHvalue).toFixed(0);
                if (overheadsid == 5 || overheadsid == 8 || overheadsid == 10 || overheadsid == 12 || overheadsid == 14 || overheadsid == 16 || overheadsid == 18 || overheadsid == 20 || overheadsid == 22)
                {
                    result = (((txtpercent / totaloverheadpercentage) * currreceiptOHvalue) - roundoffdiff).toFixed(0);
                }
                if (!isNaN(result)) {
                    $(this).find('input[name$=".OverheadAmount"]').val(result);
                }
                totalbreakup += parseFloat(result);
            });
        }
        if(parseFloat(totalbreakup) < currreceiptOHvalue && roundoffdiff > 0 && roundoffdiff < 5)
        {
            $('#ProjectList tr').each(function (idx, val) {
                var percentage = $(this).find('input[name$=".OverheadPercentage"]').val();
                var overheadsid = $(this).find('input[name$=".OverheadtypeId"]').val();
                var txtpercent = parseFloat(percentage);
                //  var result = parseFloat((currreceiptOHvalue * txtpercent) / 100);
                var result = ((txtpercent / totaloverheadpercentage) * currreceiptOHvalue).toFixed(0);
                if (overheadsid == 5 || overheadsid == 8 || overheadsid == 10 || overheadsid == 12 || overheadsid == 14 || overheadsid == 16 || overheadsid == 18 || overheadsid == 20 || overheadsid == 22)
                {
                    result = (((txtpercent / totaloverheadpercentage) * currreceiptOHvalue) - roundoffdiff).toFixed(0);
                }
                if (!isNaN(result)) {
                    $(this).find('input[name$=".OverheadAmount"]').val(result);
                }
                totalbreakup += parseFloat(result);
            });
        }
        else if((parseFloat(totalbreakup) > currreceiptOHvalue && roundoffdiff > 5))
        {
            $('#MsgValidation').html("The total breakup and Overhead value din't match. Please check");
            $('#ValidationModal').modal('toggle');
            return false;
        }

    };

    function calctaxamount() {

        var cgstpercent = parseFloat($('input[name="CGSTPercentage"]').val());
        var sgstpercent = parseFloat($('input[name="SGSTPercentage"]').val());
        var igstpercent = parseFloat($('input[name="IGSTPercentage"]').val());
        var receiptamount = $("#txtreceiptamount").val();

        var cgstamt = ((receiptamount * cgstpercent) / 100).toFixed(0);
        var sgstamt = ((receiptamount * sgstpercent) / 100).toFixed(0)
        var igstamt = ((receiptamount * igstpercent) / 100).toFixed(0)

        $("#txtreceiptCGST").val(cgstamt);
        $("#txtreceiptSGST").val(sgstamt);
        $("#txtreceiptIGST").val(igstamt);
        
    };
    //$("#txtcurrentreceiptoverheads").change(function () {

    //    var amount = $(this).val();
    //    var sanctionval = parseFloat($("#txtProjectValue").val());
    //    var receiptvalue = parseFloat($("#txtreceiptamount").val());
    //    var totaloverheads = parseFloat($("#txtProjecttotalOH").val());
    //    var totalprevrcvoverheads = parseFloat($("#txtPrevReceiptOH").val());

    //    var newcurrrcvOH = (receiptvalue / sanctionval) * totaloverheads;
    //    document.getElementsByName('CurrentReceiptOverheads')[i].value = newcurrrcvOH;

    //    var amt = [];
    //    var percent = [];
    //    //var headwisetotalvalue = [];

    //    $('input[name="item.OverheadAmount"]').each(function (idx, val) { amt.push($(val).val()); });
    //    $('input[name="item.OverheadPercentage"]').each(function (idx, val) { percent.push($(val).val()); });
    //    amt.sort();
    //    percent.sort();
    //    $.each(amt, function (i, val) {
    //        var txtamt = parseFloat(document.getElementsByName('item.OverheadAmount')[i].value);
    //        var txtpercent = parseFloat(document.getElementsByName('item.OverheadPercentage')[i].value);
    //        var result = (newcurrrcvOH * txtpercent) / 100;
    //        if (!isNaN(result)) {
    //            document.getElementsByName('item.OverheadAmount')[i].value = result;
    //        }
    //    });


    //});

    // To calculate net total
    //function calculatenettotal() {

    //    var nettotalvalue = 0;
    //    var allocationtotalvalue = [];
    //    var receivablestotalvalue = [];
    //  //  var receivablestotal = parseint($('#txtreceivablestotal').val());
    //    var totaltax = parseInt($('#txttotaltaxamount').val());
    //    var receiptamount = $('#txtreceiptamount').val();
    //    $('input[name="AllocationAmount"]').each(function (idx, val) { allocationtotalvalue.push($(val).val()); });
    //    $('input[name="ReceivablesAmount"]').each(function (idx, val) { receivablestotalvalue.push($(val).val()); });

    //    allocationtotalvalue.sort();
    //    receivablestotalvalue.sort();
    //    var totalallocation = 0;
    //    var receivablestotal = 0;

    //    $.each(allocationtotalvalue, function (i, val) {

    //        if (i == 0) {

    //            var txtallocationValue = document.getElementsByName('AllocationAmount')[0].value;
    //            totalallocation += parseFloat(txtallocationValue);

    //        } else {
    //            var txtallocationValue = document.getElementsByName('AllocationAmount')[i].value;
    //            totalallocation += parseFloat(txtallocationValue);

    //        }
    //    });
    //    $.each(receivablestotalvalue, function (i, val) {

    //        if (i == 0) {

    //            var txtreceivablesValue = document.getElementsByName('ReceivablesAmount')[0].value;
    //            receivablestotal += parseFloat(txtreceivablesValue);

    //        } else {
    //            var txtreceivablesValue = document.getElementsByName('ReceivablesAmount')[i].value;
    //            receivablestotal += parseFloat(txtreceivablesValue);
    //        }
    //    });

    //    nettotalvalue = (totalallocation + totaltax) - receivablestotal;
    //    if (!isNaN(nettotalvalue)) {
    //        $("#txtnettotal").val(nettotalvalue.toFixed(0));
    //        // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
    //    }
    //}
    /* Tab Sections End */

    /* Invoice number change */
    //$("#selectinvoicenumber").change(function () {

    //    var invoiceno = $(this).val();
    //    var getinvoicedetails = 'Loadinvoicedetails';
    //    $.ajax({
    //        type: "POST",
    //        url: getinvoicedetails,
    //        data: { invoiceid: invoiceno },
    //        //contentType: "application/json; charset=utf-8",
    //        //dataType: "json",
    //        success: function (result) {
    //            $("#txtinvoicedate").val(result.Invoicedatestrng);
    //            $("#txtinvoicevalue").val(result.InvoiceValue);
    //            $("#txtinvoicedetails").val(result.InvoiceDetails);
    //            $("#txtcgstamount").val(result.CGSTAmount);
    //            $("#txtsgstamount").val(result.SGSTAmount);
    //            $("#txtigstamount").val(result.IGSTAmount);
    //            $("#txttotaltaxamount").val(result.TotalTaxAmount);

    //        },
    //        error: function (err) {
    //            console.log("error1 : " + err);
    //        }
    //    });
    //});
    /* Invoice number change */
</script>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
