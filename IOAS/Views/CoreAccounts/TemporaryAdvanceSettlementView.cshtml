@model IOAS.Models.TemporaryAdvanceModel
@{
    ViewBag.Title = "Temporary Advance Settlement";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("TemporaryAdvanceSettlement", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formADV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Temporary Advance Settlement</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control", @disabled = true })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.TemporaryAdvanceId)
                    @Html.HiddenFor(m => m.TempAdvSettlId)
                    @Html.HiddenFor(m => m.GetADVCommitment_f)
                    @Html.HiddenFor(m => m.SubCode)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SourceReferenceNumber)
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control", @disabled = true })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>


            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.TempAdvSettlementNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Advance Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Project</label>
                                                    @Html.TextBoxFor(m => m.ProjectTitle, new { @class = "form-control", @id = "txtProjectTitle", @readonly = true })
                                                    @*@Html.DropDownListFor(m => m.ProjectId, new SelectList(ViewBag.Project, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "selectproject" })*@
                                                    @Html.ValidationMessageFor(m => m.ProjectTitle)
                                                    @Html.Hidden("ProjectId")
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PI</label>
                                                    @Html.TextBoxFor(m => m.PIName, new { @class = "form-control", @id = "txtPIName", @readonly = true })
                                                    @*@Html.DropDownListFor(m => m.PIId, new SelectList(ViewBag.PIName, "id", "name"), "Select any", new { @class = "form-control selectpicker", @id = "txtPI" })*@
                                                    @Html.ValidationMessageFor(m => m.PIName)
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Department</label>
                                                    @Html.TextBoxFor(m => m.ClaimingDepartment, new { @class = "form-control", @id = "txtClaimingDept", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.ClaimingDepartment)
                                                </div>
                                            </div>
                                            @*<div class="col-md-2">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Advance Amount</label>
                                                        @Html.TextBoxFor(m => m.TemporaryAdvanceValue, new { @class = "form-control", @id = "txtTemporaryAdvanceAmount", @readonly = true })
                                                        @Html.ValidationMessageFor(m => m.TemporaryAdvanceValue)
                                                    </div>
                                                </div>*@
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Name of Receiver</label>
                                                    @Html.TextBoxFor(m => m.NameofReceiver, new { @class = "form-control", @id = "txtReceiverName", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.NameofReceiver)
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Temporary Advance Number</label>
                                                    @Html.TextBoxFor(m => m.TemporaryAdvanceNumber, new { @class = "form-control", @id = "txtClaimingDept", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.TemporaryAdvanceNumber)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12 mt30">

                                    <div class="bl-lg-panel-box">
                                        <div class="bl-lg-panel-box-hd mb-null">
                                            <div class="">
                                                <h3 class="fn-s-bold">Bill Details</h3>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="">
                                                    <table class="table table-bordered mb-null">
                                                        <thead>
                                                            <tr>
                                                                <th style="width:400px">Bill Number</th>
                                                                <th style="width:400px">Vendor Name</th>
                                                                <th style="width:400px">Particulars</th>
                                                                @*<th style="width:150px">Rate</th>
                                                                    <th style="width:100px">Qty</th>*@
                                                                <th style="width:150px">Amount</th>
                                                                <th style="width:50px"></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="tempAdvance">
                                                            <tr>
                                                                <td>
                                                                    @Html.TextBoxFor(m => m.VendorBillNumber, new { @class = "form-control", @required = "required", @id = "txtVendorBillNumber" })
                                                                    @Html.ValidationMessageFor(m => m.VendorBillNumber)
                                                                </td>
                                                                <td>
                                                                    @Html.TextBoxFor(m => m.VendorName, new { @class = "form-control", @required = "required", @id = "txtVendorName" })
                                                                    @Html.ValidationMessageFor(m => m.VendorName)
                                                                </td>
                                                                <td>
                                                                    @Html.TextBoxFor(m => m.Particulars, new { @class = "form-control", @required = "required", @id = "txtParticulars" })
                                                                    @Html.ValidationMessageFor(m => m.Particulars)
                                                                    @Html.Hidden("DetailsID")
                                                                </td>
                                                                @*<td>
                                                                        @Html.TextBoxFor(m => m.RateofItem, new { @class = "form-control", @required = "required", @onkeypress = "return ValidateDecimalOnly(event)", @onkeyup = "calculateamount()", @onchange = "calculatetotalamount()", @onblur = "calcReceiptorPaymentamt()", @id = "txtRateofItem" })
                                                                        @Html.ValidationMessageFor(m => m.RateofItem)
                                                                    </td>
                                                                    <td>
                                                                        @Html.TextBoxFor(m => m.QuantityofItem, new { @class = "form-control", @required = "required", @onkeypress = "return ValidateNumberOnly(e)", @onkeyup = "calculateamount()", @onchange = "calculatetotalamount()", @onblur = "calcReceiptorPaymentamt()", @id = "txtQuantity" })
                                                                        @Html.ValidationMessageFor(m => m.QuantityofItem)
                                                                    </td>*@
                                                                <td>
                                                                    @Html.TextBoxFor(m => m.AmountofItem, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "txtAmount", @onblur = "calculatetotalamount()" })
                                                                    @Html.ValidationMessageFor(m => m.AmountofItem)
                                                                </td>
                                                                <td>
                                                                    <a href="javascript:void(0)" class="btn-sm btn btn-danger removeTempAdvance dis-none"><i class="ion-android-close"></i></a>
                                                                </td>
                                                            </tr>

                                                        </tbody>

                                                    </table>
                                                    @*<div class="row p-b-sm">
                                                            <div class="col-md-12 mt-md">
                                                                <button type="button" id="btnAddTempAdv" class="btn-primary btn">Add New</button>
                                                            </div>
                                                        </div>*@
                                                    <div class="row mt20 mr10">
                                                        <div class="col-md-3 mt-md">
                                                            <button type="button" id="btnAddTempAdv" class="btn-primary btn">Add New</button>
                                                        </div>
                                                        <div class="col-md-3 col-md-offset-6 mt-md">
                                                            <div class="">
                                                                <label>
                                                                    Total Bill Amount
                                                                </label>
                                                                @Html.TextBoxFor(m => m.TotalBillAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @id = "txtTotalbillAmount", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.TotalBillAmount)
                                                            </div>
                                                        </div>
                                                        <div class="col-md-3 col-md-offset-9 mt-md">
                                                            <div class="">
                                                                <label>Advance Amount</label>
                                                                @Html.TextBoxFor(m => m.TemporaryAdvanceValue, new { @class = "form-control", @id = "txtTemporaryAdvanceAmount", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.TemporaryAdvanceValue)
                                                            </div>
                                                        </div>
                                                        <div id="divPayment" class="col-md-3 col-md-offset-9 dis-none mt-md">
                                                            <div>
                                                                <label>
                                                                    Payment Value
                                                                </label>
                                                                @Html.TextBoxFor(m => m.PaymentAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.PaymentAmount)
                                                            </div>
                                                        </div>
                                                        <div id="divRecevied" class="col-md-3 col-md-offset-9 dis-none mt-md">
                                                            <div>
                                                                <label>
                                                                    Amount to be recevied
                                                                </label>
                                                                @Html.TextBoxFor(m => m.ReceiptAmount, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = true })
                                                                @Html.ValidationMessageFor(m => m.ReceiptAmount)
                                                            </div>
                                                        </div>

                                                    </div>


                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*<div class="row">
                                <div class="col-md-12 text-center mb-md mt-md">
                                    <input type="submit" class="btn btn-primary mr10" value="Submit" name="Button" id="btnSubmit" />
                                    <input type="button" onclick="window.location.href='@Url.Action("TravelAdvancePaymentList", "CoreAccounts")';" class="btn btn-default" value="Close" id="btnclose" />
                                </div>
                            </div>*@
                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("TemporaryAdvanceSettlementList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div class="row mt30">


</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<input type="hidden" id="currentRefId" value="@Model.TempAdvSettlId" />
<input type="hidden" id="processGuideLineId" value="@ViewBag.processGuideLineId" />
@Html.Partial("_ProcessStatus")
<script>
    var dis = '@ViewBag.disabled';
    if (dis != "") {

        $('.form-control').prop('disabled', true);
        $('.ion-trash-a').removeClass();
        $('#btnAddPO').hide();
        $("input[type='radio']").prop('disabled', true);
        $('#selectCommitment').hide();
        $('#btnReset,#btnbookcommitment,#btnbookcommitment,#btnCollapseSrchCommit').hide();
        $('input[type="checkbox"]').prop('disabled', true);
        $('input[type="file"],#btnAddAttachment').hide();
        $('#ProcessStatusContainer .form-control').prop('disabled', false);
        $('.removePaymentBUDetail,#btnAddExpense,#btnAddInvoiceBU,#divTDetail,#btnAddPaymentBU,a[name="removeTDetails"]').hide();
        $('.btn-circle').removeClass();
        $('.ion-close-round').removeClass();

    }
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#TravelToDate, #TravelFromDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        $('#btnAddExpense').addClass('dis-none');
        $('#btnReset').removeClass('dis-none');
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        var receivername =  $('#txtReceiverName').val();
        $('#lblVendorName').html(receivername)
        calculatetotalamount();
        CalculateDeductionTotal();
        if($('#TempAdvSettlId').val() || 0 != 0){
            $('#GetADVCommitment_f').val('false');
        }
        var payAmt = parseFloat($('#PaymentAmount').val()) || 0;
        var recAmt = parseFloat($('#ReceiptAmount').val()) || 0;
        if( payAmt > 0){
            CalculatePaymentValue();
        }else if(recAmt > 0){
            CalculateReversedAmount();
        }else{
            $('#CommitmentAmount').val('0');
        }
        $('#NeedUpdateTransDetail').val('false');
    });
    $(document).on('click', 'a.removeTempAdvance', function () {
        $(this).closest('tr').remove();
        calculatetotalamount();
    });
    $('#btnAddTempAdv').click(function () {
        var cln = $('#tempAdvance tr:first').clone().find("input,select").val("").end();
        $(cln).find('a.dis-none').removeClass('dis-none');
        //$(cln).find('td.tdDDLTraveler').removeClass('dis-none');
        //$(cln).find('td.tdTxtTraveler').addClass('dis-none');
        $('#tempAdvance').append(cln);
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    function formSave(){
        var isValid = $('#formADV').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
            $('#formADV').submit();
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    if (@Model.TempAdvSettlId > 0)
    {

        var detailsId = @Html.Raw(Json.Encode(Model.DetailsID));
        var particulars = @Html.Raw(Json.Encode(Model.Particulars));
        @*var rate = @Html.Raw(Json.Encode(Model.RateofItem));
        var quantity = @Html.Raw(Json.Encode(Model.QuantityofItem));*@
        var amount = @Html.Raw(Json.Encode(Model.AmountofItem));
        var vendorname = @Html.Raw(Json.Encode(Model.VendorName));
        var vendorbillnumber = @Html.Raw(Json.Encode(Model.VendorBillNumber));
        $.each(detailsId, function (i, val) {

            if (i == 0) {
                document.getElementsByName('DetailsID')[0].value = detailsId[0];
                document.getElementsByName('Particulars')[0].value = particulars[0];
                //document.getElementsByName('RateofItem')[0].value = rate[0];
                //document.getElementsByName('QuantityofItem')[0].value = quantity[0];
                document.getElementsByName('AmountofItem')[0].value = amount[0];
                document.getElementsByName('VendorName')[0].value = vendorname[0];
                document.getElementsByName('VendorBillNumber')[0].value = vendorbillnumber[0];

            } else {

                var cln = $('#tempAdvance tr:first').clone().find("input,select").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                $('#tempAdvance').append(cln);
                document.getElementsByName('DetailsID')[i].value = detailsId[i];
                document.getElementsByName('Particulars')[i].value = particulars[i];
                //document.getElementsByName('RateofItem')[i].value = rate[i];
                //document.getElementsByName('QuantityofItem')[i].value = quantity[i];
                document.getElementsByName('AmountofItem')[i].value = amount[i];
                document.getElementsByName('VendorName')[i].value = vendorname[i];
                document.getElementsByName('VendorBillNumber')[i].value = vendorbillnumber[i];
            }
        });
    }
    if (@Model.TempAdvSettlId == 0)
    {
        var detailsId = @Html.Raw(Json.Encode(Model.DetailsID));
        var particulars = @Html.Raw(Json.Encode(Model.Particulars));
        @*var rate = @Html.Raw(Json.Encode(Model.RateofItem));
        var quantity = @Html.Raw(Json.Encode(Model.QuantityofItem));*@
        var amount = @Html.Raw(Json.Encode(Model.AmountofItem));

        $.each(detailsId, function (i, val) {
            if (i == 0) {
                document.getElementsByName('DetailsID')[0].value = detailsId[0];
                document.getElementsByName('Particulars')[0].value = particulars[0];
                //document.getElementsByName('RateofItem')[0].value = rate[0];
                //document.getElementsByName('QuantityofItem')[0].value = quantity[0];
                document.getElementsByName('AmountofItem')[0].value = amount[0];

            } else {

                var cln = $('#tempAdvance tr:first').clone().find("input,select").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                $('#tempAdvance').append(cln);
                document.getElementsByName('DetailsID')[i].value = detailsId[i];
                document.getElementsByName('Particulars')[i].value = particulars[i];
                //document.getElementsByName('RateofItem')[i].value = rate[i];
                //document.getElementsByName('QuantityofItem')[i].value = quantity[i];
                document.getElementsByName('AmountofItem')[i].value = amount[i];
            }
        });
    }


    function calculateamount() {
        var rate = [];
        var quantity = [];
        var amount = [];

        $('input[name="RateofItem"]').each(function (idx, val) { rate.push($(val).val()); });
        $('input[name="QuantityofItem"]').each(function (idx, val) { quantity.push($(val).val()); });

        rate.sort();
        quantity.sort();
        //alert(oldallocatevalue);
        $.each(rate, function (i, val) {

            if (i == 0) {

                var txtrateValue = document.getElementsByName('RateofItem')[0].value;
                var txtquantityValue = document.getElementsByName('QuantityofItem')[0].value;
                var result = parseInt(txtrateValue) * parseInt(txtquantityValue);
                if (!isNaN(result)) {
                    document.getElementsByName('AmountofItem')[0].value = result;
                }

            } else {

                var txtrateValue = document.getElementsByName('RateofItem')[i].value;
                var txtquantityValue = document.getElementsByName('QuantityofItem')[i].value;
                var result = parseInt(txtrateValue) * parseInt(txtquantityValue);
                if (!isNaN(result)) {
                    document.getElementsByName('AmountofItem')[i].value = result;
                }
            }
        });
        $.each(quantity, function (i, val) {
            if (i == 0) {

                var txtrateValue = document.getElementsByName('RateofItem')[0].value;
                var txtquantityValue = document.getElementsByName('QuantityofItem')[0].value;
                if(txtrateValue != "" && txtquantityValue != "")
                {
                    var result = parseInt(txtrateValue) * parseInt(txtquantityValue);
                }
                else
                {
                    var result = 0;
                }

                if (!isNaN(result)) {
                    document.getElementsByName('AmountofItem')[0].value = result;
                }

            } else {

                var txtrateValue = document.getElementsByName('RateofItem')[i].value;
                var txtquantityValue = document.getElementsByName('QuantityofItem')[i].value;
                if(txtrateValue != "" && txtquantityValue != "")
                {
                    var result = parseInt(txtrateValue) * parseInt(txtquantityValue);
                }
                else
                {
                    var result = 0;
                }
                if (!isNaN(result)) {
                    document.getElementsByName('AmountofItem')[i].value = result;
                }
            }
        });
    }
    function calcReceiptorPaymentamt() {

        var advamt = parseFloat($("#txtTemporaryAdvanceAmount").val()) || 0;
        var billamt = parseFloat($("#txtTotalbillAmount").val()) ||0;
        if(advamt > billamt)
        {
            var receiptamt = advamt - billamt
            $("#ReceiptAmount").val(receiptamt.toFixed(2));
            $("#PaymentAmount").val(0);
            $("#divRecevied").removeClass("dis-none");
            $("#divPayment").addClass("dis-none");
        }
        else if (billamt > advamt)
        {
            var payamt = billamt - advamt
            $("#PaymentAmount").val(payamt.toFixed(2));
            $("#ReceiptAmount").val(0);
            $("#divRecevied").addClass("dis-none");
            $("#divPayment").removeClass("dis-none");
        }else{
            $("#divRecevied,#divPayment").addClass("dis-none");
        }
    }
    function calculatetotalamount() {
        $('#GetADVCommitment_f').val('true');
        $('#NeedUpdateTransDetail').val('true');
        var total = 0;
        $('input[name="AmountofItem"]').each(function (idx, ele) {
            var amtofitem = parseFloat($(this).val()) || 0;
            total += amtofitem;
        });
        $("#txtTotalbillAmount").val(total.toFixed(2));
        calcReceiptorPaymentamt();
    }
    $('#AdvanceValue, #AdvanceValue, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });

    $('#txtPI').change(function () {
        $('#NeedUpdateTransDetail').val('True');
        var PIID = $(this).val();
        $.getJSON("@Url.Action("LoadPIProject", "CoreAccounts")", { PIId: PIID },
                    function (locationdata) {
                        var select = $("#selectproject");
                        select.empty();

                        $.each(locationdata, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name
                            }));
                            $('#txtReceiverName').val(itemData.code);
                            $('#txtClaimingDept').val(itemData.pidepartment);
                        });
                        select.selectpicker('refresh');
                    });

    });

    $('#selectproject').change(function () {
        $('#NeedUpdateTransDetail').val('True');
        var projectid = $(this).val();
        $.getJSON("@Url.Action("LoadProjectDetails", "CoreAccounts")", { ProjectId: projectid },
                   function (locationdata) {
                       if(locationdata.ProjectType == "Sponsored")
                       {
                           $("#txtprojecttype").val(locationdata.ProjectType + " - " + locationdata.SponProjectCategory + " - " + locationdata.SponSchemeName);
                       }
                       if(locationdata.ProjectType == "Consultancy")
                       {
                           $("#txtprojecttype").val(locationdata.ProjectType + " - " + locationdata.ConsFundingCategory);
                       }

                   });
        $.getJSON("@Url.Action("LoadAdvanceDetails", "CoreAccounts")", { ProjectId: projectid },
                    function (locationdata) {
                        var pendingamount = 0;
                        var i = 0;
                        if (locationdata.length == 0)
                        {
                            $("#txtPendingSettlementamt").val(0);
                            $("#txtNoofUnsettledAdv").val(0);
                            $("#txtPendingSettlementAdvNum").val('Nil');
                            $("#Pendsettlemntnos").find('a').addClass('dis-none');
                        }
                        if (locationdata.length == 1)
                        {
                            $.each(locationdata, function (index, itemData) {
                                pendingamount += parseFloat(itemData.amount);
                                $("#txtPendingSettlementamt").val(pendingamount.toFixed(0));
                                $("#txtNoofUnsettledAdv").val(itemData.count);
                                $("#txtPendingSettlementAdvNum").val(locationdata[0].name);
                                i++
                            });
                            $("#Pendsettlemntnos").find('a.dis-none').removeClass('dis-none');
                        }
                        if(locationdata.length >= 2)
                        {
                            $.each(locationdata, function (index, itemData) {
                                pendingamount += parseFloat(itemData.amount);
                                $("#txtPendingSettlementamt").val(pendingamount.toFixed(0));
                                $("#txtNoofUnsettledAdv").val(itemData.count);
                                $("#txtPendingSettlementAdvNum").val(locationdata[0].name + ", " + locationdata[1].name);
                                i++
                            });
                            $("#Pendsettlemntnos").find('a.dis-none').removeClass('dis-none');
                            $('#MsgValidation').html("There are two or more settlements pending for Temporary Advance got earlier for the selected project. Please do atleast one settlement to proceed with next Temporary Advance");
                            $('#ValidationModal').modal('toggle');
                            return false;
                        }
                    });
        var token = $("input[name=__RequestVerificationToken]").val();
        var searchdata = { "__RequestVerificationToken": token, "Projectid": projectid, };
        $.ajax({
            url: '@Url.Action("_PendingSettlementDetails", "CoreAccounts")?projectid=' + projectid,
            type: "POST",
            contentType: "application/x-www-form-urlencoded",
            data: searchdata,
            success: function (data) {
                $("#gridViewDetailsdata").html(data);
                // $('#ViewDetailsModal').css("display", "none");
            }
        });
    });

    function fillMasterDropDown(ele, data, fillDafaultText,valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if(valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        }else{
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }
    function GetTransactionDetails() {
        var subcode = $('#SubCode').val();
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTempAdvTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "TMS","tSubCode" : subcode },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        if(item.TDSPercentage == null){
                            amtEle.val('');
                        }else{
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }

                        amtEle.addClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                        amtEle.addClass('required');
                        if(item.TDSPercentage != null){
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
        //}
    }

    function AddNewExpense(){
        var subcode = $('#SubCode').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "TMS","tSubCode" : subcode},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    $('#CreditorAmount, #ExpenseAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        var ttlAdvAmt = parseFloat($('#txtTemporaryAdvanceAmount').val()) || 0;
        var billAmt = parseFloat($('#txtTotalbillAmount').val()) || 0;
        var balAdvAmt = 0, balBillAmt = 0;

        if(ttlAdvAmt < billAmt)
        {
            $("#tbodyCommitmentSelList tr").each(function(){
                var elePayment = $(this).find("input[name$='.PaymentAmount']");
                var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
                var parseVal = parseFloat($(elePayment).val()) || 0;
                var avlBal = parseFloat($(eleAvlBal).val()) || 0;
                if (parseVal > avlBal)
                    msg = "Commitment payment value should not be greater than available balance."
            });
            //balBillAmt  = billAmt - ttlAdvAmt;
            $('#CreditorAmount').val(billAmt);
            if (balBillAmt != commitmentAmt) {
                msg = 'There is a mismatch between the payment value and allocated commitment value. Please update the value to continue.';
            }
        }
        else if(ttlAdvAmt > billAmt)
        {
            $("#tbodyCommitmentSelList tr").each(function(){
                var elePayment = $(this).find("input[name$='.PaymentAmount']");
                var eleAvlBal = $(this).find('input[name$=".ReversedAmount"]');
                var parseVal = parseFloat($(elePayment).val()) || 0;
                var avlBal = parseFloat($(eleAvlBal).val()) || 0;
                if (parseVal < avlBal)
                    msg = "Commitment reversed value should not be less than booked value.";
            });
            //var balAmt = ttlAdvAmt - billAmt;
            $('#CreditorAmount').val(ttlAdvAmt);
            if (balAmt != commitmentAmt) {
                msg = 'There is a mismatch between amount to be recevied and allocated commitment value. Please update the value to continue.';
            }
        }else{
            $('#CreditorAmount,input[name="CreditAmount"],input[name="DebitAmount"]').val('0');
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val()) || 0;
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        var ttlAdvAmt = parseFloat($('#txtTemporaryAdvanceAmount').val()) || 0;
        var billAmt = parseFloat($('#txtTotalbillAmount').val()) || 0;
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;

        if(netCrAmt != netDrAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (ttlAdvAmt < billAmt && crAmt != billAmt ) {
            msg = 'There is a mismatch between bill value and transaction value. Please update the value to continue.';
        }
        if (ttlAdvAmt > billAmt && crAmt != ttlAdvAmt) {
            msg = 'There is a mismatch between bill value and transaction value. Please update the value to continue.';
        }
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
            $('#nextBtn').hide();
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
            $('#nextBtn').show();
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        //if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            setCommitmentAndTransValidation();
            var totalbillamt = parseFloat($("#txtTotalbillAmount").val());
            var advancerecvd = parseFloat($("#txtTemporaryAdvanceAmount").val());
            var resetCommit = $('#GetADVCommitment_f').val().toLowerCase();
            $('#btnbookcommitment,#btnCollapseSrchCommit').removeClass('dis-none');
            if (totalbillamt < advancerecvd && resetCommit == "true" )
            {
                $('#NeedUpdateTransDetail').val('true');
                $('#btnbookcommitment,#btnCollapseSrchCommit').addClass('dis-none');
                var status = confirm('The total bill amount is less than temporary advance amount. Please ensure that Bank Adjustment is prepared and balance amount is credited back to Project fund');
                if(status ){
                    getAdvCommitment($('#TemporaryAdvanceId').val(),true);
                    $('#GetADVCommitment_f').val('false');
                    $('#SubCode').val('2');
                }else{
                    hadError = true;
                }
            }else if(totalbillamt < advancerecvd){
                $('#SubCode').val('2');
                $('#btnbookcommitment,#btnCollapseSrchCommit').addClass('dis-none');
            }else if (totalbillamt > advancerecvd && resetCommit == "true")
            {
                $('#NeedUpdateTransDetail').val('true');
                var status = confirm('The total bill amount is greater than temporary advance amount. Please ensure that reimbursement is claimed by PI');
                if(status){
                    getAdvCommitment($('#TemporaryAdvanceId').val(),false);
                    $('#GetADVCommitment_f').val('false');
                    $('#SubCode').val('1');
                }else{
                    hadError = true;
                }
            }else if(totalbillamt == advancerecvd){
                $('#SubCode').val('');
                removeCommitmentAndTransValidation();
            }
            //var content = $('#tbodyCommitmentSrchList tr td:last').html();
            //if (content == '') {
            //    searchCommitment()
            //}

        }
        else if (currentTab == 1) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if($('#NeedUpdateTransDetail').val().toLowerCase() == 'true'){
                    GetTransactionDetails();
                }
                CalculateDeductionTotal();
            }
        }
        else if (currentTab == 2) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 3) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }

        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
    function getAdvCommitment(id,receipt){
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTemporaryADVCommitmentDetails", "CoreAccounts")",
            data: { "temporaryAdvanceId": id},
            dataType: "json",
            success: function (result) {
                fillCommitmentSrchAndSel(result,receipt);
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
