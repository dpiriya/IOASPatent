using IOAS.DataModel;
using IOAS.Infrastructure;
using IOAS.Models;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Web;

namespace IOAS.GenericServices
{
    public class CoreAccountsService
    {
        private static readonly Object lockObj = new Object();
        #region BOA
        public bool BOATransaction(BOAModel model)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int boaId = 0;
                        tblBOA boa = new tblBOA();
                        boa.Narration = model.Narration;
                        boa.PaymentMode = model.PaymentMode;
                        boa.PostedDate = model.PostedDate;
                        boa.RefBOAId = model.RefBOAId;
                        boa.Status = "Posted";
                        boa.BOAValue = model.BOAValue;
                        boa.FinancialYear = Common.GetCurrentFinYearId();
                        boa.TempVoucherNumber = model.TempVoucherNumber;
                        boa.TransactionTypeCode = model.TransactionTypeCode;
                        boa.VoucherNumber = model.VoucherNumber;
                        boa.VoucherType = model.VoucherType;
                        boa.RefTransactionCode = model.RefTransactionCode;
                        boa.RefNumber = model.RefNumber;
                        context.tblBOA.Add(boa);
                        context.SaveChanges();
                        boaId = boa.BOAId;
                        foreach (var item in model.BOATransaction)
                        {
                            int txId = 0;
                            tblBOATransaction tx = new tblBOATransaction();
                            tx.AccountHeadId = item.AccountHeadId;
                            tx.Amount = item.Amount;
                            tx.BOAId = boaId;
                            tx.Creditor_f = item.Creditor_f;
                            tx.Debtor_f = item.Debtor_f;
                            tx.Remarks = item.Remarks;
                            tx.SubLedgerType = item.SubLedgerType;
                            tx.TransactionType = item.TransactionType;
                            context.tblBOATransaction.Add(tx);
                            context.SaveChanges();
                            txId = tx.BOATransactionId;
                            if (item.SubLedgerType != null && item.SubLedgerType != 0)
                            {
                                tblBOASubTransaction subTX = new tblBOASubTransaction();
                                subTX.Amount = item.Amount;
                                subTX.BOATransactionId = txId;
                                subTX.Reconciliation_f = item.Reconciliation_f;
                                subTX.Remarks = item.Remarks;
                                subTX.SubLedgerId = item.SubLedgerId;
                                subTX.SubLedgerType = item.SubLedgerType;
                                subTX.StudentRoll = item.StudentRoll;
                                subTX.TransactionType = item.TransactionType;
                                context.tblBOASubTransaction.Add(subTX);
                                context.SaveChanges();

                                var summaryQuery = context.tblBOASummary.SingleOrDefault(m => m.AccountHeadId == item.SubLedgerId && m.SubLedgerType == item.SubLedgerType);
                                if (summaryQuery != null)
                                {
                                    if (item.TransactionType == "Credit")
                                        summaryQuery.Amount -= item.Amount;
                                    else if (item.TransactionType == "Debit")
                                        summaryQuery.Amount += item.Amount;
                                    context.SaveChanges();
                                }
                                else
                                {
                                    tblBOASummary summary = new tblBOASummary();
                                    summary.AccountHeadId = item.SubLedgerId;
                                    summary.SubLedgerType = item.SubLedgerType;
                                    if (item.TransactionType == "Credit")
                                        summary.Amount = item.Amount * -1;
                                    else if (item.TransactionType == "Debit")
                                        summary.Amount = item.Amount;
                                    context.tblBOASummary.Add(summary);
                                    context.SaveChanges();
                                }
                            }
                            else
                            {
                                var summaryQuery = context.tblBOASummary.SingleOrDefault(m => m.AccountHeadId == item.AccountHeadId && (m.SubLedgerType == null || m.SubLedgerType == 0));
                                if (summaryQuery != null)
                                {
                                    if (item.TransactionType == "Credit")
                                        summaryQuery.Amount -= item.Amount;
                                    else if (item.TransactionType == "Debit")
                                        summaryQuery.Amount += item.Amount;
                                    context.SaveChanges();
                                }
                                else
                                {
                                    tblBOASummary summary = new tblBOASummary();
                                    summary.AccountHeadId = item.AccountHeadId;
                                    if (item.TransactionType == "Credit")
                                        summary.Amount = item.Amount * -1;
                                    else if (item.TransactionType == "Debit")
                                        summary.Amount = item.Amount;
                                    context.tblBOASummary.Add(summary);
                                    context.SaveChanges();
                                }
                            }

                        }
                        foreach (var item in model.BOADetail ?? new List<BOADetailModel>())
                        {
                            tblBOADetail det = new tblBOADetail
                            {
                                Amount = item.Amount,
                                BOAId = boaId,
                                BudgetHead = item.BudgetHead,
                                CommitmentDetailId = item.CommitmentDetailId,
                                ProjectId = item.ProjectId,
                                Payment_f = item.Payment_f
                            };
                            context.tblBOADetail.Add(det);
                            context.SaveChanges();
                        }
                        foreach (var item in model.BOAPaymentDetail ?? new List<BOAPaymentDetailModel>())
                        {
                            tblBOAPaymentDetail paymentDet = new tblBOAPaymentDetail
                            {
                                Amount = item.Amount,
                                Reconciliation_f = item.Reconciliation_f,
                                PayeeBank = item.PayeeBank,
                                ReferenceDate = item.ReferenceDate,
                                ReferenceNumber = item.ReferenceNumber,
                                Remarks = item.Remarks,
                                BankHeadID = item.BankHeadID,
                                BOAId = boaId,
                                PayeeId = item.PayeeId,
                                PayeeName = item.PayeeName,
                                PayeeType = item.PayeeType,
                                PaymentMode = item.PaymentMode,
                                ChequeNumber = item.ChequeNumber,
                                TransactionID = item.TransactionID,
                                TransactionStatus = item.TransactionStatus,
                                TransactionType = item.TransactionType,
                                StudentRoll = item.StudentRoll
                            };
                            context.tblBOAPaymentDetail.Add(paymentDet);
                            context.SaveChanges();
                        }
                        transaction.Commit();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }
        }

        #endregion
        #region Payment
        #region Purchase Order
        #region Advance
        public int AdvanceBillPaymentIU(BillEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal? billAmount = 0, billTaxAmount = 0;
                        foreach (var poItem in model.PODetail)
                        {
                            billAmount += poItem.TotalAmount;
                            if (poItem.TaxPct != 0 || poItem.TaxPct != null)
                                billTaxAmount += poItem.TotalAmount * poItem.TaxPct / 100;
                        }
                        if (model.BillId == 0)
                        {
                            var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber);
                            if (existsQuery != null)
                                return -2;
                            //if (!String.IsNullOrEmpty(model.InvoiceNumber))
                            //{
                            //    var existsInvQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.InvoiceNumber == model.InvoiceNumber && m.InvoiceDate == model.InvoiceDate);
                            //    if (existsInvQuery != null)
                            //        return -4;
                            //}
                            int billId = 0;
                            tblBillEntry bill = new tblBillEntry();
                            bill.AdvancePercentage = model.AdvancePercentage;
                            bill.BillAmount = billAmount;
                            bill.SubCode = model.SubCode;
                            bill.BillNumber = Common.GetNewPOBillNo("ADV");
                            bill.BillTaxAmount = billTaxAmount;
                            bill.BillType = model.BillType;
                            bill.InvoiceDate = model.InvoiceDate;
                            bill.InvoiceNumber = model.InvoiceNumber;
                            bill.CommitmentAmount = model.CommitmentAmount;
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.DeductionAmount = 0;// model.DeductionAmount;
                            bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                            bill.ExpenseAmount = model.ExpenseAmount;
                            bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                            bill.PODate = model.PODate;
                            bill.PONumber = model.PONumber;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "ADV";
                            bill.VendorId = model.VendorId;
                            bill.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblBillEntry.Add(bill);
                            context.SaveChanges();
                            billId = bill.BillId;
                            foreach (var item in model.PODetail)
                            {
                                tblBillPODetail po = new tblBillPODetail();
                                po.BillId = billId;
                                po.TotalAmount = item.TotalAmount;
                                po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                po.Description = item.Description;
                                po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                po.ItemName = item.ItemName;
                                po.TaxablePercentage = item.TaxPct;
                                po.IsTaxEligible = item.IsTaxEligible;
                                po.CRTD_By = logged_in_user;
                                po.CRTD_TS = DateTime.Now;
                                po.Status = "Active";
                                context.tblBillPODetail.Add(po);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CommitmentDetail)
                            {
                                if (item.CommitmentDetailId == null)
                                    return -3;
                                tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                commitment.BillId = billId;
                                commitment.CommitmentDetailId = item.CommitmentDetailId;
                                commitment.CRTD_By = logged_in_user;
                                commitment.CRTD_TS = DateTime.Now;
                                commitment.PaymentAmount = item.PaymentAmount;
                                commitment.Status = "Active";
                                context.tblBillCommitmentDetail.Add(commitment);
                                context.SaveChanges();
                            }
                            if (model.DeductionDetail != null)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.BillId = billId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.Amount = item.Amount;
                                exp.BillId = billId;
                                exp.TransactionType = item.TransactionType;
                                exp.CRTD_By = logged_in_user;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblBillExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblBillCheckDetail chk = new tblBillCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.BillId = billId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblBillCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.BillId = billId;
                                doc.Status = "Active";
                                context.tblBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            //if (model.VendorTDSDetailId != null && model.VendorTDSDetailId[0] != null)
                            //{
                            //    for (int i = 0; i < model.VendorTDSDetailId.Length; i++)
                            //    {
                            //        tblBillTDSDetail det = new tblBillTDSDetail();
                            //        det.BillId = billId;
                            //        det.CRTD_By = logged_in_user;
                            //        det.CRTD_TS = DateTime.Now;
                            //        det.Status = "Active";
                            //        det.VendorTDSDetailId = model.VendorTDSDetailId[i];
                            //        context.tblBillTDSDetail.Add(det);
                            //        context.SaveChanges();
                            //    }
                            //}
                            if (model.VendorTDSDetailId != null)
                            {
                                tblBillTDSDetail det = new tblBillTDSDetail();
                                det.BillId = billId;
                                det.CRTD_By = logged_in_user;
                                det.CRTD_TS = DateTime.Now;
                                det.Status = "Active";
                                det.VendorTDSDetailId = model.VendorTDSDetailId;
                                context.tblBillTDSDetail.Add(det);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return billId;
                        }
                        else
                        {
                            int billId = model.BillId;
                            var bill = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == "ADV" && m.Status == "Open");
                            if (bill != null)
                            {
                                var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber && m.BillId != billId);
                                if (existsQuery != null)
                                    return -2;
                                bill.AdvancePercentage = model.AdvancePercentage;
                                bill.SubCode = model.SubCode;
                                bill.BillAmount = billAmount;
                                bill.BillTaxAmount = billTaxAmount;
                                bill.BillType = model.BillType;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.DeductionAmount = 0;// model.DeductionAmount;
                                bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                                bill.ExpenseAmount = model.ExpenseAmount;
                                bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.PODate = model.PODate;
                                bill.PONumber = model.PONumber;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.VendorId = model.VendorId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();
                                context.tblBillPODetail.RemoveRange(context.tblBillPODetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.PODetail)
                                {
                                    tblBillPODetail po = new tblBillPODetail();
                                    po.BillId = billId;
                                    po.TotalAmount = item.TotalAmount;
                                    po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblBillPODetail.Add(po);
                                    context.SaveChanges();
                                }
                                context.tblBillCommitmentDetail.RemoveRange(context.tblBillCommitmentDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                    commitment.BillId = billId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblBillDeductionDetail.RemoveRange(context.tblBillDeductionDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.BillId = billId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblBillDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblBillExpenseDetail.RemoveRange(context.tblBillExpenseDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.BillId = billId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblBillCheckDetail.RemoveRange(context.tblBillCheckDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblBillCheckDetail chk = new tblBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.BillId = billId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblBillDocumentDetail.Where(x => x.BillId == billId && !arrList.Contains(x.BillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblBillDocumentDetail.FirstOrDefault(m => m.BillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.BillId = billId;
                                        doc.Status = "Active";
                                        context.tblBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                context.tblBillTDSDetail.RemoveRange(context.tblBillTDSDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                //if (model.VendorTDSDetailId != null && model.VendorTDSDetailId[0] != null)
                                //{
                                //    for (int i = 0; i < model.VendorTDSDetailId.Length; i++)
                                //    {
                                //        tblBillTDSDetail det = new tblBillTDSDetail();
                                //        det.BillId = billId;
                                //        det.CRTD_By = logged_in_user;
                                //        det.CRTD_TS = DateTime.Now;
                                //        det.Status = "Active";
                                //        det.VendorTDSDetailId = model.VendorTDSDetailId[i];
                                //        context.tblBillTDSDetail.Add(det);
                                //        context.SaveChanges();
                                //    }
                                //}
                                if (model.VendorTDSDetailId != null)
                                {
                                    tblBillTDSDetail det = new tblBillTDSDetail();
                                    det.BillId = billId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.VendorTDSDetailId = model.VendorTDSDetailId;
                                    context.tblBillTDSDetail.Add(det);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return billId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        #endregion
        #region Part
        public int AdvancePartBillPaymentIU(BillEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal? billAmount = 0, billTaxAmount = 0;
                        foreach (var poItem in model.PODetail)
                        {
                            billAmount += poItem.TotalAmount;
                            if (poItem.TaxPct != 0 || poItem.TaxPct != null)
                                billTaxAmount += poItem.TotalAmount * poItem.TaxPct / 100;
                        }
                        if (model.BillId == 0)
                        {
                            var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber);
                            if (existsQuery != null)
                                return -2;
                            int billId = 0;
                            tblBillEntry bill = new tblBillEntry();
                            bill.AdvancePercentage = model.AdvancePercentage;
                            bill.BillAmount = billAmount;
                            bill.SubCode = model.SubCode;
                            bill.BillNumber = Common.GetNewPOBillNo("PTM");
                            bill.BillTaxAmount = billTaxAmount;
                            bill.BankHead = model.BankHead;
                            bill.BillType = model.BillType;
                            bill.InvoiceDate = model.InvoiceDate;
                            bill.InvoiceNumber = model.InvoiceNumber;
                            bill.InclusiveOfTax_f = model.InclusiveOfTax_f;
                            bill.CommitmentAmount = model.CommitmentAmount;
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                            bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                            bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                            bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                            bill.PODate = model.PODate;
                            bill.PONumber = model.PONumber;
                            bill.Source = model.Source;
                            bill.PartAdvance_f = true;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "PTM";
                            bill.VendorId = model.VendorId;
                            bill.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblBillEntry.Add(bill);
                            context.SaveChanges();
                            billId = bill.BillId;
                            foreach (var item in model.PODetail)
                            {
                                tblBillPODetail po = new tblBillPODetail();
                                po.BillId = billId;
                                po.TotalAmount = item.TotalAmount;
                                po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                po.Description = item.Description;
                                po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                po.ItemName = item.ItemName;
                                po.TaxablePercentage = item.TaxPct;
                                po.IsTaxEligible = item.IsTaxEligible;
                                po.CRTD_By = logged_in_user;
                                po.CRTD_TS = DateTime.Now;
                                po.Status = "Active";
                                context.tblBillPODetail.Add(po);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CommitmentDetail)
                            {
                                if (item.CommitmentDetailId == null)
                                    return -3;
                                tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                commitment.BillId = billId;
                                commitment.CommitmentDetailId = item.CommitmentDetailId;
                                commitment.CRTD_By = logged_in_user;
                                commitment.CRTD_TS = DateTime.Now;
                                commitment.PaymentAmount = item.PaymentAmount;
                                commitment.Status = "Active";
                                context.tblBillCommitmentDetail.Add(commitment);
                                context.SaveChanges();
                            }
                            if (model.ExpenseRequired)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.BillId = billId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.TransactionType = item.TransactionType;
                                exp.Amount = item.Amount;
                                exp.BillId = billId;
                                exp.CRTD_By = logged_in_user;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblBillExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblBillCheckDetail chk = new tblBillCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.BillId = billId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblBillCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.BillId = billId;
                                doc.Status = "Active";
                                context.tblBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            if (model.VendorTDSDetailId != null)
                            {
                                tblBillTDSDetail det = new tblBillTDSDetail();
                                det.BillId = billId;
                                det.CRTD_By = logged_in_user;
                                det.CRTD_TS = DateTime.Now;
                                det.Status = "Active";
                                det.VendorTDSDetailId = model.VendorTDSDetailId;
                                context.tblBillTDSDetail.Add(det);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return billId;
                        }
                        else
                        {
                            int billId = model.BillId;
                            var bill = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == "PTM" && m.Status == "Open");
                            if (bill != null)
                            {
                                var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber && m.BillId != billId);
                                if (existsQuery != null)
                                    return -2;
                                bill.AdvancePercentage = model.AdvancePercentage;
                                bill.SubCode = model.SubCode;
                                bill.BillAmount = billAmount;
                                bill.BillTaxAmount = billTaxAmount;
                                bill.BillType = model.BillType;
                                bill.BankHead = model.BankHead;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.InclusiveOfTax_f = model.InclusiveOfTax_f;
                                bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                                bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.PODate = model.PODate;
                                bill.PONumber = model.PONumber;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.VendorId = model.VendorId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();
                                context.tblBillPODetail.RemoveRange(context.tblBillPODetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.PODetail)
                                {
                                    tblBillPODetail po = new tblBillPODetail();
                                    po.BillId = billId;
                                    po.TotalAmount = item.TotalAmount;
                                    po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblBillPODetail.Add(po);
                                    context.SaveChanges();
                                }
                                context.tblBillCommitmentDetail.RemoveRange(context.tblBillCommitmentDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                    commitment.BillId = billId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblBillDeductionDetail.RemoveRange(context.tblBillDeductionDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.ExpenseRequired)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.BillId = billId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblBillDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblBillExpenseDetail.RemoveRange(context.tblBillExpenseDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.BillId = billId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblBillCheckDetail.RemoveRange(context.tblBillCheckDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblBillCheckDetail chk = new tblBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.BillId = billId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblBillDocumentDetail.Where(x => x.BillId == billId && !arrList.Contains(x.BillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblBillDocumentDetail.FirstOrDefault(m => m.BillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.BillId = billId;
                                        doc.Status = "Active";
                                        context.tblBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                context.tblBillTDSDetail.RemoveRange(context.tblBillTDSDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.VendorTDSDetailId != null)
                                {
                                    tblBillTDSDetail det = new tblBillTDSDetail();
                                    det.BillId = billId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.VendorTDSDetailId = model.VendorTDSDetailId;
                                    context.tblBillTDSDetail.Add(det);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return billId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public int PartBillPaymentIU(BillEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal? billAmount = 0, billTaxAmount = 0;
                        foreach (var poItem in model.PODetail)
                        {
                            billAmount += poItem.TotalAmount;
                            if (poItem.TaxPct != 0 || poItem.TaxPct != null)
                                billTaxAmount += poItem.TotalAmount * poItem.TaxPct / 100;
                        }
                        if (model.BillId == 0)
                        {
                            int billId = 0;
                            int refBillId = Convert.ToInt32(model.PONumber);
                            var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == refBillId);
                            if (query == null)
                                return -1;
                            tblBillEntry bill = new tblBillEntry();
                            bill.AdvancePercentage = model.AdvancePercentage;
                            bill.SubCode = model.SubCode;
                            bill.BillAmount = billAmount;
                            bill.BankHead = model.BankHead;
                            bill.BillNumber = Common.GetNewPOBillNo("PTM");
                            bill.BillTaxAmount = billTaxAmount;
                            bill.BillType = query.BillType;
                            bill.InclusiveOfTax_f = model.InclusiveOfTax_f;
                            bill.CommitmentAmount = model.CommitmentAmount;
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                            bill.EligibleForOffset_f = query.EligibleForOffset_f;
                            bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                            bill.PartiallyEligibleForOffset_f = query.PartiallyEligibleForOffset_f;
                            bill.PODate = query.PODate;
                            bill.InvoiceDate = model.InvoiceDate;
                            bill.InvoiceNumber = model.InvoiceNumber;
                            bill.PONumber = query.PONumber;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "PTM";
                            bill.VendorId = query.VendorId;
                            bill.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblBillEntry.Add(bill);
                            context.SaveChanges();
                            billId = bill.BillId;
                            var tdsQuery = context.tblBillTDSDetail.FirstOrDefault(m => m.BillId == refBillId);
                            if (tdsQuery != null)
                            {
                                tblBillTDSDetail det = new tblBillTDSDetail();
                                det.BillId = billId;
                                det.CRTD_By = logged_in_user;
                                det.CRTD_TS = DateTime.Now;
                                det.Status = "Active";
                                det.VendorTDSDetailId = tdsQuery.VendorTDSDetailId;
                                context.tblBillTDSDetail.Add(det);
                                context.SaveChanges();
                            }
                            foreach (var item in model.PODetail)
                            {
                                tblBillPODetail po = new tblBillPODetail();
                                po.BillId = billId;
                                po.TotalAmount = item.TotalAmount;
                                po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                po.Description = item.Description;
                                po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                po.ItemName = item.ItemName;
                                po.TaxablePercentage = item.TaxPct;
                                po.IsTaxEligible = item.IsTaxEligible;
                                po.CRTD_By = logged_in_user;
                                po.CRTD_TS = DateTime.Now;
                                po.Status = "Active";
                                context.tblBillPODetail.Add(po);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CommitmentDetail)
                            {
                                if (item.CommitmentDetailId == null)
                                    return -3;
                                tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                commitment.BillId = billId;
                                commitment.CommitmentDetailId = item.CommitmentDetailId;
                                commitment.CRTD_By = logged_in_user;
                                commitment.CRTD_TS = DateTime.Now;
                                commitment.PaymentAmount = item.PaymentAmount;
                                commitment.Status = "Active";
                                context.tblBillCommitmentDetail.Add(commitment);
                                context.SaveChanges();
                            }
                            if (model.ExpenseRequired)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.BillId = billId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.TransactionType = item.TransactionType;
                                exp.Amount = item.Amount;
                                exp.BillId = billId;
                                exp.CRTD_By = logged_in_user;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblBillExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblBillCheckDetail chk = new tblBillCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.BillId = billId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblBillCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.BillId = billId;
                                doc.Status = "Active";
                                context.tblBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return billId;
                        }
                        else
                        {
                            int billId = model.BillId;
                            var bill = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == "PTM" && m.Status == "Open");
                            if (bill != null)
                            {
                                int refBillId = Convert.ToInt32(model.PONumber);
                                var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == refBillId);
                                if (query == null)
                                    return -1;
                                bill.AdvancePercentage = model.AdvancePercentage;
                                bill.SubCode = model.SubCode;
                                bill.BillAmount = billAmount;
                                bill.BillTaxAmount = billTaxAmount;
                                bill.BillType = query.BillType;
                                bill.InclusiveOfTax_f = model.InclusiveOfTax_f;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.UPTD_By = logged_in_user;
                                bill.BankHead = model.BankHead;
                                bill.UPTD_TS = DateTime.Now;
                                bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                bill.EligibleForOffset_f = query.EligibleForOffset_f;
                                bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                bill.PartiallyEligibleForOffset_f = query.PartiallyEligibleForOffset_f;
                                bill.PODate = query.PODate;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.PONumber = query.PONumber;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.VendorId = query.VendorId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();
                                context.tblBillPODetail.RemoveRange(context.tblBillPODetail.Where(m => m.BillId == billId));
                                context.SaveChanges();

                                context.tblBillTDSDetail.RemoveRange(context.tblBillTDSDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                var tdsQuery = context.tblBillTDSDetail.FirstOrDefault(m => m.BillId == refBillId);
                                if (tdsQuery != null)
                                {
                                    tblBillTDSDetail det = new tblBillTDSDetail();
                                    det.BillId = billId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.VendorTDSDetailId = tdsQuery.VendorTDSDetailId;
                                    context.tblBillTDSDetail.Add(det);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.PODetail)
                                {
                                    tblBillPODetail po = new tblBillPODetail();
                                    po.BillId = billId;
                                    po.TotalAmount = item.TotalAmount;
                                    po.AdvanceAmount = item.TotalAmount * model.AdvancePercentage / 100;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblBillPODetail.Add(po);
                                    context.SaveChanges();
                                }
                                context.tblBillCommitmentDetail.RemoveRange(context.tblBillCommitmentDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                    commitment.BillId = billId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblBillDeductionDetail.RemoveRange(context.tblBillDeductionDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.ExpenseRequired)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.BillId = billId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblBillDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblBillExpenseDetail.RemoveRange(context.tblBillExpenseDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.BillId = billId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblBillCheckDetail.RemoveRange(context.tblBillCheckDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblBillCheckDetail chk = new tblBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.BillId = billId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblBillDocumentDetail.Where(x => x.BillId == billId && !arrList.Contains(x.BillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblBillDocumentDetail.FirstOrDefault(m => m.BillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.BillId = billId;
                                        doc.Status = "Active";
                                        context.tblBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return billId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        #endregion
        #region Settlement
        public int SettlementBillPaymentIU(BillEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal? billAmount = 0, billTaxAmount = 0;
                        foreach (var poItem in model.PODetail)
                        {
                            billAmount += poItem.TotalAmount;
                            if (poItem.TaxPct != 0 || poItem.TaxPct != null)
                                billTaxAmount += poItem.TotalAmount * poItem.TaxPct / 100;
                        }
                        if (model.BillId == 0)
                        {
                            int billId = 0;
                            tblBillEntry bill = new tblBillEntry();
                            if (model.PaymentType == 2)
                            {

                                var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == model.selPONumber);
                                if (query == null)
                                    return -1;
                                string poNo = query.PONumber;
                                var exsQuery = context.tblBillEntry.FirstOrDefault(m => m.PONumber == poNo && m.TransactionTypeCode == "STM");
                                if (exsQuery != null)
                                    return -1;
                                int vendorId = query.VendorId ?? 0;
                                decimal rmngPct = Common.GetBillRMNGPercentage(poNo, vendorId);
                                bill.AdvancePercentage = rmngPct;
                                bill.SubCode = model.SubCode;
                                bill.BillAmount = billAmount;
                                bill.BankHead = model.BankHead;
                                bill.BillNumber = Common.GetNewPOBillNo("STM");
                                bill.BillTaxAmount = billTaxAmount;
                                bill.BillType = query.BillType;
                                bill.PaymentType = model.PaymentType;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                bill.InvoiceAmount = model.InvoiceAmount;
                                bill.InvoiceTaxAmount = model.InvoiceTaxAmount;
                                bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                bill.EligibleForOffset_f = query.EligibleForOffset_f;
                                bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                bill.PartiallyEligibleForOffset_f = query.PartiallyEligibleForOffset_f;
                                bill.PODate = query.PODate;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.PONumber = poNo;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "STM";
                                bill.VendorId = vendorId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblBillEntry.Add(bill);
                                context.SaveChanges();
                                billId = bill.BillId;

                                var tdsQuery = context.tblBillTDSDetail.FirstOrDefault(m => m.BillId == model.selPONumber);
                                if (tdsQuery != null)
                                {
                                    tblBillTDSDetail det = new tblBillTDSDetail();
                                    det.BillId = billId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.VendorTDSDetailId = tdsQuery.VendorTDSDetailId;
                                    context.tblBillTDSDetail.Add(det);
                                    context.SaveChanges();
                                }

                                foreach (var item in model.PODetail)
                                {
                                    tblBillPODetail po = new tblBillPODetail();
                                    po.BillId = billId;
                                    po.TotalAmount = item.TotalAmount;
                                    po.AdvanceAmount = item.TotalAmount * rmngPct / 100;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblBillPODetail.Add(po);
                                    context.SaveChanges();
                                }
                            }
                            else
                            {
                                var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber);
                                if (existsQuery != null)
                                    return -2;
                                bill.AdvancePercentage = 100;
                                bill.SubCode = model.SubCode;
                                bill.BillAmount = billAmount;
                                bill.BillTaxAmount = billTaxAmount;
                                bill.BillType = model.BillType;
                                bill.PaymentType = model.PaymentType;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.InvoiceAmount = model.InvoiceAmount;
                                bill.InvoiceTaxAmount = model.InvoiceTaxAmount;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.BankHead = model.BankHead;
                                bill.BillNumber = Common.GetNewPOBillNo("STM");
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                                bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                                bill.PODate = model.PODate;
                                bill.PONumber = model.PONumber;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "STM";
                                bill.VendorId = model.VendorId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblBillEntry.Add(bill);
                                context.SaveChanges();
                                billId = bill.BillId;

                                if (model.VendorTDSDetailId != null)
                                {
                                    tblBillTDSDetail det = new tblBillTDSDetail();
                                    det.BillId = billId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.VendorTDSDetailId = model.VendorTDSDetailId;
                                    context.tblBillTDSDetail.Add(det);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.PODetail)
                                {
                                    tblBillPODetail po = new tblBillPODetail();
                                    po.BillId = billId;
                                    po.TotalAmount = item.TotalAmount;
                                    po.AdvanceAmount = item.TotalAmount;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblBillPODetail.Add(po);
                                    context.SaveChanges();
                                }
                            }


                            foreach (var item in model.CommitmentDetail)
                            {
                                if (item.CommitmentDetailId == null)
                                    return -3;
                                tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                commitment.BillId = billId;
                                commitment.CommitmentDetailId = item.CommitmentDetailId;
                                commitment.CRTD_By = logged_in_user;
                                commitment.CRTD_TS = DateTime.Now;
                                commitment.PaymentAmount = item.PaymentAmount;
                                commitment.Status = "Active";
                                context.tblBillCommitmentDetail.Add(commitment);
                                context.SaveChanges();
                            }
                            if (model.ExpenseRequired)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.BillId = billId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            if (model.ExpenseDetail != null)
                            {
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.BillId = billId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblBillCheckDetail chk = new tblBillCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.BillId = billId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblBillCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.BillId = billId;
                                doc.Status = "Active";
                                context.tblBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return billId;
                        }
                        else
                        {
                            int billId = model.BillId;
                            var bill = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.TransactionTypeCode == "STM" && m.Status == "Open");
                            if (bill != null)
                            {
                                if (model.PaymentType == 2)
                                {
                                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == model.selPONumber);
                                    if (query == null)
                                        return -1;
                                    string poNo = query.PONumber;
                                    var exsQuery = context.tblBillEntry.FirstOrDefault(m => m.PONumber == poNo && m.TransactionTypeCode == "STM" && m.BillId != billId);
                                    if (exsQuery != null)
                                        return -1;
                                    int vendorId = query.VendorId ?? 0;
                                    decimal rmngPct = Common.GetBillRMNGPercentage(poNo, vendorId, billId);
                                    bill.AdvancePercentage = rmngPct;
                                    bill.SubCode = model.SubCode;
                                    bill.BillAmount = billAmount;
                                    bill.BillTaxAmount = billTaxAmount;
                                    bill.BillType = query.BillType;
                                    bill.InvoiceAmount = model.InvoiceAmount;
                                    bill.InvoiceTaxAmount = model.InvoiceTaxAmount;
                                    bill.PaymentType = model.PaymentType;
                                    bill.CommitmentAmount = model.CommitmentAmount;
                                    bill.UPTD_By = logged_in_user;
                                    bill.UPTD_TS = DateTime.Now;
                                    bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                    bill.EligibleForOffset_f = query.EligibleForOffset_f;
                                    bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                    bill.PartiallyEligibleForOffset_f = query.PartiallyEligibleForOffset_f;
                                    bill.PODate = query.PODate;
                                    bill.InvoiceDate = model.InvoiceDate;
                                    bill.InvoiceNumber = model.InvoiceNumber;
                                    bill.PONumber = poNo;
                                    bill.Source = model.Source;
                                    if (model.Source == 1 || model.Source == 3)
                                    {
                                        bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                    }
                                    if (model.Source == 2)
                                    {
                                        bill.SourceEmailDate = model.SourceEmailDate;
                                    }
                                    bill.Status = "Open";
                                    bill.TransactionTypeCode = "STM";
                                    bill.VendorId = vendorId;
                                    bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                    context.SaveChanges();

                                    context.tblBillTDSDetail.RemoveRange(context.tblBillTDSDetail.Where(m => m.BillId == billId));
                                    context.SaveChanges();
                                    var tdsQuery = context.tblBillTDSDetail.FirstOrDefault(m => m.BillId == model.selPONumber);
                                    if (tdsQuery != null)
                                    {
                                        tblBillTDSDetail det = new tblBillTDSDetail();
                                        det.BillId = billId;
                                        det.CRTD_By = logged_in_user;
                                        det.CRTD_TS = DateTime.Now;
                                        det.Status = "Active";
                                        det.VendorTDSDetailId = tdsQuery.VendorTDSDetailId;
                                        context.tblBillTDSDetail.Add(det);
                                        context.SaveChanges();
                                    }

                                    context.tblBillPODetail.RemoveRange(context.tblBillPODetail.Where(m => m.BillId == billId));
                                    context.SaveChanges();
                                    foreach (var item in model.PODetail)
                                    {
                                        tblBillPODetail po = new tblBillPODetail();
                                        po.BillId = billId;
                                        po.TotalAmount = item.TotalAmount;
                                        po.AdvanceAmount = item.TotalAmount * rmngPct / 100;
                                        po.Description = item.Description;
                                        po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                        po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        po.ItemName = item.ItemName;
                                        po.TaxablePercentage = item.TaxPct;
                                        po.IsTaxEligible = item.IsTaxEligible;
                                        po.CRTD_By = logged_in_user;
                                        po.CRTD_TS = DateTime.Now;
                                        po.Status = "Active";
                                        context.tblBillPODetail.Add(po);
                                        context.SaveChanges();
                                    }
                                }
                                else
                                {
                                    var existsQuery = context.tblBillEntry.FirstOrDefault(m => m.VendorId == model.VendorId && m.PONumber == model.PONumber && m.BillId != billId);
                                    if (existsQuery != null)
                                        return -2;
                                    bill.AdvancePercentage = 100;
                                    bill.SubCode = model.SubCode;
                                    bill.BillAmount = billAmount;
                                    bill.BillTaxAmount = billTaxAmount;
                                    bill.BillType = model.BillType;
                                    bill.PaymentType = model.PaymentType;
                                    bill.InvoiceDate = model.InvoiceDate;
                                    bill.InvoiceAmount = model.InvoiceAmount;
                                    bill.InvoiceTaxAmount = model.InvoiceTaxAmount;
                                    bill.InvoiceNumber = model.InvoiceNumber;
                                    bill.CommitmentAmount = model.CommitmentAmount;
                                    bill.UPTD_By = logged_in_user;
                                    bill.UPTD_TS = DateTime.Now;
                                    bill.DeductionAmount = model.DeductionDetail.Select(m => m.Amount).Sum() ?? 0;
                                    bill.EligibleForOffset_f = model.GST == "Eligible" ? true : false;
                                    bill.ExpenseAmount = model.ExpenseDetail.Where(m => m.TransactionType == "Debit" && m.IsJV == false).Select(m => m.Amount).Sum() ?? 0;
                                    bill.PartiallyEligibleForOffset_f = model.GST == "PartiallyEligible" ? true : false;
                                    bill.PODate = model.PODate;
                                    bill.PONumber = model.PONumber;
                                    bill.Source = model.Source;
                                    if (model.Source == 1 || model.Source == 3)
                                    {
                                        bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                    }
                                    if (model.Source == 2)
                                    {
                                        bill.SourceEmailDate = model.SourceEmailDate;
                                    }
                                    bill.Status = "Open";
                                    bill.TransactionTypeCode = "STM";
                                    bill.VendorId = model.VendorId;
                                    bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                    context.SaveChanges();

                                    context.tblBillTDSDetail.RemoveRange(context.tblBillTDSDetail.Where(m => m.BillId == billId));
                                    context.SaveChanges();
                                    if (model.VendorTDSDetailId != null)
                                    {
                                        tblBillTDSDetail det = new tblBillTDSDetail();
                                        det.BillId = billId;
                                        det.CRTD_By = logged_in_user;
                                        det.CRTD_TS = DateTime.Now;
                                        det.Status = "Active";
                                        det.VendorTDSDetailId = model.VendorTDSDetailId;
                                        context.tblBillTDSDetail.Add(det);
                                        context.SaveChanges();
                                    }

                                    context.tblBillPODetail.RemoveRange(context.tblBillPODetail.Where(m => m.BillId == billId));
                                    context.SaveChanges();
                                    foreach (var item in model.PODetail)
                                    {
                                        tblBillPODetail po = new tblBillPODetail();
                                        po.BillId = billId;
                                        po.TotalAmount = item.TotalAmount;
                                        po.AdvanceAmount = item.TotalAmount;
                                        po.Description = item.Description;
                                        po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                        po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        po.ItemName = item.ItemName;
                                        po.TaxablePercentage = item.TaxPct;
                                        po.IsTaxEligible = item.IsTaxEligible;
                                        po.CRTD_By = logged_in_user;
                                        po.CRTD_TS = DateTime.Now;
                                        po.Status = "Active";
                                        context.tblBillPODetail.Add(po);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblBillCommitmentDetail.RemoveRange(context.tblBillCommitmentDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblBillCommitmentDetail commitment = new tblBillCommitmentDetail();
                                    commitment.BillId = billId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblBillDeductionDetail.RemoveRange(context.tblBillDeductionDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.ExpenseRequired)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblBillDeductionDetail deduction = new tblBillDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.BillId = billId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblBillDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblBillExpenseDetail.RemoveRange(context.tblBillExpenseDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                if (model.ExpenseDetail != null)
                                {
                                    foreach (var item in model.ExpenseDetail)
                                    {
                                        tblBillExpenseDetail exp = new tblBillExpenseDetail();
                                        exp.AccountGroupId = item.AccountGroupId;
                                        exp.AccountHeadId = item.AccountHeadId;
                                        exp.IsJV_f = item.IsJV;
                                        exp.TransactionType = item.TransactionType;
                                        exp.Amount = item.Amount;
                                        exp.BillId = billId;
                                        exp.CRTD_By = logged_in_user;
                                        exp.CRTD_TS = DateTime.Now;
                                        exp.Status = "Active";
                                        context.tblBillExpenseDetail.Add(exp);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblBillCheckDetail.RemoveRange(context.tblBillCheckDetail.Where(m => m.BillId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblBillCheckDetail chk = new tblBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.BillId = billId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblBillDocumentDetail.Where(x => x.BillId == billId && !arrList.Contains(x.BillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblBillDocumentDetail.FirstOrDefault(m => m.BillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblBillDocumentDetail doc = new tblBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.BillId = billId;
                                        doc.Status = "Active";
                                        context.tblBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return billId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        #endregion
        #region Common
        public BillEntryModel GetBillDetails(int billId)
        {
            try
            {
                BillEntryModel bill = new BillEntryModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId);
                    if (query != null)
                    {
                        string poNo = query.PONumber;
                        int vendorId = query.VendorId ?? 0;
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        else if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.VendorId = vendorId;
                        bill.BillId = query.BillId;
                        bill.BankHead = query.BankHead;
                        bill.AdvancePercentage = Math.Round(query.AdvancePercentage ?? 0);
                        bill.InvoiceDate = query.InvoiceDate;
                        bill.InvoiceNumber = query.InvoiceNumber;
                        bill.InvoiceTaxAmount = query.InvoiceTaxAmount;
                        bill.InvoiceAmount = query.InvoiceAmount;
                        bill.PONumber = poNo;
                        bill.PODate = query.PODate;
                        bill.SubCode = query.SubCode;
                        bill.ExpenseAmount = query.ExpenseAmount;
                        bill.DeductionAmount = query.DeductionAmount;
                        bill.BillType = query.BillType;
                        bill.PaymentType = query.PaymentType;
                        bill.BillAmount = query.BillAmount;
                        bill.BillTaxAmount = query.BillTaxAmount ?? 0;
                        bill.PartAdvance_f = query.PartAdvance_f ?? false;
                        bill.InclusiveOfTax_f = query.InclusiveOfTax_f ?? false;
                        bill.CheckListVerified_By = query.CheckListVerifiedBy;
                        bill.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        bill.VendorTDSDetailId = context.tblBillTDSDetail.Where(m => m.BillId == billId && m.Status == "Active").Select(m => m.VendorTDSDetailId).FirstOrDefault();
                        if (query.EligibleForOffset_f ?? false)
                            bill.GST = "Eligible";
                        else if (query.PartiallyEligibleForOffset_f ?? false)
                            bill.GST = "PartiallyEligible";
                        else
                            bill.GST = "NotEligible";
                        if (query.TransactionTypeCode == "STM")
                        {
                            var data = Common.GetBillPaidAndRMNGAmt(poNo, vendorId, billId);
                            bill.hiddenSettAmt = Math.Round(data.Item1);
                            bill.hiddenSettTaxAmt = data.Item2;
                        }

                        bill.PODetail = (from po in context.tblBillPODetail
                                         where po.BillId == billId && po.Status == "Active"
                                         select new
                                         {
                                             po.TaxablePercentage,
                                             po.Description,
                                             po.TotalAmount,
                                             po.IsTaxEligible,
                                             po.ItemName,
                                             po.TypeOfServiceOrCategory
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new BillPODetailModel()
                                              {
                                                  TaxPct = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  Description = x.Description,
                                                  ItemName = x.ItemName,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  TotalAmount = x.TotalAmount,
                                                  IsTaxEligible = x.IsTaxEligible ?? false
                                              }).ToList();

                        bill.CommitmentDetail = (from c in context.tblBillCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.BillId == billId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     BillCommitmentDetailId = c.BillCommitmentDetailId
                                                 }).ToList();

                        bill.ExpenseDetail = (from e in context.tblBillExpenseDetail
                                              where e.BillId == billId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.BillExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0, x.AccountHeadId ?? 0, query.SubCode, query.TransactionTypeCode),
                                                  BillExpenseDetailId = x.BillExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblBillDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.BillId == billId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.BillDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();

                        bill.CheckListDetail = (from ck in context.tblBillCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.BillId == billId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();
                        bill.DocumentDetail = (from d in context.tblBillDocumentDetail
                                               where d.BillId == billId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.BillDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();

                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new BillEntryModel();
            }
        }
        public BillEntryModel GetBillPODetails(int billId)
        {
            try
            {
                BillEntryModel bill = new BillEntryModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId);
                    if (query != null)
                    {

                        bill.VendorId = query.VendorId;
                        bill.InvoiceDate = query.InvoiceDate;
                        bill.InvoiceNumber = query.InvoiceNumber;
                        bill.PONumber = query.PONumber;
                        bill.PODate = query.PODate;
                        bill.BillType = query.BillType;
                        bill.InclusiveOfTax_f = query.InclusiveOfTax_f ?? false;
                        bill.VendorTDSDetailId = context.tblBillTDSDetail.Where(m => m.BillId == billId && m.Status == "Active").Select(m => m.VendorTDSDetailId).FirstOrDefault();
                        if (query.EligibleForOffset_f ?? false)
                            bill.GST = "Eligible";
                        else if (query.PartiallyEligibleForOffset_f ?? false)
                            bill.GST = "PartiallyEligible";
                        else
                            bill.GST = "NotEligible";

                        bill.PODetail = (from po in context.tblBillPODetail
                                         where po.BillId == billId && po.Status == "Active"
                                         select new
                                         {
                                             po.TaxablePercentage,
                                             po.Description,
                                             po.TotalAmount,
                                             po.IsTaxEligible,
                                             po.ItemName,
                                             po.TypeOfServiceOrCategory
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new BillPODetailModel()
                                              {
                                                  TaxPct = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  Description = x.Description,
                                                  ItemName = x.ItemName,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  TotalAmount = x.TotalAmount,
                                                  IsTaxEligible = x.IsTaxEligible ?? false
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new BillEntryModel();
            }
        }
        public bool BillBackEndEntry(Int32 billId, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblBillEntry.SingleOrDefault(m => m.BillId == billId);
                    if (billQuery != null)
                    {
                        //decimal invVal = billQuery.ExpenseAmount ?? 0;
                        //decimal invTaxVal = billQuery.DeductionAmount ?? 0;
                        decimal ttlInvVal = context.tblBillExpenseDetail.Where(m => m.BillId == billId && m.IsJV_f != true && m.TransactionType == "Credit").Sum(m => m.Amount) ?? 0; //invVal + invTaxVal;
                        decimal TDSPayIT = context.tblBillExpenseDetail.Where(m => m.BillId == billId && m.AccountHeadId == 135 && m.AccountGroupId == 15).Select(m => m.Amount).FirstOrDefault() ?? 0;
                        decimal TDSPayGST = context.tblBillExpenseDetail.Where(m => m.BillId == billId && m.AccountHeadId == 137 && m.AccountGroupId == 16).Select(m => m.Amount).FirstOrDefault() ?? 0;
                        decimal ttlTDSPayable = TDSPayIT + TDSPayGST;
                        bool interState = Common.CheckVendorIsInterState(billQuery.VendorId ?? 0);
                        decimal advAmt = 0;
                        decimal projCreditor = ttlInvVal - ttlTDSPayable;
                        if (billQuery.TransactionTypeCode == "STM")
                        {
                            advAmt = context.tblBillEntry.Where(m => m.PONumber == billQuery.PONumber && m.TransactionTypeCode == "ADV").Select(m => m.ExpenseAmount).FirstOrDefault() ?? 0;
                        }
                        decimal bankAC = ttlInvVal - advAmt - ttlTDSPayable;
                        decimal ttlDr = projCreditor + ttlTDSPayable;
                        decimal ttlCr = bankAC + advAmt + ttlTDSPayable;
                        if (ttlDr != ttlCr)
                            return false;

                        List<tblBillPaymentTransactionDetail> transList = new List<tblBillPaymentTransactionDetail>();

                        transList.Add(new tblBillPaymentTransactionDetail()
                        {
                            AccountGroupId = 19,
                            AccountHeadId = 51,//Project Creditors
                            TransactionType = "Debit",
                            Amount = projCreditor,
                            IsJV_f = false,
                            BillId = billId,
                            CRTD_By = loggedInUser,
                            CRTD_TS = DateTime.Now,
                            Status = "Active",
                        });

                        transList.Add(new tblBillPaymentTransactionDetail()
                        {
                            AccountGroupId = 38,
                            AccountHeadId = billQuery.BankHead ?? 20,//Bank account
                            TransactionType = "Credit",
                            Amount = bankAC,
                            IsJV_f = false,
                            BillId = billId,
                            CRTD_By = loggedInUser,
                            CRTD_TS = DateTime.Now,
                            Status = "Active",
                        });

                        if (TDSPayIT > 0)
                        {
                            int? tdsSection = context.tblBillTDSDetail.Where(m => m.BillId == billId && m.Status == "Active").Select(m => m.VendorTDSDetailId).FirstOrDefault();
                            if (tdsSection == 1)
                                transList.Add(new tblBillPaymentTransactionDetail()
                                {
                                    AccountGroupId = 15,
                                    AccountHeadId = 39,//TDS on Contract  (94C)
                                    TransactionType = "Credit",
                                    Amount = TDSPayIT,
                                    IsJV_f = false,
                                    BillId = billId,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            else if (tdsSection == 2)
                                transList.Add(new tblBillPaymentTransactionDetail()
                                {
                                    AccountGroupId = 15,
                                    AccountHeadId = 41,//TDS on Fees (94J)
                                    TransactionType = "Credit",
                                    Amount = TDSPayIT,
                                    IsJV_f = false,
                                    BillId = billId,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            else
                                return false;
                            //transList.Add(new tblBillPaymentTransactionDetail()
                            //{
                            //    AccountGroupId = 15,
                            //    AccountHeadId = 135,//TDS Payable Income Tax
                            //    TransactionType = "Debit",
                            //    Amount = TDSPayIT,
                            //    IsJV_f = false,
                            //    BillId = billId,
                            //    CRTD_By = loggedInUser,
                            //    CRTD_TS = DateTime.Now,
                            //    Status = "Active",
                            //});
                        }
                        if (TDSPayGST > 0)
                        {
                            if (interState)
                                transList.Add(new tblBillPaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 46,//IGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST,
                                    IsJV_f = false,
                                    BillId = billId,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            else
                            {
                                transList.Add(new tblBillPaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 44,//CGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST / 2,
                                    IsJV_f = false,
                                    BillId = billId,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                                transList.Add(new tblBillPaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 45,//SGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST / 2,
                                    IsJV_f = false,
                                    BillId = billId,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            }
                            transList.Add(new tblBillPaymentTransactionDetail()
                            {
                                AccountGroupId = 16,
                                AccountHeadId = 137,//TDS Payable GST
                                TransactionType = "Debit",
                                Amount = TDSPayGST,
                                IsJV_f = false,
                                BillId = billId,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });
                        }
                        if (advAmt > 0)
                        {
                            transList.Add(new tblBillPaymentTransactionDetail()
                            {
                                AccountGroupId = 36,
                                AccountHeadId = 12,//Vendor Advance
                                TransactionType = "Credit",
                                Amount = advAmt,
                                IsJV_f = false,
                                BillId = billId,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });
                        }
                        context.tblBillPaymentTransactionDetail.AddRange(transList);
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public List<BillEntryModel> GetBillPaymentList(string typeCode)
        {
            try
            {

                List<BillEntryModel> list = new List<BillEntryModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblBillEntry
                            join v in context.tblVendorMaster on b.VendorId equals v.VendorId
                            orderby b.BillId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == typeCode
                            select new
                            {
                                b.BillId,
                                b.BillNumber,
                                v.Name,
                                b.CRTD_TS,
                                b.BillAmount,
                                b.BillTaxAmount,
                                b.ExpenseAmount,
                                b.DeductionAmount,
                                b.Status,
                                b.PartAdvance_f
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new BillEntryModel()
                                 {
                                     SlNo = index + 1,
                                     BillId = x.BillId,
                                     BillNumber = x.BillNumber,
                                     Vendor = x.Name,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     BillAmount = x.BillAmount + (x.BillTaxAmount ?? 0),
                                     CreditorAmount = x.ExpenseAmount + (x.DeductionAmount ?? 0),
                                     Status = x.Status,
                                     PartAdvance_f = x.PartAdvance_f ?? false
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<BillEntryModel>();
            }
        }

        public VendorMasterViewModel GetVendorDetails(int vendorId)
        {
            try
            {
                VendorMasterViewModel model = new VendorMasterViewModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblVendorMaster.FirstOrDefault(m => m.VendorId == vendorId && m.Status == "Active");
                    if (query != null)
                    {
                        model.PAN = query.PAN;
                        model.GSTIN = query.GSTIN;
                        model.Address = query.Address;
                        model.StateCode = query.StateCode ?? 0;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return new VendorMasterViewModel();
            }
        }

        public List<BillCommitmentDetailModel> SearchCommitments(DateTime? fromDate, DateTime? toDate, int? projectType, int projectId, string keyword, int commitmentType)
        {
            try
            {
                List<BillCommitmentDetailModel> commitments = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    if (toDate.HasValue)
                    {
                        toDate = toDate.Value.Date.AddDays(1).AddTicks(-1);
                        commitments = (from c in context.tblCommitment
                                       join p in context.tblProject on c.ProjectId equals p.ProjectId
                                       orderby c.CommitmentId descending
                                       where (c.CRTD_TS >= fromDate && c.CRTD_TS <= toDate)
                                       && p.ProjectType == projectType
                                       && (projectId == 0 || c.ProjectId == projectId)
                                       && (commitmentType == 0 || c.CommitmentType == commitmentType)
                                       && c.Status == "Active"
                                       && (String.IsNullOrEmpty(keyword) || c.CommitmentNumber.Contains(keyword) || p.ProjectNumber.Contains(keyword))
                                       select new BillCommitmentDetailModel()
                                       {
                                           CommitmentId = c.CommitmentId,
                                           CommitmentNumber = c.CommitmentNumber,
                                           ProjectNumber = p.ProjectNumber,
                                           ProjectId = c.ProjectId,
                                           BookedAmount = c.CommitmentAmount,
                                           AvailableAmount = c.CommitmentBalance ?? 0
                                       }).ToList();
                    }
                    else
                    {
                        commitments = (from c in context.tblCommitment
                                       join p in context.tblProject on c.ProjectId equals p.ProjectId
                                       orderby c.CommitmentId descending
                                       where c.ProjectId == projectId
                                       && c.Status == "Active"
                                       select new BillCommitmentDetailModel()
                                       {
                                           CommitmentId = c.CommitmentId,
                                           CommitmentNumber = c.CommitmentNumber,
                                           ProjectNumber = p.ProjectNumber,
                                           ProjectId = c.ProjectId,
                                           BookedAmount = c.CommitmentAmount,
                                           AvailableAmount = c.CommitmentBalance ?? 0
                                       }).ToList();
                    }

                }
                return commitments;
            }
            catch (Exception ex)
            {
                return new List<BillCommitmentDetailModel>();
            }
        }
        public List<BillCommitmentDetailModel> GetSelectedCommitmentDetails(Int32[] selCommitment)
        {
            try
            {
                List<BillCommitmentDetailModel> commitments = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    commitments = (from c in context.tblCommitment
                                   join p in context.tblProject on c.ProjectId equals p.ProjectId
                                   join det in context.tblCommitmentDetails on c.CommitmentId equals det.CommitmentId
                                   join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                   orderby det.ComitmentDetailId descending
                                   where selCommitment.Contains(c.CommitmentId)
                                   select new BillCommitmentDetailModel()
                                   {
                                       CommitmentDetailId = det.ComitmentDetailId,
                                       CommitmentNumber = c.CommitmentNumber,
                                       ProjectNumber = p.ProjectNumber,
                                       ProjectId = c.ProjectId,
                                       HeadName = head.HeadName,
                                       AvailableAmount = det.BalanceAmount ?? 0
                                   }).ToList();

                }
                return commitments;
            }
            catch (Exception ex)
            {
                return new List<BillCommitmentDetailModel>();
            }
        }

        public BillEntryModel GetTransactionDetails(int deductionCategoryId, bool interstate_f, string typeCode, string tSubCode, bool eligibilityCheck_f, List<int?> TDSDetailId)
        {
            try
            {
                BillEntryModel model = new BillEntryModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {
                    //if (commitmentDetailIds != null)
                    //{
                    //var groupIds = (from c in context.tblCommitmentDetails
                    //                where commitmentDetailIds.Contains(c.ComitmentDetailId)
                    //                group c by c.AllocationHeadId into g
                    //                join bh in context.tblBudgetHead on g.FirstOrDefault().AllocationHeadId equals bh.BudgetHeadId
                    //                select new { id = g.Key, headName = bh.HeadName }).ToList();
                    //int count = groupIds.Count;
                    //if (count > 0)
                    //{
                    //    for (int i = 0; i < count; i++)
                    //    {
                    //        int headId = groupIds[i].id ?? 0;
                    //        List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                    //        List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                    //        groupList = (from map in context.tblGroupMapping
                    //                     join g in context.tblAccountGroup on map.AccountGroupId equals g.AccountGroupId
                    //                     orderby g.AccountGroup
                    //                     where map.BudgetHeadId == headId
                    //                     select new MasterlistviewModel()
                    //                     {
                    //                         id = g.AccountGroupId,
                    //                         name = g.AccountGroup
                    //                     }).ToList();
                    //        if (groupList.Count > 0)
                    //        {
                    //            int groupId = groupList[0].id ?? 0;
                    //            headList = (from ah in context.tblAccountHead
                    //                        orderby ah.AccountHead
                    //                        where ah.AccountGroupId == groupId
                    //                        select new MasterlistviewModel()
                    //                        {
                    //                            id = ah.AccountHeadId,
                    //                            name = ah.AccountHead
                    //                        }).ToList();
                    //        }
                    //        expenses.Add(new BillExpenseDetailModel()
                    //        {
                    //            AccountGroupList = groupList,
                    //            AccountHeadList = headList,
                    //            BudgetHeadName = groupIds[i].headName
                    //        });
                    //    }
                    //}
                    var groupIds = (from c in context.tblTransactionDefinition
                                    where c.TransactionTypeCode == typeCode
                                    && c.SubCode == tSubCode
                                    select new { c.AccountGroupId, c.AccountHeadId, c.TransactionType, c.IsJV_f }).ToList();
                    int count = groupIds.Count;
                    if (count > 0)
                    {
                        for (int i = 0; i < count; i++)
                        {
                            int groupId = groupIds[i].AccountGroupId ?? 0;
                            List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                            groupList = (from g in context.tblAccountGroup
                                         where g.AccountGroupId == groupId
                                         select new MasterlistviewModel()
                                         {
                                             id = g.AccountGroupId,
                                             name = g.AccountGroup
                                         }).ToList();
                            if (groupList.Count > 0)
                            {
                                int headId = groupIds[i].AccountHeadId ?? 0;
                                headList = (from ah in context.tblAccountHead
                                                //orderby ah.AccountHead
                                            where ah.AccountGroupId == groupId && (headId == 0 || ah.AccountHeadId == headId)
                                            select new MasterlistviewModel()
                                            {
                                                id = ah.AccountHeadId,
                                                name = ah.AccountHead
                                            }).OrderBy(num => num.id != headId ? num.id : -1).ToList();
                            }
                            expenses.Add(new BillExpenseDetailModel()
                            {
                                AccountGroupList = groupList,
                                AccountHeadList = headList,
                                TransactionType = groupIds[i].TransactionType,
                                IsJV = groupIds[i].IsJV_f ?? false
                            });
                        }
                    }
                    var query = from Dedut in context.tblDeductionHead
                                join Ah in context.tblAccountHead on Dedut.AccountHeadId equals Ah.AccountHeadId
                                join Ag in context.tblAccountGroup on Ah.AccountGroupId equals Ag.AccountGroupId
                                select new DeductionPredicate
                                {
                                    dedut = Dedut,
                                    ah = Ah,
                                    ag = Ag
                                };
                    var predicate = PredicateBuilder.BaseAnd<DeductionPredicate>();
                    predicate = predicate.And(d => d.dedut.TransactionTypeCode == typeCode);
                    predicate = predicate.And(d => d.dedut.Interstate_f == interstate_f);
                    if (!eligibilityCheck_f)
                        predicate = predicate.And(d => d.dedut.EligibilityCheck_f != true);
                    if (deductionCategoryId != 0)
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == deductionCategoryId);
                    else if (TDSDetailId != null && TDSDetailId[0] != null)
                        predicate = predicate.And(d => TDSDetailId.Contains(d.dedut.DeductionCategoryId));
                    else
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == null);
                    var queryData = query
                                 .Where(predicate)
                                 .ToList();
                    deductions = (from d in queryData
                                  select new BillDeductionDetailModel()
                                  {
                                      DeductionHead = d.ah.AccountHead,
                                      AccountGroup = d.ag.AccountGroup,
                                      DeductionHeadId = d.dedut.DeductionHeadId,
                                      AccountGroupId = d.ah.AccountGroupId,
                                      DeductionType = d.dedut.DeductionType,
                                      DeductionCategoryId = d.dedut.DeductionCategoryId
                                  }).ToList();
                    var tdsPayableQuery = deductions.Where(m => m.DeductionType == "TDS Payable").Select(m => m.DeductionCategoryId).ToList();
                    if (tdsPayableQuery.Count == 1)
                        deductions.Where(m => m.DeductionType == "TDS Payable")
                            .ToList()
                            .ForEach(data =>
                            {
                                data.TDSPercentage = Common.GetVendorTDSPercentage(data.DeductionCategoryId ?? 0);
                            });
                }
                model.ExpenseDetail = expenses;
                model.DeductionDetail = deductions;
                return model;
            }
            catch (Exception ex)
            {
                return new BillEntryModel();
            }
        }
        public BillEntryModel GetAddNewExpenseDetails(string typeCode, string tSubCode)
        {
            try
            {
                BillEntryModel model = new BillEntryModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                    groupList = (from c in context.tblTransactionDefinition
                                 join g in context.tblAccountGroup on c.AccountGroupId equals g.AccountGroupId
                                 where c.TransactionTypeCode == typeCode //&& c.TransactionType == "Debit"
                                 && c.SubCode == tSubCode
                                 select new MasterlistviewModel()
                                 {
                                     id = g.AccountGroupId,
                                     name = g.AccountGroup
                                 }).ToList();
                    if (groupList.Count > 0)
                    {
                        int groupId = groupList[0].id ?? 0;
                        string transType = string.Empty;// "Debit";
                        bool isJv = false;
                        List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                        if (groupList.Count > 0)
                        {
                            headList = (from ah in context.tblAccountHead
                                        orderby ah.AccountHead
                                        where ah.AccountGroupId == groupId
                                        select new MasterlistviewModel()
                                        {
                                            id = ah.AccountHeadId,
                                            name = ah.AccountHead
                                        }).ToList();
                        }
                        if (headList.Count > 0)
                        {
                            int headId = headList[0].id ?? 0;
                            var data = Common.GetTransactionType(groupId, headId, typeCode, tSubCode);
                            transType = data.Item1;
                            isJv = data.Item2;
                        }
                        expenses.Add(new BillExpenseDetailModel()
                        {
                            AccountGroupList = groupList,
                            AccountHeadList = headList,
                            TransactionType = transType,
                            IsJV = isJv
                        });
                    }
                }

                model.ExpenseDetail = expenses;
                return model;
            }
            catch (Exception ex)
            {
                return new BillEntryModel();
            }
        }
        public List<BillDeductionDetailModel> GetTaxHeadDetails(int[] heads)
        {
            try
            {
                List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    deductions = (from g in context.tblAccountGroup
                                  join h in context.tblAccountHead on g.AccountGroupId equals h.AccountGroupId
                                  where heads.Contains(h.AccountHeadId)
                                  select new BillDeductionDetailModel()
                                  {
                                      DeductionHead = h.AccountHead,
                                      AccountGroup = g.AccountGroup,
                                      AccountGroupId = g.AccountGroupId,
                                      DeductionHeadId = h.AccountHeadId
                                  }).ToList();

                }
                return deductions;
            }
            catch (Exception ex)
            {
                return new List<BillDeductionDetailModel>();
            }
        }
        public bool BillBOATransaction(Int32 billId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblBillEntry.SingleOrDefault(m => m.BillId == billId);
                    if (billQuery != null)
                    {
                        decimal netAmt = (billQuery.DeductionAmount ?? 0) + (billQuery.ExpenseAmount ?? 0);
                        model.TempVoucherNumber = billQuery.BillNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("CJV");
                        model.BOAValue = netAmt;
                        model.RefNumber = billQuery.BillNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;

                        txList = (from exp in context.tblBillExpenseDetail
                                  where exp.BillId == billId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblBillDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.BillId == billId && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = billQuery.TransactionTypeCode == "ADV" ? "Debit" : "Credit",
                            Creditor_f = true,
                            SubLedgerType = 1,
                            SubLedgerId = billQuery.VendorId
                        });
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool BillCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int uId, string tCode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblBillCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.BillId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, uId, billId, tCode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool TravelCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int uId, string tCode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblTravelBillCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.TravelBillId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = isReversed ? c.ReversedAmount : c.PaymentAmount
                              }).ToList();
                    if (txList.Count > 0)
                        return UpdateCommitmentBalance(txList, revoke, isReversed, uId, billId, tCode);
                    else
                        return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<BillHistoryModel> GetBillHistoryList(int vendorId)
        {
            try
            {

                List<BillHistoryModel> list = new List<BillHistoryModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblBillEntry
                            orderby b.PONumber descending
                            where b.Status != "InActive" && b.VendorId == vendorId
                            select new
                            {
                                b.BillNumber,
                                b.CRTD_TS,
                                b.BillAmount,
                                b.BillTaxAmount,
                                b.ExpenseAmount,
                                b.DeductionAmount,
                                b.PONumber,
                                b.TransactionTypeCode,
                                b.InvoiceNumber,
                                b.InvoiceDate
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new BillHistoryModel()
                                 {
                                     SlNo = index + 1,
                                     BillNumber = x.BillNumber,
                                     BillDate = String.Format("{0:s}", x.CRTD_TS),
                                     POAmount = x.BillAmount + x.BillTaxAmount,
                                     BillAmount = x.ExpenseAmount + (x.DeductionAmount ?? 0),
                                     PONumber = x.PONumber,
                                     TransactionType = x.TransactionTypeCode,
                                     InvoiceNumber = x.InvoiceNumber,
                                     InvoiceDate = String.Format("{0:s}", x.InvoiceDate),
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<BillHistoryModel>();
            }
        }
        public bool POWFInit(int billId, int logged_in_user, string transTypeCode)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBillEntry.FirstOrDefault(m => m.BillId == billId && m.Status == "Open" && m.TransactionTypeCode == transTypeCode);
                    if (query != null)
                    {
                        var paymentVal = query.BillAmount ?? 0 + query.BillTaxAmount ?? 0;
                        int pgId = 3;
                        if (paymentVal > 50000)
                            pgId = 2;
                        var fw = FlowEngine.Init(pgId, logged_in_user, billId, "BillId");
                        string url = string.Empty;
                        if (transTypeCode == "ADV")
                            url = "/CoreAccounts/AdvanceBillPaymentView?billId=" + billId;
                        else if (transTypeCode == "PTM" && query.PartAdvance_f == true)
                            url = "/CoreAccounts/AdvancePartBillPaymentView?billId=" + billId;
                        else if (transTypeCode == "PTM" && query.PartAdvance_f != true)
                            url = "/CoreAccounts/PartBillPaymentView?billId=" + billId;
                        else if (transTypeCode == "STM")
                            url = "/CoreAccounts/SettlementBillPaymentView?billId=" + billId;
                        else
                            return false;
                        fw.ActionLink(url);
                        fw.FailedMethod("BillWFInitFailure");
                        fw.ClarifyMethod("BillWFInitClarify");
                        fw.SuccessMethod("BillWFInitSuccess");
                        fw.ProcessInit();
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Submit for approval";
                            query.UPTD_By = logged_in_user;
                            query.UPTD_TS = DateTime.Now;
                            context.SaveChanges();
                            return true;
                        }
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion
        #endregion
        #region Travel
        #region Advance
        public int AdvanceTravelBillIU(TravelAdvanceModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.TravelBillId == 0)
                        {
                            int travelBillId = 0;
                            tblTravelBill bill = new tblTravelBill();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "TAD";
                            bill.Adv100Pct_f = model.Adv100Pct_f;
                            bill.ProformaInvoiceSubmit_f = model.ProformaInvoiceSubmit_f;
                            bill.AdvanceValue = model.AdvanceValue;
                            bill.BillNumber = Common.GetNewTravelBillNo("TAD");
                            bill.EstimatedValue = model.EstimatedValue;
                            bill.PI = model.PI;
                            bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                            bill.Remarks = model.Remarks;
                            //bill.TravelType = 1;
                            context.tblTravelBill.Add(bill);
                            context.SaveChanges();
                            travelBillId = bill.TravelBillId;
                            for (int i = 0; i < model.CountryId.Length; i++)
                            {
                                tblTravelBillDetail det = new tblTravelBillDetail();
                                det.CountryId = model.CountryId[i];
                                det.CRTD_By = logged_in_user;
                                det.CRTD_TS = DateTime.Now;
                                det.NoOfTraveller = model.NoOfTraveller;
                                det.Status = "Active";
                                det.Place = model.Place;
                                det.Purpose = model.Purpose;
                                det.TravelBillId = travelBillId;
                                det.TravelFromDate = model.TravelFromDate;
                                det.TravelToDate = model.TravelToDate;
                                context.tblTravelBillDetail.Add(det);
                                context.SaveChanges();
                            }
                            for (int i = 0; i < model.CategoryId.Length; i++)
                            {
                                int travellerId = 0;
                                string travellerName = model.TravellerName[i];
                                if (model.CategoryId[i] == 1 && !int.TryParse(model.TravellerId[i], out travellerId))
                                    new Exception();
                                else if (model.CategoryId[i] == 2)
                                    travellerName = model.TravellerId[i];

                                tblTravelBillTravellerDetail det = new tblTravelBillTravellerDetail();
                                det.CategoryId = model.CategoryId[i];
                                det.TravellerId = travellerId;
                                //if (model.CategoryId[i] == 2 || model.CategoryId[i] == 3)
                                    det.TravellerName = travellerName;
                                det.CRTD_By = logged_in_user;
                                det.CRTD_TS = DateTime.Now;
                                det.Status = "Active";
                                det.TravelBillDetailId = travelBillId;
                                context.tblTravelBillTravellerDetail.Add(det);
                                context.SaveChanges();
                            }

                            foreach (var item in model.DocumentDetail)
                            {
                                tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.TravelBillId = travelBillId;
                                doc.Status = "Active";
                                context.tblTravelBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return travelBillId;
                        }
                        else
                        {
                            int travelBillId = model.TravelBillId;
                            var bill = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.TransactionTypeCode == "TAD" && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Adv100Pct_f = model.Adv100Pct_f;
                                bill.ProformaInvoiceSubmit_f = model.ProformaInvoiceSubmit_f;
                                bill.AdvanceValue = model.AdvanceValue;
                                bill.EstimatedValue = model.EstimatedValue;
                                bill.PI = model.PI;
                                bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                                bill.Remarks = model.Remarks;
                                //bill.TravelType = 1;
                                context.SaveChanges();
                                context.tblTravelBillTravellerDetail.RemoveRange(context.tblTravelBillTravellerDetail.Where(m => m.TravelBillDetailId == travelBillId));
                                context.SaveChanges();
                                for (int i = 0; i < model.CategoryId.Length; i++)
                                {
                                    int travellerId = 0;
                                    string travellerName = model.TravellerName[i];
                                    if (model.CategoryId[i] == 1 && !int.TryParse(model.TravellerId[i], out travellerId))
                                        new Exception();
                                    else if (model.CategoryId[i] == 2)
                                        travellerName = model.TravellerId[i];
                                    tblTravelBillTravellerDetail det = new tblTravelBillTravellerDetail();
                                    det.CategoryId = model.CategoryId[i];
                                    det.TravellerId = travellerId;
                                    //if (model.CategoryId[i] == 2 || model.CategoryId[i] == 3)
                                        det.TravellerName = travellerName;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.Status = "Active";
                                    det.TravelBillDetailId = travelBillId;
                                    context.tblTravelBillTravellerDetail.Add(det);
                                    context.SaveChanges();
                                }

                                context.tblTravelBillDetail.RemoveRange(context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                for (int i = 0; i < model.CountryId.Length; i++)
                                {
                                    tblTravelBillDetail det = new tblTravelBillDetail();
                                    det.CountryId = model.CountryId[i];
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.NoOfTraveller = model.NoOfTraveller;
                                    det.Status = "Active";
                                    det.Place = model.Place;
                                    det.Purpose = model.Purpose;
                                    det.TravelFromDate = model.TravelFromDate;
                                    det.TravelToDate = model.TravelToDate;
                                    det.TravelBillId = travelBillId;
                                    context.tblTravelBillDetail.Add(det);
                                    context.SaveChanges();
                                }

                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblTravelBillDocumentDetail.Where(x => x.TravelBillId == travelBillId && !arrList.Contains(x.TravelBillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblTravelBillDocumentDetail.FirstOrDefault(m => m.TravelBillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.TravelBillId = travelBillId;
                                        doc.Status = "Active";
                                        context.tblTravelBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }

                                transaction.Commit();
                                return travelBillId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public TravelAdvanceModel GetTravelAdvanceDetails(int travelBillId)
        {
            try
            {
                TravelAdvanceModel bill = new TravelAdvanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.TravelBillId = query.TravelBillId;
                        bill.EstimatedValue = query.EstimatedValue;
                        bill.AdvanceValue = query.AdvanceValue;
                        bill.Adv100Pct_f = query.Adv100Pct_f ?? false;
                        bill.ProformaInvoiceSubmit_f = query.ProformaInvoiceSubmit_f ?? false;
                        bill.PI = query.PI;
                        bill.PIName = query.PIName;
                        bill.Remarks = query.Remarks;
                        var tQuery = context.tblTravelBillTravellerDetail.Where(m => m.TravelBillDetailId == travelBillId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {
                            bill.CategoryId = tQuery.Select(m => m.CategoryId).ToArray();
                            var arrTId = tQuery.Select(m => m.TravellerId).ToArray();
                            bill.TravellerName = tQuery.Select(m => m.TravellerName).ToArray();
                            int len = bill.TravellerName.Count();
                            string[] tId = new string[len];
                            for (int i = 0; i < len; i++)
                            {
                                tId[i] = bill.TravellerName[i];
                            }
                            bill.TravellerId = tId;
                            for (int i = 0; i < arrTId.Length; i++)
                            {
                                if (arrTId[i] != 0)
                                    bill.TravellerId[i] = arrTId[i].ToString();
                            }
                        }
                        var tdQuery = context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId && m.Status == "Active").ToList();
                        if (tdQuery.Count > 0)
                        {
                            bill.CountryId = tdQuery.Select(m => m.CountryId).ToArray();
                            bill.NoOfTraveller = tdQuery[0].NoOfTraveller;
                            bill.Place = tdQuery[0].Place;
                            bill.Purpose = tdQuery[0].Purpose;
                            bill.TravelFromDate = tdQuery[0].TravelFromDate;
                            bill.TravelToDate = tdQuery[0].TravelToDate;
                        }
                        bill.DocumentDetail = (from d in context.tblTravelBillDocumentDetail
                                               where d.TravelBillId == travelBillId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TravelBillDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new TravelAdvanceModel();
            }
        }
        public TravelAdvanceBillEntryModel GetTravelAdvanceBillEntryDetails(int travelBillId)
        {
            try
            {
                TravelAdvanceBillEntryModel bill = new TravelAdvanceBillEntryModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.TravelBillId = query.TravelBillId;
                        bill.EstimatedValue = query.EstimatedValue;
                        bill.PaymentTDSAmount = query.PaymentTDSAmount;
                        bill.AdvanceValue = query.AdvanceValue;
                        bill.Adv100Pct_f = query.Adv100Pct_f ?? false;
                        bill.CheckListVerified_By = query.CheckListVerifiedBy;
                        bill.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        bill.ProformaInvoiceSubmit_f = query.ProformaInvoiceSubmit_f ?? false;
                        bill.PI = query.PI;
                        bill.PIName = query.PIName;
                        bill.Remarks = query.Remarks;
                        var tQuery = context.tblTravelBillTravellerDetail.Where(m => m.TravelBillDetailId == travelBillId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {
                            bill.CategoryId = tQuery.Select(m => m.CategoryId).ToArray();
                            var arrTId = tQuery.Select(m => m.TravellerId).ToArray();
                            bill.TravellerName = tQuery.Select(m => m.TravellerName).ToArray();
                            int len = bill.TravellerName.Count();
                            string[] tId = new string[len];
                            for (int i = 0; i < len; i++)
                            {
                                tId[i] = bill.TravellerName[i];
                            }
                            bill.TravellerId = tId;
                            for (int i = 0; i < arrTId.Length; i++)
                            {
                                if (arrTId[i] != 0)
                                    bill.TravellerId[i] = arrTId[i].ToString();
                            }
                        }
                        var tdQuery = context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId && m.Status == "Active").ToList();
                        if (tdQuery.Count > 0)
                        {
                            bill.CountryId = tdQuery.Select(m => m.CountryId).ToArray();
                            bill.NoOfTraveller = tdQuery[0].NoOfTraveller;
                            bill.Place = tdQuery[0].Place;
                            bill.Purpose = tdQuery[0].Purpose;
                            bill.TravelFromDate = tdQuery[0].TravelFromDate;
                            bill.TravelToDate = tdQuery[0].TravelToDate;
                        }
                        bill.PaymentBreakDetail = (from e in context.tblTravelPaymentBreakUpDetail
                                                   where e.TravelBillId == travelBillId && e.Status == "Active"
                                                   select new
                                                   {
                                                       e.TravelPaymentBreakUpDetailId,
                                                       e.CategoryId,
                                                       e.UserId,
                                                       e.Name,
                                                       e.ModeOfPayment,
                                                       e.PaymentAmount
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new PaymentBreakUpDetailModel()
                                              {
                                                  PaymentBreakUpDetailId = x.TravelPaymentBreakUpDetailId,
                                                  CategoryId = x.CategoryId,
                                                  UserId = x.UserId ?? 0,
                                                  Name = x.Name,
                                                  ModeOfPayment = x.ModeOfPayment,
                                                  PaymentAmount = x.PaymentAmount
                                              }).ToList();
                        bill.CommitmentDetail = (from c in context.tblTravelBillCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.TravelBillId == travelBillId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     BillCommitmentDetailId = c.TravelBillCommitmentDetailId
                                                 }).ToList();

                        bill.ExpenseDetail = (from e in context.tblTravelBillExpenseDetail
                                              where e.TravelBillId == travelBillId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.TravelBillExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.TravelBillExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblTravelBillDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.TravelBillId == travelBillId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.TravelBillDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();

                        bill.CheckListDetail = (from ck in context.tblTravelBillCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.TravelBillId == travelBillId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();
                        bill.DocumentDetail = (from d in context.tblTravelBillDocumentDetail
                                               where d.TravelBillId == travelBillId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TravelBillDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                        bill.InvoiceBreakDetail = (from d in context.tblTravelInvoiceDetail
                                                   where d.TravelBillId == travelBillId && d.Status == "Active"
                                                   select new
                                                   {
                                                       d.InvoiceNumber,
                                                       d.TaxablePercentage,
                                                       d.TaxValue,
                                                       d.Description,
                                                       d.Amount,
                                                       d.GSTIN,
                                                       d.InvoiceDate,
                                                       d.IsTaxEligible,
                                                       d.IsInterstate,
                                                       d.HSNCode,
                                                       d.TypeOfServiceOrCategory,
                                                       d.Vendor
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new InvoiceBreakUpDetailModel()
                                              {
                                                  InvoiceNumber = x.InvoiceNumber,
                                                  TaxablePercentage = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  TaxValue = x.TaxValue,
                                                  Description = x.Description,
                                                  Amount = x.Amount,
                                                  GSTIN = x.GSTIN,
                                                  InvoiceDate = x.InvoiceDate,
                                                  IsTaxEligible = x.IsTaxEligible ?? false,
                                                  IsInterstate = x.IsInterstate ?? false,
                                                  HSNCode = x.HSNCode,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  Vendor = x.Vendor
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new TravelAdvanceBillEntryModel();
            }
        }
        public bool DeleteTravelAdvanceBill(int travelBillId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.Status == "Open" && m.TransactionTypeCode == "TAD");
                    if (query != null)
                    {
                        query.Status = "InActive";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.tblTravelBillTravellerDetail.Where(x => x.TravelBillDetailId == travelBillId)
                        .ToList()
                        .ForEach(m =>
                        {
                            m.Status = "InActive";
                            m.UPDT_By = logged_in_user;
                            m.UPDT_TS = DateTime.Now;
                        });
                        context.tblTravelBillDetail.Where(x => x.TravelBillId == travelBillId)
                        .ToList()
                        .ForEach(m =>
                        {
                            m.Status = "InActive";
                            m.UPDT_By = logged_in_user;
                            m.UPDT_TS = DateTime.Now;
                        });
                        context.tblTravelBillDocumentDetail.Where(x => x.TravelBillId == travelBillId && x.Status == "Active")
                        .ToList()
                        .ForEach(m =>
                        {
                            m.Status = "InActive";
                            m.UPDT_By = logged_in_user;
                            m.UPDT_TS = DateTime.Now;
                        });
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool TravelAdvanceBillWFInit(int travelBillId, int logged_in_user, string typeCode)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.Status == "Open" && m.TransactionTypeCode == typeCode);
                    if (query != null)
                    {
                        var fw = FlowEngine.Init(1, logged_in_user, travelBillId, "TravelBillId");
                        if (typeCode == "TAD")
                        {
                            string url = "/CoreAccounts/TravelAdvancePaymentView?travelBillId=" + travelBillId;
                            fw.ActionLink(url);
                            fw.FailedMethod("TADWFInitFailure");
                            fw.ClarifyMethod("TADWFInitClarify");
                            fw.SuccessMethod("TADWFInitSuccess");
                            fw.ProcessInit();
                        }
                        else if (typeCode == "TST")
                        {
                            string url = "/CoreAccounts/TravelSettlementPaymentView?travelBillId=" + travelBillId;
                            fw.ActionLink(url);
                            fw.FailedMethod("TSTWFInitFailure");
                            fw.ClarifyMethod("TSTWFInitClarify");
                            fw.SuccessMethod("TSTWFInitSuccess");
                            fw.ProcessInit();
                        }
                        else if (typeCode == "DTV")
                        {
                            string url = "/CoreAccounts/DomesticTravelPaymentView?travelBillId=" + travelBillId;
                            fw.ActionLink(url);
                            fw.FailedMethod("DTVWFInitFailure");
                            fw.ClarifyMethod("DTVWFInitClarify");
                            fw.SuccessMethod("DTVWFInitSuccess");
                            fw.ProcessInit();
                        }
                        if (String.IsNullOrEmpty(fw.errorMsg))
                        {
                            query.Status = "Submit for approval";
                            query.UPTD_By = logged_in_user;
                            query.UPTD_TS = DateTime.Now;
                            context.SaveChanges();
                            return true;
                        }
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool UpdateTAStatusOnBookCommitment(int travelBillId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.Status == "Pending Commitment" && m.TransactionTypeCode == "TAD");
                    if (query != null)
                    {
                        query.Status = "Pending Bill Entry";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public int TravelADVBillEntryIU(TravelAdvanceBillEntryModel model, int logged_in_user)
        {
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            int travelBillId = model.TravelBillId;
                            int result = -1;
                            var bill = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.TransactionTypeCode == "TAD" && (m.Status == "Pending Bill Entry" || m.Status == "Pending Bill Approval"));
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                if (bill.Status == "Pending Bill Entry")
                                {
                                    bill.Status = "Pending Bill Approval";
                                    result = 1;
                                }
                                else
                                    result = 2;
                                context.SaveChanges();

                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblTravelBillDocumentDetail.Where(x => x.TravelBillId == travelBillId && !arrList.Contains(x.TravelBillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblTravelBillDocumentDetail.FirstOrDefault(m => m.TravelBillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.TravelBillId = travelBillId;
                                        doc.Status = "Active";
                                        context.tblTravelBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTravelInvoiceDetail.RemoveRange(context.tblTravelInvoiceDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.InvoiceBreakDetail)
                                {
                                    if (item.TypeOfServiceOrCategory != null)
                                    {
                                        tblTravelInvoiceDetail invdetails = new tblTravelInvoiceDetail();
                                        invdetails.TravelBillId = travelBillId;
                                        invdetails.InvoiceNumber = item.InvoiceNumber;
                                        invdetails.Amount = item.Amount;
                                        invdetails.TaxablePercentage = item.TaxablePercentage;
                                        invdetails.TaxValue = item.TaxValue;
                                        invdetails.Description = item.Description;
                                        invdetails.Amount = item.Amount;
                                        invdetails.GSTIN = item.GSTIN;
                                        invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        invdetails.IsTaxEligible = item.IsTaxEligible;
                                        invdetails.InvoiceDate = item.InvoiceDate;
                                        invdetails.CRTD_By = logged_in_user;
                                        invdetails.IsInterstate = item.IsInterstate;
                                        invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                        invdetails.Vendor = item.Vendor;
                                        invdetails.CRTD_TS = DateTime.Now;
                                        invdetails.Status = "Active";
                                        context.tblTravelInvoiceDetail.Add(invdetails);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTravelPaymentBreakUpDetail.RemoveRange(context.tblTravelPaymentBreakUpDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.PaymentBreakDetail)
                                {
                                    //int userId = 0;
                                    //string name = item.Name;
                                    //if (item.CategoryId != 2 && !int.TryParse(item.UserId, out userId))
                                    //    new Exception();
                                    //else if (item.CategoryId == 2)
                                    //    name = item.UserId;
                                    tblTravelPaymentBreakUpDetail payDet = new tblTravelPaymentBreakUpDetail();
                                    payDet.CategoryId = item.CategoryId;
                                    payDet.UserId = item.UserId;
                                    payDet.TravelBillId = travelBillId;
                                    //if (item.CategoryId == 2)
                                    payDet.Name = item.Name;
                                    payDet.ModeOfPayment = item.ModeOfPayment;
                                    payDet.PaymentAmount = item.PaymentAmount;
                                    payDet.CRTD_By = logged_in_user;
                                    payDet.CRTD_TS = DateTime.Now;
                                    payDet.Status = "Active";
                                    context.tblTravelPaymentBreakUpDetail.Add(payDet);
                                    context.SaveChanges();
                                }
                                context.tblTravelBillCommitmentDetail.RemoveRange(context.tblTravelBillCommitmentDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblTravelBillCommitmentDetail commitment = new tblTravelBillCommitmentDetail();
                                    commitment.TravelBillId = travelBillId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblTravelBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblTravelBillDeductionDetail.RemoveRange(context.tblTravelBillDeductionDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTravelBillDeductionDetail deduction = new tblTravelBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TravelBillId = travelBillId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTravelBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTravelBillExpenseDetail.RemoveRange(context.tblTravelBillExpenseDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTravelBillExpenseDetail exp = new tblTravelBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.TravelBillId = travelBillId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTravelBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblTravelBillCheckDetail.RemoveRange(context.tblTravelBillCheckDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTravelBillCheckDetail chk = new tblTravelBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TravelBillId = travelBillId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTravelBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return result;
                            }
                            else
                                return -1;


                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            return -1;
                        }
                    }
                }
            }
        }
        public bool TravelAdvanceBillApproved(int travelBillId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.Status == "Pending Bill Approval" && m.TransactionTypeCode == "TAD");
                    if (query != null)
                    {
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Settlement
        public TravelAdvanceModel GetTravelAdvanceDetailsForSettlement(int travelBillId)
        {
            try
            {
                TravelAdvanceModel bill = new TravelAdvanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId);
                    if (query != null)
                    {
                        bill.EstimatedValue = query.EstimatedValue;
                        bill.AdvanceValue = query.AdvanceValue;
                        bill.RequestedDate = String.Format("{0:dd-MMMM-yyyy}", query.CRTD_TS);
                        bill.AdvanceValueWOClearanceAgent = Common.GetTravelAdvanceValueWOClearanceAgent(travelBillId);
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new TravelAdvanceModel();
            }
        }
        public TravelSettlementModel GetTravelSettlementDetails(int travelBillId)
        {
            try
            {
                TravelSettlementModel bill = new TravelSettlementModel();
                List<TravelDetailModel> detList = new List<TravelDetailModel>();
                int travelDetailId = 0;
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.TravelBillId = query.TravelBillId;
                        bill.PaymentTDSAmount = query.PaymentTDSAmount;
                        bill.OverallExpense = query.OverallExpense;
                        bill.PI = query.PI;
                        bill.PIName = query.PIName;
                        bill.SubCode = query.SubCode;
                        bill.ADVSettlement_f = query.ADVSettlement_f ?? false;
                        bill.selADVBillNumber = query.RefTravelBillId;
                        bill.CheckListVerified_By = query.CheckListVerifiedBy;
                        bill.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        var tdQuery = context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId && m.Status == "Active").ToList();
                        if (tdQuery.Count > 0)
                        {
                            for (int i = 0; i < tdQuery.Count; i++)
                            {
                                travelDetailId = tdQuery[i].TravelBillDetailId;
                                var queryBU = context.tblTravelBillBreakUpDetail.Where(m => m.TravelBillDetailId == travelDetailId).ToList();
                                var queryTD = context.tblTravelBillTravellerDetail.Where(m => m.TravelBillDetailId == travelDetailId).ToList();

                                var arrTId = queryTD.Select(m => m.TravellerId).ToArray();
                                var tName = queryTD.Select(m => m.TravellerName).ToArray();
                                var tId = tName;
                                for (int j = 0; j < arrTId.Length; j++)
                                {
                                    if (arrTId[j] != 0 && arrTId[j] != null)
                                        tId[j] = arrTId[j].ToString();
                                }
                                detList.Add(new TravelDetailModel()
                                {
                                    Boarding = queryTD.Select(m => m.Boarding).ToArray(),
                                    CategoryId = queryTD.Select(m => m.CategoryId).ToArray(),
                                    PerDiem = queryTD.Select(m => m.PerDiem).ToArray(),
                                    TravellerId = tId,
                                    TravellerName = tName,
                                    TravellerDetailId = queryTD.Select(m => m.TravellerDetailId).ToArray(),

                                    BreakUpDetailId = queryBU.Select(m => m.BreakUpDetailId).ToArray(),
                                    ClaimedConvRate = queryBU.Select(m => m.ClaimedConvRate).ToArray(),
                                    ClaimedCurrencySpent = queryBU.Select(m => m.ClaimedCurrencySpent).ToArray(),
                                    ClaimedForexAmt = queryBU.Select(m => m.ClaimedForexAmt).ToArray(),
                                    ClaimedTotalAmount = queryBU.Select(m => m.ClaimedTotalAmount).ToArray(),
                                    ProcessedConvRate = queryBU.Select(m => m.ProcessedConvRate).ToArray(),
                                    ProcessedForexAmt = queryBU.Select(m => m.ProcessedForexAmt).ToArray(),
                                    ProcessedTotalAmount = queryBU.Select(m => m.ProcessedTotalAmount).ToArray(),
                                    ExpenseTypeId = queryBU.Select(m => m.ExpenseTypeId).ToArray(),
                                    Remarks = queryBU.Select(m => m.Remarks).ToArray(),

                                    TravelBillDetailId = travelDetailId,
                                    InvoiceNumber = tdQuery[i].InvoiceNo,
                                    Purpose = tdQuery[i].Purpose,
                                    CountryId = tdQuery[i].CountryId,
                                    Place = tdQuery[i].Place,
                                    TravelToDate = tdQuery[i].TravelToDate,
                                    TravelFromDate = tdQuery[i].TravelFromDate,
                                    DocumentName = tdQuery[i].DocumentName,
                                    DocumentActualName = tdQuery[i].DocumentActualName,
                                    DocumentPath = "~/Content/OtherDocuments",

                                });
                            }
                        }
                        bill.TravelDetail = detList;
                        bill.PaymentBreakDetail = (from e in context.tblTravelPaymentBreakUpDetail
                                                   where e.TravelBillId == travelBillId && e.Status == "Active"
                                                   select new
                                                   {
                                                       e.TravelPaymentBreakUpDetailId,
                                                       e.CategoryId,
                                                       e.UserId,
                                                       e.Name,
                                                       e.ModeOfPayment,
                                                       e.PaymentAmount
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new PaymentBreakUpDetailModel()
                                              {
                                                  PaymentBreakUpDetailId = x.TravelPaymentBreakUpDetailId,
                                                  CategoryId = x.CategoryId,
                                                  UserId = x.UserId ?? 0,
                                                  Name = x.Name,
                                                  ModeOfPayment = x.ModeOfPayment,
                                                  PaymentAmount = x.PaymentAmount
                                              }).ToList();
                        bill.CommitmentDetail = (from c in context.tblTravelBillCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.TravelBillId == travelBillId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     ReversedAmount = c.ReversedAmount,
                                                     BillCommitmentDetailId = c.TravelBillCommitmentDetailId
                                                 }).ToList();

                        bill.ExpenseDetail = (from e in context.tblTravelBillExpenseDetail
                                              where e.TravelBillId == travelBillId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.TravelBillExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.TravelBillExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblTravelBillDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.TravelBillId == travelBillId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.TravelBillDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();

                        bill.CheckListDetail = (from ck in context.tblTravelBillCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.TravelBillId == travelBillId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();
                        bill.DocumentDetail = (from d in context.tblTravelBillDocumentDetail
                                               where d.TravelBillId == travelBillId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TravelBillDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                        bill.InvoiceBreakDetail = (from d in context.tblTravelInvoiceDetail
                                                   where d.TravelBillId == travelBillId && d.Status == "Active"
                                                   select new
                                                   {
                                                       d.InvoiceNumber,
                                                       d.TaxablePercentage,
                                                       d.TaxValue,
                                                       d.Description,
                                                       d.Amount,
                                                       d.GSTIN,
                                                       d.InvoiceDate,
                                                       d.IsTaxEligible,
                                                       d.IsInterstate,
                                                       d.HSNCode,
                                                       d.TypeOfServiceOrCategory,
                                                       d.Vendor
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new InvoiceBreakUpDetailModel()
                                              {
                                                  InvoiceNumber = x.InvoiceNumber,
                                                  TaxablePercentage = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  TaxValue = x.TaxValue,
                                                  Description = x.Description,
                                                  Amount = x.Amount,
                                                  GSTIN = x.GSTIN,
                                                  InvoiceDate = x.InvoiceDate,
                                                  IsTaxEligible = x.IsTaxEligible ?? false,
                                                  IsInterstate = x.IsInterstate ?? false,
                                                  HSNCode = x.HSNCode,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  Vendor = x.Vendor
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new TravelSettlementModel();
            }
        }
        public int TravelSettlementIU(TravelSettlementModel model, int logged_in_user)
        {
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            bool isBalanced = false, isReversed = false;
                            decimal advAmt = 0;
                            if (model.TravelBillId == 0)
                            {
                                int travelBillId = 0;
                                tblTravelBill bill = new tblTravelBill();
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                bill.SubCode = model.SubCode;
                                bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                if (model.ADVSettlement_f)
                                {
                                    //advAmt = (from b in context.tblTravelBill
                                    //          where b.Status == "Completed" && b.TransactionTypeCode == "TAD" && b.TravelBillId == model.selADVBillNumber
                                    //          && !context.tblTravelBill.Any(m => m.RefTravelBillId == b.TravelBillId && m.TransactionTypeCode == "TST")
                                    //          select b).FirstOrDefault().AdvanceValue ?? 0;
                                    advAmt = (from b in context.tblTravelPaymentBreakUpDetail
                                              where b.TravelBillId == model.selADVBillNumber && b.CategoryId != 3
                                              select b).ToList().Sum(m => m.PaymentAmount ?? 0);
                                    if (advAmt != model.AdvanceValueWOClearanceAgent)
                                        return -1;
                                }
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                decimal billAmt = model.OverallExpense ?? 0;
                                if (billAmt > advAmt)
                                {
                                    bill.PaymentValue = billAmt - advAmt;
                                    bill.BalanceinAdvance = 0;
                                }
                                else if (billAmt < advAmt)
                                {
                                    isReversed = true;
                                    bill.PaymentValue = 0;
                                    bill.BalanceinAdvance = advAmt - billAmt;
                                }
                                else
                                {
                                    isBalanced = true;
                                    bill.PaymentValue = 0;
                                    bill.BalanceinAdvance = 0;
                                }
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "TST";
                                bill.TravelType = 1;
                                bill.ADVSettlement_f = model.ADVSettlement_f;
                                bill.RefTravelBillId = model.selADVBillNumber;
                                bill.BillNumber = Common.GetNewTravelBillNo("TST");
                                bill.PI = model.PI;
                                bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                                bill.OverallExpense = model.OverallExpense;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblTravelBill.Add(bill);
                                context.SaveChanges();
                                travelBillId = bill.TravelBillId;
                                foreach (var item in model.TravelDetail)
                                {
                                    int travelBillDetId = 0;
                                    string actName = System.IO.Path.GetFileName(item.InvoiceAttachment.FileName);
                                    var docName = Guid.NewGuid().ToString() + "_" + actName;
                                    item.InvoiceAttachment.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    //double duration = (item.TravelToDate.Value.Date - item.TravelFromDate.Value.Date).TotalDays;
                                    decimal? ttlPerDiem = item.PerDiem.Sum();
                                    decimal? ttlOtherExp = item.ProcessedTotalAmount.Sum();
                                    tblTravelBillDetail det = new tblTravelBillDetail();
                                    det.CountryId = item.CountryId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.NoOfTraveller = item.CategoryId.Length;
                                    det.Status = "Active";
                                    det.Place = item.Place;
                                    det.Purpose = item.Purpose;
                                    det.TravelBillId = travelBillId;
                                    det.InvoiceNo = item.InvoiceNumber;
                                    det.TravelFromDate = item.TravelFromDate;
                                    det.TravelToDate = item.TravelToDate;
                                    det.DocumentActualName = actName;
                                    det.DocumentName = docName;
                                    det.TotalPerDiem = ttlPerDiem;
                                    det.TotalExpense = ttlPerDiem + ttlOtherExp;
                                    det.OtherExpense = ttlOtherExp;
                                    context.tblTravelBillDetail.Add(det);
                                    context.SaveChanges();
                                    travelBillDetId = det.TravelBillDetailId;
                                    for (int i = 0; i < item.CategoryId.Length; i++)
                                    {
                                        int travellerId = 0;
                                        string travellerName = item.TravellerName[i];
                                        if (item.CategoryId[i] == 1 && !int.TryParse(item.TravellerId[i], out travellerId))
                                            new Exception();
                                        else if (item.CategoryId[i] == 2)
                                            travellerName = item.TravellerId[i];
                                        tblTravelBillTravellerDetail travellerDet = new tblTravelBillTravellerDetail();
                                        travellerDet.CategoryId = item.CategoryId[i];
                                        travellerDet.TravellerId = travellerId;
                                        travellerDet.TravelBillDetailId = travelBillDetId;
                                        if (item.CategoryId[i] == 2 || item.CategoryId[i] == 3)
                                            travellerDet.TravellerName = travellerName;
                                        travellerDet.Boarding = item.Boarding[i];
                                        travellerDet.PerDiem = item.PerDiem[i];
                                        travellerDet.CRTD_By = logged_in_user;
                                        travellerDet.CRTD_TS = DateTime.Now;
                                        travellerDet.Status = "Active";
                                        context.tblTravelBillTravellerDetail.Add(travellerDet);
                                        context.SaveChanges();

                                    }

                                    for (int i = 0; i < item.ExpenseTypeId.Length; i++)
                                    {
                                        tblTravelBillBreakUpDetail breakUpDet = new tblTravelBillBreakUpDetail();
                                        breakUpDet.ClaimedConvRate = item.ClaimedConvRate[i];
                                        breakUpDet.ClaimedCurrencySpent = item.ClaimedCurrencySpent[i];
                                        breakUpDet.ClaimedForexAmt = item.ClaimedForexAmt[i];
                                        breakUpDet.ClaimedTotalAmount = item.ClaimedTotalAmount[i];
                                        breakUpDet.ProcessedConvRate = item.ProcessedConvRate[i];
                                        breakUpDet.ProcessedForexAmt = item.ProcessedForexAmt[i];
                                        breakUpDet.ProcessedTotalAmount = item.ProcessedTotalAmount[i];
                                        breakUpDet.DifferenceAmt = item.ClaimedTotalAmount[i] - item.ProcessedTotalAmount[i];
                                        breakUpDet.ExpenseTypeId = item.ExpenseTypeId[i];
                                        breakUpDet.Remarks = item.Remarks[i];
                                        breakUpDet.CRTD_By = logged_in_user;
                                        breakUpDet.CRTD_TS = DateTime.Now;
                                        breakUpDet.Status = "Active";
                                        breakUpDet.TravelBillDetailId = travelBillDetId;
                                        context.tblTravelBillBreakUpDetail.Add(breakUpDet);
                                        context.SaveChanges();

                                    }
                                }
                                foreach (var item in model.InvoiceBreakDetail)
                                {
                                    if (item.TypeOfServiceOrCategory != null)
                                    {
                                        tblTravelInvoiceDetail invdetails = new tblTravelInvoiceDetail();
                                        invdetails.TravelBillId = travelBillId;
                                        invdetails.InvoiceNumber = item.InvoiceNumber;
                                        invdetails.Amount = item.Amount;
                                        invdetails.TaxablePercentage = item.TaxablePercentage;
                                        invdetails.TaxValue = item.TaxValue;
                                        invdetails.Description = item.Description;
                                        invdetails.Amount = item.Amount;
                                        invdetails.GSTIN = item.GSTIN;
                                        invdetails.IsTaxEligible = item.IsTaxEligible;
                                        invdetails.InvoiceDate = item.InvoiceDate;
                                        invdetails.CRTD_By = logged_in_user;
                                        invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        invdetails.IsInterstate = item.IsInterstate;
                                        invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                        invdetails.Vendor = item.Vendor;
                                        invdetails.CRTD_TS = DateTime.Now;
                                        invdetails.Status = "Active";
                                        context.tblTravelInvoiceDetail.Add(invdetails);
                                        context.SaveChanges();
                                    }
                                }
                                if (!isBalanced)
                                {
                                    foreach (var item in model.PaymentBreakDetail)
                                    {
                                        tblTravelPaymentBreakUpDetail payDet = new tblTravelPaymentBreakUpDetail();
                                        payDet.CategoryId = item.CategoryId;
                                        payDet.UserId = item.UserId;
                                        payDet.TravelBillId = travelBillId;
                                        payDet.Name = item.Name;
                                        payDet.ModeOfPayment = item.ModeOfPayment;
                                        payDet.PaymentAmount = item.PaymentAmount;
                                        payDet.CRTD_By = logged_in_user;
                                        payDet.CRTD_TS = DateTime.Now;
                                        payDet.Status = "Active";
                                        context.tblTravelPaymentBreakUpDetail.Add(payDet);
                                        context.SaveChanges();
                                    }
                                    foreach (var item in model.CommitmentDetail)
                                    {
                                        if (item.CommitmentDetailId == null)
                                            return -3;
                                        tblTravelBillCommitmentDetail commitment = new tblTravelBillCommitmentDetail();
                                        commitment.TravelBillId = travelBillId;
                                        commitment.CommitmentDetailId = item.CommitmentDetailId;
                                        commitment.CRTD_By = logged_in_user;
                                        commitment.CRTD_TS = DateTime.Now;
                                        commitment.PaymentAmount = item.PaymentAmount;
                                        if (isReversed)
                                            commitment.ReversedAmount = item.ReversedAmount;
                                        commitment.Status = "Active";
                                        context.tblTravelBillCommitmentDetail.Add(commitment);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTravelBillDeductionDetail deduction = new tblTravelBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TravelBillId = travelBillId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTravelBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTravelBillExpenseDetail exp = new tblTravelBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.TravelBillId = travelBillId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTravelBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTravelBillCheckDetail chk = new tblTravelBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TravelBillId = travelBillId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTravelBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = logged_in_user;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.TravelBillId = travelBillId;
                                    doc.Status = "Active";
                                    context.tblTravelBillDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return travelBillId;
                            }
                            else
                            {
                                int travelBillId = model.TravelBillId;
                                var bill = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.TransactionTypeCode == "TST" && m.Status == "Open");
                                if (bill != null)
                                {
                                    bill.UPTD_By = logged_in_user;
                                    bill.UPTD_TS = DateTime.Now;
                                    bill.Source = model.Source;
                                    bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                    if (model.ADVSettlement_f)
                                    {
                                        advAmt = (from b in context.tblTravelPaymentBreakUpDetail
                                                  where b.TravelBillId == model.selADVBillNumber && b.CategoryId != 3
                                                  select b).ToList().Sum(m => m.PaymentAmount ?? 0);
                                        if (advAmt != model.AdvanceValueWOClearanceAgent)
                                            return -1;
                                    }
                                    decimal billAmt = model.OverallExpense ?? 0;
                                    if (billAmt > advAmt)
                                    {
                                        bill.PaymentValue = billAmt - advAmt;
                                        bill.BalanceinAdvance = 0;
                                    }
                                    else if (billAmt < advAmt)
                                    {
                                        isReversed = true;
                                        bill.PaymentValue = 0;
                                        bill.BalanceinAdvance = advAmt - billAmt;
                                    }
                                    else
                                    {
                                        isBalanced = true;
                                        bill.PaymentValue = 0;
                                        bill.BalanceinAdvance = 0;
                                    }
                                    if (model.Source == 1 || model.Source == 3)
                                    {
                                        bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                    }
                                    if (model.Source == 2)
                                    {
                                        bill.SourceEmailDate = model.SourceEmailDate;
                                    }
                                    bill.SubCode = model.SubCode;
                                    bill.ADVSettlement_f = model.ADVSettlement_f;
                                    bill.RefTravelBillId = model.selADVBillNumber;
                                    bill.PI = model.PI;
                                    bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                                    bill.OverallExpense = model.OverallExpense;
                                    bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                    context.SaveChanges();
                                    int[] billDetIds = context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId).Select(m => m.TravelBillDetailId).ToArray();
                                    int[] curTravelBillDetId = model.TravelDetail.Select(m => m.TravelBillDetailId ?? 0).ToArray();
                                    int[] removedDetId = billDetIds.Where(m => !curTravelBillDetId.Contains(m)).ToArray();
                                    context.tblTravelBillDetail.RemoveRange(context.tblTravelBillDetail.Where(m => !curTravelBillDetId.Contains(m.TravelBillDetailId) && m.TravelBillId == travelBillId));
                                    if (removedDetId != null)
                                    {
                                        context.tblTravelBillTravellerDetail.RemoveRange(context.tblTravelBillTravellerDetail.Where(m => removedDetId.Contains(m.TravelBillDetailId ?? 0)));
                                        context.tblTravelBillBreakUpDetail.RemoveRange(context.tblTravelBillBreakUpDetail.Where(m => removedDetId.Contains(m.TravelBillDetailId ?? 0)));
                                    }
                                    context.SaveChanges();
                                    foreach (var item in model.TravelDetail)
                                    {
                                        if (item.TravelBillDetailId == null)
                                        {
                                            int travelBillDetId = 0;
                                            string actName = System.IO.Path.GetFileName(item.InvoiceAttachment.FileName);
                                            var docName = Guid.NewGuid().ToString() + "_" + actName;
                                            item.InvoiceAttachment.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            //double duration = (item.TravelToDate.Value.Date - item.TravelFromDate.Value.Date).TotalDays;
                                            decimal? ttlPerDiem = item.PerDiem.Sum();
                                            decimal? ttlOtherExp = item.ProcessedTotalAmount.Sum();
                                            tblTravelBillDetail det = new tblTravelBillDetail();
                                            det.CountryId = item.CountryId;
                                            det.CRTD_By = logged_in_user;
                                            det.CRTD_TS = DateTime.Now;
                                            det.NoOfTraveller = item.CategoryId.Length;
                                            det.Status = "Active";
                                            det.Place = item.Place;
                                            det.Purpose = item.Purpose;
                                            det.TravelBillId = travelBillId;
                                            det.InvoiceNo = item.InvoiceNumber;
                                            det.TravelFromDate = item.TravelFromDate;
                                            det.TravelToDate = item.TravelToDate;
                                            det.DocumentActualName = actName;
                                            det.DocumentName = docName;
                                            det.TotalPerDiem = ttlPerDiem;
                                            det.TotalExpense = ttlPerDiem + ttlOtherExp;
                                            det.OtherExpense = ttlOtherExp;
                                            context.tblTravelBillDetail.Add(det);
                                            context.SaveChanges();
                                            travelBillDetId = det.TravelBillDetailId;

                                            for (int i = 0; i < item.CategoryId.Length; i++)
                                            {
                                                int travellerId = 0;
                                                string travellerName = item.TravellerName[i];
                                                if (item.CategoryId[i] == 1 && !int.TryParse(item.TravellerId[i], out travellerId))
                                                    new Exception();
                                                else if (item.CategoryId[i] == 2)
                                                    travellerName = item.TravellerId[i];
                                                tblTravelBillTravellerDetail travellerDet = new tblTravelBillTravellerDetail();
                                                travellerDet.CategoryId = item.CategoryId[i];
                                                travellerDet.TravellerId = travellerId;
                                                travellerDet.TravelBillDetailId = travelBillDetId;
                                                if (item.CategoryId[i] == 2 || item.CategoryId[i] == 3)
                                                    travellerDet.TravellerName = travellerName;
                                                travellerDet.Boarding = item.Boarding[i];
                                                travellerDet.PerDiem = item.PerDiem[i];
                                                travellerDet.CRTD_By = logged_in_user;
                                                travellerDet.CRTD_TS = DateTime.Now;
                                                travellerDet.Status = "Active";
                                                context.tblTravelBillTravellerDetail.Add(travellerDet);
                                                context.SaveChanges();

                                            }

                                            for (int i = 0; i < item.ExpenseTypeId.Length; i++)
                                            {
                                                tblTravelBillBreakUpDetail breakUpDet = new tblTravelBillBreakUpDetail();
                                                breakUpDet.ClaimedConvRate = item.ClaimedConvRate[i];
                                                breakUpDet.ClaimedCurrencySpent = item.ClaimedCurrencySpent[i];
                                                breakUpDet.ClaimedForexAmt = item.ClaimedForexAmt[i];
                                                breakUpDet.ClaimedTotalAmount = item.ClaimedTotalAmount[i];
                                                breakUpDet.ProcessedConvRate = item.ProcessedConvRate[i];
                                                breakUpDet.ProcessedForexAmt = item.ProcessedForexAmt[i];
                                                breakUpDet.ProcessedTotalAmount = item.ProcessedTotalAmount[i];
                                                breakUpDet.DifferenceAmt = item.ClaimedTotalAmount[i] - item.ProcessedTotalAmount[i];
                                                breakUpDet.ExpenseTypeId = item.ExpenseTypeId[i];
                                                breakUpDet.Remarks = item.Remarks[i];
                                                breakUpDet.CRTD_By = logged_in_user;
                                                breakUpDet.CRTD_TS = DateTime.Now;
                                                breakUpDet.Status = "Active";
                                                breakUpDet.TravelBillDetailId = travelBillDetId;
                                                context.tblTravelBillBreakUpDetail.Add(breakUpDet);
                                                context.SaveChanges();

                                            }
                                        }
                                    }
                                    context.tblTravelPaymentBreakUpDetail.RemoveRange(context.tblTravelPaymentBreakUpDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.tblTravelBillCommitmentDetail.RemoveRange(context.tblTravelBillCommitmentDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.tblTravelBillDeductionDetail.RemoveRange(context.tblTravelBillDeductionDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.tblTravelBillExpenseDetail.RemoveRange(context.tblTravelBillExpenseDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.tblTravelInvoiceDetail.RemoveRange(context.tblTravelInvoiceDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.SaveChanges();
                                    foreach (var item in model.InvoiceBreakDetail)
                                    {
                                        if (item.TypeOfServiceOrCategory != null)
                                        {
                                            tblTravelInvoiceDetail invdetails = new tblTravelInvoiceDetail();
                                            invdetails.TravelBillId = travelBillId;
                                            invdetails.InvoiceNumber = item.InvoiceNumber;
                                            invdetails.Amount = item.Amount;
                                            invdetails.TaxablePercentage = item.TaxablePercentage;
                                            invdetails.TaxValue = item.TaxValue;
                                            invdetails.Description = item.Description;
                                            invdetails.Amount = item.Amount;
                                            invdetails.GSTIN = item.GSTIN;
                                            invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                            invdetails.IsTaxEligible = item.IsTaxEligible;
                                            invdetails.InvoiceDate = item.InvoiceDate;
                                            invdetails.CRTD_By = logged_in_user;
                                            invdetails.IsInterstate = item.IsInterstate;
                                            invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                            invdetails.Vendor = item.Vendor;
                                            invdetails.CRTD_TS = DateTime.Now;
                                            invdetails.Status = "Active";
                                            context.tblTravelInvoiceDetail.Add(invdetails);
                                            context.SaveChanges();
                                        }
                                    }
                                    if (!isBalanced)
                                    {
                                        foreach (var item in model.PaymentBreakDetail)
                                        {
                                            tblTravelPaymentBreakUpDetail payDet = new tblTravelPaymentBreakUpDetail();
                                            payDet.CategoryId = item.CategoryId;
                                            payDet.UserId = item.UserId;
                                            payDet.TravelBillId = travelBillId;
                                            payDet.Name = item.Name;
                                            payDet.ModeOfPayment = item.ModeOfPayment;
                                            payDet.PaymentAmount = item.PaymentAmount;
                                            payDet.CRTD_By = logged_in_user;
                                            payDet.CRTD_TS = DateTime.Now;
                                            payDet.Status = "Active";
                                            context.tblTravelPaymentBreakUpDetail.Add(payDet);
                                            context.SaveChanges();
                                        }

                                        foreach (var item in model.CommitmentDetail)
                                        {
                                            if (item.CommitmentDetailId == null)
                                                return -3;
                                            tblTravelBillCommitmentDetail commitment = new tblTravelBillCommitmentDetail();
                                            commitment.TravelBillId = travelBillId;
                                            commitment.CommitmentDetailId = item.CommitmentDetailId;
                                            commitment.CRTD_By = logged_in_user;
                                            commitment.CRTD_TS = DateTime.Now;
                                            commitment.PaymentAmount = item.PaymentAmount;
                                            if (isReversed)
                                                commitment.ReversedAmount = item.ReversedAmount;
                                            commitment.Status = "Active";
                                            context.tblTravelBillCommitmentDetail.Add(commitment);
                                            context.SaveChanges();
                                        }
                                    }
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblTravelBillDeductionDetail deduction = new tblTravelBillDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.TravelBillId = travelBillId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblTravelBillDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }

                                    foreach (var item in model.ExpenseDetail)
                                    {
                                        tblTravelBillExpenseDetail exp = new tblTravelBillExpenseDetail();
                                        exp.AccountGroupId = item.AccountGroupId;
                                        exp.AccountHeadId = item.AccountHeadId;
                                        exp.IsJV_f = item.IsJV;
                                        exp.TransactionType = item.TransactionType;
                                        exp.Amount = item.Amount;
                                        exp.TravelBillId = travelBillId;
                                        exp.CRTD_By = logged_in_user;
                                        exp.CRTD_TS = DateTime.Now;
                                        exp.Status = "Active";
                                        context.tblTravelBillExpenseDetail.Add(exp);
                                        context.SaveChanges();
                                    }
                                    context.tblTravelBillCheckDetail.RemoveRange(context.tblTravelBillCheckDetail.Where(m => m.TravelBillId == travelBillId));
                                    context.SaveChanges();
                                    foreach (var item in model.CheckListDetail)
                                    {
                                        if (item.IsChecked)
                                        {
                                            tblTravelBillCheckDetail chk = new tblTravelBillCheckDetail();
                                            chk.FunctionCheckListId = item.FunctionCheckListId;
                                            chk.Verified_By = model.CheckListVerified_By;
                                            chk.TravelBillId = travelBillId;
                                            chk.CRTD_By = logged_in_user;
                                            chk.CRTD_TS = DateTime.Now;
                                            chk.Status = "Active";
                                            context.tblTravelBillCheckDetail.Add(chk);
                                            context.SaveChanges();
                                        }
                                    }
                                    var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                    context.tblTravelBillDocumentDetail.Where(x => x.TravelBillId == travelBillId && !arrList.Contains(x.TravelBillDocumentDetailId) && x.Status != "InActive")
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.Status = "InActive";
                                        m.UPDT_By = logged_in_user;
                                        m.UPDT_TS = DateTime.Now;
                                        m.Delete_By = logged_in_user;
                                    });
                                    foreach (var item in model.DocumentDetail)
                                    {
                                        var docQuery = context.tblTravelBillDocumentDetail.FirstOrDefault(m => m.TravelBillDocumentDetailId == item.DocumentDetailId);
                                        if (docQuery == null)
                                        {
                                            tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                            doc.CRTD_By = logged_in_user;
                                            doc.CRTD_TS = DateTime.Now;
                                            doc.DocumentActualName = actName;
                                            doc.DocumentName = docName;
                                            doc.DocumentType = item.DocumentType;
                                            doc.Remarks = item.Remarks;
                                            doc.TravelBillId = travelBillId;
                                            doc.Status = "Active";
                                            context.tblTravelBillDocumentDetail.Add(doc);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            if (item.DocumentFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                                docQuery.DocumentActualName = actName;
                                                docQuery.DocumentName = docName;
                                            }
                                            docQuery.UPDT_By = logged_in_user;
                                            docQuery.UPDT_TS = DateTime.Now;
                                            docQuery.DocumentType = item.DocumentType;
                                            docQuery.Remarks = item.Remarks;
                                            context.SaveChanges();
                                        }
                                    }

                                    transaction.Commit();
                                    return travelBillId;
                                }
                                else
                                    return -1;

                            }

                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            return -1;
                        }
                    }
                }
            }
        }
        #endregion
        #region Domestic
        public DomesticTravelBillEntryModel GetDomesticTravelDetails(int travelBillId)
        {
            try
            {
                DomesticTravelBillEntryModel bill = new DomesticTravelBillEntryModel();
                using (var context = new IOASDBEntities())
                {
                    int travelBillDetailId = 0;
                    var query = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        else if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.TravelBillId = query.TravelBillId;
                        bill.OverallExpense = query.OverallExpense;
                        bill.PaymentTDSAmount = query.PaymentTDSAmount;
                        bill.PI = query.PI;
                        bill.PIName = query.PIName;
                        bill.CheckListVerified_By = query.CheckListVerifiedBy;
                        bill.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        var tdQuery = context.tblTravelBillDetail.Where(m => m.TravelBillId == travelBillId && m.Status == "Active").ToList();
                        if (tdQuery.Count > 0)
                        {
                            travelBillDetailId = tdQuery[0].TravelBillDetailId;
                            bill.NoOfTraveller = tdQuery[0].NoOfTraveller;
                            bill.Place = tdQuery[0].Place;
                            bill.Purpose = tdQuery[0].Purpose;
                            bill.TravelFromDate = tdQuery[0].TravelFromDate;
                            bill.TravelToDate = tdQuery[0].TravelToDate;
                            bill.DocumentName = tdQuery[0].DocumentName;
                            bill.DocumentActualName = tdQuery[0].DocumentActualName;
                            bill.DocumentPath = "~/Content/OtherDocuments";
                        }
                        bill.TravelerDetail = (from e in context.tblTravelBillTravellerDetail
                                               where e.TravelBillDetailId == travelBillDetailId && e.Status == "Active"
                                               select new TravelerDetailModel()
                                               {
                                                   CategoryId = e.CategoryId,
                                                   UserId = e.TravellerId,
                                                   DetailId = e.TravelBillDetailId,
                                                   Name = e.TravellerName
                                               }).ToList();
                        bill.BreakUpDetail = (from e in context.tblTravelBillBreakUpDetail
                                              where e.TravelBillDetailId == travelBillDetailId && e.Status == "Active"
                                              select new TravelBreakUpDetailModel()
                                              {
                                                  ClaimedAmount = e.ClaimedTotalAmount,
                                                  ProcessedAmount = e.ProcessedTotalAmount,
                                                  DifferenceAmt = e.DifferenceAmt,
                                                  ExpenseTypeId = e.ExpenseTypeId,
                                                  Remarks = e.Remarks,
                                                  BreakUpDetailId = e.TravelBillDetailId
                                              }).ToList();
                        bill.PaymentBreakDetail = (from e in context.tblTravelPaymentBreakUpDetail
                                                   where e.TravelBillId == travelBillId && e.Status == "Active"
                                                   select new
                                                   {
                                                       e.TravelPaymentBreakUpDetailId,
                                                       e.CategoryId,
                                                       e.UserId,
                                                       e.Name,
                                                       e.ModeOfPayment,
                                                       e.PaymentAmount
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new PaymentBreakUpDetailModel()
                                              {
                                                  PaymentBreakUpDetailId = x.TravelPaymentBreakUpDetailId,
                                                  CategoryId = x.CategoryId,
                                                  UserId = x.UserId ?? 0,
                                                  Name = x.Name,
                                                  ModeOfPayment = x.ModeOfPayment,
                                                  PaymentAmount = x.PaymentAmount
                                              }).ToList();
                        bill.CommitmentDetail = (from c in context.tblTravelBillCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.TravelBillId == travelBillId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     BillCommitmentDetailId = c.TravelBillCommitmentDetailId
                                                 }).ToList();

                        bill.ExpenseDetail = (from e in context.tblTravelBillExpenseDetail
                                              where e.TravelBillId == travelBillId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.TravelBillExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.TravelBillExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblTravelBillDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.TravelBillId == travelBillId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.TravelBillDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();

                        bill.CheckListDetail = (from ck in context.tblTravelBillCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.TravelBillId == travelBillId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();
                        bill.DocumentDetail = (from d in context.tblTravelBillDocumentDetail
                                               where d.TravelBillId == travelBillId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TravelBillDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                        bill.InvoiceBreakDetail = (from d in context.tblTravelInvoiceDetail
                                                   where d.TravelBillId == travelBillId && d.Status == "Active"
                                                   select new
                                                   {
                                                       d.InvoiceNumber,
                                                       d.TaxablePercentage,
                                                       d.TaxValue,
                                                       d.Description,
                                                       d.Amount,
                                                       d.GSTIN,
                                                       d.InvoiceDate,
                                                       d.IsTaxEligible,
                                                       d.IsInterstate,
                                                       d.HSNCode,
                                                       d.TypeOfServiceOrCategory,
                                                       d.Vendor
                                                   })
                                              .AsEnumerable()
                                              .Select((x) => new InvoiceBreakUpDetailModel()
                                              {
                                                  InvoiceNumber = x.InvoiceNumber,
                                                  TaxablePercentage = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  TaxValue = x.TaxValue,
                                                  Description = x.Description,
                                                  Amount = x.Amount,
                                                  GSTIN = x.GSTIN,
                                                  InvoiceDate = x.InvoiceDate,
                                                  IsTaxEligible = x.IsTaxEligible ?? false,
                                                  IsInterstate = x.IsInterstate ?? false,
                                                  HSNCode = x.HSNCode,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  Vendor = x.Vendor
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new DomesticTravelBillEntryModel();
            }
        }
        public int DomesticTravelIU(DomesticTravelBillEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.TravelBillId == null)
                        {
                            int travelBillId = 0, travelBillDetailId = 0;
                            tblTravelBill bill = new tblTravelBill();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            bill.PaymentTDSAmount = model.PaymentTDSAmount;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "DTV";
                            bill.BillNumber = Common.GetNewTravelBillNo("DTV");
                            bill.PI = model.PI;
                            bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                            bill.OverallExpense = model.BreakUpDetail.Select(m => m.ProcessedAmount).Sum();
                            bill.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblTravelBill.Add(bill);
                            context.SaveChanges();
                            travelBillId = bill.TravelBillId;

                            string actInvName = System.IO.Path.GetFileName(model.InvoiceAttachment.FileName);
                            var docInvName = Guid.NewGuid().ToString() + "_" + actInvName;
                            model.InvoiceAttachment.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docInvName));
                            tblTravelBillDetail det = new tblTravelBillDetail();
                            det.CRTD_By = logged_in_user;
                            det.CRTD_TS = DateTime.Now;
                            det.NoOfTraveller = model.TravelerDetail.Count();
                            det.Status = "Active";
                            det.Place = model.Place;
                            det.Purpose = model.Purpose;
                            det.TravelBillId = travelBillId;
                            det.TravelFromDate = model.TravelFromDate;
                            det.TravelToDate = model.TravelToDate;
                            det.DocumentActualName = actInvName;
                            det.DocumentName = docInvName;
                            context.tblTravelBillDetail.Add(det);
                            context.SaveChanges();
                            travelBillDetailId = det.TravelBillDetailId;
                            foreach (var item in model.TravelerDetail)
                            {
                                tblTravelBillTravellerDetail travellerDet = new tblTravelBillTravellerDetail();
                                travellerDet.CategoryId = item.CategoryId;
                                travellerDet.TravellerId = item.UserId;
                                travellerDet.TravelBillDetailId = travelBillDetailId;
                                travellerDet.TravellerName = item.Name;
                                travellerDet.CRTD_By = logged_in_user;
                                travellerDet.CRTD_TS = DateTime.Now;
                                travellerDet.Status = "Active";
                                context.tblTravelBillTravellerDetail.Add(travellerDet);
                                context.SaveChanges();

                            }

                            foreach (var item in model.BreakUpDetail)
                            {
                                tblTravelBillBreakUpDetail breakUpDet = new tblTravelBillBreakUpDetail();
                                breakUpDet.ClaimedTotalAmount = item.ClaimedAmount;
                                breakUpDet.ProcessedTotalAmount = item.ProcessedAmount;
                                breakUpDet.DifferenceAmt = item.ClaimedAmount - item.ProcessedAmount;
                                breakUpDet.ExpenseTypeId = item.ExpenseTypeId;
                                breakUpDet.Remarks = item.Remarks;
                                breakUpDet.CRTD_By = logged_in_user;
                                breakUpDet.CRTD_TS = DateTime.Now;
                                breakUpDet.Status = "Active";
                                breakUpDet.TravelBillDetailId = travelBillDetailId;
                                context.tblTravelBillBreakUpDetail.Add(breakUpDet);
                                context.SaveChanges();

                            }
                            foreach (var item in model.InvoiceBreakDetail)
                            {
                                if (item.TypeOfServiceOrCategory != null)
                                {
                                    tblTravelInvoiceDetail invdetails = new tblTravelInvoiceDetail();
                                    invdetails.TravelBillId = travelBillId;
                                    invdetails.InvoiceNumber = item.InvoiceNumber;
                                    invdetails.Amount = item.Amount;
                                    invdetails.TaxablePercentage = item.TaxablePercentage;
                                    invdetails.TaxValue = item.TaxValue;
                                    invdetails.Description = item.Description;
                                    invdetails.Amount = item.Amount;
                                    invdetails.GSTIN = item.GSTIN;
                                    invdetails.IsTaxEligible = item.IsTaxEligible;
                                    invdetails.InvoiceDate = item.InvoiceDate;
                                    invdetails.CRTD_By = logged_in_user;
                                    invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    invdetails.IsInterstate = item.IsInterstate;
                                    invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                    invdetails.Vendor = item.Vendor;
                                    invdetails.CRTD_TS = DateTime.Now;
                                    invdetails.Status = "Active";
                                    context.tblTravelInvoiceDetail.Add(invdetails);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.PaymentBreakDetail)
                            {
                                tblTravelPaymentBreakUpDetail payDet = new tblTravelPaymentBreakUpDetail();
                                payDet.CategoryId = item.CategoryId;
                                payDet.UserId = item.UserId;
                                payDet.TravelBillId = travelBillId;
                                payDet.Name = item.Name;
                                payDet.ModeOfPayment = item.ModeOfPayment;
                                payDet.PaymentAmount = item.PaymentAmount;
                                payDet.CRTD_By = logged_in_user;
                                payDet.CRTD_TS = DateTime.Now;
                                payDet.Status = "Active";
                                context.tblTravelPaymentBreakUpDetail.Add(payDet);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CommitmentDetail)
                            {
                                if (item.CommitmentDetailId == null)
                                    return -3;
                                tblTravelBillCommitmentDetail commitment = new tblTravelBillCommitmentDetail();
                                commitment.TravelBillId = travelBillId;
                                commitment.CommitmentDetailId = item.CommitmentDetailId;
                                commitment.CRTD_By = logged_in_user;
                                commitment.CRTD_TS = DateTime.Now;
                                commitment.PaymentAmount = item.PaymentAmount;
                                commitment.Status = "Active";
                                context.tblTravelBillCommitmentDetail.Add(commitment);
                                context.SaveChanges();
                            }
                            foreach (var item in model.DeductionDetail)
                            {
                                if (item.Amount != null && item.Amount != 0)
                                {
                                    if (item.AccountGroupId == null)
                                        return -1;
                                    tblTravelBillDeductionDetail deduction = new tblTravelBillDeductionDetail();
                                    deduction.AccountGroupId = item.AccountGroupId;
                                    deduction.Amount = item.Amount;
                                    deduction.TravelBillId = travelBillId;
                                    deduction.CRTD_By = logged_in_user;
                                    deduction.CRTD_TS = DateTime.Now;
                                    deduction.DeductionHeadId = item.DeductionHeadId;
                                    deduction.Status = "Active";
                                    context.tblTravelBillDeductionDetail.Add(deduction);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblTravelBillExpenseDetail exp = new tblTravelBillExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.TransactionType = item.TransactionType;
                                exp.Amount = item.Amount;
                                exp.TravelBillId = travelBillId;
                                exp.CRTD_By = logged_in_user;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblTravelBillExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblTravelBillCheckDetail chk = new tblTravelBillCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.TravelBillId = travelBillId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblTravelBillCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.TravelBillId = travelBillId;
                                doc.Status = "Active";
                                context.tblTravelBillDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return travelBillId;
                        }
                        else
                        {
                            int travelBillId = model.TravelBillId ?? 0;
                            int travelBillDetailId = 0;
                            var bill = context.tblTravelBill.FirstOrDefault(m => m.TravelBillId == travelBillId && m.TransactionTypeCode == "DTV" && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.PI = model.PI;
                                bill.PIName = Common.GetPIName(model.PI ?? 0, true);
                                bill.OverallExpense = model.BreakUpDetail.Select(m => m.ProcessedAmount).Sum();
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                var det = context.tblTravelBillDetail.FirstOrDefault(m => m.TravelBillId == travelBillId);
                                if (det != null)
                                {
                                    travelBillDetailId = det.TravelBillDetailId;
                                    det.CRTD_By = logged_in_user;
                                    det.CRTD_TS = DateTime.Now;
                                    det.NoOfTraveller = model.TravelerDetail.Count();
                                    det.Status = "Active";
                                    det.Place = model.Place;
                                    det.Purpose = model.Purpose;
                                    det.TravelBillId = travelBillId;
                                    det.TravelFromDate = model.TravelFromDate;
                                    det.TravelToDate = model.TravelToDate;
                                    if (model.InvoiceAttachment != null)
                                    {
                                        string actInvName = System.IO.Path.GetFileName(model.InvoiceAttachment.FileName);
                                        var docInvName = Guid.NewGuid().ToString() + "_" + actInvName;
                                        model.InvoiceAttachment.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docInvName));
                                        det.DocumentActualName = actInvName;
                                        det.DocumentName = docInvName;
                                    }
                                }
                                context.tblTravelBillTravellerDetail.RemoveRange(context.tblTravelBillTravellerDetail.Where(m => m.TravelBillDetailId == travelBillDetailId));
                                context.SaveChanges();
                                foreach (var item in model.TravelerDetail)
                                {
                                    tblTravelBillTravellerDetail travellerDet = new tblTravelBillTravellerDetail();
                                    travellerDet.CategoryId = item.CategoryId;
                                    travellerDet.TravellerId = item.UserId;
                                    travellerDet.TravelBillDetailId = travelBillDetailId;
                                    travellerDet.TravellerName = item.Name;
                                    travellerDet.CRTD_By = logged_in_user;
                                    travellerDet.CRTD_TS = DateTime.Now;
                                    travellerDet.Status = "Active";
                                    context.tblTravelBillTravellerDetail.Add(travellerDet);
                                    context.SaveChanges();

                                }
                                context.tblTravelBillBreakUpDetail.RemoveRange(context.tblTravelBillBreakUpDetail.Where(m => m.TravelBillDetailId == travelBillDetailId));
                                context.SaveChanges();
                                foreach (var item in model.BreakUpDetail)
                                {
                                    tblTravelBillBreakUpDetail breakUpDet = new tblTravelBillBreakUpDetail();
                                    breakUpDet.ClaimedTotalAmount = item.ClaimedAmount;
                                    breakUpDet.ProcessedTotalAmount = item.ProcessedAmount;
                                    breakUpDet.DifferenceAmt = item.ClaimedAmount - item.ProcessedAmount;
                                    breakUpDet.ExpenseTypeId = item.ExpenseTypeId;
                                    breakUpDet.Remarks = item.Remarks;
                                    breakUpDet.CRTD_By = logged_in_user;
                                    breakUpDet.CRTD_TS = DateTime.Now;
                                    breakUpDet.Status = "Active";
                                    breakUpDet.TravelBillDetailId = travelBillDetailId;
                                    context.tblTravelBillBreakUpDetail.Add(breakUpDet);
                                    context.SaveChanges();

                                }
                                context.tblTravelInvoiceDetail.RemoveRange(context.tblTravelInvoiceDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.InvoiceBreakDetail)
                                {
                                    if (item.TypeOfServiceOrCategory != null)
                                    {
                                        tblTravelInvoiceDetail invdetails = new tblTravelInvoiceDetail();
                                        invdetails.TravelBillId = travelBillId;
                                        invdetails.InvoiceNumber = item.InvoiceNumber;
                                        invdetails.Amount = item.Amount;
                                        invdetails.TaxablePercentage = item.TaxablePercentage;
                                        invdetails.TaxValue = item.TaxValue;
                                        invdetails.Description = item.Description;
                                        invdetails.Amount = item.Amount;
                                        invdetails.GSTIN = item.GSTIN;
                                        invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        invdetails.IsTaxEligible = item.IsTaxEligible;
                                        invdetails.InvoiceDate = item.InvoiceDate;
                                        invdetails.CRTD_By = logged_in_user;
                                        invdetails.IsInterstate = item.IsInterstate;
                                        invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                        invdetails.Vendor = item.Vendor;
                                        invdetails.CRTD_TS = DateTime.Now;
                                        invdetails.Status = "Active";
                                        context.tblTravelInvoiceDetail.Add(invdetails);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTravelPaymentBreakUpDetail.RemoveRange(context.tblTravelPaymentBreakUpDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.PaymentBreakDetail)
                                {
                                    tblTravelPaymentBreakUpDetail payDet = new tblTravelPaymentBreakUpDetail();
                                    payDet.CategoryId = item.CategoryId;
                                    payDet.UserId = item.UserId;
                                    payDet.TravelBillId = travelBillId;
                                    payDet.Name = item.Name;
                                    payDet.ModeOfPayment = item.ModeOfPayment;
                                    payDet.PaymentAmount = item.PaymentAmount;
                                    payDet.CRTD_By = logged_in_user;
                                    payDet.CRTD_TS = DateTime.Now;
                                    payDet.Status = "Active";
                                    context.tblTravelPaymentBreakUpDetail.Add(payDet);
                                    context.SaveChanges();
                                }

                                context.tblTravelBillCommitmentDetail.RemoveRange(context.tblTravelBillCommitmentDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblTravelBillCommitmentDetail commitment = new tblTravelBillCommitmentDetail();
                                    commitment.TravelBillId = travelBillId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblTravelBillCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblTravelBillDeductionDetail.RemoveRange(context.tblTravelBillDeductionDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTravelBillDeductionDetail deduction = new tblTravelBillDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TravelBillId = travelBillId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTravelBillDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTravelBillExpenseDetail.RemoveRange(context.tblTravelBillExpenseDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTravelBillExpenseDetail exp = new tblTravelBillExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.TravelBillId = travelBillId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTravelBillExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblTravelBillCheckDetail.RemoveRange(context.tblTravelBillCheckDetail.Where(m => m.TravelBillId == travelBillId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTravelBillCheckDetail chk = new tblTravelBillCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TravelBillId = travelBillId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTravelBillCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblTravelBillDocumentDetail.Where(x => x.TravelBillId == travelBillId && !arrList.Contains(x.TravelBillDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblTravelBillDocumentDetail.FirstOrDefault(m => m.TravelBillDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblTravelBillDocumentDetail doc = new tblTravelBillDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.TravelBillId = travelBillId;
                                        doc.Status = "Active";
                                        context.tblTravelBillDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }

                                transaction.Commit();
                                return travelBillId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        #endregion
        #region Common
        public List<TravelAdvanceModel> GetTravelBillList(string typeCode)
        {
            try
            {

                List<TravelAdvanceModel> list = new List<TravelAdvanceModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblTravelBill
                            orderby b.TravelBillId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == typeCode
                            select new
                            {
                                b.TravelBillId,
                                b.BillNumber,
                                b.CRTD_TS,
                                b.AdvanceValue,
                                b.EstimatedValue,
                                b.Status,
                                b.OverallExpense
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new TravelAdvanceModel()
                                 {
                                     SlNo = index + 1,
                                     TravelBillId = x.TravelBillId,
                                     BillNumber = x.BillNumber,
                                     RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     EstimatedValue = x.EstimatedValue,
                                     AdvanceValue = x.AdvanceValue,
                                     Status = x.Status,
                                     OverallExpense = x.OverallExpense
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<TravelAdvanceModel>();
            }
        }

        public List<CommitmentMasterAndDetailModel> GetTravelCommitmentDetails(int travelBillId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    return (from c in context.tblTravelBillCommitmentDetail
                            join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                            join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                            join p in context.tblProject on com.ProjectId equals p.ProjectId
                            join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                            orderby det.ComitmentDetailId descending
                            where c.TravelBillId == travelBillId && c.Status == "Active"
                            select new CommitmentMasterAndDetailModel()
                            {
                                CommitmentDetailId = c.CommitmentDetailId,
                                CommitmentNumber = com.CommitmentNumber,
                                ProjectNumber = p.ProjectNumber,
                                ProjectId = com.ProjectId,
                                HeadName = head.HeadName,
                                AvailableAmount = det.BalanceAmount ?? 0,
                                PaymentAmount = c.PaymentAmount,
                                CommitmentId = com.CommitmentId,
                                CommitmentBalanceAmount = com.CommitmentBalance,
                                CommitmentBookedAmount = com.CommitmentAmount
                            }).ToList();
                }
            }
            catch (Exception ex)
            {
                return new List<CommitmentMasterAndDetailModel>();
            }
        }
        public CommitmentModel GetTABillDetailsForCommitment(int travelBillId)
        {
            try
            {
                CommitmentModel bill = new CommitmentModel();
                //using (var context = new IOASDBEntities())
                //{
                //    var query = (from m in context.tblTravelBill
                //                 join p in context.tblProject on m.ProjectId equals p.ProjectId
                //                 where m.TravelBillId == travelBillId && m.Status == "Pending Commitment"
                //                 select new { m.Source, m.ProjectId, m.SourceReferenceNumber, m.SourceEmailDate, p.ProjectType }).FirstOrDefault();
                //    if (query != null)
                //    {
                //        bill.selRequestRefrence = query.Source ?? 0;
                //        bill.SelProjectNumber = query.ProjectId ?? 0;
                //        bill.selProjectType = query.ProjectType ?? 0;
                //        if (query.Source == 1 || query.Source == 3)
                //            bill.selRefNo = query.SourceReferenceNumber.ToString();
                //        if (query.Source == 2)
                //            bill.EmailDate = query.SourceEmailDate;
                //    }
                //}
                return bill;
            }
            catch (Exception ex)
            {
                return new CommitmentModel();
            }
        }
        public bool BalancedTSTBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = (from m in context.tblTravelBill
                                     join adv in context.tblTravelBill on m.RefTravelBillId equals adv.TravelBillId
                                     where m.TravelBillId == id
                                     select new { m, adv.AdvanceValue }).FirstOrDefault();
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.AdvanceValue ?? 0;
                        model.TempVoucherNumber = billQuery.m.BillNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("CJV");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.m.TransactionTypeCode;
                        model.RefNumber = billQuery.m.BillNumber;
                        model.RefTransactionCode = billQuery.m.TransactionTypeCode;

                        txList = (from exp in context.tblTravelBillExpenseDetail
                                  where exp.TravelBillId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblTravelBillDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.TravelBillId == id && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #endregion

        #region SBIPrepaidEcard
        #region SBICard

        public List<MasterlistviewModel> GetProjectList(int PIuserid)
        {
            try
            {
                List<MasterlistviewModel> ProjectList = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.tblProject
                                 join user in context.vwFacultyStaffDetails on C.PIName equals user.UserId
                                 where C.Status == "Active" && C.PIName == PIuserid
                                 select new { C, user.FirstName, user.EmployeeId }).ToList();
                    if (query.Count > 0)
                    {
                        var projectid = 0;
                        for (int i = 0; i < query.Count(); i++)
                        {
                            projectid = query[i].C.ProjectId;
                            var cardquery = (from card in context.tblSBIPrepaidCardProjectDetails
                                             where card.ProjectId == projectid
                                             select card).SingleOrDefault();
                            if (cardquery == null)
                            {
                                ProjectList.Add(new MasterlistviewModel()
                                {
                                    id = query[i].C.ProjectId,
                                    name = query[i].C.ProjectNumber + "-" + query[i].C.ProjectTitle + "-" + query[i].FirstName + " " + query[i].EmployeeId,
                                });
                            }
                        }
                    }
                }

                return ProjectList;
            }
            catch (Exception ex)
            {
                List<MasterlistviewModel> ProjectList = new List<MasterlistviewModel>();
                return ProjectList;
            }

        }
        public SBIECardModel GetProjectCardDetails(int ProjectID)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();

                using (var context = new IOASDBEntities())
                {
                    var projectid = ProjectID;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    var PIId = query.P.PIName;
                    var CardpjctlistofPI = (from EC in context.tblSBIPrepaidCardProjectDetails
                                            where EC.PIId == PIId
                                            select EC).ToList();
                    model.SBIEcardId = 0;
                    if (query != null)
                    {
                        if (CardpjctlistofPI.Count() > 0 && CardpjctlistofPI.Count() < 5)
                        {

                            var carddetailsquery = (from EC in context.tblSBIECardDetails
                                                    where EC.PIUserId == PIId && (EC.Status == "Open" || EC.Status == "Approved" || EC.Status == "Approval Pending")
                                                    && EC.NoofProjectsIncluded < 5
                                                    select EC).SingleOrDefault();

                            if (carddetailsquery != null)
                            {
                                model.SBIEcardId = carddetailsquery.SBIPrepaidCardDetailsId;
                            }
                            else if (carddetailsquery == null)
                            {
                                var cardPI = (from EC in context.tblSBIECardDetails
                                              where EC.PIUserId == PIId
                                              orderby EC.SBIPrepaidCardDetailsId descending
                                              select EC).FirstOrDefault();
                                if (cardPI != null)
                                {
                                    model.PIId = cardPI.PIUserId;
                                }
                            }
                            var date = query.P.ActuaClosingDate.Value;
                        }
                        if (CardpjctlistofPI.Count() >= 5)
                        {
                            var carddetailsquery = (from EC in context.tblSBIECardDetails
                                                    where EC.PIUserId == PIId && (EC.Status == "Open" || EC.Status == "Approved" || EC.Status == "Approval Pending")
                                                    && EC.NoofProjectsIncluded < 5
                                                    select EC).SingleOrDefault();
                            if (carddetailsquery != null)
                            {
                                model.SBIEcardId = carddetailsquery.SBIPrepaidCardDetailsId;
                            }
                            else if (carddetailsquery == null)
                            {
                                var cardPI = (from EC in context.tblSBIECardDetails
                                              where EC.PIUserId == PIId
                                              orderby EC.SBIPrepaidCardDetailsId descending
                                              select EC).FirstOrDefault();
                                if (cardPI != null)
                                {
                                    model.PIId = cardPI.PIUserId;
                                }
                            }
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public int CreateSBIECard(SBIECardModel model, int LoggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int SBIEcardid = 0;

                    // Existing Card -> New Project entry and Edit Card details
                    if (model.SBIEcardId > 0)
                    {

                        // var query = context.tblSBIECardDetails.FirstOrDefault(m => m.SBIPrepaidCardDetailsId == model.SBIEcardId);
                        var query = (from EC in context.tblSBIECardDetails
                                     join ECP in context.tblSBIPrepaidCardProjectDetails on EC.SBIPrepaidCardDetailsId equals ECP.SBIPrepaidCardDetailsId
                                     where EC.SBIPrepaidCardDetailsId == model.SBIEcardId && ECP.ProjectId == model.ProjectID
                                     select new { EC, ECP }).SingleOrDefault();

                        //query.ECP.SBIPrepaidCardDetailsId = model.SBIEcardId;
                        var cardquery = context.tblSBIECardDetails.FirstOrDefault(m => m.SBIPrepaidCardDetailsId == model.SBIEcardId);
                        // Existing Card new Project details Entry
                        if (query == null)
                        {

                            int? existingprojecttotal = cardquery.NoofProjectsIncluded;
                            int? newprojecttotal = existingprojecttotal + 1;
                            decimal? totalcardvalue = 0;
                            if (cardquery != null)
                            {
                                totalcardvalue = cardquery.CardTotalValue;
                            }
                            var totalvalue = totalcardvalue + model.CurrentProjectAllotmentValue;
                            // cardquery.CardDocPath = docname;
                            cardquery.NoofProjectsIncluded = newprojecttotal;
                            cardquery.CardTotalValue = totalvalue;
                            cardquery.UpdtTS = DateTime.Now;
                            cardquery.UpdtUserId = LoggedInUser;
                            context.SaveChanges();
                            SBIEcardid = model.SBIEcardId;

                            tblSBIPrepaidCardProjectDetails project = new tblSBIPrepaidCardProjectDetails();
                            project.SBIPrepaidCardDetailsId = cardquery.SBIPrepaidCardDetailsId;
                            project.ProjectId = model.ProjectID;
                            project.PIId = model.PIId;
                            project.AmountAllocated = model.CurrentProjectAllotmentValue;
                            project.CrtdTS = DateTime.Now;
                            project.CrtdUserId = LoggedInUser;
                            project.Status = "Open";
                            project.Is_Recoupmentpending = true;
                            project.TransactionTypeCode = "ECD";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getSBICardId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.SBIEcardPjctDetlsNumber = "ECD/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.SBIEcardPjctDetlsNumber = "ECD/" + FinYear + "/" + "000001";
                            }
                            project.SBIPrepaidProjectDetailNumber = model.SBIEcardPjctDetlsNumber;
                            project.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblSBIPrepaidCardProjectDetails.Add(project);
                            context.SaveChanges();
                            SBIEcardid = Convert.ToInt32(project.SBIPrepaidCardDetailsId);
                            int Cardprojectdetailsid = Convert.ToInt32(project.SBIECardProjectDetailsId);
                            //context.tblSBIECardEntryCommitmentDetail.RemoveRange(context.tblSBIECardEntryCommitmentDetail.Where(m => m.SBIECardProjectId == Cardprojectdetailsid));
                            //context.SaveChanges();
                            //foreach (var item in model.CommitmentDetail)
                            //{
                            //    if (item.CommitmentDetailId == null)
                            //        return -3;
                            //    tblSBIECardEntryCommitmentDetail commitment = new tblSBIECardEntryCommitmentDetail();
                            //    commitment.SBIECardProjectId = Cardprojectdetailsid;
                            //    commitment.CommitmentDetailId = item.CommitmentDetailId;
                            //    commitment.CRTD_By = LoggedInUser;
                            //    commitment.CRTD_TS = DateTime.Now;
                            //    commitment.PaymentAmount = item.PaymentAmount;
                            //    commitment.Status = "Active";
                            //    context.tblSBIECardEntryCommitmentDetail.Add(commitment);
                            //    context.SaveChanges();
                            //}
                            context.tblSBIEcardDeductionDetail.RemoveRange(context.tblSBIEcardDeductionDetail.Where(m => m.EcardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            if (model.DeductionDetail != null)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblSBIEcardDeductionDetail deduction = new tblSBIEcardDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.EcardProjectId = Cardprojectdetailsid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblSBIEcardDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            context.tblSBICardEntryExpenseDetail.RemoveRange(context.tblSBICardEntryExpenseDetail.Where(m => m.SBICardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblSBICardEntryExpenseDetail exp = new tblSBICardEntryExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.TransactionType = item.TransactionType;
                                exp.IsJV_f = item.IsJV;
                                exp.Amount = item.Amount;
                                exp.SBICardProjectId = Cardprojectdetailsid;
                                exp.CRTD_By = LoggedInUser;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblSBICardEntryExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            context.tblSBICardCheckDetail.RemoveRange(context.tblSBICardCheckDetail.Where(m => m.SBICardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblSBICardCheckDetail chk = new tblSBICardCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.SBICardProjectId = Cardprojectdetailsid;
                                    chk.CRTD_By = LoggedInUser;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblSBICardCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            if (model.DocumentDetail.Count() > 0)
                            {
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblCardDocumentDetail.FirstOrDefault(m => m.SBICardDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblCardDocumentDetail doc = new tblCardDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.CardId = SBIEcardid;
                                        // doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblCardDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                }
                            }

                        }
                        // Existing Card update Entry
                        if (query != null)
                        {
                            var docquery = (from doc in context.tblCardDocumentDetail
                                            where doc.CardId == query.ECP.SBIPrepaidCardDetailsId
                                            select doc).ToList();
                            decimal? totalcardvalue = 0;
                            decimal? currentprojectallocation = 0;
                            decimal? cardvalue = 0;
                            decimal? diff = 0;
                            if (cardquery != null)
                            {
                                cardvalue = cardquery.CardTotalValue;
                                currentprojectallocation = query.ECP.AmountAllocated;
                                diff = cardvalue - currentprojectallocation;
                                totalcardvalue = diff + model.CurrentProjectAllotmentValue;
                            }
                            query.EC.SBIPrepaidCardNumber = model.SBIEcardNumber;
                            query.EC.SBIACNumber = model.StateBankACNumber;
                            query.EC.CardTotalValue = totalcardvalue;
                            //   query.EC.PIUserId = model.PIId;
                            //   query.EC.PIFirstName = model.PIFirstname;
                            query.EC.PIFatherFirstName = model.FatherFirstName;
                            query.EC.PIMotherMaidenName = model.MothersMaiden;
                            query.EC.Dateofbirth = DateTime.Parse(model.DOB);
                            query.EC.Gender = model.PIGender;
                            query.EC.PIMobileNumber = model.PIMobile;
                            query.EC.PIEmailId = model.PIEmail;
                            query.EC.AddressLine1 = model.PIAddressLine1;
                            query.EC.AddressLine2 = model.PIAddressLine2;
                            query.EC.District = model.PIdistrict;
                            query.EC.State = model.PIstate;
                            query.EC.City = model.PICity;
                            query.EC.Pincode = model.PIPincode;
                            query.EC.PIPAN = model.PAN;
                            query.EC.UpdtTS = DateTime.Now;
                            query.EC.UpdtUserId = LoggedInUser;
                            context.SaveChanges();

                            query.ECP.AmountAllocated = model.CurrentProjectAllotmentValue;
                            query.ECP.CheckListVerifiedBy = model.CheckListVerified_By;
                            query.ECP.UpdtTS = DateTime.Now;
                            query.ECP.UpdtUserId = LoggedInUser;
                            context.SaveChanges();
                            SBIEcardid = Convert.ToInt32(query.ECP.SBIPrepaidCardDetailsId);
                            int Cardprojectdetailsid = Convert.ToInt32(query.ECP.SBIECardProjectDetailsId);
                            //context.tblSBIECardEntryCommitmentDetail.RemoveRange(context.tblSBIECardEntryCommitmentDetail.Where(m => m.SBIECardProjectId == Cardprojectdetailsid));
                            //context.SaveChanges();
                            //foreach (var item in model.CommitmentDetail)
                            //{
                            //    if (item.CommitmentDetailId == null)
                            //        return -3;
                            //    tblSBIECardEntryCommitmentDetail commitment = new tblSBIECardEntryCommitmentDetail();
                            //    commitment.SBIECardProjectId = Cardprojectdetailsid;
                            //    commitment.CommitmentDetailId = item.CommitmentDetailId;
                            //    commitment.CRTD_By = LoggedInUser;
                            //    commitment.CRTD_TS = DateTime.Now;
                            //    commitment.PaymentAmount = item.PaymentAmount;
                            //    commitment.Status = "Active";
                            //    context.tblSBIECardEntryCommitmentDetail.Add(commitment);
                            //    context.SaveChanges();
                            //}
                            context.tblSBIEcardDeductionDetail.RemoveRange(context.tblSBIEcardDeductionDetail.Where(m => m.EcardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            if (model.DeductionDetail != null)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblSBIEcardDeductionDetail deduction = new tblSBIEcardDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.EcardProjectId = Cardprojectdetailsid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblSBIEcardDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            context.tblSBICardEntryExpenseDetail.RemoveRange(context.tblSBICardEntryExpenseDetail.Where(m => m.SBICardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblSBICardEntryExpenseDetail exp = new tblSBICardEntryExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.TransactionType = item.TransactionType;
                                exp.Amount = item.Amount;
                                exp.SBICardProjectId = Cardprojectdetailsid;
                                exp.CRTD_By = LoggedInUser;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblSBICardEntryExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            context.tblSBICardCheckDetail.RemoveRange(context.tblSBICardCheckDetail.Where(m => m.SBICardProjectId == Cardprojectdetailsid));
                            context.SaveChanges();
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblSBICardCheckDetail chk = new tblSBICardCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.SBICardProjectId = Cardprojectdetailsid;
                                    chk.CRTD_By = LoggedInUser;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblSBICardCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }

                            var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                            context.tblCardDocumentDetail.Where(x => x.CardId == SBIEcardid && !arrList.Contains(x.SBICardDocumentDetailId) && x.Status != "InActive")
                            .ToList()
                            .ForEach(m =>
                            {
                                m.Status = "InActive";
                                m.UPDT_By = LoggedInUser;
                                m.UPDT_TS = DateTime.Now;
                                m.Delete_By = LoggedInUser;
                            });
                            foreach (var item in model.DocumentDetail)
                            {
                                var docQuery = context.tblCardDocumentDetail.FirstOrDefault(m => m.SBICardDocumentDetailId == item.DocumentDetailId);
                                if (docQuery == null)
                                {
                                    tblCardDocumentDetail doc = new tblCardDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.CardId = SBIEcardid;
                                    //  doc.ProjectId = model.ProjectID;
                                    doc.Status = "Active";
                                    context.tblCardDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                else
                                {
                                    if (item.DocumentFile != null)
                                    {
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                        docQuery.DocumentActualName = actName;
                                        docQuery.DocumentName = docName;
                                    }
                                    docQuery.UPDT_By = LoggedInUser;
                                    docQuery.UPDT_TS = DateTime.Now;
                                    docQuery.DocumentType = item.DocumentType;
                                    docQuery.Remarks = item.Remarks;
                                    context.SaveChanges();
                                }
                            }
                            return -2;
                        }
                    }
                    // New Card and New Project entry
                    if (model.SBIEcardId == 0)
                    {
                        tblSBIECardDetails Card = new tblSBIECardDetails();
                        Card.SBIPrepaidCardNumber = model.SBIEcardNumber;
                        Card.SBIACNumber = model.StateBankACNumber;
                        var totalvalue = model.CurrentProjectAllotmentValue;
                        Card.CardTotalValue = totalvalue;
                        Card.NoofProjectsIncluded = 1;
                        Card.PIUserId = model.PIId;
                        Card.PIFirstName = model.NameofPI;
                        Card.PIFatherFirstName = model.FatherFirstName;
                        Card.PIMotherMaidenName = model.MothersMaiden;
                        Card.Dateofbirth = DateTime.Parse(model.DOB);
                        Card.Gender = model.PIGender;
                        Card.PIMobileNumber = model.PIMobile;
                        Card.PIEmailId = model.PIEmail;
                        Card.AddressLine1 = model.PIAddressLine1;
                        Card.AddressLine2 = model.PIAddressLine2;
                        Card.District = model.PIdistrict;
                        Card.State = model.PIstate;
                        Card.City = model.PICity;
                        Card.Pincode = model.PIPincode;
                        Card.PIPAN = model.PAN;
                        Card.CrtdTS = DateTime.Now;
                        Card.CrtdUserId = LoggedInUser;
                        //   Card.CardValidTill = DateTime.Parse(model.CardExpryDte);                                            
                        Card.Status = "Open";
                        context.tblSBIECardDetails.Add(Card);
                        context.SaveChanges();
                        int CardDetailsId = Card.SBIPrepaidCardDetailsId;

                        if (CardDetailsId > 0)
                        {
                            tblSBIPrepaidCardProjectDetails project = new tblSBIPrepaidCardProjectDetails();
                            project.SBIPrepaidCardDetailsId = CardDetailsId;
                            project.ProjectId = model.ProjectID;
                            project.PIId = model.PIId;
                            project.AmountAllocated = model.CurrentProjectAllotmentValue;
                            project.CrtdTS = DateTime.Now;
                            project.CrtdUserId = LoggedInUser;
                            project.Status = "Open";
                            project.Is_Recoupmentpending = true;
                            project.TransactionTypeCode = "ECD";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getSBICardId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.SBIEcardPjctDetlsNumber = "ECD/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.SBIEcardPjctDetlsNumber = "ECD/" + FinYear + "/" + "000001";
                            }
                            project.SBIPrepaidProjectDetailNumber = model.SBIEcardPjctDetlsNumber;
                            project.CheckListVerifiedBy = model.CheckListVerified_By;
                            context.tblSBIPrepaidCardProjectDetails.Add(project);
                            context.SaveChanges();
                            SBIEcardid = CardDetailsId;
                            var CardProjectId = project.SBIECardProjectDetailsId;
                            //foreach (var item in model.CommitmentDetail)
                            //{
                            //    if (item.CommitmentDetailId == null)
                            //        return -3;
                            //    tblSBIECardEntryCommitmentDetail commitment = new tblSBIECardEntryCommitmentDetail();
                            //    commitment.SBIECardProjectId = CardProjectId;
                            //    commitment.CommitmentDetailId = item.CommitmentDetailId;
                            //    commitment.CRTD_By = LoggedInUser;
                            //    commitment.CRTD_TS = DateTime.Now;
                            //    commitment.PaymentAmount = item.PaymentAmount;
                            //    commitment.Status = "Active";
                            //    context.tblSBIECardEntryCommitmentDetail.Add(commitment);
                            //    context.SaveChanges();
                            //}
                            if (model.DeductionDetail != null)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblSBIEcardDeductionDetail deduction = new tblSBIEcardDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.EcardProjectId = CardProjectId;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblSBIEcardDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblSBICardEntryExpenseDetail exp = new tblSBICardEntryExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.Amount = item.Amount;
                                exp.SBICardProjectId = CardProjectId;
                                exp.TransactionType = item.TransactionType;
                                exp.CRTD_By = LoggedInUser;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblSBICardEntryExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblSBICardCheckDetail chk = new tblSBICardCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.SBICardProjectId = CardProjectId;
                                    chk.CRTD_By = LoggedInUser;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblSBICardCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            if (model.DocumentDetail.Count() > 0)
                            {

                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblCardDocumentDetail.FirstOrDefault(m => m.SBICardDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblCardDocumentDetail doc = new tblCardDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.CardId = SBIEcardid;
                                        doc.Status = "Active";
                                        context.tblCardDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    return SBIEcardid;
                }

            }
            catch (Exception ex)
            {

                return -1;
            }
        }
        public SBIECardModel EditProjectCardDetails(int ProjectID, int CardID)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();

                using (var context = new IOASDBEntities())
                {
                    var projectid = ProjectID;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    var PIId = query.P.PIName;
                    var Cardpjctdetails = (from EC in context.tblSBIPrepaidCardProjectDetails
                                           where EC.ProjectId == ProjectID
                                           select EC).SingleOrDefault();
                    var carddetails = (from EC in context.tblSBIECardDetails
                                       where EC.PIUserId == PIId && EC.SBIPrepaidCardDetailsId == CardID
                                       select EC).SingleOrDefault();
                    int? finyearid = query.P.FinancialYear;
                    var finyear = (from yr in context.tblFinYear
                                   where yr.FinYearId == finyearid
                                   select yr).SingleOrDefault();
                    if (query != null)
                    {

                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.CurrentFinancialYear = finyear.Year;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.CardExpiryDate = query.P.ActuaClosingDate;
                        model.CurrentProjectAllotmentValue = Cardpjctdetails.AmountAllocated;
                        model.TotalProjectsIncluded = carddetails.NoofProjectsIncluded;

                        model.SBIEcardId = carddetails.SBIPrepaidCardDetailsId;
                        model.SBIEcardNumber = carddetails.SBIPrepaidCardNumber;
                        model.StateBankACNumber = carddetails.SBIACNumber;
                        model.TotalValueofCard = carddetails.CardTotalValue;
                        //model.EntryDate = DateTime.Now;
                        //model.EntryDte = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);
                        // model.CardExpiryDate = carddetails.CardValidTill;
                        // model.CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", carddetails.CardValidTill);
                        model.PIFirstname = carddetails.PIFirstName;
                        model.PIGender = carddetails.Gender;
                        model.PIId = carddetails.PIUserId;
                        model.PIAddressLine1 = carddetails.AddressLine1;
                        model.PIAddressLine2 = carddetails.AddressLine2;
                        model.PICity = carddetails.City;
                        model.PIdistrict = carddetails.District;
                        model.PIPincode = carddetails.Pincode;
                        model.PIstate = carddetails.State;
                        model.PIEmail = carddetails.PIEmailId;
                        model.PIMobile = carddetails.PIMobileNumber;
                        model.DateOfBirth = carddetails.Dateofbirth;
                        model.CheckListVerified_By = Cardpjctdetails.CheckListVerifiedBy;
                        model.CheckListVerifierName = Common.GetUserFirstName(Cardpjctdetails.CheckListVerifiedBy ?? 0);
                        model.DOB = String.Format("{0:ddd dd-MMM-yyyy}", carddetails.Dateofbirth);
                        model.FatherFirstName = carddetails.PIFatherFirstName;
                        model.MothersMaiden = carddetails.PIMotherMaidenName;
                        model.PAN = carddetails.PIPAN;
                        model.SBIEcardId = CardID;
                        model.CreditorType = "PI";
                        model.CreditorAmount = Cardpjctdetails.AmountAllocated;
                        var cardprojectdetailsId = Cardpjctdetails.SBIECardProjectDetailsId;
                        //model.CommitmentDetail = (from c in context.tblSBIECardEntryCommitmentDetail
                        //                          join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                        //                          join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                        //                          join p in context.tblProject on com.ProjectId equals p.ProjectId
                        //                          join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                        //                          orderby det.ComitmentDetailId descending
                        //                          where c.SBIECardProjectId == cardprojectdetailsId && c.Status == "Active"
                        //                          select new BillCommitmentDetailModel()
                        //                          {
                        //                              CommitmentDetailId = c.CommitmentDetailId,
                        //                              CommitmentNumber = com.CommitmentNumber,
                        //                              ProjectNumber = p.ProjectNumber,
                        //                              ProjectId = com.ProjectId,
                        //                              HeadName = head.HeadName,
                        //                              AvailableAmount = det.BalanceAmount ?? 0,
                        //                              PaymentAmount = c.PaymentAmount,
                        //                              BillCommitmentDetailId = c.SBIECardEntryCommitmentDetailId
                        //                          }).ToList();

                        model.ExpenseDetail = (from e in context.tblSBICardEntryExpenseDetail
                                               where e.SBICardProjectId == cardprojectdetailsId && e.Status == "Active"
                                               select new
                                               {
                                                   e.AccountHeadId,
                                                   e.Amount,
                                                   e.AccountGroupId,
                                                   e.SBICardExpenseDetailId,
                                                   e.TransactionType,
                                                   e.IsJV_f
                                               })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.SBICardExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        model.DeductionDetail = (from d in context.tblSBIEcardDeductionDetail
                                                 join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                 join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                 join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                 where d.EcardProjectId == cardprojectdetailsId && d.Status == "Active"
                                                 select new BillDeductionDetailModel()
                                                 {
                                                     AccountGroupId = d.AccountGroupId,
                                                     BillDeductionDetailId = d.SBIEcardDeductionDetailId,
                                                     Amount = d.Amount,
                                                     DeductionHeadId = d.DeductionHeadId,
                                                     AccountGroup = g.AccountGroup,
                                                     DeductionHead = hd.AccountHead
                                                 }).ToList();

                        model.CheckListDetail = (from ck in context.tblSBICardCheckDetail
                                                 join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                 where ck.SBICardProjectId == cardprojectdetailsId && ck.Status == "Active"
                                                 select new CheckListModel()
                                                 {
                                                     CheckList = chkf.CheckList,
                                                     FunctionCheckListId = ck.FunctionCheckListId,
                                                     IsChecked = true
                                                 }).ToList();
                        model.DocumentDetail = (from d in context.tblCardDocumentDetail
                                                where d.CardId == model.SBIEcardId && d.Status == "Active"
                                                select new AttachmentDetailModel()
                                                {
                                                    DocumentActualName = d.DocumentActualName,
                                                    DocumentDetailId = d.SBICardDocumentDetailId,
                                                    DocumentName = d.DocumentName,
                                                    DocumentPath = "~/Content/OtherDocuments",
                                                    DocumentType = d.DocumentType,
                                                    Remarks = d.Remarks
                                                }).ToList();

                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<SBIECardSearchResultModel> SearchSBICardList(SBIECardSearchFieldModel model)
        {
            List<SBIECardSearchResultModel> Card = new List<SBIECardSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.EntryToDate != null)
                {
                    model.EntryToDate = model.EntryToDate.Value.Date.AddDays(1).AddTicks(-1);
                }
                var query = (from Pjct in context.tblSBIPrepaidCardProjectDetails
                             join card in context.tblSBIECardDetails on Pjct.SBIPrepaidCardDetailsId equals card.SBIPrepaidCardDetailsId
                             join P in context.tblProject on Pjct.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             where ((String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                             && (String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.SBICardNumber) || card.SBIPrepaidCardNumber.Contains(model.SBICardNumber))
                             && (String.IsNullOrEmpty(model.SBIEcardPjctDetlsNumber) || Pjct.SBIPrepaidProjectDetailNumber.Contains(model.SBIEcardPjctDetlsNumber))
                             && (((card.CrtdTS >= model.EntryFromDate) && (card.CrtdTS <= model.EntryToDate)) ||
                             (model.EntryFromDate == null && model.EntryToDate == null)))
                             orderby card.SBIPrepaidCardDetailsId descending
                             select new { Pjct, card, user.FirstName, user.EmployeeId, P }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Card.Add(new SBIECardSearchResultModel()
                        {
                            Sno = i + 1,
                            ProjectID = query[i].Pjct.ProjectId,
                            SBIEcardId = query[i].card.SBIPrepaidCardDetailsId,
                            ProjectNumber = query[i].P.ProjectNumber,
                            CurrentProjectAllotmentValue = query[i].Pjct.AmountAllocated,
                            TotalValueofCard = query[i].card.CardTotalValue,
                            SBIEcardNumber = query[i].card.SBIPrepaidCardNumber,
                            SBIEcardPjctDetlsNumber = query[i].Pjct.SBIPrepaidProjectDetailNumber,
                            Status = query[i].Pjct.Status,
                            NameofPI = pi,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Card;
        }

        public List<SBIECardModel> GetSBIEcardList()
        {
            List<SBIECardModel> ECard = new List<SBIECardModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from EC in context.tblSBIECardDetails
                             join EP in context.tblSBIPrepaidCardProjectDetails on EC.SBIPrepaidCardDetailsId equals EP.SBIPrepaidCardDetailsId
                             join P in context.tblProject on EP.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on EC.PIUserId equals user.UserId
                             orderby EC.SBIPrepaidCardDetailsId descending
                             where ((EC.Status != "Inactive" || EC.Status != "Rejected"))
                             select new { EC, EP, P, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        ECard.Add(new SBIECardModel()
                        {
                            Sno = i + 1,
                            ProjectID = query[i].P.ProjectId,
                            Projecttitle = query[i].P.ProjectTitle,
                            ProjectNumber = query[i].P.ProjectNumber,
                            SBIEcardProjectDetailsId = query[i].EP.SBIECardProjectDetailsId,
                            SBIEcardId = query[i].EC.SBIPrepaidCardDetailsId,
                            SBIEcardNumber = query[i].EC.SBIPrepaidCardNumber,
                            CardExpiryDate = query[i].P.ActuaClosingDate,
                            CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].P.ActuaClosingDate),
                            //  ProjectNumber = query[i].P.ProjectNumber,
                            NameofPI = query[i].FirstName,
                            CurrentProjectAllotmentValue = query[i].EP.AmountAllocated,
                            TotalValueofCard = query[i].EC.CardTotalValue,
                            Status = query[i].EP.Status,
                            IsRecoupmentpending = query[i].EP.Is_Recoupmentpending
                        });
                    }
                }
            }
            return ECard;
        }

        public SBIECardModel GetCardandPjctDetailsbyID(int CardID, int ProjectID)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();

                using (var context = new IOASDBEntities())
                {
                    var projectid = ProjectID;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    var PIId = query.P.PIName;

                    int? finyearid = query.P.FinancialYear;
                    var finyear = (from yr in context.tblFinYear
                                   where yr.FinYearId == finyearid
                                   select yr).SingleOrDefault();
                    if (query != null)
                    {

                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.CurrentFinancialYear = finyear.Year;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        //model.CardExpiryDate = query.P.ActuaClosingDate;
                        //model.CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query.P.ActuaClosingDate);
                        model.CurrentProjectAllotmentValue = 10000;

                        var carddetailsquery = (from EC in context.tblSBIECardDetails
                                                where EC.SBIPrepaidCardDetailsId == CardID
                                                select EC).SingleOrDefault();
                        if (carddetailsquery != null)
                        {
                            model.SBIEcardId = carddetailsquery.SBIPrepaidCardDetailsId;
                            model.SBIEcardNumber = carddetailsquery.SBIPrepaidCardNumber;
                            model.StateBankACNumber = carddetailsquery.SBIACNumber;
                            model.TotalValueofCard = carddetailsquery.CardTotalValue;
                            model.TotalProjectsIncluded = carddetailsquery.NoofProjectsIncluded;
                            //model.EntryDate = DateTime.Now;
                            //model.EntryDte = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);
                            //model.CardExpiryDate = carddetailsquery.CardValidTill;
                            //model.CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", carddetailsquery.CardValidTill);
                            model.PIFirstname = carddetailsquery.PIFirstName;
                            model.PIGender = carddetailsquery.Gender;
                            model.PIId = carddetailsquery.PIUserId;
                            model.PIAddressLine1 = carddetailsquery.AddressLine1;
                            model.PIAddressLine2 = carddetailsquery.AddressLine2;
                            model.PICity = carddetailsquery.City;
                            model.PIdistrict = carddetailsquery.District;
                            model.PIPincode = carddetailsquery.Pincode;
                            model.PIstate = carddetailsquery.State;
                            model.PIEmail = carddetailsquery.PIEmailId;
                            model.PIMobile = carddetailsquery.PIMobileNumber;
                            model.DateOfBirth = carddetailsquery.Dateofbirth;
                            model.DOB = String.Format("{0:ddd dd-MMM-yyyy}", carddetailsquery.Dateofbirth);
                            model.FatherFirstName = carddetailsquery.PIFatherFirstName;
                            model.MothersMaiden = carddetailsquery.PIMotherMaidenName;
                            model.PAN = carddetailsquery.PIPAN;
                            model.DocumentDetail = (from d in context.tblCardDocumentDetail
                                                    where d.CardId == model.SBIEcardId && d.Status == "Active"
                                                    select new AttachmentDetailModel()
                                                    {
                                                        DocumentActualName = d.DocumentActualName,
                                                        DocumentDetailId = d.SBICardDocumentDetailId,
                                                        DocumentName = d.DocumentName,
                                                        DocumentPath = "~/Content/OtherDocuments",
                                                        DocumentType = d.DocumentType,
                                                        Remarks = d.Remarks
                                                    }).ToList();
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public SBIECardModel GetCardPIDetailsbyID(int PIID, int ProjectID)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();

                using (var context = new IOASDBEntities())
                {
                    var projectid = ProjectID;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();

                    int? finyearid = query.P.FinancialYear;
                    var finyear = (from yr in context.tblFinYear
                                   where yr.FinYearId == finyearid
                                   select yr).SingleOrDefault();
                    if (query != null)
                    {

                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.CurrentFinancialYear = finyear.Year;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.CardExpiryDate = query.P.ActuaClosingDate;
                        model.CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query.P.ActuaClosingDate);
                        model.CurrentProjectAllotmentValue = 10000;
                        //  model.SBIEcardId = 0;
                        var carddetailsquery = (from EC in context.tblSBIECardDetails
                                                where EC.PIUserId == PIID
                                                select EC).FirstOrDefault();
                        if (carddetailsquery != null)
                        {

                            model.TotalValueofCard = 0;
                            model.TotalProjectsIncluded = 0;
                            model.PIFirstname = carddetailsquery.PIFirstName;
                            model.PIGender = carddetailsquery.Gender;
                            model.PIId = carddetailsquery.PIUserId;
                            model.PIAddressLine1 = carddetailsquery.AddressLine1;
                            model.PIAddressLine2 = carddetailsquery.AddressLine2;
                            model.PICity = carddetailsquery.City;
                            model.PIdistrict = carddetailsquery.District;
                            model.PIPincode = carddetailsquery.Pincode;
                            model.PIstate = carddetailsquery.State;
                            model.PIEmail = carddetailsquery.PIEmailId;
                            model.PIMobile = carddetailsquery.PIMobileNumber;
                            model.DateOfBirth = carddetailsquery.Dateofbirth;
                            model.DOB = String.Format("{0:ddd dd-MMM-yyyy}", carddetailsquery.Dateofbirth);
                            model.FatherFirstName = carddetailsquery.PIFatherFirstName;
                            model.MothersMaiden = carddetailsquery.PIMotherMaidenName;
                            model.PAN = carddetailsquery.PIPAN;
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public SBIECardModel GetECardEntryTransactionDetails(int deductionCategoryId, string typeCode, string tSubCode)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {

                    var groupIds = (from c in context.tblTransactionDefinition
                                    where c.TransactionTypeCode == typeCode
                                    && c.SubCode == tSubCode
                                    select new { c.AccountGroupId, c.AccountHeadId, c.TransactionType, c.IsJV_f }).ToList();
                    int count = groupIds.Count;
                    if (count > 0)
                    {
                        for (int i = 0; i < count; i++)
                        {
                            int groupId = groupIds[i].AccountGroupId ?? 0;
                            List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                            groupList = (from g in context.tblAccountGroup
                                         where g.AccountGroupId == groupId
                                         select new MasterlistviewModel()
                                         {
                                             id = g.AccountGroupId,
                                             name = g.AccountGroup
                                         }).ToList();
                            if (groupList.Count > 0)
                            {
                                int headId = groupIds[i].AccountHeadId ?? 0;
                                headList = (from ah in context.tblAccountHead
                                                //orderby ah.AccountHead
                                            where ah.AccountGroupId == groupId && (headId == 0 || ah.AccountHeadId == headId)
                                            select new MasterlistviewModel()
                                            {
                                                id = ah.AccountHeadId,
                                                name = ah.AccountHead
                                            }).OrderBy(num => num.id != headId ? num.id : -1).ToList();
                            }
                            expenses.Add(new BillExpenseDetailModel()
                            {
                                AccountGroupList = groupList,
                                AccountHeadList = headList,
                                TransactionType = groupIds[i].TransactionType,
                                IsJV = groupIds[i].IsJV_f ?? false
                            });
                        }
                    }
                    var query = from Dedut in context.tblDeductionHead
                                join Ah in context.tblAccountHead on Dedut.AccountHeadId equals Ah.AccountHeadId
                                join Ag in context.tblAccountGroup on Ah.AccountGroupId equals Ag.AccountGroupId
                                select new DeductionPredicate
                                {
                                    dedut = Dedut,
                                    ah = Ah,
                                    ag = Ag
                                };
                    var predicate = PredicateBuilder.BaseAnd<DeductionPredicate>();
                    predicate = predicate.And(d => d.dedut.TransactionTypeCode == typeCode);
                    //predicate = predicate.And(d => d.dedut.Interstate_f == interstate_f);
                    //if (!eligibilityCheck_f)
                    //    predicate = predicate.And(d => d.dedut.EligibilityCheck_f != true);
                    if (deductionCategoryId != 0)
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == deductionCategoryId);
                    //else if (TDSDetailId[0] != null)
                    //    predicate = predicate.And(d => TDSDetailId.Contains(d.dedut.DeductionCategoryId));
                    else
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == null);
                    var queryData = query
                                 .Where(predicate)
                                 .ToList();
                    deductions = (from d in queryData
                                  select new BillDeductionDetailModel()
                                  {
                                      DeductionHead = d.ah.AccountHead,
                                      AccountGroup = d.ag.AccountGroup,
                                      DeductionHeadId = d.dedut.DeductionHeadId,
                                      AccountGroupId = d.ah.AccountGroupId,
                                      DeductionType = d.dedut.DeductionType,
                                      DeductionCategoryId = d.dedut.DeductionCategoryId
                                  }).ToList();
                    var tdsPayableQuery = deductions.Where(m => m.DeductionType == "TDS Payable").Select(m => m.DeductionCategoryId).ToList();
                    if (tdsPayableQuery.Count == 1)
                        deductions.Where(m => m.DeductionType == "TDS Payable")
                            .ToList()
                            .ForEach(data =>
                            {
                                data.TDSPercentage = Common.GetVendorTDSPercentage(data.DeductionCategoryId ?? 0);
                            });
                }
                model.ExpenseDetail = expenses;
                model.DeductionDetail = deductions;
                return model;
            }
            catch (Exception ex)
            {
                return new SBIECardModel();
            }
        }

        public bool SBIECardProjectApprove(int prjctdetailsid, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBIPrepaidCardProjectDetails.FirstOrDefault(m => m.SBIECardProjectDetailsId == prjctdetailsid && m.Status == "Open" && m.TransactionTypeCode == "ECD");
                    if (query != null)
                    {
                        if (!getSBICardBOAmodeldetails(prjctdetailsid))
                            return false;
                        query.Status = "Approved";
                        query.UpdtUserId = logged_in_user;
                        query.UpdtTS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getSBICardBOAmodeldetails(int prjctdetailsid)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblSBIPrepaidCardProjectDetails.SingleOrDefault(m => m.SBIECardProjectDetailsId == prjctdetailsid);
                    var user = context.vwFacultyStaffDetails.SingleOrDefault(m => m.UserId == billQuery.PIId);
                    if (prjctdetailsid > 0)
                    {
                        decimal netAmt = (billQuery.AmountAllocated ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.SBIPrepaidProjectDetailNumber;
                        model.TempVoucherNumber = billQuery.SBIPrepaidProjectDetailNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblSBICardEntryExpenseDetail
                                  where exp.SBICardProjectId == prjctdetailsid && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblSBIEcardDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.EcardProjectId == prjctdetailsid && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 1,
                            SubLedgerId = billQuery.PIId
                        });

                        BOAPaymentDetail = (from exp in context.tblSBICardEntryExpenseDetail
                                            join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                            join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                            where exp.SBICardProjectId == prjctdetailsid && exp.Status == "Active" && exp.AccountGroupId == 38
                                            select new BOAPaymentDetailModel()
                                            {
                                                TransactionType = exp.TransactionType,
                                                BankHeadID = exp.AccountHeadId,
                                                Amount = exp.Amount,
                                                ReferenceNumber = billQuery.SBIPrepaidProjectDetailNumber,
                                                ReferenceDate = billQuery.CrtdTS,
                                                PaymentMode = 2,
                                                PayeeBank = hd.AccountHead,
                                                Reconciliation_f = false,
                                                PayeeName = user.FirstName,
                                                PayeeId = billQuery.PIId,
                                                PayeeType = "PI",
                                                Remarks = model.Narration,

                                            }).ToList();
                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getSBICardRecoupmentBOAmodeldetails(int recoupmentId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblSBICardRecoupment.SingleOrDefault(m => m.RecoupmentId == recoupmentId);

                    var commitdetail = (from c in context.tblSBIECardPrjctCommitmentDetail
                                        join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                        join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                        join p in context.tblProject on com.ProjectId equals p.ProjectId
                                        join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                        orderby det.ComitmentDetailId descending
                                        where c.RecoupmentId == recoupmentId && c.Status == "Active"
                                        select new BOADetailModel()
                                        {
                                            CommitmentDetailId = c.CommitmentDetailId,
                                            ProjectId = com.ProjectId,
                                            BudgetHead = head.BudgetHeadId,
                                            Amount = c.PaymentAmount ?? 0,
                                        }).ToList();
                    if (billQuery != null)
                    {
                        var cardpjctdetails = context.tblSBIPrepaidCardProjectDetails.SingleOrDefault(m => m.SBIECardProjectDetailsId == billQuery.SBICardProjectDetailsId);

                        decimal netAmt = (billQuery.RecoupmentValue ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.RecoupmentNumber;
                        model.TempVoucherNumber = billQuery.RecoupmentNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblSBICardRecoupExpenseDetail
                                  where exp.SBICardRecoupId == recoupmentId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblSBIEcardRecoupDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.RecoupmentId == recoupmentId && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 3,
                            SubLedgerId = cardpjctdetails.PIId
                        });

                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOADetail = commitdetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region SBIPrepaidEcardRecoupment


        public List<SBIECardSearchResultModel> SearchSBICardRecoupmentList(SBIECardSearchFieldModel model)
        {
            List<SBIECardSearchResultModel> Card = new List<SBIECardSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.EntryToDate != null)
                {
                    model.EntryToDate = model.EntryToDate.Value.Date.AddDays(1).AddTicks(-1);
                }
                var query = (from Pjct in context.tblSBICardRecoupment
                             join card in context.tblSBIECardDetails on Pjct.SBICardId equals card.SBIPrepaidCardDetailsId
                             join cardpjct in context.tblSBIPrepaidCardProjectDetails on Pjct.SBICardProjectDetailsId equals cardpjct.SBIECardProjectDetailsId
                             join P in context.tblProject on Pjct.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             where ((String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                             && (String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.SBIEcardNumber) || card.SBIPrepaidCardNumber.Contains(model.SBIEcardNumber))
                             && (String.IsNullOrEmpty(model.RecoupmentNumber) || Pjct.RecoupmentNumber.Contains(model.RecoupmentNumber))
                             && (((card.CrtdTS >= model.EntryFromDate) && (card.CrtdTS <= model.EntryToDate)) ||
                             (model.EntryFromDate == null && model.EntryToDate == null)))
                             orderby Pjct.RecoupmentNumber descending
                             select new { Pjct, cardpjct, card, user.FirstName, user.EmployeeId, P }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Card.Add(new SBIECardSearchResultModel()
                        {
                            SlNo = i + 1,
                            ProjectID = query[i].Pjct.ProjectId,
                            RecoupmentId = query[i].Pjct.RecoupmentId,
                            SBIEcardId = query[i].card.SBIPrepaidCardDetailsId,
                            SBIEcardProjectDetailsId = query[i].cardpjct.SBIECardProjectDetailsId,
                            ProjectNumber = query[i].P.ProjectNumber,
                            RecoupmentValue = query[i].Pjct.RecoupmentValue,
                            RecoupmentNumber = query[i].Pjct.RecoupmentNumber,
                            TotalValueofCard = query[i].card.CardTotalValue,
                            SBIEcardNumber = query[i].card.SBIPrepaidCardNumber,
                            Status = query[i].Pjct.Status,
                            RequestedDate = String.Format("{0:s}", query[i].Pjct.CRTD_TS),
                            NameofPI = pi,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Card;
        }
        public SBIECardModel GetSBIECardRecoupmentDetails(int SBICardRecoupId)
        {
            try
            {
                SBIECardModel recoup = new SBIECardModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblSBICardRecoupment
                                 join C in context.tblSBIPrepaidCardProjectDetails on U.SBICardProjectDetailsId equals C.SBIECardProjectDetailsId
                                 join T in context.tblSBIECardDetails on C.SBIPrepaidCardDetailsId equals T.SBIPrepaidCardDetailsId
                                 where (U.RecoupmentId == SBICardRecoupId && U.Status != "Inactive")
                                 select new { U, C, T }).FirstOrDefault();

                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.T.PIUserId)
                                     select U).FirstOrDefault();
                    //var pendingsettlement = (from ta in context.tblTemporaryAdvance
                    //                         where (ta.ProjectId == query.ProjectId && ta.IsPendingSettlement_f == true)
                    //                         select ta).ToList();
                    //var count = pendingsettlement.Count();
                    //decimal? amount = 0;

                    //string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    //for (int i = 0; i < pendingsettlement.Count(); i++)
                    //{
                    //    amount += pendingsettlement[i].TemporaryAdvanceAmountReceived;
                    //    pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                    //}
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.U.ProjectId));

                    if (query != null)
                    {

                        recoup.RecoupmentNumber = query.U.RecoupmentNumber;
                        recoup.RecoupmentId = query.U.RecoupmentId;
                        recoup.ProjectID = query.U.ProjectId;
                        recoup.SBIEcardId = query.T.SBIPrepaidCardDetailsId;
                        recoup.SBIEcardProjectDetailsId = query.C.SBIECardProjectDetailsId;
                        recoup.SBIEcardNumber = query.T.SBIPrepaidCardNumber;
                        recoup.CurrentProjectAllotmentValue = query.C.AmountAllocated;
                        recoup.RecoupmentValue = query.U.RecoupmentValue;
                        recoup.Projecttitle = projectdetails.ProjectTittle;
                        recoup.PIId = query.T.PIUserId;
                        recoup.NameofPI = pidetails.FirstName;
                        recoup.CreditorType = "PI";
                        recoup.CreditorAmount = query.U.RecoupmentValue;
                        recoup.CheckListVerified_By = query.U.CheckListVerifiedBy;
                        recoup.CheckListVerifierName = Common.GetUserFirstName(query.U.CheckListVerifiedBy ?? 0);
                        //card.NameofReceiver = query.T.NameofReceiver;
                        //card.ClaimingDepartment = query.T.DepartmentorSection;
                        //temp.Remarks = query.Remarks;
                        //temp.PendingSettlementAmount = amount;
                        //temp.NoofUnsettledAdvance = count;
                        //temp.PendingSettlementAdvanceNumber = "Nil";
                        //if (count == 1)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0];
                        //}
                        //if (count == 2)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0] + ", " + pendingsettlementadvancenumber[1];
                        //}
                        var tQuery = context.tblSBIEcardRecoupBillBreakup.Where(m => m.RecoupmentId == SBICardRecoupId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {

                            int[] _detailsid = new int[tQuery.Count];
                            Nullable<int>[] _quantity = new Nullable<int>[tQuery.Count];
                            string[] _particulars = new string[tQuery.Count];
                            Nullable<Decimal>[] _rate = new Nullable<Decimal>[tQuery.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[tQuery.Count];
                            string[] _vendorname = new string[tQuery.Count];
                            string[] _vendorbillnumber = new string[tQuery.Count];

                            for (int i = 0; i < tQuery.Count(); i++)
                            {
                                _detailsid[i] = tQuery[i].SBIEcardRecoupBillId;
                                _particulars[i] = tQuery[i].Particulars;
                                //_rate[i] = tQuery[i].Rate;
                                _amount[i] = tQuery[i].Amount;
                                //_quantity[i] = tQuery[i].Quantity;
                                _vendorname[i] = tQuery[i].VendorName;
                                _vendorbillnumber[i] = tQuery[i].SBIEcardRecoupBillNumber;

                            }
                            recoup.DetailsID = _detailsid;
                            recoup.Particulars = _particulars;
                            //recoup.RateofItem = _rate;
                            //recoup.QuantityofItem = _quantity;
                            recoup.AmountofItem = _amount;
                            recoup.VendorName = _vendorname;
                            recoup.VendorBillNumber = _vendorbillnumber;
                        }
                        recoup.CommitmentDetail = (from c in context.tblSBIECardPrjctCommitmentDetail
                                                   join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                   join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                   join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                   join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                   orderby det.ComitmentDetailId descending
                                                   where c.RecoupmentId == SBICardRecoupId && c.Status == "Active"
                                                   select new BillCommitmentDetailModel()
                                                   {
                                                       CommitmentDetailId = c.CommitmentDetailId,
                                                       CommitmentNumber = com.CommitmentNumber,
                                                       ProjectNumber = p.ProjectNumber,
                                                       ProjectId = com.ProjectId,
                                                       HeadName = head.HeadName,
                                                       AvailableAmount = det.BalanceAmount ?? 0,
                                                       PaymentAmount = c.PaymentAmount,
                                                       BillCommitmentDetailId = c.SBIECardPrjctCommitmentDetailId
                                                   }).ToList();
                        recoup.ExpenseDetail = (from e in context.tblSBICardRecoupExpenseDetail
                                                where e.SBICardRecoupId == SBICardRecoupId && e.Status == "Active"
                                                select new
                                                {
                                                    e.AccountHeadId,
                                                    e.Amount,
                                                    e.AccountGroupId,
                                                    e.SBICardRecoupExpenseDetailId,
                                                    e.TransactionType,
                                                    e.IsJV_f
                                                })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 BillExpenseDetailId = x.SBICardRecoupExpenseDetailId,
                                                 IsJV = x.IsJV_f ?? false
                                             }).ToList();

                        recoup.DeductionDetail = (from d in context.tblSBIEcardRecoupDeductionDetail
                                                  join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                  join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                  join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                  where d.RecoupmentId == SBICardRecoupId && d.Status == "Active"
                                                  select new BillDeductionDetailModel()
                                                  {
                                                      AccountGroupId = d.AccountGroupId,
                                                      BillDeductionDetailId = d.SBIEcardRecoupDeductionDetailId,
                                                      Amount = d.Amount,
                                                      DeductionHeadId = d.DeductionHeadId,
                                                      AccountGroup = g.AccountGroup,
                                                      DeductionHead = hd.AccountHead
                                                  }).ToList();
                        recoup.CheckListDetail = (from ck in context.tblSBICardRecoupCheckDetail
                                                  join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                  where ck.SBICardRecoupId == SBICardRecoupId && ck.Status == "Active"
                                                  select new CheckListModel()
                                                  {
                                                      CheckList = chkf.CheckList,
                                                      FunctionCheckListId = ck.FunctionCheckListId,
                                                      IsChecked = true
                                                  }).ToList();
                        recoup.DocumentDetail = (from d in context.tblSBIECardDocumentDetail
                                                 where d.SBIECardRecoupmentId == SBICardRecoupId && d.Status == "Active" && d.IsRecoupmentDoc_f == true
                                                 select new AttachmentDetailModel()
                                                 {
                                                     DocumentActualName = d.DocumentActualName,
                                                     DocumentDetailId = d.SBIECardDocumentDetailId,
                                                     DocumentName = d.DocumentName,
                                                     DocumentPath = "~/Content/OtherDocuments",
                                                     DocumentType = d.DocumentType,
                                                     Remarks = d.Remarks
                                                 }).ToList();
                    }
                }
                return recoup;
            }
            catch (Exception ex)
            {
                return new SBIECardModel();
            }
        }

        public int SBIECardRecoupment(SBIECardModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.RecoupmentId > 0)
                        {
                            var recoupmentid = model.RecoupmentId;
                            var query = context.tblSBICardRecoupment.FirstOrDefault(m => m.RecoupmentId == model.RecoupmentId);
                            if (query != null)
                            {
                                decimal? totalamount = 0;
                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.ProjectId = model.ProjectID;
                                query.RecoupmentValue = model.RecoupmentValue;
                                query.BalanceinAdvance = model.BalanceValue;
                                context.SaveChanges();

                                var recoupbilldetail = (from D in context.tblSBIEcardRecoupBillBreakup
                                                        where D.RecoupmentId == model.RecoupmentId
                                                        select D).ToList();
                                int detaildelCount = recoupbilldetail.Count();
                                if (detaildelCount > 0)
                                {
                                    for (int i = 0; i < detaildelCount; i++)
                                    {
                                        context.Entry(recoupbilldetail[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }


                                    for (int i = 0; i < model.DetailsID.Count(); i++)
                                    {
                                        decimal? amount = model.AmountofItem[i];
                                        totalamount += amount;
                                        tblSBIEcardRecoupBillBreakup details = new tblSBIEcardRecoupBillBreakup();
                                        details.RecoupmentId = model.RecoupmentId;
                                        details.SBICardProjectDetailsId = model.SBIEcardProjectDetailsId;
                                        details.Particulars = model.Particulars[i];
                                        //details.Rate = model.RateofItem[i];
                                        //details.Quantity = model.QuantityofItem[i];
                                        details.Amount = model.AmountofItem[i];
                                        details.VendorName = model.VendorName[i];
                                        details.SBIEcardRecoupBillNumber = model.VendorBillNumber[i];
                                        details.Status = "Active";
                                        details.CRTD_By = LoggedInUser;
                                        details.CRTD_TS = DateTime.Now;
                                        context.tblSBIEcardRecoupBillBreakup.Add(details);
                                        context.SaveChanges();
                                    }
                                    query.RecoupmentValue = totalamount;
                                    context.SaveChanges();
                                }
                                context.tblSBIECardPrjctCommitmentDetail.RemoveRange(context.tblSBIECardPrjctCommitmentDetail.Where(m => m.RecoupmentId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblSBIECardPrjctCommitmentDetail commitment = new tblSBIECardPrjctCommitmentDetail();
                                    commitment.RecoupmentId = recoupmentid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblSBIECardPrjctCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblSBIEcardRecoupDeductionDetail.RemoveRange(context.tblSBIEcardRecoupDeductionDetail.Where(m => m.RecoupmentId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblSBIEcardRecoupDeductionDetail deduction = new tblSBIEcardRecoupDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.RecoupmentId = recoupmentid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblSBIEcardRecoupDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblSBICardRecoupExpenseDetail.RemoveRange(context.tblSBICardRecoupExpenseDetail.Where(m => m.SBICardRecoupId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblSBICardRecoupExpenseDetail exp = new tblSBICardRecoupExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.SBICardRecoupId = recoupmentid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblSBICardRecoupExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblSBICardRecoupCheckDetail.RemoveRange(context.tblSBICardRecoupCheckDetail.Where(m => m.SBICardRecoupId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblSBICardRecoupCheckDetail chk = new tblSBICardRecoupCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.SBICardRecoupId = recoupmentid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblSBICardRecoupCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblSBIECardDocumentDetail.Where(x => x.SBIECardRecoupmentId == model.RecoupmentId && !arrList.Contains(x.SBIECardDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblSBIECardDocumentDetail.FirstOrDefault(m => m.SBIECardDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblSBIECardDocumentDetail doc = new tblSBIECardDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.SBICardProjectDetailsId = model.SBIEcardProjectDetailsId;
                                        doc.SBIECardRecoupmentId = model.RecoupmentId;
                                        doc.IsRecoupmentDoc_f = true;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblSBIECardDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.RecoupmentId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblSBICardRecoupment recoup = new tblSBICardRecoupment();
                            recoup.CRTD_By = LoggedInUser;
                            recoup.CRTD_TS = DateTime.Now;
                            recoup.ProjectId = model.ProjectID;
                            recoup.SBICardId = model.SBIEcardId;
                            recoup.SBICardProjectDetailsId = model.SBIEcardProjectDetailsId;
                            recoup.SBICardNumber = model.SBIEcardNumber;
                            recoup.AllocatedValue = model.CurrentProjectAllotmentValue;
                            recoup.TransactionTypeCode = "ECR";
                            recoup.CheckListVerifiedBy = model.CheckListVerified_By;
                            recoup.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getRecoupId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.RecoupmentNumber = "ECR/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.RecoupmentNumber = "ECR/" + FinYear + "/" + "000001";
                            }
                            recoup.RecoupmentNumber = model.RecoupmentNumber;
                            context.tblSBICardRecoupment.Add(recoup);
                            context.SaveChanges();

                            var cardprjct = context.tblSBIPrepaidCardProjectDetails.FirstOrDefault(m => m.SBIECardProjectDetailsId == model.SBIEcardProjectDetailsId);
                            cardprjct.Is_Recoupmentpending = false;
                            cardprjct.Status = "Open";
                            context.SaveChanges();

                            decimal? totalamount = 0;
                            int RecoupId = recoup.RecoupmentId;
                            if (RecoupId > 0)
                            {

                                for (int i = 0; i < model.DetailsID.Count(); i++)
                                {
                                    decimal? amount = model.AmountofItem[i];
                                    totalamount += amount;
                                    tblSBIEcardRecoupBillBreakup details = new tblSBIEcardRecoupBillBreakup();
                                    details.RecoupmentId = RecoupId;
                                    details.SBICardProjectDetailsId = model.SBIEcardProjectDetailsId;
                                    details.Particulars = model.Particulars[i];
                                    //details.Rate = model.RateofItem[i];
                                    //details.Quantity = model.QuantityofItem[i];
                                    details.Amount = model.AmountofItem[i];
                                    details.VendorName = model.VendorName[i];
                                    details.SBIEcardRecoupBillNumber = model.VendorBillNumber[i];
                                    details.Status = "Active";
                                    details.CRTD_By = LoggedInUser;
                                    details.CRTD_TS = DateTime.Now;
                                    context.tblSBIEcardRecoupBillBreakup.Add(details);
                                    context.SaveChanges();
                                }
                                recoup.RecoupmentValue = totalamount;
                                recoup.BalanceinAdvance = recoup.AllocatedValue - totalamount;
                                context.SaveChanges();
                                var advquery = context.tblSBICardRecoupment.FirstOrDefault(m => m.RecoupmentId == RecoupId);
                                advquery.ExpenseValue = totalamount;
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblSBIECardPrjctCommitmentDetail commitment = new tblSBIECardPrjctCommitmentDetail();
                                    commitment.RecoupmentId = RecoupId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblSBIECardPrjctCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblSBIEcardRecoupDeductionDetail deduction = new tblSBIEcardRecoupDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.RecoupmentId = RecoupId;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblSBIEcardRecoupDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblSBICardRecoupExpenseDetail exp = new tblSBICardRecoupExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.SBICardRecoupId = RecoupId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblSBICardRecoupExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblSBICardRecoupCheckDetail chk = new tblSBICardRecoupCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.SBICardRecoupId = RecoupId;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblSBICardRecoupCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblSBIECardDocumentDetail doc = new tblSBIECardDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.SBICardProjectDetailsId = model.SBIEcardProjectDetailsId;
                                    doc.SBIECardRecoupmentId = RecoupId;
                                    doc.IsRecoupmentDoc_f = true;
                                    //  doc.ProjectId = model.ProjectID;
                                    doc.Status = "Active";
                                    context.tblSBIECardDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }

                                transaction.Commit();
                                return RecoupId;

                            }

                            return RecoupId;
                        }
                    }


                    catch (Exception ex)
                    {

                        return -1;
                    }
                }
            }
        }
        public List<SBIECardModel> GetEcardRecoupmentList(string typeCode)
        {
            try
            {

                List<SBIECardModel> list = new List<SBIECardModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblSBICardRecoupment
                            join a in context.tblSBIECardDetails on b.SBICardId equals a.SBIPrepaidCardDetailsId
                            join d in context.tblSBIPrepaidCardProjectDetails on b.SBICardProjectDetailsId equals d.SBIECardProjectDetailsId
                            join P in context.tblProject on b.ProjectId equals P.ProjectId
                            orderby b.RecoupmentId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == "ECR"
                            select new
                            {
                                b.RecoupmentId,
                                a.SBIPrepaidCardDetailsId,
                                d.SBIECardProjectDetailsId,
                                b.ProjectId,
                                b.RecoupmentNumber,
                                a.SBIPrepaidCardNumber,
                                P.ProjectNumber,
                                b.CRTD_TS,
                                b.AllocatedValue,
                                b.RecoupmentValue,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new SBIECardModel()
                                 {
                                     SlNo = index + 1,
                                     RecoupmentId = x.RecoupmentId,
                                     SBIEcardId = x.SBIPrepaidCardDetailsId,
                                     SBIEcardProjectDetailsId = x.SBIECardProjectDetailsId,
                                     ProjectID = x.ProjectId,
                                     ProjectNumber = x.ProjectNumber,
                                     SBIEcardNumber = x.SBIPrepaidCardNumber,
                                     RecoupmentNumber = x.RecoupmentNumber,
                                     RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     CurrentProjectAllotmentValue = x.AllocatedValue,
                                     RecoupmentValue = x.AllocatedValue,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<SBIECardModel>();
            }
        }

        public SBIECardModel GetSBIECardDetails(int SBICardProjectDetailsId)
        {
            try
            {
                SBIECardModel recoup = new SBIECardModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblSBIPrepaidCardProjectDetails
                                 join T in context.tblSBIECardDetails on U.SBIPrepaidCardDetailsId equals T.SBIPrepaidCardDetailsId
                                 where (U.SBIECardProjectDetailsId == SBICardProjectDetailsId && U.Status == "Approved")
                                 select new { U, T }).FirstOrDefault();

                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.T.PIUserId)
                                     select U).FirstOrDefault();
                    //var pendingsettlement = (from ta in context.tblTemporaryAdvance
                    //                         where (ta.ProjectId == query.ProjectId && ta.IsPendingSettlement_f == true)
                    //                         select ta).ToList();
                    //var count = pendingsettlement.Count();
                    //decimal? amount = 0;

                    //string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    //for (int i = 0; i < pendingsettlement.Count(); i++)
                    //{
                    //    amount += pendingsettlement[i].TemporaryAdvanceAmountReceived;
                    //    pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                    //}
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.U.ProjectId));

                    if (query != null)
                    {

                        recoup.SBIEcardId = query.T.SBIPrepaidCardDetailsId;
                        recoup.SBIEcardProjectDetailsId = query.U.SBIECardProjectDetailsId;
                        recoup.SBIEcardNumber = query.T.SBIPrepaidCardNumber;
                        recoup.CurrentProjectAllotmentValue = query.U.AmountAllocated;
                        recoup.Projecttitle = projectdetails.ProjectTittle;
                        recoup.ProjectID = projectdetails.ProjectId;
                        recoup.PIId = query.T.PIUserId;
                        recoup.NameofPI = pidetails.FirstName;
                        recoup.CreditorType = "PI";
                        //card.NameofReceiver = query.T.NameofReceiver;
                        //card.ClaimingDepartment = query.T.DepartmentorSection;
                        //temp.Remarks = query.Remarks;
                        //temp.PendingSettlementAmount = amount;
                        //temp.NoofUnsettledAdvance = count;
                        //temp.PendingSettlementAdvanceNumber = "Nil";
                        //if (count == 1)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0];
                        //}
                        //if (count == 2)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0] + ", " + pendingsettlementadvancenumber[1];
                        //}

                    }
                }
                return recoup;
            }
            catch (Exception ex)
            {
                return new SBIECardModel();
            }
        }
        public SBIECardModel GetSBICardTransactionDetails(int deductionCategoryId, string typeCode, string tSubCode)
        {
            try
            {
                SBIECardModel model = new SBIECardModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {
                    //if (commitmentDetailIds != null)
                    //{
                    //var groupIds = (from c in context.tblCommitmentDetails
                    //                where commitmentDetailIds.Contains(c.ComitmentDetailId)
                    //                group c by c.AllocationHeadId into g
                    //                join bh in context.tblBudgetHead on g.FirstOrDefault().AllocationHeadId equals bh.BudgetHeadId
                    //                select new { id = g.Key, headName = bh.HeadName }).ToList();
                    //int count = groupIds.Count;
                    //if (count > 0)
                    //{
                    //    for (int i = 0; i < count; i++)
                    //    {
                    //        int headId = groupIds[i].id ?? 0;
                    //        List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                    //        List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                    //        groupList = (from map in context.tblGroupMapping
                    //                     join g in context.tblAccountGroup on map.AccountGroupId equals g.AccountGroupId
                    //                     orderby g.AccountGroup
                    //                     where map.BudgetHeadId == headId
                    //                     select new MasterlistviewModel()
                    //                     {
                    //                         id = g.AccountGroupId,
                    //                         name = g.AccountGroup
                    //                     }).ToList();
                    //        if (groupList.Count > 0)
                    //        {
                    //            int groupId = groupList[0].id ?? 0;
                    //            headList = (from ah in context.tblAccountHead
                    //                        orderby ah.AccountHead
                    //                        where ah.AccountGroupId == groupId
                    //                        select new MasterlistviewModel()
                    //                        {
                    //                            id = ah.AccountHeadId,
                    //                            name = ah.AccountHead
                    //                        }).ToList();
                    //        }
                    //        expenses.Add(new BillExpenseDetailModel()
                    //        {
                    //            AccountGroupList = groupList,
                    //            AccountHeadList = headList,
                    //            BudgetHeadName = groupIds[i].headName
                    //        });
                    //    }
                    //}
                    var groupIds = (from c in context.tblTransactionDefinition
                                    where c.TransactionTypeCode == typeCode
                                    && c.SubCode == tSubCode
                                    select new { c.AccountGroupId, c.AccountHeadId, c.TransactionType, c.IsJV_f }).ToList();
                    int count = groupIds.Count;
                    if (count > 0)
                    {
                        for (int i = 0; i < count; i++)
                        {
                            int groupId = groupIds[i].AccountGroupId ?? 0;
                            List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                            groupList = (from g in context.tblAccountGroup
                                         where g.AccountGroupId == groupId
                                         select new MasterlistviewModel()
                                         {
                                             id = g.AccountGroupId,
                                             name = g.AccountGroup
                                         }).ToList();
                            if (groupList.Count > 0)
                            {
                                int headId = groupIds[i].AccountHeadId ?? 0;
                                headList = (from ah in context.tblAccountHead
                                                //orderby ah.AccountHead
                                            where ah.AccountGroupId == groupId && (headId == 0 || ah.AccountHeadId == headId)
                                            select new MasterlistviewModel()
                                            {
                                                id = ah.AccountHeadId,
                                                name = ah.AccountHead
                                            }).OrderBy(num => num.id != headId ? num.id : -1).ToList();
                            }
                            expenses.Add(new BillExpenseDetailModel()
                            {
                                AccountGroupList = groupList,
                                AccountHeadList = headList,
                                TransactionType = groupIds[i].TransactionType,
                                IsJV = groupIds[i].IsJV_f ?? false
                            });
                        }
                    }
                    var query = from Dedut in context.tblDeductionHead
                                join Ah in context.tblAccountHead on Dedut.AccountHeadId equals Ah.AccountHeadId
                                join Ag in context.tblAccountGroup on Ah.AccountGroupId equals Ag.AccountGroupId
                                select new DeductionPredicate
                                {
                                    dedut = Dedut,
                                    ah = Ah,
                                    ag = Ag
                                };
                    var predicate = PredicateBuilder.BaseAnd<DeductionPredicate>();
                    predicate = predicate.And(d => d.dedut.TransactionTypeCode == typeCode);
                    //predicate = predicate.And(d => d.dedut.Interstate_f == interstate_f);
                    //if (!eligibilityCheck_f)
                    //    predicate = predicate.And(d => d.dedut.EligibilityCheck_f != true);
                    if (deductionCategoryId != 0)
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == deductionCategoryId);
                    //else if (TDSDetailId[0] != null)
                    //    predicate = predicate.And(d => TDSDetailId.Contains(d.dedut.DeductionCategoryId));
                    else
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == null);
                    var queryData = query
                                 .Where(predicate)
                                 .ToList();
                    deductions = (from d in queryData
                                  select new BillDeductionDetailModel()
                                  {
                                      DeductionHead = d.ah.AccountHead,
                                      AccountGroup = d.ag.AccountGroup,
                                      DeductionHeadId = d.dedut.DeductionHeadId,
                                      AccountGroupId = d.ah.AccountGroupId,
                                      DeductionType = d.dedut.DeductionType,
                                      DeductionCategoryId = d.dedut.DeductionCategoryId
                                  }).ToList();
                    var tdsPayableQuery = deductions.Where(m => m.DeductionType == "TDS Payable").Select(m => m.DeductionCategoryId).ToList();
                    if (tdsPayableQuery.Count == 1)
                        deductions.Where(m => m.DeductionType == "TDS Payable")
                            .ToList()
                            .ForEach(data =>
                            {
                                data.TDSPercentage = Common.GetVendorTDSPercentage(data.DeductionCategoryId ?? 0);
                            });
                }
                model.ExpenseDetail = expenses;
                model.DeductionDetail = deductions;
                return model;
            }
            catch (Exception ex)
            {
                return new SBIECardModel();
            }
        }
        public bool SBIECardRecoupmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int uId, string tCode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblSBIECardPrjctCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.RecoupmentId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, uId, billId, tCode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool SBIECardRecoupmentBillApproved(int recoupmentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSBICardRecoupment.FirstOrDefault(m => m.RecoupmentId == recoupmentId && m.Status == "Open" && m.TransactionTypeCode == "ECR");
                    if (query != null)
                    {
                        if (!getSBICardRecoupmentBOAmodeldetails(recoupmentId))
                            return false;
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #endregion

        #region TemporaryAdvance
        public List<TemporaryAdvanceModel> GetTemporaryAdvanceList(string typeCode)
        {
            try
            {

                List<TemporaryAdvanceModel> list = new List<TemporaryAdvanceModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblTemporaryAdvance
                            join P in context.tblProject on b.ProjectId equals P.ProjectId
                            orderby b.TemporaryAdvanceId descending
                            where b.Status != "InActive" && b.IsPendingSettlement_f != false && b.TransactionTypeCode == typeCode
                            select new
                            {
                                b.TemporaryAdvanceId,
                                b.ProjectId,
                                b.TemporaryAdvanceNumber,
                                P.ProjectNumber,
                                b.CRTD_TS,
                                b.TemporaryAdvanceAmountReceived,
                                b.TotalExpenseValue,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new TemporaryAdvanceModel()
                                 {
                                     SlNo = index + 1,
                                     TemporaryAdvanceId = x.TemporaryAdvanceId,
                                     ProjectId = x.ProjectId,
                                     ProjectNumber = x.ProjectNumber,
                                     TemporaryAdvanceNumber = x.TemporaryAdvanceNumber,
                                     RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     TotalExpenseValue = x.TotalExpenseValue,
                                     TemporaryAdvanceValue = x.TemporaryAdvanceAmountReceived,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<TemporaryAdvanceModel>();
            }
        }
        public TemporaryAdvanceModel GetTemporaryAdvanceDetails(int tmpadvanceId)
        {
            try
            {
                TemporaryAdvanceModel temp = new TemporaryAdvanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == tmpadvanceId);
                    var pendingsettlement = (from ta in context.tblTemporaryAdvance
                                             where (ta.ProjectId == query.ProjectId && ta.IsPendingSettlement_f == true)
                                             select ta).ToList();
                    var count = pendingsettlement.Count();
                    decimal? amount = 0;

                    string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    for (int i = 0; i < pendingsettlement.Count(); i++)
                    {
                        amount += pendingsettlement[i].TemporaryAdvanceAmountReceived;
                        pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                    }
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.ProjectId));

                    if (query != null)
                    {
                        temp.Source = query.Source;
                        if (query.Source == 1)
                        {
                            temp.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            temp.SourceReferenceNumber = refId;
                            temp.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            temp.SourceEmailDate = query.SourceEmailDate;
                        temp.TemporaryAdvanceNumber = query.TemporaryAdvanceNumber;
                        temp.TemporaryAdvanceId = query.TemporaryAdvanceId;
                        temp.TotalExpenseValue = query.TotalExpenseValue;
                        temp.TemporaryAdvanceValue = query.TemporaryAdvanceAmountReceived;
                        temp.ProjectId = query.ProjectId;
                        temp.ProjectTypeName = projectdetails.ProjectType;
                        temp.PIId = query.PIId;
                        temp.NameofReceiver = query.NameofReceiver;
                        temp.ClaimingDepartment = query.DepartmentorSection;
                        temp.Remarks = query.Remarks;
                        temp.PendingSettlementAmount = amount;
                        temp.NoofUnsettledAdvance = count;
                        temp.PendingSettlementAdvanceNumber = "Nil";
                        temp.CreditorType = "PI";
                        temp.CheckListVerified_By = query.CheckListVerifiedBy;
                        temp.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        if (count == 1)
                        {
                            temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0];
                        }
                        if (count == 2)
                        {
                            temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0] + ", " + pendingsettlementadvancenumber[1];
                        }

                        var tQuery = context.tblTempAdvanceBreakUpDetail.Where(m => m.TemporaryAdvanceId == tmpadvanceId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {

                            int[] _detailsid = new int[tQuery.Count];
                            //Nullable <int>[] _quantity = new Nullable<int>[tQuery.Count];
                            string[] _particulars = new string[tQuery.Count];
                            //Nullable<Decimal>[] _rate = new Nullable<Decimal>[tQuery.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[tQuery.Count];

                            for (int i = 0; i < tQuery.Count(); i++)
                            {
                                _detailsid[i] = tQuery[i].TempAdvBreakUpDetailId;
                                _particulars[i] = tQuery[i].Particulars;
                                // _rate[i] = tQuery[i].Rate;
                                _amount[i] = tQuery[i].Amount;
                                //  _quantity[i] = tQuery[i].Quantity;

                            }
                            temp.DetailsID = _detailsid;
                            temp.Particulars = _particulars;
                            //  temp.RateofItem = _rate;
                            //  temp.QuantityofItem = _quantity;
                            temp.AmountofItem = _amount;
                        }
                        temp.CommitmentDetail = (from c in context.tblTempAdvCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.TempAdvId == tmpadvanceId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     BillCommitmentDetailId = c.TempAdvCommitmentDetailId
                                                 }).ToList();

                        temp.ExpenseDetail = (from e in context.tblTempAdvExpenseDetail
                                              where e.TempAdvId == tmpadvanceId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.TempAdvExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.TempAdvExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        temp.DeductionDetail = (from d in context.tblTempAdvDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.TempAdvId == tmpadvanceId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.TempAdvDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();
                        temp.CheckListDetail = (from ck in context.tblTempAdvCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.TempAdvId == tmpadvanceId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();

                        temp.DocumentDetail = (from d in context.tblTemporaryAdvanceDocumentDetail
                                               where d.TemporaryAdvanceId == tmpadvanceId && d.Status == "Active" && d.IsTempAdvanceDoc_f == true
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TemporaryAdvanceDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                    }
                }
                return temp;
            }
            catch (Exception ex)
            {
                return new TemporaryAdvanceModel();
            }
        }
        public int CreateTemporaryAdvance(TemporaryAdvanceModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.TemporaryAdvanceId > 0)
                        {
                            var tmpadvid = model.TemporaryAdvanceId;
                            var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == model.TemporaryAdvanceId);
                            if (query != null)
                            {
                                decimal? totalamount = 0;
                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.ProjectId = model.ProjectId;
                                query.TemporaryAdvanceAmountReceived = model.TemporaryAdvanceValue;
                                query.TotalExpenseValue = model.TotalExpenseValue;
                                query.NameofReceiver = model.NameofReceiver;
                                query.DepartmentorSection = model.ClaimingDepartment;
                                query.Remarks = model.Remarks;
                                query.DeductionAmount = model.DeductionAmount;
                                query.ExpenseAmount = model.ExpenseAmount;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();

                                var tmpadvdetail = (from D in context.tblTempAdvanceBreakUpDetail
                                                    where D.TemporaryAdvanceId == model.TemporaryAdvanceId
                                                    select D).ToList();
                                int detaildelCount = tmpadvdetail.Count();
                                if (detaildelCount > 0)
                                {
                                    for (int i = 0; i < detaildelCount; i++)
                                    {
                                        context.Entry(tmpadvdetail[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }


                                    for (int i = 0; i < model.DetailsID.Count(); i++)
                                    {
                                        decimal? amount = model.AmountofItem[i];
                                        totalamount += amount;
                                        tblTempAdvanceBreakUpDetail details = new tblTempAdvanceBreakUpDetail();
                                        details.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                        details.Particulars = model.Particulars[i];
                                        //details.Rate = model.RateofItem[i];
                                        //details.Quantity = model.QuantityofItem[i];
                                        details.Amount = model.AmountofItem[i];
                                        details.Status = "Active";
                                        details.CRTD_By = LoggedInUser;
                                        details.CRTD_TS = DateTime.Now;
                                        context.tblTempAdvanceBreakUpDetail.Add(details);
                                        context.SaveChanges();
                                    }
                                    query.TotalExpenseValue = totalamount;
                                    context.SaveChanges();
                                }
                                context.tblTempAdvCommitmentDetail.RemoveRange(context.tblTempAdvCommitmentDetail.Where(m => m.TempAdvId == tmpadvid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblTempAdvCommitmentDetail commitment = new tblTempAdvCommitmentDetail();
                                    commitment.TempAdvId = tmpadvid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblTempAdvCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }

                                context.tblTempAdvDeductionDetail.RemoveRange(context.tblTempAdvDeductionDetail.Where(m => m.TempAdvId == tmpadvid));
                                context.SaveChanges();
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTempAdvDeductionDetail deduction = new tblTempAdvDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TempAdvId = tmpadvid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTempAdvDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblTempAdvExpenseDetail.RemoveRange(context.tblTempAdvExpenseDetail.Where(m => m.TempAdvId == tmpadvid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTempAdvExpenseDetail exp = new tblTempAdvExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.TempAdvId = tmpadvid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTempAdvExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblTempAdvCheckDetail.RemoveRange(context.tblTempAdvCheckDetail.Where(m => m.TempAdvId == tmpadvid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTempAdvCheckDetail chk = new tblTempAdvCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TempAdvId = tmpadvid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTempAdvCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblTemporaryAdvanceDocumentDetail.Where(x => x.TemporaryAdvanceId == model.TemporaryAdvanceId && !arrList.Contains(x.TemporaryAdvanceDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblTemporaryAdvanceDocumentDetail.FirstOrDefault(m => m.TemporaryAdvanceDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblTemporaryAdvanceDocumentDetail doc = new tblTemporaryAdvanceDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                        doc.IsTempAdvanceDoc_f = true;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblTemporaryAdvanceDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.TemporaryAdvanceId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblTemporaryAdvance tempadv = new tblTemporaryAdvance();
                            tempadv.CRTD_By = LoggedInUser;
                            tempadv.CRTD_TS = DateTime.Now;
                            tempadv.ProjectId = model.ProjectId;
                            tempadv.PIId = model.PIId;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);
                            tempadv.TemporaryAdvanceNumber = model.TemporaryAdvanceNumber;
                            tempadv.TransactionTypeCode = "TMP";
                            tempadv.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                tempadv.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 1 || model.Source == 2)
                            {
                                tempadv.SourceEmailDate = model.SourceEmailDate;
                            }
                            tempadv.TotalExpenseValue = model.TotalExpenseValue;
                            tempadv.TemporaryAdvanceAmountReceived = model.TemporaryAdvanceValue;
                            tempadv.NameofReceiver = model.NameofReceiver;
                            tempadv.Remarks = model.Remarks;
                            tempadv.DeductionAmount = model.DeductionAmount;
                            tempadv.ExpenseAmount = model.ExpenseAmount;
                            tempadv.DepartmentorSection = model.ClaimingDepartment;
                            tempadv.IsPendingSettlement_f = true;
                            tempadv.CheckListVerifiedBy = model.CheckListVerified_By;
                            tempadv.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getTempAdvId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.TemporaryAdvanceNumber = "TMP/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.TemporaryAdvanceNumber = "TMP/" + FinYear + "/" + 000001;
                            }
                            tempadv.TemporaryAdvanceNumber = model.TemporaryAdvanceNumber;
                            context.tblTemporaryAdvance.Add(tempadv);
                            context.SaveChanges();
                            decimal? totalamount = 0;
                            int TemporaryAdvanceId = tempadv.TemporaryAdvanceId;
                            if (TemporaryAdvanceId > 0)
                            {

                                for (int i = 0; i < model.DetailsID.Count(); i++)
                                {
                                    decimal? amount = model.AmountofItem[i];
                                    totalamount += amount;
                                    tblTempAdvanceBreakUpDetail details = new tblTempAdvanceBreakUpDetail();
                                    details.TemporaryAdvanceId = TemporaryAdvanceId;
                                    details.Particulars = model.Particulars[i];
                                    //details.Quantity = model.QuantityofItem[i];
                                    //details.Rate = model.RateofItem[i];
                                    details.Amount = model.AmountofItem[i];
                                    details.Status = "Active";
                                    details.CRTD_By = LoggedInUser;
                                    details.CRTD_TS = DateTime.Now;
                                    context.tblTempAdvanceBreakUpDetail.Add(details);
                                    context.SaveChanges();
                                }
                                var advquery = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == TemporaryAdvanceId);
                                advquery.TotalExpenseValue = totalamount;
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblTempAdvCommitmentDetail commitment = new tblTempAdvCommitmentDetail();
                                    commitment.TempAdvId = TemporaryAdvanceId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblTempAdvCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTempAdvDeductionDetail deduction = new tblTempAdvDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TempAdvId = TemporaryAdvanceId;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTempAdvDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTempAdvExpenseDetail exp = new tblTempAdvExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.TempAdvId = TemporaryAdvanceId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTempAdvExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTempAdvCheckDetail chk = new tblTempAdvCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TempAdvId = TemporaryAdvanceId;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTempAdvCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblTemporaryAdvanceDocumentDetail doc = new tblTemporaryAdvanceDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.TemporaryAdvanceId = TemporaryAdvanceId;
                                    doc.IsTempAdvanceDoc_f = true;
                                    doc.Status = "Active";
                                    context.tblTemporaryAdvanceDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return TemporaryAdvanceId;

                            }

                            return TemporaryAdvanceId;
                        }
                    }


                    catch (Exception ex)
                    {

                        return -1;
                    }
                }
            }
        }
        public CommitmentModel GetTempAdvDetailsForCommitment(int temporaryAdvanceId)
        {
            try
            {
                CommitmentModel bill = new CommitmentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from m in context.tblTemporaryAdvance
                                 join p in context.tblProject on m.ProjectId equals p.ProjectId
                                 where m.TemporaryAdvanceId == temporaryAdvanceId && m.Status == "Open"
                                 select new { m.Source, m.ProjectId, m.SourceReferenceNumber, m.SourceEmailDate, p.ProjectType }).FirstOrDefault();
                    if (query != null)
                    {
                        bill.selRequestRefrence = query.Source ?? 0;
                        bill.SelProjectNumber = query.ProjectId ?? 0;
                        bill.selProjectType = query.ProjectType ?? 0;
                        if (query.Source == 1 || query.Source == 3)
                            bill.selRefNo = query.SourceReferenceNumber.ToString();
                        if (query.Source == 2)
                            bill.EmailDate = query.SourceEmailDate;
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new CommitmentModel();
            }
        }
        public TemporaryAdvanceModel GetPendingAdvanceDetails(int projectid)
        {
            try
            {
                TemporaryAdvanceModel pendingadvance = new TemporaryAdvanceModel();
                using (var context = new IOASDBEntities())
                {

                    var pendingsettlement = (from ta in context.tblTemporaryAdvance
                                             where (ta.ProjectId == projectid && ta.IsPendingSettlement_f == true)
                                             select ta).ToList();

                    string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    decimal?[] pendingsettlementadvanceamount = new decimal?[pendingsettlement.Count()];
                    DateTime?[] Date = new DateTime?[pendingsettlement.Count()];
                    string[] pendingsettlementadvancedate = new string[pendingsettlement.Count()];
                    for (int i = 0; i < pendingsettlement.Count(); i++)
                    {
                        pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                        pendingsettlementadvanceamount[i] = pendingsettlement[i].TemporaryAdvanceAmountReceived;
                        Date[i] = pendingsettlement[i].CRTD_TS;
                        pendingsettlementadvancedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", pendingsettlement[i].CRTD_TS);
                    }
                    pendingadvance.PendingAdvanceNumber = pendingsettlementadvancenumber;
                    pendingadvance.PendingAdvanceAmount = pendingsettlementadvanceamount;
                    pendingadvance.AdvanceCreatedDate = Date;
                    pendingadvance.AdvCrtdDate = pendingsettlementadvancedate;

                }
                return pendingadvance;
            }
            catch (Exception ex)
            {
                return new TemporaryAdvanceModel();
            }
        }
        public bool UpdateTempAdvStatusOnBookCommitment(int temporaryAdvanceId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == temporaryAdvanceId && m.Status == "Open" && m.TransactionTypeCode == "TMP");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public TemporaryAdvanceModel GetTempAdvTransactionDetails(int deductionCategoryId, string typeCode, string tSubCode)
        {
            try
            {
                TemporaryAdvanceModel model = new TemporaryAdvanceModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {

                    var groupIds = (from c in context.tblTransactionDefinition
                                    where c.TransactionTypeCode == typeCode
                                    && c.SubCode == tSubCode
                                    select new { c.AccountGroupId, c.AccountHeadId, c.TransactionType, c.IsJV_f }).ToList();
                    int count = groupIds.Count;
                    if (count > 0)
                    {
                        for (int i = 0; i < count; i++)
                        {
                            int groupId = groupIds[i].AccountGroupId ?? 0;
                            List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                            groupList = (from g in context.tblAccountGroup
                                         where g.AccountGroupId == groupId
                                         select new MasterlistviewModel()
                                         {
                                             id = g.AccountGroupId,
                                             name = g.AccountGroup
                                         }).ToList();
                            if (groupList.Count > 0)
                            {
                                int headId = groupIds[i].AccountHeadId ?? 0;
                                headList = (from ah in context.tblAccountHead
                                                //orderby ah.AccountHead
                                            where ah.AccountGroupId == groupId && (headId == 0 || ah.AccountHeadId == headId)
                                            select new MasterlistviewModel()
                                            {
                                                id = ah.AccountHeadId,
                                                name = ah.AccountHead
                                            }).OrderBy(num => num.id != headId ? num.id : -1).ToList();
                            }
                            expenses.Add(new BillExpenseDetailModel()
                            {
                                AccountGroupList = groupList,
                                AccountHeadList = headList,
                                TransactionType = groupIds[i].TransactionType,
                                IsJV = groupIds[i].IsJV_f ?? false
                            });
                        }
                    }
                    var query = from Dedut in context.tblDeductionHead
                                join Ah in context.tblAccountHead on Dedut.AccountHeadId equals Ah.AccountHeadId
                                join Ag in context.tblAccountGroup on Ah.AccountGroupId equals Ag.AccountGroupId
                                select new DeductionPredicate
                                {
                                    dedut = Dedut,
                                    ah = Ah,
                                    ag = Ag
                                };
                    var predicate = PredicateBuilder.BaseAnd<DeductionPredicate>();
                    predicate = predicate.And(d => d.dedut.TransactionTypeCode == typeCode);
                    //predicate = predicate.And(d => d.dedut.Interstate_f == interstate_f);
                    //if (!eligibilityCheck_f)
                    //    predicate = predicate.And(d => d.dedut.EligibilityCheck_f != true);
                    if (deductionCategoryId != 0)
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == deductionCategoryId);
                    //else if (TDSDetailId[0] != null)
                    //    predicate = predicate.And(d => TDSDetailId.Contains(d.dedut.DeductionCategoryId));
                    else
                        predicate = predicate.And(d => d.dedut.DeductionCategoryId == null);
                    var queryData = query
                                 .Where(predicate)
                                 .ToList();
                    deductions = (from d in queryData
                                  select new BillDeductionDetailModel()
                                  {
                                      DeductionHead = d.ah.AccountHead,
                                      AccountGroup = d.ag.AccountGroup,
                                      DeductionHeadId = d.dedut.DeductionHeadId,
                                      AccountGroupId = d.ah.AccountGroupId,
                                      DeductionType = d.dedut.DeductionType,
                                      DeductionCategoryId = d.dedut.DeductionCategoryId
                                  }).ToList();
                    var tdsPayableQuery = deductions.Where(m => m.DeductionType == "TDS Payable").Select(m => m.DeductionCategoryId).ToList();
                    if (tdsPayableQuery.Count == 1)
                        deductions.Where(m => m.DeductionType == "TDS Payable")
                            .ToList()
                            .ForEach(data =>
                            {
                                data.TDSPercentage = Common.GetVendorTDSPercentage(data.DeductionCategoryId ?? 0);
                            });
                }
                model.ExpenseDetail = expenses;
                model.DeductionDetail = deductions;
                return model;
            }
            catch (Exception ex)
            {
                return new TemporaryAdvanceModel();
            }
        }
        public List<TempAdvSearchResultModel> SearchTempAdvList(TempAdvSearchFieldModel model)
        {
            List<TempAdvSearchResultModel> Temp = new List<TempAdvSearchResultModel>();
            using (var context = new IOASDBEntities())
            {

                var query = (from temp in context.tblTemporaryAdvance
                             join P in context.tblProject on temp.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             where ((String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                             && (String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.TemporaryAdvanceNumber) || temp.TemporaryAdvanceNumber.Contains(model.TemporaryAdvanceNumber))
                             && (((temp.CRTD_TS >= model.FromDate) && (temp.CRTD_TS <= model.ToDate)) || (model.FromDate == null && model.ToDate == null)))
                             orderby temp.TemporaryAdvanceId descending
                             select new { temp, user.FirstName, user.EmployeeId, P }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Temp.Add(new TempAdvSearchResultModel()
                        {
                            SlNo = i + 1,
                            Projectid = query[i].P.ProjectId,
                            TemporaryAdvanceId = query[i].temp.TemporaryAdvanceId,
                            ProjectNumber = query[i].P.ProjectNumber,
                            RequestedDate = String.Format("{0:s}", query[i].temp.CRTD_TS),
                            TemporaryAdvanceValue = query[i].temp.TemporaryAdvanceAmountReceived,
                            TemporaryAdvanceNumber = query[i].temp.TemporaryAdvanceNumber,
                            Status = query[i].temp.Status,
                            NameofPI = pi,
                        });
                    }
                }
            }
            return Temp;
        }
        public bool TempAdvApprove(int tempAdvId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == tempAdvId && m.Status == "Open" && m.TransactionTypeCode == "TMP");
                    if (query != null)
                    {
                        //if (!getTMPBOAmodeldetails(tempAdvId))
                        //    return false;
                        query.Status = "Active";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool TempAdvCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblTempAdvCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.TempAdvId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion
        #region TemporaryAdvanceSettlement
        public TemporaryAdvanceModel GetTemporaryAdvanceSettlDetails(int tmpadvancesettlId)
        {
            try
            {
                TemporaryAdvanceModel temp = new TemporaryAdvanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblTempAdvanceSettlement
                                 join T in context.tblTemporaryAdvance on U.TemporaryAdvanceId equals T.TemporaryAdvanceId
                                 where (U.TempAdvSettlementId == tmpadvancesettlId)
                                 select new { U, T }).FirstOrDefault();
                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.T.PIId)
                                     select U).FirstOrDefault();
                    //var pendingsettlement = (from ta in context.tblTemporaryAdvance
                    //                         where (ta.ProjectId == query.ProjectId && ta.IsPendingSettlement_f == true)
                    //                         select ta).ToList();
                    //var count = pendingsettlement.Count();
                    //decimal? amount = 0;

                    //string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    //for (int i = 0; i < pendingsettlement.Count(); i++)
                    //{
                    //    amount += pendingsettlement[i].TemporaryAdvanceAmountReceived;
                    //    pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                    //}
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.U.ProjectId));

                    if (query != null)
                    {
                        temp.Source = query.T.Source;
                        if (query.T.Source == 1)
                        {
                            temp.SourceReferenceNumber = query.T.SourceReferenceNumber;
                        }
                        else if (query.T.Source == 3)
                        {
                            int refId = query.T.SourceReferenceNumber ?? 0;
                            temp.SourceReferenceNumber = refId;
                            temp.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.T.Source == 2)
                            temp.SourceEmailDate = query.T.SourceEmailDate;
                        temp.TemporaryAdvanceNumber = query.T.TemporaryAdvanceNumber;
                        temp.TempAdvSettlId = tmpadvancesettlId;
                        temp.TemporaryAdvanceId = query.T.TemporaryAdvanceId;
                        temp.TotalExpenseValue = query.T.TotalExpenseValue;
                        temp.TemporaryAdvanceValue = query.T.TemporaryAdvanceAmountReceived;
                        temp.ProjectId = query.T.ProjectId;
                        temp.ProjectTitle = projectdetails.ProjectTittle;
                        temp.PIId = query.T.PIId;
                        temp.PIName = pidetails.FirstName;
                        temp.NameofReceiver = query.T.NameofReceiver;
                        temp.ClaimingDepartment = query.T.DepartmentorSection;
                        temp.CreditorType = "PI";
                        temp.CheckListVerified_By = query.U.CheckListVerifiedBy;
                        temp.CheckListVerifierName = Common.GetUserFirstName(query.U.CheckListVerifiedBy ?? 0);
                        //temp.Remarks = query.Remarks;
                        //temp.PendingSettlementAmount = amount;
                        //temp.NoofUnsettledAdvance = count;
                        //temp.PendingSettlementAdvanceNumber = "Nil";
                        //if (count == 1)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0];
                        //}
                        //if (count == 2)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0] + ", " + pendingsettlementadvancenumber[1];
                        //}
                        var tQuery = context.tblTempAdvSettlementBillBreakup.Where(m => m.TempAdvSettlementId == tmpadvancesettlId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {

                            int[] _detailsid = new int[tQuery.Count];
                            //Nullable<int>[] _quantity = new Nullable<int>[tQuery.Count];
                            string[] _particulars = new string[tQuery.Count];
                            //Nullable<Decimal>[] _rate = new Nullable<Decimal>[tQuery.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[tQuery.Count];
                            string[] _vendorname = new string[tQuery.Count];
                            string[] _vendorbillnumber = new string[tQuery.Count];

                            for (int i = 0; i < tQuery.Count(); i++)
                            {
                                _detailsid[i] = tQuery[i].TmpAdvSettlementBillId;
                                _particulars[i] = tQuery[i].Particulars;
                                //_rate[i] = tQuery[i].Rate;
                                _amount[i] = tQuery[i].Amount;
                                //_quantity[i] = tQuery[i].Quantity;
                                _vendorname[i] = tQuery[i].VendorName;
                                _vendorbillnumber[i] = tQuery[i].VendorBillNumber;

                            }
                            temp.DetailsID = _detailsid;
                            temp.Particulars = _particulars;
                            //temp.RateofItem = _rate;
                            //temp.QuantityofItem = _quantity;
                            temp.AmountofItem = _amount;
                            temp.VendorBillNumber = _vendorbillnumber;
                            temp.VendorName = _vendorname;
                        }
                        temp.CommitmentDetail = (from c in context.tblTempAdvSettlCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.TempAdvSettlId == tmpadvancesettlId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     ReversedAmount = c.ReversedAmount,
                                                     BillCommitmentDetailId = c.TempAdvSettlCommitmentDetailId
                                                 }).ToList();
                        temp.ExpenseDetail = (from e in context.tblTempAdvSettlExpenseDetail
                                              where e.TempAdvSettlId == tmpadvancesettlId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.TempAdvSettlExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 BillExpenseDetailId = x.TempAdvSettlExpenseDetailId,
                                                 IsJV = x.IsJV_f ?? false
                                             }).ToList();

                        temp.DeductionDetail = (from d in context.tblTempAdvSettlDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.TempSettlAdvId == tmpadvancesettlId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.TempAdvSettlDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();
                        temp.CheckListDetail = (from ck in context.tblTempAdvSettlCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.TempAdvSettlId == tmpadvancesettlId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();

                        temp.DocumentDetail = (from d in context.tblTemporaryAdvanceDocumentDetail
                                               where d.TemAdvSettlId == tmpadvancesettlId && d.Status == "Active" && d.IsSettlementDoc_f == true
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.TemporaryAdvanceDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                    }
                }
                return temp;
            }
            catch (Exception ex)
            {
                return new TemporaryAdvanceModel();
            }
        }
        public TemporaryAdvanceModel GetTempAdvanceDetails(int tmpadvanceId)
        {
            try
            {
                TemporaryAdvanceModel temp = new TemporaryAdvanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblTemporaryAdvance
                                 where (U.TemporaryAdvanceId == tmpadvanceId && U.Status == "Active")
                                 select U).FirstOrDefault();
                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.PIId)
                                     select U).FirstOrDefault();

                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.ProjectId));

                    if (query != null)
                    {
                        temp.Source = query.Source;
                        if (query.Source == 1)
                        {
                            temp.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            temp.SourceReferenceNumber = refId;
                            temp.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            temp.SourceEmailDate = query.SourceEmailDate;
                        temp.TemporaryAdvanceNumber = query.TemporaryAdvanceNumber;
                        temp.TemporaryAdvanceId = query.TemporaryAdvanceId;
                        temp.TotalExpenseValue = query.TotalExpenseValue;
                        temp.TemporaryAdvanceValue = query.TemporaryAdvanceAmountReceived;
                        temp.ProjectId = query.ProjectId;
                        temp.ProjectTitle = projectdetails.ProjectTittle;
                        temp.PIId = query.PIId;
                        temp.PIName = pidetails.FirstName;
                        temp.NameofReceiver = query.NameofReceiver;
                        temp.ClaimingDepartment = query.DepartmentorSection;
                        temp.CreditorType = "PI";

                        var tQuery = context.tblTempAdvanceBreakUpDetail.Where(m => m.TemporaryAdvanceId == tmpadvanceId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {
                            int[] _detailsid = new int[tQuery.Count];
                            string[] _particulars = new string[tQuery.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[tQuery.Count];

                            for (int i = 0; i < tQuery.Count(); i++)
                            {
                                _detailsid[i] = tQuery[i].TempAdvBreakUpDetailId;
                                _particulars[i] = tQuery[i].Particulars;
                                _amount[i] = tQuery[i].Amount;
                            }
                            temp.DetailsID = _detailsid;
                            temp.Particulars = _particulars;
                            temp.AmountofItem = _amount;
                        }
                    }
                }
                return temp;
            }
            catch (Exception ex)
            {
                return new TemporaryAdvanceModel();
            }
        }
        public bool TempAdvSettlementCommitmentBalanceUpdate(Int32 billId, bool revoke, int uId, string tCode)
        {
            try
            {
                BOAModel model = new BOAModel();
                bool isReversed = false;
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TempAdvSettlementId == billId);
                    if (query != null)
                    {
                        if (query.TemporaryAdvanceValue > query.TempSettlementValue)
                            isReversed = true;
                        else if (query.TemporaryAdvanceValue == query.TempSettlementValue)
                            return true;
                    }
                    txList = (from c in context.tblTempAdvSettlCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.TempAdvSettlId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = isReversed ? c.ReversedAmount : c.PaymentAmount
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, uId, billId, tCode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public int TemporaryAdvanceSettlement(TemporaryAdvanceModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        bool isBalanced = false, isReversed = false;
                        if (model.TempAdvSettlId > 0)
                        {
                            var tmpadvsettlid = model.TempAdvSettlId;
                            var query = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TempAdvSettlementId == model.TempAdvSettlId);
                            if (query != null)
                            {
                                decimal? billAmt = model.AmountofItem.Sum();
                                decimal? tempAdvAmt = query.TemporaryAdvanceValue;
                                query.TempSettlementValue = billAmt;
                                if (billAmt > tempAdvAmt)
                                {
                                    query.PaymentValue = billAmt - tempAdvAmt;
                                    query.BalanceinAdvance = 0;
                                }
                                else if (billAmt < tempAdvAmt)
                                {
                                    isReversed = true;
                                    query.PaymentValue = 0;
                                    query.BalanceinAdvance = tempAdvAmt - billAmt;
                                }
                                else
                                {
                                    isBalanced = true;
                                    query.PaymentValue = 0;
                                    query.BalanceinAdvance = 0;
                                }
                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                query.SubCode = model.SubCode;
                                context.SaveChanges();

                                context.tblTempAdvSettlementBillBreakup.RemoveRange(context.tblTempAdvSettlementBillBreakup.Where(m => m.TempAdvSettlementId == tmpadvsettlid));
                                context.SaveChanges();

                                for (int i = 0; i < model.AmountofItem.Length; i++)
                                {
                                    tblTempAdvSettlementBillBreakup details = new tblTempAdvSettlementBillBreakup();
                                    details.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                    details.TempAdvSettlementId = tmpadvsettlid;
                                    details.VendorBillNumber = model.VendorBillNumber[i];
                                    details.VendorName = model.VendorName[i];
                                    details.Particulars = model.Particulars[i];
                                    //details.Rate = model.RateofItem[i];
                                    //details.Quantity = model.QuantityofItem[i];
                                    details.Amount = model.AmountofItem[i];
                                    details.Status = "Active";
                                    details.CRTD_By = LoggedInUser;
                                    details.CRTD_TS = DateTime.Now;
                                    context.tblTempAdvSettlementBillBreakup.Add(details);
                                    context.SaveChanges();
                                }
                                context.tblTempAdvSettlCommitmentDetail.RemoveRange(context.tblTempAdvSettlCommitmentDetail.Where(m => m.TempAdvSettlId == tmpadvsettlid));
                                context.tblTempAdvSettlDeductionDetail.RemoveRange(context.tblTempAdvSettlDeductionDetail.Where(m => m.TempSettlAdvId == tmpadvsettlid));
                                context.tblTempAdvSettlExpenseDetail.RemoveRange(context.tblTempAdvSettlExpenseDetail.Where(m => m.TempAdvSettlId == tmpadvsettlid));
                                context.SaveChanges();

                                if (!isBalanced)
                                {

                                    foreach (var item in model.CommitmentDetail)
                                    {
                                        if (item.CommitmentDetailId == null)
                                            return -3;
                                        tblTempAdvSettlCommitmentDetail commitment = new tblTempAdvSettlCommitmentDetail();
                                        commitment.TempAdvSettlId = tmpadvsettlid;
                                        commitment.CommitmentDetailId = item.CommitmentDetailId;
                                        commitment.CRTD_By = LoggedInUser;
                                        commitment.CRTD_TS = DateTime.Now;
                                        commitment.PaymentAmount = item.PaymentAmount;
                                        if (isReversed)
                                            commitment.ReversedAmount = item.ReversedAmount;
                                        commitment.Status = "Active";
                                        context.tblTempAdvSettlCommitmentDetail.Add(commitment);
                                        context.SaveChanges();
                                    }

                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTempAdvSettlDeductionDetail deduction = new tblTempAdvSettlDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TempSettlAdvId = tmpadvsettlid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTempAdvSettlDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTempAdvSettlExpenseDetail exp = new tblTempAdvSettlExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.TempAdvSettlId = tmpadvsettlid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTempAdvSettlExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblTempAdvSettlCheckDetail.RemoveRange(context.tblTempAdvSettlCheckDetail.Where(m => m.TempAdvSettlId == tmpadvsettlid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTempAdvSettlCheckDetail chk = new tblTempAdvSettlCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TempAdvSettlId = tmpadvsettlid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTempAdvSettlCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                context.SaveChanges();
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblTemporaryAdvanceDocumentDetail.Where(x => x.TemAdvSettlId == model.TempAdvSettlId && !arrList.Contains(x.TemporaryAdvanceDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblTemporaryAdvanceDocumentDetail.FirstOrDefault(m => m.TemporaryAdvanceDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblTemporaryAdvanceDocumentDetail doc = new tblTemporaryAdvanceDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.TemAdvSettlId = model.TempAdvSettlId;
                                        doc.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                        doc.Status = "Active";
                                        context.tblTemporaryAdvanceDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }

                                transaction.Commit();
                                return model.TemporaryAdvanceId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            decimal? tempAdvAmt = 0;
                            var query = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == model.TemporaryAdvanceId && m.Status == "Active");
                            if (query != null)
                                tempAdvAmt = query.TemporaryAdvanceAmountReceived;
                            else
                                return -1;
                            tblTempAdvanceSettlement tempadv = new tblTempAdvanceSettlement();
                            tempadv.CRTD_By = LoggedInUser;
                            tempadv.CRTD_TS = DateTime.Now;
                            tempadv.ProjectId = model.ProjectId;
                            decimal? billAmt = model.AmountofItem.Sum();

                            tempadv.TempSettlementValue = billAmt;
                            if (billAmt > tempAdvAmt)
                            {
                                tempadv.PaymentValue = billAmt - tempAdvAmt;
                                tempadv.BalanceinAdvance = 0;
                            }
                            else if (billAmt < tempAdvAmt)
                            {
                                isReversed = true;
                                tempadv.PaymentValue = 0;
                                tempadv.BalanceinAdvance = tempAdvAmt - billAmt;
                            }
                            else
                            {
                                isBalanced = true;
                                tempadv.PaymentValue = 0;
                                tempadv.BalanceinAdvance = 0;
                            }
                            tempadv.TemporaryAdvanceValue = tempAdvAmt;
                            tempadv.TempSettlementValue = billAmt;
                            tempadv.TemporaryAdvanceId = model.TemporaryAdvanceId;
                            tempadv.TransactionTypeCode = "TMS";
                            tempadv.CheckListVerifiedBy = model.CheckListVerified_By;
                            tempadv.SubCode = model.SubCode;
                            tempadv.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getTempSettlAdvId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.TempAdvSettlementNumber = "TMS/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.TempAdvSettlementNumber = "TMS/" + FinYear + "/" + 000001;
                            }
                            tempadv.TempSettlNumber = model.TempAdvSettlementNumber;
                            context.tblTempAdvanceSettlement.Add(tempadv);
                            context.SaveChanges();

                            var tempadvance = context.tblTemporaryAdvance.FirstOrDefault(m => m.TemporaryAdvanceId == model.TemporaryAdvanceId);
                            tempadvance.IsPendingSettlement_f = false;
                            tempadvance.Status = "Settlement Completed";
                            context.SaveChanges();

                            int TempAdvsetlId = tempadv.TempAdvSettlementId;
                            if (TempAdvsetlId > 0)
                            {

                                for (int i = 0; i < model.AmountofItem.Count(); i++)
                                {
                                    tblTempAdvSettlementBillBreakup details = new tblTempAdvSettlementBillBreakup();
                                    details.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                    details.TempAdvSettlementId = TempAdvsetlId;
                                    details.VendorBillNumber = model.VendorBillNumber[i];
                                    details.VendorName = model.VendorName[i];
                                    details.Particulars = model.Particulars[i];
                                    //details.Rate = model.RateofItem[i];
                                    //details.Quantity = model.QuantityofItem[i];
                                    details.Amount = model.AmountofItem[i];
                                    details.Status = "Active";
                                    details.CRTD_By = LoggedInUser;
                                    details.CRTD_TS = DateTime.Now;
                                    context.tblTempAdvSettlementBillBreakup.Add(details);
                                    context.SaveChanges();
                                }
                                if (!isBalanced)
                                {
                                    foreach (var item in model.CommitmentDetail)
                                    {
                                        if (item.CommitmentDetailId == null)
                                            return -3;
                                        tblTempAdvSettlCommitmentDetail commitment = new tblTempAdvSettlCommitmentDetail();
                                        commitment.TempAdvSettlId = TempAdvsetlId;
                                        commitment.CommitmentDetailId = item.CommitmentDetailId;
                                        commitment.CRTD_By = LoggedInUser;
                                        commitment.CRTD_TS = DateTime.Now;
                                        commitment.PaymentAmount = item.PaymentAmount;
                                        if (isReversed)
                                            commitment.ReversedAmount = item.ReversedAmount;
                                        commitment.Status = "Active";
                                        context.tblTempAdvSettlCommitmentDetail.Add(commitment);
                                        context.SaveChanges();
                                    }

                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblTempAdvSettlDeductionDetail deduction = new tblTempAdvSettlDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.TempSettlAdvId = TempAdvsetlId;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblTempAdvSettlDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblTempAdvSettlExpenseDetail exp = new tblTempAdvSettlExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.TempAdvSettlId = TempAdvsetlId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblTempAdvSettlExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblTempAdvSettlCheckDetail chk = new tblTempAdvSettlCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.TempAdvSettlId = TempAdvsetlId;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblTempAdvSettlCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblTemporaryAdvanceDocumentDetail doc = new tblTemporaryAdvanceDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.TemporaryAdvanceId = model.TemporaryAdvanceId;
                                    doc.TemAdvSettlId = TempAdvsetlId;
                                    doc.IsSettlementDoc_f = true;
                                    //  doc.ProjectId = model.ProjectID;
                                    doc.Status = "Active";
                                    context.tblTemporaryAdvanceDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }

                                transaction.Commit();
                                return TempAdvsetlId;

                            }

                            return TempAdvsetlId;
                        }
                    }


                    catch (Exception ex)
                    {

                        return -1;
                    }
                }
            }
        }
        public List<TemporaryAdvanceModel> GetTempAdvSettlList(string typeCode)
        {
            try
            {

                List<TemporaryAdvanceModel> list = new List<TemporaryAdvanceModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblTempAdvanceSettlement
                            join a in context.tblTemporaryAdvance on b.TemporaryAdvanceId equals a.TemporaryAdvanceId
                            join P in context.tblProject on b.ProjectId equals P.ProjectId
                            orderby b.TempAdvSettlementId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == typeCode
                            select new
                            {
                                b.TempAdvSettlementId,
                                a.TemporaryAdvanceId,
                                b.ProjectId,
                                a.TemporaryAdvanceNumber,
                                b.TempSettlNumber,
                                P.ProjectNumber,
                                b.CRTD_TS,
                                a.TemporaryAdvanceAmountReceived,
                                b.TempSettlementValue,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new TemporaryAdvanceModel()
                                 {
                                     SlNo = index + 1,
                                     TemporaryAdvanceId = x.TemporaryAdvanceId,
                                     TempAdvSettlId = x.TempAdvSettlementId,
                                     ProjectId = x.ProjectId,
                                     ProjectNumber = x.ProjectNumber,
                                     TempAdvSettlementNumber = x.TempSettlNumber,
                                     TemporaryAdvanceNumber = x.TemporaryAdvanceNumber,
                                     RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     SettlementValue = x.TempSettlementValue,
                                     TemporaryAdvanceValue = x.TemporaryAdvanceAmountReceived,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<TemporaryAdvanceModel>();
            }
        }
        public List<CommitmentMasterAndDetailModel> GetTemporaryADVCommitmentDetails(int temporaryAdvanceId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    return (from c in context.tblTempAdvCommitmentDetail
                            join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                            join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                            join p in context.tblProject on com.ProjectId equals p.ProjectId
                            join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                            orderby det.ComitmentDetailId descending
                            where c.TempAdvId == temporaryAdvanceId && c.Status == "Active"
                            select new CommitmentMasterAndDetailModel()
                            {
                                CommitmentDetailId = c.CommitmentDetailId,
                                CommitmentNumber = com.CommitmentNumber,
                                ProjectNumber = p.ProjectNumber,
                                ProjectId = com.ProjectId,
                                HeadName = head.HeadName,
                                AvailableAmount = det.BalanceAmount ?? 0,
                                PaymentAmount = c.PaymentAmount,
                                CommitmentId = com.CommitmentId,
                                CommitmentBalanceAmount = com.CommitmentBalance,
                                CommitmentBookedAmount = com.CommitmentAmount
                            }).ToList();
                }
            }
            catch (Exception ex)
            {
                return new List<CommitmentMasterAndDetailModel>();
            }
        }
        public bool TempAdvSettlementApproved(int billId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TempAdvSettlementId == billId && m.Status == "Open" && m.TransactionTypeCode == "TMS");
                    if (query != null)
                    {
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool BalancedTMSBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblTempAdvanceSettlement.FirstOrDefault(m => m.TempAdvSettlementId == id && m.BalanceinAdvance == 0 && m.PaymentValue == 0);
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.TemporaryAdvanceValue ?? 0;
                        model.TempVoucherNumber = billQuery.TempSettlNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("CJV");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "TMS";
                        model.RefNumber = billQuery.TempSettlNumber;
                        model.RefTransactionCode = "TMS";
                        txList = (from exp in context.tblTempAdvSettlExpenseDetail
                                  where exp.TempAdvSettlId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblTempAdvSettlDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.TempSettlAdvId == id && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion

        #region SummerInternship
        public List<SummerInternshipModel> GetSummerInternshipStudentList()
        {
            try
            {

                List<SummerInternshipModel> list = new List<SummerInternshipModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblSummerInternshipStudentDetails
                            join P in context.tblProject on b.ProjectId equals P.ProjectId
                            orderby b.SummerInternshipStudentId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.SummerInternshipStudentId,
                                b.SummerInternshipNumber,
                                P.ProjectId,
                                P.ProjectNumber,
                                b.CRTD_TS,
                                // b.StipendAmountperMonth,
                                b.TotalStipendAmount,
                                b.StudentName,
                                b.CollegeName,
                                b.Duration,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new SummerInternshipModel()
                                 {
                                     SlNo = index + 1,
                                     SummrInternStudentId = x.SummerInternshipStudentId,
                                     ProjectNumber = x.ProjectNumber,
                                     SummerInternshipNumber = x.SummerInternshipNumber,
                                     StudentName = x.StudentName,
                                     College = x.CollegeName,
                                     Duration = x.Duration,
                                     //RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     TotalStipendValue = x.TotalStipendAmount,
                                     //   StipendValueperMonth = x.StipendAmountperMonth,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<SummerInternshipModel>();
            }
        }

        public SummerInternshipModel GetSummerInternshipDetails(int internId)
        {
            try
            {
                SummerInternshipModel internship = new SummerInternshipModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == internId);
                    var projectid = query.ProjectId;
                    var projectquery = context.tblProject.FirstOrDefault(m => m.ProjectId == projectid);
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.ProjectId));

                    if (query != null)
                    {
                        internship.Source = query.Source;
                        if (query.Source == 1)
                        {
                            internship.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            internship.SourceReferenceNumber = refId;
                            internship.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            internship.SourceEmailDate = query.SourceEmailDate;
                        internship.SummrInternStudentId = query.SummerInternshipStudentId;
                        internship.SummerInternshipNumber = query.SummerInternshipNumber;
                        internship.StudentName = query.StudentName;
                        internship.College = query.CollegeName;
                        internship.StudentAddress = query.Address;

                        internship.StudentEmail = query.Email;
                        internship.StudentRollNo = query.RollNo;
                        internship.StudentCourse = query.Course;

                        internship.StudentYearofStudy = query.YearofStudy;
                        internship.InternshipFromDate = query.InternStartDate;
                        internship.InternshipToDate = query.InternCloseDate;
                        internship.StudentCourse = query.Course;

                        //   internship.StipendValueperMonth = query.StipendAmountperMonth;
                        internship.TotalStipendValue = query.TotalStipendAmount;
                        internship.ProjectId = query.ProjectId;
                        //  internship.ProjectTypeName = projectdetails.ProjectType;
                        internship.PIId = projectquery.PIName;
                        internship.Remark = query.Remarks;
                        internship.BankName = query.BankName;
                        internship.AccountNumber = query.AccountNumber;
                        internship.BranchName = query.BranchName;
                        internship.IFSCCode = query.IFSCCode;
                        internship.CreditorType = "Student";
                        internship.CheckListVerified_By = query.CheckListVerifiedBy;
                        internship.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);

                        internship.CommitmentDetail = (from c in context.tblSummrInternCommitmentDetail
                                                       join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                       join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                       join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                       join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                       orderby det.ComitmentDetailId descending
                                                       where c.SummerInternId == internId && c.Status == "Active"
                                                       select new BillCommitmentDetailModel()
                                                       {
                                                           CommitmentDetailId = c.CommitmentDetailId,
                                                           CommitmentNumber = com.CommitmentNumber,
                                                           ProjectNumber = p.ProjectNumber,
                                                           ProjectId = com.ProjectId,
                                                           HeadName = head.HeadName,
                                                           AvailableAmount = det.BalanceAmount ?? 0,
                                                           PaymentAmount = c.PaymentAmount,
                                                           BillCommitmentDetailId = c.SummerInternCommitmentDetailId
                                                       }).ToList();
                        internship.ExpenseDetail = (from e in context.tblSummerInternshipExpenseDetail
                                                    where e.SummerInternStudentId == internId && e.Status == "Active"
                                                    select new
                                                    {
                                                        e.AccountHeadId,
                                                        e.Amount,
                                                        e.AccountGroupId,
                                                        e.SummrInternExpenseDetailId,
                                                        e.TransactionType,
                                                        e.IsJV_f
                                                    })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  TransactionType = x.TransactionType,
                                                  Amount = x.Amount,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.SummrInternExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        internship.DeductionDetail = (from d in context.tblSummrInternDeductionDetail
                                                      join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                      join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                      where d.SummrInternId == internId && d.Status == "Active"
                                                      select new BillDeductionDetailModel()
                                                      {
                                                          AccountGroupId = d.AccountGroupId,
                                                          BillDeductionDetailId = d.SummrInternDeductionDetailId,
                                                          Amount = d.Amount,
                                                          DeductionHeadId = d.DeductionHeadId,
                                                          AccountGroup = g.AccountGroup,
                                                          DeductionHead = hd.AccountHead
                                                      }).ToList();

                        internship.CheckListDetail = (from ck in context.tblSummerInternshipCheckDetail
                                                      join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                      where ck.SummerInternshipId == internId && ck.Status == "Active"
                                                      select new CheckListModel()
                                                      {
                                                          CheckList = chkf.CheckList,
                                                          FunctionCheckListId = ck.FunctionCheckListId,
                                                          IsChecked = true
                                                      }).ToList();

                        internship.DocumentDetail = (from d in context.tblSummerInternshipDocumentDetail
                                                     where d.SummerInternshipStudentId == internId && d.Status == "Active"
                                                     select new AttachmentDetailModel()
                                                     {
                                                         DocumentActualName = d.DocumentActualName,
                                                         DocumentDetailId = d.SummerInternshipDocumentDetailId,
                                                         DocumentName = d.DocumentName,
                                                         DocumentPath = "~/Content/OtherDocuments",
                                                         DocumentType = d.DocumentType,
                                                         Remarks = d.Remarks
                                                     }).ToList();
                    }
                }
                return internship;
            }
            catch (Exception ex)
            {
                return new SummerInternshipModel();
            }
        }
        public int CreateSummerInternship(SummerInternshipModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.SummrInternStudentId > 0)
                        {
                            var internid = model.SummrInternStudentId;
                            var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == model.SummrInternStudentId);
                            if (query != null)
                            {

                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.ProjectId = model.ProjectId;
                                query.TotalStipendAmount = model.TotalStipendValue;
                                //        query.StipendAmountperMonth = model.StipendValueperMonth;
                                query.StudentName = model.StudentName;
                                query.RollNo = model.StudentRollNo;
                                query.Remarks = model.Remark;
                                query.CollegeName = model.College;
                                query.Address = model.StudentAddress;
                                query.Email = model.StudentEmail;
                                query.Course = model.StudentCourse;
                                query.YearofStudy = model.StudentYearofStudy;
                                query.InternCloseDate = model.InternshipToDate;
                                query.InternStartDate = model.InternshipFromDate;
                                query.Duration = model.Duration;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.BankName = model.BankName;
                                query.BranchName = model.BranchName;
                                query.AccountNumber = model.AccountNumber;
                                query.IFSCCode = model.IFSCCode;
                                query.TransactionTypeCode = "SMI";
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();

                                context.tblSummerInternshipExpenseDetail.RemoveRange(context.tblSummerInternshipExpenseDetail.Where(m => m.SummerInternStudentId == internid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblSummerInternshipExpenseDetail exp = new tblSummerInternshipExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.SummerInternStudentId = internid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblSummerInternshipExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblSummrInternCommitmentDetail.RemoveRange(context.tblSummrInternCommitmentDetail.Where(m => m.SummerInternId == internid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblSummrInternCommitmentDetail commitment = new tblSummrInternCommitmentDetail();
                                    commitment.SummerInternId = internid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblSummrInternCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblSummrInternDeductionDetail.RemoveRange(context.tblSummrInternDeductionDetail.Where(m => m.SummrInternId == internid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblSummrInternDeductionDetail deduction = new tblSummrInternDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.SummrInternId = internid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblSummrInternDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblSummerInternshipCheckDetail.RemoveRange(context.tblSummerInternshipCheckDetail.Where(m => m.SummerInternshipId == internid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblSummerInternshipCheckDetail chk = new tblSummerInternshipCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.SummerInternshipId = internid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblSummerInternshipCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblSummerInternshipDocumentDetail.Where(x => x.SummerInternshipStudentId == model.SummrInternStudentId && !arrList.Contains(x.SummerInternshipDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblSummerInternshipDocumentDetail.FirstOrDefault(m => m.SummerInternshipDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblSummerInternshipDocumentDetail doc = new tblSummerInternshipDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.SummerInternshipStudentId = model.SummrInternStudentId;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblSummerInternshipDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.SummrInternStudentId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblSummerInternshipStudentDetails summrintern = new tblSummerInternshipStudentDetails();
                            summrintern.CRTD_By = LoggedInUser;
                            summrintern.CRTD_TS = DateTime.Now;
                            summrintern.ProjectId = model.ProjectId;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);
                            summrintern.SummerInternshipNumber = model.SummerInternshipNumber;
                            summrintern.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                summrintern.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 1 || model.Source == 2)
                            {
                                summrintern.SourceEmailDate = model.SourceEmailDate;
                            }

                            summrintern.TotalStipendAmount = model.TotalStipendValue;
                            //    summrintern.StipendAmountperMonth = model.StipendValueperMonth;
                            summrintern.StudentName = model.StudentName;
                            summrintern.TransactionTypeCode = "SMI";
                            summrintern.RollNo = model.StudentRollNo;
                            summrintern.Remarks = model.Remark;
                            summrintern.CollegeName = model.College;
                            summrintern.Address = model.StudentAddress;
                            summrintern.Email = model.StudentEmail;
                            summrintern.Course = model.StudentCourse;
                            summrintern.YearofStudy = model.StudentYearofStudy;
                            summrintern.InternCloseDate = model.InternshipToDate;
                            summrintern.InternStartDate = model.InternshipFromDate;
                            summrintern.Duration = model.Duration;
                            summrintern.BankName = model.BankName;
                            summrintern.BranchName = model.BranchName;
                            summrintern.AccountNumber = model.AccountNumber;
                            summrintern.IFSCCode = model.IFSCCode;
                            summrintern.CheckListVerifiedBy = model.CheckListVerified_By;

                            summrintern.IsPendingPayment_f = true;
                            summrintern.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getSummrinternId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.SummerInternshipNumber = "SMI/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.SummerInternshipNumber = "SMI/" + FinYear + "/" + 000001;
                            }
                            summrintern.SummerInternshipNumber = model.SummerInternshipNumber;
                            context.tblSummerInternshipStudentDetails.Add(summrintern);
                            context.SaveChanges();
                            int Summerinternid = summrintern.SummerInternshipStudentId;
                            if (Summerinternid > 0)
                            {
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblSummerInternshipExpenseDetail exp = new tblSummerInternshipExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.SummerInternStudentId = Summerinternid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblSummerInternshipExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblSummrInternCommitmentDetail commitment = new tblSummrInternCommitmentDetail();
                                    commitment.SummerInternId = Summerinternid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblSummrInternCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblSummrInternDeductionDetail deduction = new tblSummrInternDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.SummrInternId = Summerinternid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblSummrInternDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblSummerInternshipCheckDetail chk = new tblSummerInternshipCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.SummerInternshipId = Summerinternid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblSummerInternshipCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblSummerInternshipDocumentDetail doc = new tblSummerInternshipDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.SummerInternshipStudentId = Summerinternid;
                                    doc.IsStudentDocument_f = true;
                                    doc.Status = "Active";
                                    context.tblSummerInternshipDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return Summerinternid;

                            }

                            return Summerinternid;
                        }
                    }


                    catch (Exception ex)
                    {

                        return -1;
                    }
                }
            }
        }
        public CommitmentModel GetSummrInternDetailsForCommitment(int summrinternId)
        {
            try
            {
                CommitmentModel bill = new CommitmentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from m in context.tblSummerInternshipStudentDetails
                                 join p in context.tblProject on m.ProjectId equals p.ProjectId
                                 where m.SummerInternshipStudentId == summrinternId && m.Status == "Approved"
                                 select new { m.Source, m.ProjectId, m.SourceReferenceNumber, m.SourceEmailDate, p.ProjectType }).FirstOrDefault();
                    if (query != null)
                    {
                        bill.selRequestRefrence = query.Source ?? 0;
                        bill.SelProjectNumber = query.ProjectId ?? 0;
                        bill.selProjectType = query.ProjectType ?? 0;
                        if (query.Source == 1 || query.Source == 3)
                            bill.selRefNo = query.SourceReferenceNumber.ToString();
                        if (query.Source == 2)
                            bill.EmailDate = query.SourceEmailDate;
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new CommitmentModel();
            }
        }
        public bool UpdateSumerInternStatusOnBookCommitment(int summerinternId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == summerinternId && m.Status == "Active");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<SummerInternshipSearchResultModel> SearchSummerInternshipList(SummerInternshipSearchFieldModel model)
        {
            List<SummerInternshipSearchResultModel> Intern = new List<SummerInternshipSearchResultModel>();
            using (var context = new IOASDBEntities())
            {

                var query = (from si in context.tblSummerInternshipStudentDetails
                             join P in context.tblProject on si.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             where ((String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                             && (String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.StudentName) || si.StudentName.Contains(model.StudentName))
                             && (String.IsNullOrEmpty(model.CollegeName) || si.CollegeName.Contains(model.CollegeName))
                             && (String.IsNullOrEmpty(model.SummerInternshipNumber) || si.SummerInternshipNumber.Contains(model.SummerInternshipNumber))
                             && (((si.CRTD_TS >= model.FromDate) && (si.CRTD_TS <= model.ToDate)) || (model.FromDate == null && model.ToDate == null))
                             && (((si.InternStartDate >= model.FromSIDate) && (si.InternStartDate <= model.ToSIDate)) || (model.FromSIDate == null && model.ToSIDate == null)))
                             orderby si.SummerInternshipStudentId descending
                             select new { si, user.FirstName, user.EmployeeId, P }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Intern.Add(new SummerInternshipSearchResultModel()
                        {
                            SlNo = i + 1,
                            Projectid = query[i].P.ProjectId,
                            SummrInternStudentId = query[i].si.SummerInternshipStudentId,
                            ProjectNumber = query[i].P.ProjectNumber,
                            StudentName = query[i].si.StudentName,
                            College = query[i].si.CollegeName,
                            Duration = query[i].si.Duration,
                            TotalStipendValue = query[i].si.TotalStipendAmount,
                            SummerInternshipNumber = query[i].si.SummerInternshipNumber,
                            Status = query[i].si.Status,
                            NameofPI = pi,
                        });
                    }
                }
            }
            return Intern;
        }
        public bool SummerInternshipBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblSummrInternCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.SummerInternId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool SummerInternshipBillApproved(int InternId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblSummerInternshipStudentDetails.FirstOrDefault(m => m.SummerInternshipStudentId == InternId && m.Status == "Open" && m.TransactionTypeCode == "SMI");
                    if (query != null)
                    {
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Project Fund Transfer
        public ProjectFundTransferModel GetProjectFundTransferDetails(int id)
        {
            try
            {
                ProjectFundTransferModel bill = new ProjectFundTransferModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblProjectTransfer.FirstOrDefault(m => m.ProjectTransferId == id);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.TransferNumber = query.TransferNumber;
                        bill.Narration = query.Narration;
                        bill.DocumentName = query.DocumentName;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentPath = "~/Content/OtherDocuments";
                        bill.CreditProjectId = query.CreditProjectId;
                        bill.DebitProjectId = query.DebitProjectId;
                        bill.CreditProject = query.CreditProject;
                        bill.DebitProject = query.DebitProject;
                        bill.CreditReason = query.CreditReason;
                        bill.DebitReason = query.DebitReason;
                        bill.PostedDate = String.Format("{0:s}", query.TransferDate);
                        bill.ProjectTransferId = id;

                        bill.CrDetail = (from e in context.tblProjectTransferDetails
                                         where e.ProjectTransferId == id && e.TransactionType == "Credit"
                                         select new ProjectTransferDetailModel()
                                         {
                                             BudgetHeadId = e.BudgetHeadId,
                                             Amount = e.Amount
                                         }).ToList();
                        bill.DrDetail = (from e in context.tblProjectTransferDetails
                                         where e.ProjectTransferId == id && e.TransactionType == "Debit"
                                         select new ProjectTransferDetailModel()
                                         {
                                             BudgetHeadId = e.BudgetHeadId,
                                             Amount = e.Amount
                                         }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new ProjectFundTransferModel();
            }
        }
        public int ProjectFundTransferIU(ProjectFundTransferModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.ProjectTransferId == null)
                        {
                            int projectTransferId = 0;
                            tblProjectTransfer bill = new tblProjectTransfer();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "PFT";
                            bill.TransferNumber = Common.GetNewProjectTransferNo();
                            bill.CreditProject = Common.GetProjectNumber(model.CreditProjectId ?? 0, true);
                            bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                            bill.CreditProjectId = model.CreditProjectId;
                            bill.CreditReason = model.CreditReason;
                            bill.DebitProject = Common.GetProjectNumber(model.DebitProjectId ?? 0, true);
                            bill.DebitProjectId = model.DebitProjectId;
                            bill.DebitReason = model.DebitReason;
                            bill.Narration = model.Narration;
                            bill.TransferDate = DateTime.Now;
                            if (model.Document != null)
                            {
                                string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                var docName = Guid.NewGuid().ToString() + "_" + actName;
                                model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                bill.DocumentActualName = actName;
                                bill.DocumentName = docName;
                            }
                            context.tblProjectTransfer.Add(bill);
                            context.SaveChanges();
                            projectTransferId = bill.ProjectTransferId;

                            foreach (var item in model.CrDetail)
                            {
                                tblProjectTransferDetails crDet = new tblProjectTransferDetails();
                                crDet.ProjectTransferId = projectTransferId;
                                crDet.Amount = item.Amount;
                                crDet.ProjectId = model.CreditProjectId;
                                crDet.BudgetHeadId = item.BudgetHeadId;
                                crDet.TransactionType = "Credit";
                                context.tblProjectTransferDetails.Add(crDet);
                                context.SaveChanges();
                            }

                            foreach (var item in model.DrDetail)
                            {
                                tblProjectTransferDetails drDet = new tblProjectTransferDetails();
                                drDet.ProjectTransferId = projectTransferId;
                                drDet.Amount = item.Amount;
                                drDet.ProjectId = model.DebitProjectId;
                                drDet.BudgetHeadId = item.BudgetHeadId;
                                drDet.TransactionType = "Debit";
                                context.tblProjectTransferDetails.Add(drDet);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return projectTransferId;
                        }
                        else
                        {
                            int projectTransferId = model.ProjectTransferId ?? 0;
                            var bill = context.tblProjectTransfer.FirstOrDefault(m => m.ProjectTransferId == projectTransferId && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.CreditProject = Common.GetProjectNumber(model.CreditProjectId ?? 0, true);
                                bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                                bill.CreditProjectId = model.CreditProjectId;
                                bill.CreditReason = model.CreditReason;
                                bill.DebitProject = Common.GetProjectNumber(model.DebitProjectId ?? 0, true);
                                bill.DebitProjectId = model.DebitProjectId;
                                bill.DebitReason = model.DebitReason;
                                bill.Narration = model.Narration;
                                bill.TransferDate = DateTime.Now;
                                if (model.Document != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                    var docName = Guid.NewGuid().ToString() + "_" + actName;
                                    model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    bill.DocumentActualName = actName;
                                    bill.DocumentName = docName;
                                }

                                context.tblProjectTransferDetails.RemoveRange(context.tblProjectTransferDetails.Where(m => m.ProjectTransferId == projectTransferId));
                                context.SaveChanges();
                                foreach (var item in model.CrDetail)
                                {
                                    tblProjectTransferDetails crDet = new tblProjectTransferDetails();
                                    crDet.ProjectTransferId = projectTransferId;
                                    crDet.Amount = item.Amount;
                                    crDet.BudgetHeadId = item.BudgetHeadId;
                                    crDet.TransactionType = "Credit";
                                    context.tblProjectTransferDetails.Add(crDet);
                                    context.SaveChanges();
                                }

                                foreach (var item in model.DrDetail)
                                {
                                    tblProjectTransferDetails drDet = new tblProjectTransferDetails();
                                    drDet.ProjectTransferId = projectTransferId;
                                    drDet.Amount = item.Amount;
                                    drDet.BudgetHeadId = item.BudgetHeadId;
                                    drDet.TransactionType = "Debit";
                                    context.tblProjectTransferDetails.Add(drDet);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return projectTransferId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<ProjectFundTransferModel> GetProjectFundTransferList()
        {
            try
            {

                List<ProjectFundTransferModel> list = new List<ProjectFundTransferModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblProjectTransfer
                            orderby b.ProjectTransferId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.ProjectTransferId,
                                b.TransferNumber,
                                b.Amount,
                                b.TransferDate,
                                b.DebitProject,
                                b.CreditProject,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ProjectFundTransferModel()
                                 {
                                     SlNo = index + 1,
                                     ProjectTransferId = x.ProjectTransferId,
                                     TransferNumber = x.TransferNumber,
                                     CreditProject = x.CreditProject,
                                     DebitProject = x.DebitProject,
                                     PostedDate = String.Format("{0:s}", x.TransferDate),
                                     CreditAmount = x.Amount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ProjectFundTransferModel>();
            }
        }
        public bool ApproveProjectFundTransfer(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblProjectTransfer.SingleOrDefault(m => m.ProjectTransferId == id && m.Status == "Open");
                    if (billQuery != null)
                    {

                        billQuery.Status = "Completed";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region ClearancePayment
        public int ClearancePaymentIU(ClearancePaymentEntryModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal? billAmount = 0, billTaxAmount = 0;
                        foreach (var item in model.PODetail)
                        {
                            decimal advAmt = item.TotalAmount ?? 0;
                            decimal advTax = (advAmt * item.TaxPct / 100) ?? 0;
                            billAmount += advAmt;
                            billTaxAmount += advTax;
                        }
                        if (model.BillId == 0)
                        {
                            int billId = 0;
                            tblClearancePaymentEntry bill = new tblClearancePaymentEntry();


                            var existsQuery = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentAgentId == model.ClearanceAgentId && m.ReferencePONumber == model.PONumber);
                            if (existsQuery != null)
                                return -2;
                            bill.AdvancePercentage = 100;
                            bill.BillAmount = billAmount;
                            bill.BillTaxAmount = billTaxAmount;
                            bill.BillNumber = Common.GetCLPNewNumber("CLP");
                            bill.PaymentType = model.PaymentType;
                            bill.InvoiceDate = model.InvoiceDate;
                            bill.InvoiceNumber = model.InvoiceNumber;
                            bill.CommitmentAmount = model.CommitmentAmount;
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.DeductionAmount = model.DeductionAmount;
                            bill.ExpenseAmount = model.ExpenseAmount;
                            bill.ReferencePODate = model.PODate;
                            bill.ReferencePONumber = model.PONumber;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "CLP";
                            bill.BankHeadId = model.BankHeadId;
                            bill.ClearancePaymentAgentId = model.ClearanceAgentId;
                            bill.CheckListVerifiedBy = model.CheckListVerified_By;
                            bill.PaymentTDSAmount = model.PaymentTDSAmount;
                            context.tblClearancePaymentEntry.Add(bill);
                            context.SaveChanges();
                            billId = bill.ClearancePaymentId;

                            foreach (var item in model.PODetail)
                            {
                                tblClearancePaymentPODetail po = new tblClearancePaymentPODetail();
                                po.ClearancePaymentId = billId;
                                po.Amount = item.TotalAmount;
                                po.Description = item.Description;
                                po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                po.ItemName = item.ItemName;
                                po.TaxablePercentage = item.TaxPct;
                                po.IsTaxEligible = item.IsTaxEligible;
                                po.CRTD_By = logged_in_user;
                                po.CRTD_TS = DateTime.Now;
                                po.Status = "Active";
                                context.tblClearancePaymentPODetail.Add(po);
                                context.SaveChanges();
                            }
                            foreach (var item in model.InvoiceBreakDetail)
                            {
                                if (item.TypeOfServiceOrCategory != null)
                                {
                                    tblClearancePaymentInvoiceDetail invdetails = new tblClearancePaymentInvoiceDetail();
                                    invdetails.ClearancePaymentId = billId;
                                    invdetails.InvoiceNumber = item.InvoiceNumber;
                                    invdetails.Amount = item.Amount;
                                    invdetails.TaxablePercentage = item.TaxablePercentage;
                                    invdetails.TaxValue = item.TaxValue;
                                    invdetails.Description = item.Description;
                                    invdetails.Amount = item.Amount;
                                    invdetails.GSTIN = item.GSTIN;
                                    invdetails.IsTaxEligible = item.IsTaxEligible;
                                    invdetails.InvoiceDate = item.InvoiceDate;
                                    invdetails.CRTD_By = logged_in_user;
                                    invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    invdetails.IsInterstate = item.IsInterstate;
                                    invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                    invdetails.Vendor = item.Vendor;
                                    invdetails.CRTD_TS = DateTime.Now;
                                    invdetails.Status = "Active";
                                    context.tblClearancePaymentInvoiceDetail.Add(invdetails);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.PaymentBreakDetail)
                            {
                                tblClearancePaymentBreakUpDetail payDet = new tblClearancePaymentBreakUpDetail();
                                payDet.CategoryId = item.CategoryId;
                                payDet.UserId = item.UserId;
                                payDet.ClearancePaymentId = billId;
                                payDet.Name = item.Name;
                                payDet.ModeOfPayment = item.ModeOfPayment;
                                payDet.PaymentAmount = item.PaymentAmount;
                                payDet.CRTD_By = logged_in_user;
                                payDet.CRTD_TS = DateTime.Now;
                                payDet.Status = "Active";
                                context.tblClearancePaymentBreakUpDetail.Add(payDet);
                                context.SaveChanges();
                            }
                            if (model.CommitmentDetail[0].CommitmentDetailId != null)
                            {
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblClearancePaymentCommitmentDetail commitment = new tblClearancePaymentCommitmentDetail();
                                    commitment.ClearancePaymentId = billId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblClearancePaymentCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                            }
                            if (model.DeductionDetail != null)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                            {
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblClearancePaymentDeductionDetail deduction = new tblClearancePaymentDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.ClearancePaymentId = billId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblClearancePaymentDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                            }
                            if (model.ExpenseDetail != null)
                            {
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblClearancePaymentExpenseDetail exp = new tblClearancePaymentExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.ClearancePaymentId = billId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblClearancePaymentExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.CheckListDetail)
                            {
                                if (item.IsChecked)
                                {
                                    tblClearancePaymentCheckDetail chk = new tblClearancePaymentCheckDetail();
                                    chk.FunctionCheckListId = item.FunctionCheckListId;
                                    chk.Verified_By = model.CheckListVerified_By;
                                    chk.ClearancePaymentId = billId;
                                    chk.CRTD_By = logged_in_user;
                                    chk.CRTD_TS = DateTime.Now;
                                    chk.Status = "Active";
                                    context.tblClearancePaymentCheckDetail.Add(chk);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.DocumentDetail)
                            {
                                tblClearancePaymentDocumentDetail doc = new tblClearancePaymentDocumentDetail();
                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                doc.CRTD_By = logged_in_user;
                                doc.CRTD_TS = DateTime.Now;
                                doc.DocumentActualName = actName;
                                doc.DocumentName = docName;
                                doc.DocumentType = item.DocumentType;
                                doc.Remarks = item.Remarks;
                                doc.ClearancePaymentId = billId;
                                doc.Status = "Active";
                                context.tblClearancePaymentDocumentDetail.Add(doc);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return billId;
                        }
                        else
                        {
                            int billId = model.BillId;
                            var bill = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentId == billId && m.TransactionTypeCode == "CLP" && m.Status == "Open");
                            if (bill != null)
                            {

                                var existsQuery = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentAgentId == model.ClearanceAgentId && m.ReferencePONumber == model.PONumber && m.ClearancePaymentId != billId);
                                if (existsQuery != null)
                                    return -2;
                                bill.AdvancePercentage = 100;
                                bill.BillAmount = billAmount;
                                bill.BillTaxAmount = billTaxAmount;
                                bill.PaymentType = model.PaymentType;
                                bill.InvoiceDate = model.InvoiceDate;
                                bill.InvoiceNumber = model.InvoiceNumber;
                                bill.CommitmentAmount = model.CommitmentAmount;
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.DeductionAmount = model.DeductionAmount;
                                bill.ExpenseAmount = model.ExpenseAmount;
                                bill.ReferencePODate = model.PODate;
                                bill.ReferencePONumber = model.PONumber;
                                bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                bill.BankHeadId = model.BankHeadId;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "CLP";
                                bill.ClearancePaymentAgentId = model.ClearanceAgentId;
                                bill.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblClearancePaymentPODetail.RemoveRange(context.tblClearancePaymentPODetail.Where(m => m.ClearancePaymentId == billId));
                                context.tblClearancePaymentBreakUpDetail.RemoveRange(context.tblClearancePaymentBreakUpDetail.Where(m => m.ClearancePaymentId == billId));
                                context.tblClearancePaymentInvoiceDetail.RemoveRange(context.tblClearancePaymentInvoiceDetail.Where(m => m.ClearancePaymentId == billId));
                                context.SaveChanges();
                                foreach (var item in model.PODetail)
                                {
                                    tblClearancePaymentPODetail po = new tblClearancePaymentPODetail();
                                    po.ClearancePaymentId = billId;
                                    po.Amount = item.TotalAmount;
                                    po.Description = item.Description;
                                    po.TaxAmount = item.TaxPct == 0 || item.TaxPct == null ? 0 : item.TotalAmount * item.TaxPct / 100;
                                    po.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                    po.ItemName = item.ItemName;
                                    po.TaxablePercentage = item.TaxPct;
                                    po.IsTaxEligible = item.IsTaxEligible;
                                    po.CRTD_By = logged_in_user;
                                    po.CRTD_TS = DateTime.Now;
                                    po.Status = "Active";
                                    context.tblClearancePaymentPODetail.Add(po);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.InvoiceBreakDetail)
                                {
                                    if (item.TypeOfServiceOrCategory != null)
                                    {
                                        tblClearancePaymentInvoiceDetail invdetails = new tblClearancePaymentInvoiceDetail();
                                        invdetails.ClearancePaymentId = billId;
                                        invdetails.InvoiceNumber = item.InvoiceNumber;
                                        invdetails.Amount = item.Amount;
                                        invdetails.TaxablePercentage = item.TaxablePercentage;
                                        invdetails.TaxValue = item.TaxValue;
                                        invdetails.Description = item.Description;
                                        invdetails.Amount = item.Amount;
                                        invdetails.GSTIN = item.GSTIN;
                                        invdetails.IsTaxEligible = item.IsTaxEligible;
                                        invdetails.InvoiceDate = item.InvoiceDate;
                                        invdetails.CRTD_By = logged_in_user;
                                        invdetails.TypeOfServiceOrCategory = item.TypeOfServiceOrCategory;
                                        invdetails.IsInterstate = item.IsInterstate;
                                        invdetails.HSNCode = Common.GetTypeOfServiceName(item.TypeOfServiceOrCategory ?? 0);
                                        invdetails.Vendor = item.Vendor;
                                        invdetails.CRTD_TS = DateTime.Now;
                                        invdetails.Status = "Active";
                                        context.tblClearancePaymentInvoiceDetail.Add(invdetails);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.PaymentBreakDetail)
                                {
                                    tblClearancePaymentBreakUpDetail payDet = new tblClearancePaymentBreakUpDetail();
                                    payDet.CategoryId = item.CategoryId;
                                    payDet.UserId = item.UserId;
                                    payDet.ClearancePaymentId = billId;
                                    payDet.Name = item.Name;
                                    payDet.ModeOfPayment = item.ModeOfPayment;
                                    payDet.PaymentAmount = item.PaymentAmount;
                                    payDet.CRTD_By = logged_in_user;
                                    payDet.CRTD_TS = DateTime.Now;
                                    payDet.Status = "Active";
                                    context.tblClearancePaymentBreakUpDetail.Add(payDet);
                                    context.SaveChanges();
                                }

                                context.tblClearancePaymentCommitmentDetail.RemoveRange(context.tblClearancePaymentCommitmentDetail.Where(m => m.ClearancePaymentId == billId));
                                context.SaveChanges();
                                if (model.CommitmentDetail[0].CommitmentDetailId != null)
                                {
                                    foreach (var item in model.CommitmentDetail)
                                    {
                                        if (item.CommitmentDetailId == null)
                                            return -3;
                                        tblClearancePaymentCommitmentDetail commitment = new tblClearancePaymentCommitmentDetail();
                                        commitment.ClearancePaymentId = billId;
                                        commitment.CommitmentDetailId = item.CommitmentDetailId;
                                        commitment.CRTD_By = logged_in_user;
                                        commitment.CRTD_TS = DateTime.Now;
                                        commitment.PaymentAmount = item.PaymentAmount;
                                        commitment.Status = "Active";
                                        context.tblClearancePaymentCommitmentDetail.Add(commitment);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblClearancePaymentDeductionDetail.RemoveRange(context.tblClearancePaymentDeductionDetail.Where(m => m.ClearancePaymentId == billId));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)//(model.GST != "NotEligible" && model.AdvancePercentage != 100)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblClearancePaymentDeductionDetail deduction = new tblClearancePaymentDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ClearancePaymentId = billId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblClearancePaymentDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblClearancePaymentExpenseDetail.RemoveRange(context.tblClearancePaymentExpenseDetail.Where(m => m.ClearancePaymentId == billId));
                                context.SaveChanges();
                                if (model.ExpenseDetail != null)
                                {
                                    foreach (var item in model.ExpenseDetail)
                                    {
                                        tblClearancePaymentExpenseDetail exp = new tblClearancePaymentExpenseDetail();
                                        exp.AccountGroupId = item.AccountGroupId;
                                        exp.AccountHeadId = item.AccountHeadId;
                                        exp.IsJV_f = item.IsJV;
                                        exp.TransactionType = item.TransactionType;
                                        exp.Amount = item.Amount;
                                        exp.ClearancePaymentId = billId;
                                        exp.CRTD_By = logged_in_user;
                                        exp.CRTD_TS = DateTime.Now;
                                        exp.Status = "Active";
                                        context.tblClearancePaymentExpenseDetail.Add(exp);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblClearancePaymentCheckDetail.RemoveRange(context.tblClearancePaymentCheckDetail.Where(m => m.ClearancePaymentId == billId));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblClearancePaymentCheckDetail chk = new tblClearancePaymentCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ClearancePaymentId = billId;
                                        chk.CRTD_By = logged_in_user;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblClearancePaymentCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblClearancePaymentDocumentDetail.Where(x => x.ClearancePaymentId == billId && !arrList.Contains(x.ClearancePaymentDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = logged_in_user;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = logged_in_user;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblClearancePaymentDocumentDetail.FirstOrDefault(m => m.ClearancePaymentDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblClearancePaymentDocumentDetail doc = new tblClearancePaymentDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = logged_in_user;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.ClearancePaymentId = billId;
                                        doc.Status = "Active";
                                        context.tblClearancePaymentDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = logged_in_user;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return billId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        Infrastructure.IOASException.Instance.HandleMe(this, ex);
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        public ClearancePaymentEntryModel GetClearancePaymentDetails(int billId)
        {
            try
            {
                ClearancePaymentEntryModel bill = new ClearancePaymentEntryModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentId == billId);
                    if (query != null)
                    {
                        string poNo = query.ReferencePONumber;
                        int agentId = query.ClearancePaymentAgentId ?? 0;
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.BillNumber = query.BillNumber;
                        bill.ClearanceAgentId = agentId;
                        bill.BillId = query.ClearancePaymentId;
                        bill.AdvancePercentage = Math.Round(query.AdvancePercentage ?? 0);
                        bill.InvoiceDate = query.InvoiceDate;
                        bill.InvoiceNumber = query.InvoiceNumber;
                        bill.PONumber = poNo;
                        bill.PODate = query.ReferencePODate;
                        bill.PaymentType = query.PaymentType;
                        bill.BankHeadId = query.BankHeadId;
                        bill.PartAdvance_f = query.PartAdvance_f ?? false;
                        bill.InclusiveOfTax_f = query.InclusiveOfTax_f ?? false;
                        bill.CheckListVerified_By = query.CheckListVerifiedBy;
                        bill.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        bill.ClearanceAgentTDSDetailId = context.tblClearancePaymentTDSDetail.Where(m => m.ClearancePaymentId == billId && m.Status == "Active").Select(m => m.ClearanceAgentTDSDetailId).ToArray();
                        bill.PaymentTDSAmount = query.PaymentTDSAmount;
                        bill.PODetail = (from po in context.tblClearancePaymentPODetail
                                         where po.ClearancePaymentId == billId && po.Status == "Active"
                                         select new
                                         {
                                             po.TaxablePercentage,
                                             po.Description,
                                             po.Amount,
                                             po.IsTaxEligible,
                                             po.ItemName,
                                             po.TypeOfServiceOrCategory
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new BillPODetailModel()
                                              {
                                                  TaxPct = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                  Description = x.Description,
                                                  ItemName = x.ItemName,
                                                  TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                  TotalAmount = x.Amount,
                                                  IsTaxEligible = x.IsTaxEligible ?? false
                                              }).ToList();

                        bill.PaymentBreakDetail = (from e in context.tblClearancePaymentBreakUpDetail
                                                   where e.ClearancePaymentId == billId && e.Status == "Active"
                                                   select new
                                                   {
                                                       e.CLPBreakUpDetailId,
                                                       e.CategoryId,
                                                       e.UserId,
                                                       e.Name,
                                                       e.ModeOfPayment,
                                                       e.PaymentAmount
                                                   })
                                                                      .AsEnumerable()
                                                                      .Select((x) => new PaymentBreakUpDetailModel()
                                                                      {
                                                                          PaymentBreakUpDetailId = x.CLPBreakUpDetailId,
                                                                          CategoryId = x.CategoryId,
                                                                          UserId = x.UserId ?? 0,
                                                                          Name = x.Name,
                                                                          ModeOfPayment = x.ModeOfPayment,
                                                                          PaymentAmount = x.PaymentAmount
                                                                      }).ToList();

                        bill.InvoiceBreakDetail = (from d in context.tblClearancePaymentInvoiceDetail
                                                   where d.ClearancePaymentId == billId && d.Status == "Active"
                                                   select new
                                                   {
                                                       d.InvoiceNumber,
                                                       d.TaxablePercentage,
                                                       d.TaxValue,
                                                       d.Description,
                                                       d.Amount,
                                                       d.GSTIN,
                                                       d.InvoiceDate,
                                                       d.IsTaxEligible,
                                                       d.IsInterstate,
                                                       d.HSNCode,
                                                       d.TypeOfServiceOrCategory,
                                                       d.Vendor
                                                   })
                                                                      .AsEnumerable()
                                                                      .Select((x) => new InvoiceBreakUpDetailModel()
                                                                      {
                                                                          InvoiceNumber = x.InvoiceNumber,
                                                                          TaxablePercentage = x.TaxablePercentage == null ? 0 : Convert.ToInt32(x.TaxablePercentage),
                                                                          TaxValue = x.TaxValue,
                                                                          Description = x.Description,
                                                                          Amount = x.Amount,
                                                                          GSTIN = x.GSTIN,
                                                                          InvoiceDate = x.InvoiceDate,
                                                                          IsTaxEligible = x.IsTaxEligible ?? false,
                                                                          IsInterstate = x.IsInterstate ?? false,
                                                                          HSNCode = x.HSNCode,
                                                                          TypeOfServiceOrCategory = x.TypeOfServiceOrCategory,
                                                                          Vendor = x.Vendor
                                                                      }).ToList();

                        bill.CommitmentDetail = (from c in context.tblClearancePaymentCommitmentDetail
                                                 join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                 join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                 join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                 join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                 orderby det.ComitmentDetailId descending
                                                 where c.ClearancePaymentId == billId && c.Status == "Active"
                                                 select new BillCommitmentDetailModel()
                                                 {
                                                     CommitmentDetailId = c.CommitmentDetailId,
                                                     CommitmentId = com.CommitmentId,
                                                     CommitmentNumber = com.CommitmentNumber,
                                                     ProjectNumber = p.ProjectNumber,
                                                     ProjectId = com.ProjectId,
                                                     HeadName = head.HeadName,
                                                     AvailableAmount = det.BalanceAmount ?? 0,
                                                     PaymentAmount = c.PaymentAmount,
                                                     BillCommitmentDetailId = c.ClearancePaymentCommitmentDetailId
                                                 }).ToList();

                        bill.ExpenseDetail = (from e in context.tblClearancePaymentExpenseDetail
                                              where e.ClearancePaymentId == billId && e.Status == "Active"
                                              select new
                                              {
                                                  e.AccountHeadId,
                                                  e.Amount,
                                                  e.AccountGroupId,
                                                  e.ClearancePaymentExpenseDetailId,
                                                  e.TransactionType,
                                                  e.IsJV_f
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.ClearancePaymentExpenseDetailId,
                                                  TransactionType = x.TransactionType,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblClearancePaymentDeductionDetail
                                                join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.ClearancePaymentId == billId && d.Status == "Active"
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.ClearancePaymentDeductionDetailId,
                                                    Amount = d.Amount,
                                                    DeductionHeadId = d.DeductionHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();

                        bill.CheckListDetail = (from ck in context.tblClearancePaymentCheckDetail
                                                join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                where ck.ClearancePaymentId == billId && ck.Status == "Active"
                                                select new CheckListModel()
                                                {
                                                    CheckList = chkf.CheckList,
                                                    FunctionCheckListId = ck.FunctionCheckListId,
                                                    IsChecked = true
                                                }).ToList();
                        bill.DocumentDetail = (from d in context.tblClearancePaymentDocumentDetail
                                               where d.ClearancePaymentId == billId && d.Status == "Active"
                                               select new AttachmentDetailModel()
                                               {
                                                   DocumentActualName = d.DocumentActualName,
                                                   DocumentDetailId = d.ClearancePaymentDocumentDetailId,
                                                   DocumentName = d.DocumentName,
                                                   DocumentPath = "~/Content/OtherDocuments",
                                                   DocumentType = d.DocumentType,
                                                   Remarks = d.Remarks
                                               }).ToList();
                        bill.ClearanceAgentTDSDetailId = context.tblClearancePaymentTDSDetail.Where(d => d.ClearancePaymentId == billId && d.Status == "Active").Select(m => m.ClearanceAgentTDSDetailId).ToArray();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new ClearancePaymentEntryModel();
            }
        }
        public ClearancePaymentAgentMasterViewModel GetClearanceAgentDetails(int agentId)
        {
            try
            {
                ClearancePaymentAgentMasterViewModel model = new ClearancePaymentAgentMasterViewModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearanceAgentMaster.FirstOrDefault(m => m.ClearanceAgentId == agentId && m.Status == "Active");
                    if (query != null)
                    {
                        model.PAN = query.PAN;
                        model.GSTIN = query.GSTIN;
                        model.Address = query.Address;
                        model.StateCode = query.StateCode ?? 0;
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                return new ClearancePaymentAgentMasterViewModel();
            }
        }
        public List<BillHistoryModel> GetCLPBillHistoryList(int agentId)
        {
            try
            {

                List<BillHistoryModel> list = new List<BillHistoryModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblClearancePaymentEntry
                            orderby b.ReferencePONumber descending
                            where b.Status != "InActive" && b.ClearancePaymentAgentId == agentId
                            select new
                            {
                                b.BillNumber,
                                b.CRTD_TS,
                                b.BillAmount,
                                b.BillTaxAmount,
                                b.ExpenseAmount,
                                b.DeductionAmount,
                                b.ReferencePONumber,
                                b.TransactionTypeCode,
                                b.InvoiceNumber,
                                b.InvoiceDate
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new BillHistoryModel()
                                 {
                                     SlNo = index + 1,
                                     BillNumber = x.BillNumber,
                                     BillDate = String.Format("{0:s}", x.CRTD_TS),
                                     POAmount = x.BillAmount + x.BillTaxAmount,
                                     BillAmount = x.ExpenseAmount + (x.DeductionAmount ?? 0),
                                     PONumber = x.ReferencePONumber,
                                     TransactionType = x.TransactionTypeCode,
                                     InvoiceNumber = x.InvoiceNumber,
                                     InvoiceDate = String.Format("{0:s}", x.InvoiceDate),
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<BillHistoryModel>();
            }
        }

        public bool UpdateCLPStatusOnBookCommitment(int clearancePaymentId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentId == clearancePaymentId && m.Status == "Open" && m.TransactionTypeCode == "TMP");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public List<ClearancePaymentEntryModel> GetClearancePaymentList(string typeCode)
        {
            try
            {

                List<ClearancePaymentEntryModel> list = new List<ClearancePaymentEntryModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblClearancePaymentEntry
                            join v in context.tblClearanceAgentMaster on b.ClearancePaymentAgentId equals v.ClearanceAgentId
                            orderby b.ClearancePaymentId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == typeCode
                            select new
                            {
                                b.ClearancePaymentId,
                                b.BillNumber,
                                v.Name,
                                b.CRTD_TS,
                                b.BillAmount,
                                b.BillTaxAmount,
                                b.ExpenseAmount,
                                b.DeductionAmount,
                                b.Status,
                                b.PartAdvance_f
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ClearancePaymentEntryModel()
                                 {
                                     SlNo = index + 1,
                                     BillId = x.ClearancePaymentId,
                                     BillNumber = x.BillNumber,
                                     ClearanceAgentName = x.Name,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     // BillAmount = x.BillAmount + x.BillTaxAmount,
                                     CreditorAmount = x.BillAmount + (x.BillTaxAmount ?? 0),
                                     Status = x.Status,
                                     PartAdvance_f = x.PartAdvance_f ?? false
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ClearancePaymentEntryModel>();
            }
        }

        public bool ClearancePaymentApprove(int clearancepaymentid, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblClearancePaymentEntry.FirstOrDefault(m => m.ClearancePaymentId == clearancepaymentid && m.Status == "Open" && m.TransactionTypeCode == "CLP");
                    if (query != null)
                    {
                        if (!getCLPBOAmodeldetails(clearancepaymentid))
                            return false;
                        else if (!CLPBackEndEntry(clearancepaymentid, logged_in_user))
                            return false;
                        query.Status = "Active";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool CLPCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblClearancePaymentCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.ClearancePaymentId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getCLPBOAmodeldetails(int clearancepaymentid)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblClearancePaymentEntry.SingleOrDefault(m => m.ClearancePaymentId == clearancepaymentid);
                    if (clearancepaymentid > 0)
                    {
                        decimal netAmt = (billQuery.BillAmount ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("CJV");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.TempVoucherNumber = billQuery.BillNumber;
                        model.RefNumber = billQuery.BillNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblClearancePaymentExpenseDetail
                                  where exp.ClearancePaymentId == clearancepaymentid && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblClearancePaymentDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.ClearancePaymentId == clearancepaymentid && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 1,
                            SubLedgerId = billQuery.ClearancePaymentAgentId
                        });
                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool CLPBackEndEntry(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblClearancePaymentEntry.SingleOrDefault(m => m.ClearancePaymentId == id);
                    if (billQuery != null)
                    {
                        //decimal invVal = billQuery.ExpenseAmount ?? 0;
                        //decimal invTaxVal = billQuery.DeductionAmount ?? 0;
                        decimal ttlInvVal = context.tblClearancePaymentExpenseDetail.Where(m => m.ClearancePaymentId == id && m.IsJV_f != true && m.TransactionType == "Credit").Sum(m => m.Amount) ?? 0; //invVal + invTaxVal;
                        decimal TDSPayIT = context.tblClearancePaymentExpenseDetail.Where(m => m.ClearancePaymentId == id && m.AccountHeadId == 135 && m.AccountGroupId == 15).Select(m => m.Amount).FirstOrDefault() ?? 0;
                        decimal TDSPayGST = context.tblClearancePaymentExpenseDetail.Where(m => m.ClearancePaymentId == id && m.AccountHeadId == 137 && m.AccountGroupId == 16).Select(m => m.Amount).FirstOrDefault() ?? 0;
                        decimal ttlTDSPayable = TDSPayIT + TDSPayGST;
                        bool interState = Common.CheckClearanceAgentIsInterState(billQuery.ClearancePaymentAgentId ?? 0);
                        decimal advAmt = 0;
                        decimal projCreditor = ttlInvVal - ttlTDSPayable;
                        //if (billQuery.TransactionTypeCode == "STM")
                        //{
                        //    advAmt = context.tblBillEntry.Where(m => m.PONumber == billQuery.PONumber && m.TransactionTypeCode == "ADV").Select(m => m.ExpenseAmount).FirstOrDefault() ?? 0;
                        //}
                        decimal bankAC = ttlInvVal - advAmt - ttlTDSPayable;
                        decimal ttlDr = projCreditor + ttlTDSPayable;
                        decimal ttlCr = bankAC + advAmt + ttlTDSPayable;
                        if (ttlDr != ttlCr)
                            return false;

                        List<tblClearancePaymentTransactionDetail> transList = new List<tblClearancePaymentTransactionDetail>();

                        transList.Add(new tblClearancePaymentTransactionDetail()
                        {
                            AccountGroupId = 19,
                            AccountHeadId = 51,//Project Creditors
                            TransactionType = "Debit",
                            Amount = projCreditor,
                            IsJV_f = false,
                            ClearancePaymentId = id,
                            CRTD_By = loggedInUser,
                            CRTD_TS = DateTime.Now,
                            Status = "Active",
                        });

                        transList.Add(new tblClearancePaymentTransactionDetail()
                        {
                            AccountGroupId = 38,
                            AccountHeadId = billQuery.BankHeadId ?? 20,//Bank account
                            TransactionType = "Credit",
                            Amount = bankAC,
                            IsJV_f = false,
                            ClearancePaymentId = id,
                            CRTD_By = loggedInUser,
                            CRTD_TS = DateTime.Now,
                            Status = "Active",
                        });

                        if (TDSPayIT > 0)
                        {
                            transList.Add(new tblClearancePaymentTransactionDetail()
                            {
                                AccountGroupId = 15,
                                AccountHeadId = 39,//TDS on Contract  (94C)
                                TransactionType = "Credit",
                                Amount = TDSPayIT,
                                IsJV_f = false,
                                ClearancePaymentId = id,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });

                            transList.Add(new tblClearancePaymentTransactionDetail()
                            {
                                AccountGroupId = 15,
                                AccountHeadId = 135,//TDS Payable Income Tax
                                TransactionType = "Debit",
                                Amount = TDSPayIT,
                                IsJV_f = false,
                                ClearancePaymentId = id,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });
                        }
                        if (TDSPayGST > 0)
                        {
                            if (interState)
                                transList.Add(new tblClearancePaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 46,//IGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST,
                                    IsJV_f = false,
                                    ClearancePaymentId = id,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            else
                            {
                                transList.Add(new tblClearancePaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 44,//CGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST / 2,
                                    IsJV_f = false,
                                    ClearancePaymentId = id,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                                transList.Add(new tblClearancePaymentTransactionDetail()
                                {
                                    AccountGroupId = 16,
                                    AccountHeadId = 45,//SGST - TDS
                                    TransactionType = "Credit",
                                    Amount = TDSPayGST / 2,
                                    IsJV_f = false,
                                    ClearancePaymentId = id,
                                    CRTD_By = loggedInUser,
                                    CRTD_TS = DateTime.Now,
                                    Status = "Active",
                                });
                            }
                            transList.Add(new tblClearancePaymentTransactionDetail()
                            {
                                AccountGroupId = 16,
                                AccountHeadId = 137,//TDS Payable GST
                                TransactionType = "Debit",
                                Amount = TDSPayGST,
                                IsJV_f = false,
                                ClearancePaymentId = id,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });
                        }
                        if (advAmt > 0)
                        {
                            transList.Add(new tblClearancePaymentTransactionDetail()
                            {
                                AccountGroupId = 36,
                                AccountHeadId = 12,//Vendor Advance
                                TransactionType = "Credit",
                                Amount = advAmt,
                                IsJV_f = false,
                                ClearancePaymentId = id,
                                CRTD_By = loggedInUser,
                                CRTD_TS = DateTime.Now,
                                Status = "Active",
                            });
                        }
                        context.tblClearancePaymentTransactionDetail.AddRange(transList);
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Bank Imprest Payment
        #region Imprest Master

        public List<ImprestPaymentModel> GetImprestPaymentList()
        {
            List<ImprestPaymentModel> ECard = new List<ImprestPaymentModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from IP in context.tblIMPUserDetails
                                 // join IC in context.tblIMPUserDetails on IP.IMPUserDetailsId equals IC.IMPUserDetailsId
                                 // join P in context.tblProject on IP.PIId equals P.PIName
                             join user in context.vwFacultyStaffDetails on IP.PIUserId equals user.UserId
                             orderby IP.IMPUserDetailsId descending
                             where ((IP.Status != "Inactive" || IP.Status != "Rejected"))
                             select new { IP, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        ECard.Add(new ImprestPaymentModel()
                        {
                            Sno = i + 1,
                            PIId = query[i].IP.PIUserId,
                            //Projecttitle = query[i].P.ProjectTitle,
                            //ProjectNumber = query[i].P.ProjectNumber,
                            // ImprestProjectDetailsId = query[i].IP.ImprestPaymentDetailsId,
                            ImprestcardId = query[i].IP.IMPUserDetailsId,
                            ImprestcardNumber = query[i].IP.ImprestCardNumber,
                            ImprestNumber = query[i].IP.ImprestNumber,
                            ImprestBankACNumber = query[i].IP.ImprestACNumber,
                            NameofPI = query[i].FirstName,
                            TotalValueofCard = query[i].IP.ImprestTotalValue,
                            Status = query[i].IP.Status,
                            // IsRecoupmentpending = query[i].IP.Is_Recoupmentpending
                        });
                    }
                }
            }
            return ECard;
        }

        public int CreateImprestPayment(ImprestPaymentModel model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int Imprestcardid = 0;

                        // Existing Card -> New Project entry and Edit Card details
                        if (model.ImprestcardId > 0)
                        {

                            // var query = context.tblSBIECardDetails.FirstOrDefault(m => m.SBIPrepaidCardDetailsId == model.SBIEcardId);
                            var query = (from EC in context.tblIMPUserDetails
                                         join ECP in context.tblImprestPaymentDetails on EC.IMPUserDetailsId equals ECP.IMPUserDetailsId
                                         where EC.IMPUserDetailsId == model.ImprestcardId && ECP.PIId == model.PIId && ECP.ImprestPaymentDetailsId == model.ImprestProjectDetailsId
                                         select new { EC, ECP }).SingleOrDefault();

                            var cardquery = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == model.ImprestcardId);
                            // Existing Card new enhance imprest Entry
                            if (query == null)
                            {

                                int? existingimpreststotal = cardquery.NoofImprests;
                                int? newimpreststotal = existingimpreststotal + 1;
                                decimal? totalcardvalue = 0;
                                if (cardquery != null)
                                {
                                    totalcardvalue = cardquery.ImprestTotalValue;
                                }
                                var totalvalue = totalcardvalue + model.EnhancedImprestValue;
                                // cardquery.CardDocPath = docname;
                                cardquery.ImprestCardNumber = model.ImprestcardNumber;
                                cardquery.ImprestACNumber = model.ImprestBankACNumber;

                                cardquery.PIMobileNumber = model.PIMobile;
                                cardquery.PIEmailId = model.PIEmail;

                                cardquery.NoofImprests = newimpreststotal;
                                cardquery.ImprestTotalValue = totalvalue;
                                cardquery.UpdtTS = DateTime.Now;
                                cardquery.UpdtUserId = LoggedInUser;
                                cardquery.ImprestBank = model.SelBank;

                                context.SaveChanges();
                                Imprestcardid = model.ImprestcardId;

                                tblImprestPaymentDetails project = new tblImprestPaymentDetails();
                                project.IMPUserDetailsId = cardquery.IMPUserDetailsId;
                                project.PIId = model.PIId;
                                project.AmountAllocated = model.EnhancedImprestValue;
                                project.Is_ImprestEnhance = false;
                                project.CrtdTS = DateTime.Now;
                                project.CrtdUserId = LoggedInUser;
                                project.Status = "Open";
                                project.Is_Recoupmentpending = true;

                                project.Source = model.Source;
                                project.SourceEmailDate = model.SourceEmailDate;
                                project.SourceReferenceNumber = model.SourceReferenceNumber;
                                project.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblImprestPaymentDetails.Add(project);
                                context.SaveChanges();
                                Imprestcardid = Convert.ToInt32(project.IMPUserDetailsId);
                                int Cardprojectdetailsid = Convert.ToInt32(project.ImprestPaymentDetailsId);

                                context.tblImprestDeductionDetail.RemoveRange(context.tblImprestDeductionDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblImprestDeductionDetail deduction = new tblImprestDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ImprestUserDetailsId = Imprestcardid;
                                            deduction.ImprestDetailsId = Cardprojectdetailsid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblImprestDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblImprestExpenseDetail.RemoveRange(context.tblImprestExpenseDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestExpenseDetail exp = new tblImprestExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.ImprestDetailsId = Cardprojectdetailsid;
                                    exp.ImprestUserId = Imprestcardid;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblImprestCheckDetail.RemoveRange(context.tblImprestCheckDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestCheckDetail chk = new tblImprestCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestDetailsId = Cardprojectdetailsid;
                                        chk.ImprestUserId = Imprestcardid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.DocumentDetail.Count() > 0)
                                {
                                    foreach (var item in model.DocumentDetail)
                                    {
                                        var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                        if (docQuery == null)
                                        {
                                            tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                            doc.CRTD_By = LoggedInUser;
                                            doc.CRTD_TS = DateTime.Now;
                                            doc.DocumentActualName = actName;
                                            doc.DocumentName = docName;
                                            doc.DocumentType = item.DocumentType;
                                            doc.Remarks = item.Remarks;
                                            doc.ImprestDetailsId = Cardprojectdetailsid;
                                            doc.ImprestUserDetailsId = Imprestcardid;
                                            doc.IsImprestDoc_f = true;
                                            // doc.ProjectId = model.ProjectID;
                                            doc.Status = "Active";
                                            context.tblImprestDocumentDetail.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                            }
                            // Existing Card update Entry
                            if (query != null)
                            {
                                var docquery = (from doc in context.tblImprestDocumentDetail
                                                where doc.ImprestUserDetailsId == query.ECP.IMPUserDetailsId
                                                select doc).ToList();
                                decimal? totalcardvalue = 0;
                                decimal? currentprojectallocation = 0;
                                decimal? cardvalue = 0;
                                decimal? diff = 0;
                                if (cardquery != null)
                                {
                                    cardvalue = cardquery.ImprestTotalValue;
                                    currentprojectallocation = query.ECP.AmountAllocated;
                                    diff = cardvalue - currentprojectallocation;
                                    if (model.ImprestValue > 0)
                                    {
                                        totalcardvalue = diff + model.ImprestValue;
                                    }
                                    else if (model.EnhancedImprestValue > 0)
                                    {
                                        totalcardvalue = diff + model.EnhancedImprestValue;
                                    }
                                }
                                query.EC.ImprestCardNumber = model.ImprestcardNumber;
                                query.EC.ImprestACNumber = model.ImprestBankACNumber;
                                query.EC.ImprestTotalValue = totalcardvalue;

                                query.EC.PIMobileNumber = model.PIMobile;
                                query.EC.PIEmailId = model.PIEmail;

                                query.EC.ImprestBank = model.SelBank;

                                query.EC.UpdtTS = DateTime.Now;
                                query.EC.UpdtUserId = LoggedInUser;
                                context.SaveChanges();
                                if (model.ImprestValue > 0)
                                {
                                    query.ECP.AmountAllocated = model.ImprestValue;
                                }
                                else if (model.EnhancedImprestValue > 0)
                                {
                                    query.ECP.AmountAllocated = model.EnhancedImprestValue;
                                }
                                query.ECP.CheckListVerifiedBy = model.CheckListVerified_By;
                                query.ECP.UpdtTS = DateTime.Now;
                                query.ECP.UpdtUserId = LoggedInUser;
                                query.ECP.Source = model.Source;
                                query.ECP.SourceEmailDate = model.SourceEmailDate;
                                query.ECP.SourceReferenceNumber = model.SourceReferenceNumber;
                                context.SaveChanges();
                                Imprestcardid = Convert.ToInt32(query.ECP.IMPUserDetailsId);
                                int Cardprojectdetailsid = Convert.ToInt32(query.ECP.ImprestPaymentDetailsId);

                                context.tblImprestDeductionDetail.RemoveRange(context.tblImprestDeductionDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblImprestDeductionDetail deduction = new tblImprestDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ImprestDetailsId = Cardprojectdetailsid;
                                            deduction.ImprestUserDetailsId = Imprestcardid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblImprestDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblImprestExpenseDetail.RemoveRange(context.tblImprestExpenseDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestExpenseDetail exp = new tblImprestExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.ImprestDetailsId = Cardprojectdetailsid;
                                    exp.ImprestUserId = Imprestcardid;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblImprestCheckDetail.RemoveRange(context.tblImprestCheckDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestCheckDetail chk = new tblImprestCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestDetailsId = Cardprojectdetailsid;
                                        chk.ImprestUserId = Imprestcardid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }

                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblImprestDocumentDetail.Where(x => x.ImprestDetailsId == Cardprojectdetailsid && !arrList.Contains(x.ImprestDocumentDetailId) && x.IsImprestDoc_f == true && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.ImprestDetailsId = Cardprojectdetailsid;
                                        doc.ImprestUserDetailsId = Imprestcardid;
                                        doc.IsImprestDoc_f = true;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblImprestDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                return -2;
                            }
                        }
                        // New Card and New Project entry
                        if (model.ImprestcardId == 0)
                        {
                            tblIMPUserDetails Card = new tblIMPUserDetails();
                            Card.ImprestCardNumber = model.ImprestcardNumber;
                            Card.ImprestACNumber = model.ImprestBankACNumber;
                            var totalvalue = model.ImprestValue;
                            Card.ImprestTotalValue = totalvalue;
                            Card.NoofImprests = 1;
                            Card.PIUserId = model.PIId;

                            Card.PIMobileNumber = model.PIMobile;
                            Card.PIEmailId = model.PIEmail;

                            Card.CrtdTS = DateTime.Now;
                            Card.CrtdUserId = LoggedInUser;
                            Card.ImprestBank = model.SelBank;
                            Card.TransactionTypeCode = "IMP";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getImprestId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.ImprestPaymentNumber = "IMP/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.ImprestPaymentNumber = "IMP/" + FinYear + "/" + "000001";
                            }
                            Card.ImprestNumber = model.ImprestPaymentNumber;
                            //   Card.CardValidTill = DateTime.Parse(model.CardExpryDte);                                            
                            Card.Status = "Open";
                            context.tblIMPUserDetails.Add(Card);
                            context.SaveChanges();
                            int CardDetailsId = Card.IMPUserDetailsId;

                            if (CardDetailsId > 0)
                            {
                                tblImprestPaymentDetails project = new tblImprestPaymentDetails();
                                project.IMPUserDetailsId = CardDetailsId;
                                project.PIId = model.PIId;
                                project.AmountAllocated = model.ImprestValue;
                                project.Is_ImprestEnhance = false;
                                project.CrtdTS = DateTime.Now;
                                project.CrtdUserId = LoggedInUser;
                                project.Status = "Open";
                                project.Is_Recoupmentpending = true;
                                project.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    project.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 1 || model.Source == 2)
                                {
                                    project.SourceEmailDate = model.SourceEmailDate;
                                }

                                project.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.tblImprestPaymentDetails.Add(project);
                                context.SaveChanges();
                                Imprestcardid = CardDetailsId;
                                var CardProjectId = project.ImprestPaymentDetailsId;

                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblImprestDeductionDetail deduction = new tblImprestDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ImprestDetailsId = CardProjectId;
                                            deduction.ImprestUserDetailsId = Imprestcardid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblImprestDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestExpenseDetail exp = new tblImprestExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.ImprestDetailsId = CardProjectId;
                                    exp.ImprestUserId = Imprestcardid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestCheckDetail chk = new tblImprestCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestDetailsId = CardProjectId;
                                        chk.ImprestUserId = Imprestcardid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.DocumentDetail.Count() > 0)
                                {

                                    foreach (var item in model.DocumentDetail)
                                    {
                                        var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                        if (docQuery == null)
                                        {
                                            tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                            doc.CRTD_By = LoggedInUser;
                                            doc.CRTD_TS = DateTime.Now;
                                            doc.DocumentActualName = actName;
                                            doc.DocumentName = docName;
                                            doc.DocumentType = item.DocumentType;
                                            doc.Remarks = item.Remarks;
                                            doc.ImprestUserDetailsId = Imprestcardid;
                                            doc.ImprestDetailsId = CardProjectId;
                                            doc.IsImprestDoc_f = true;
                                            doc.Status = "Active";
                                            context.tblImprestDocumentDetail.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        transaction.Commit();
                        return Imprestcardid;
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public ImprestPaymentModel EditImprestPaymentDetails(int PIId, int ImpID)
        {
            try
            {
                ImprestPaymentModel model = new ImprestPaymentModel();

                using (var context = new IOASDBEntities())

                {
                    // var projectid = ProjectID;
                    var query = (from user in context.vwFacultyStaffDetails
                                 where user.UserId == PIId
                                 select user).FirstOrDefault();
                    var carddetails = (from EC in context.tblIMPUserDetails
                                       where EC.PIUserId == PIId && EC.IMPUserDetailsId == ImpID
                                       select EC).SingleOrDefault();
                    var Cardpjctdetails = (from EC in context.tblImprestPaymentDetails
                                           where EC.IMPUserDetailsId == carddetails.IMPUserDetailsId
                                           select EC).FirstOrDefault();
                    var pjctlist = (from EC in context.tblImprestPaymentDetails
                                    where EC.IMPUserDetailsId == carddetails.IMPUserDetailsId
                                    select EC).ToList();
                    decimal? impvalue = 0;
                    decimal? availablecardvalue = 0;
                    decimal? totalvalue = 0;
                    if (pjctlist.Count() > 0)
                    {
                        var pjctimpenhance = (from EC in context.tblImprestPaymentDetails
                                              where EC.IMPUserDetailsId == carddetails.IMPUserDetailsId && EC.Status == "Active"
                                              orderby EC.ImprestPaymentDetailsId descending
                                              select EC).FirstOrDefault();
                        if (pjctimpenhance != null)
                        {
                            impvalue = pjctimpenhance.AmountAllocated;
                        }

                        availablecardvalue = carddetails.ImprestTotalValue - impvalue;
                        totalvalue = carddetails.ImprestTotalValue;
                    }
                    else if (pjctlist.Count() == 0 || pjctlist.Count() == 1)
                    {
                        impvalue = carddetails.ImprestTotalValue;
                    }
                    //int? finyearid = query.P.FinancialYear;
                    //var finyear = (from yr in context.tblFinYear
                    //               where yr.FinYearId == finyearid
                    //               select yr).SingleOrDefault();
                    if (query != null)
                    {

                        //model.ProjectNumber = query.P.ProjectNumber;
                        //model.ProjectID = query.P.ProjectId;
                        //model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.DepartmentName;
                        // model.CurrentFinancialYear = finyear.Year;
                        model.PIId = PIId;
                        model.NameofPI = query.FirstName;
                        var count = pjctlist.Count();

                        model.TotalValueofCard = availablecardvalue;
                        model.TotalImprestValue = totalvalue;

                        model.ImprestValue = carddetails.ImprestTotalValue;
                        model.CurrentImprestValue = carddetails.ImprestTotalValue;



                        model.TotalImprests = carddetails.NoofImprests;

                        model.ImprestcardId = carddetails.IMPUserDetailsId;
                        // model.ImprestProjectDetailsId = Cardpjctdetails.ImprestPaymentDetailsId;
                        model.ImprestcardNumber = carddetails.ImprestCardNumber;
                        model.ImprestNumber = carddetails.ImprestNumber;
                        model.SelBank = carddetails.ImprestBank;
                        model.ImprestBankACNumber = carddetails.ImprestACNumber;
                        model.TotalValueofCard = carddetails.ImprestTotalValue;
                        model.Source = Cardpjctdetails.Source;
                        if (Cardpjctdetails.Source == 1)
                        {
                            model.SourceReferenceNumber = Cardpjctdetails.SourceReferenceNumber;
                        }
                        else if (Cardpjctdetails.Source == 3)
                        {
                            int refId = Cardpjctdetails.SourceReferenceNumber ?? 0;
                            model.SourceReferenceNumber = refId;
                            model.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (Cardpjctdetails.Source == 2)
                            model.SourceEmailDate = Cardpjctdetails.SourceEmailDate;

                        model.PIFirstname = carddetails.PIFirstName;
                        // model.PIGender = carddetails.Gender;
                        model.PIId = carddetails.PIUserId;

                        model.PIEmail = carddetails.PIEmailId;
                        model.PIMobile = carddetails.PIMobileNumber;
                        //model.DateOfBirth = carddetails.Dateofbirth;
                        model.CheckListVerified_By = Cardpjctdetails.CheckListVerifiedBy;
                        model.CheckListVerifierName = Common.GetUserFirstName(Cardpjctdetails.CheckListVerifiedBy ?? 0);

                        model.CreditorType = "PI";
                        model.CreditorAmount = Cardpjctdetails.AmountAllocated;
                        //  var imprestdetailsId = Cardpjctdetails.ImprestPaymentDetailsId;
                        var imprestcardId = Cardpjctdetails.IMPUserDetailsId;


                        var trans = (from e in context.tblImprestExpenseDetail
                                     where e.ImprestUserId == imprestcardId && e.Status == "Active"
                                     select e).FirstOrDefault();
                        var imppjctid = trans.ImprestDetailsId;
                        model.ImprestProjectDetailsId = imppjctid ?? 0;
                        //model.ExpenseDetail 
                        model.ExpenseDetail = (from e in context.tblImprestExpenseDetail
                                               where e.ImprestDetailsId == imppjctid && e.Status == "Active"
                                               select new
                                               {
                                                   e.AccountHeadId,
                                                   e.Amount,
                                                   e.AccountGroupId,
                                                   e.ImprestExpenseDetailId,
                                                   e.TransactionType,
                                                   e.IsJV_f
                                               })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.ImprestExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        model.DeductionDetail = (from d in context.tblImprestDeductionDetail
                                                 join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                 join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                 join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                 where d.ImprestDetailsId == imppjctid && d.Status == "Active"
                                                 select new BillDeductionDetailModel()
                                                 {
                                                     AccountGroupId = d.AccountGroupId,
                                                     BillDeductionDetailId = d.ImprestDeductionDetailId,
                                                     Amount = d.Amount,
                                                     DeductionHeadId = d.DeductionHeadId,
                                                     AccountGroup = g.AccountGroup,
                                                     DeductionHead = hd.AccountHead
                                                 }).ToList();

                        model.CheckListDetail = (from ck in context.tblImprestCheckDetail
                                                 join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                 where ck.ImprestDetailsId == imppjctid && ck.Status == "Active"
                                                 select new CheckListModel()
                                                 {
                                                     CheckList = chkf.CheckList,
                                                     FunctionCheckListId = ck.FunctionCheckListId,
                                                     IsChecked = true
                                                 }).ToList();
                        model.DocumentDetail = (from d in context.tblImprestDocumentDetail
                                                where d.ImprestDetailsId == imppjctid && d.Status == "Active"
                                                select new AttachmentDetailModel()
                                                {
                                                    DocumentActualName = d.DocumentActualName,
                                                    DocumentDetailId = d.ImprestDocumentDetailId,
                                                    DocumentName = d.DocumentName,
                                                    DocumentPath = "~/Content/OtherDocuments",
                                                    DocumentType = d.DocumentType,
                                                    Remarks = d.Remarks
                                                }).ToList();

                        List<ImprestProjectListModel> Project = new List<ImprestProjectListModel>();
                        List<ImprestListModel> Imprest = new List<ImprestListModel>();
                        var Query = (from pro in context.tblProject
                                     join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                     where pro.PIName == PIId
                                     select new { U, pro }).ToList();
                        var PIquery = (from U in context.vwFacultyStaffDetails
                                       where U.UserId == PIId
                                       select U).FirstOrDefault();
                        var cardquery = (from U in context.tblIMPUserDetails
                                         where U.PIUserId == PIId
                                         select U).FirstOrDefault();
                        Nullable<Decimal> totalprojectvalue = 0;
                        Nullable<Decimal> totalimprestvalue = 0;
                        Nullable<Decimal> totalrecoupvalue = 0;
                        if (Query.Count() > 0)
                        {

                            int?[] _projecttype = new int?[Query.Count];
                            string[] _pjcttype = new string[Query.Count];
                            Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[Query.Count];

                            for (int i = 0; i < Query.Count(); i++)
                            {
                                _projecttype[i] = Query[i].pro.ProjectType;
                                _sanctionvalue[i] = Convert.ToDecimal(Query[i].pro.SanctionValue);
                                totalprojectvalue += _sanctionvalue[i];
                                var projecttype = _projecttype[i];
                                var codecontrol = (from cc in context.tblCodeControl
                                                   where cc.CodeValAbbr == projecttype && cc.CodeName == "Projecttype"
                                                   select cc).FirstOrDefault();
                                _pjcttype[i] = codecontrol.CodeValDetail;
                                Project.Add(new ImprestProjectListModel()
                                {
                                    PIProjectId = Query[i].pro.ProjectId,
                                    SelProjecttype = Convert.ToInt32(Query[i].pro.ProjectType),
                                    PIProjectNumber = Query[i].pro.ProjectNumber,
                                    PIProjectType = codecontrol.CodeValDetail,
                                    PIProjectSanctionValue = Convert.ToDecimal(Query[i].pro.SanctionValue),
                                    //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                                });

                            }

                            model.TotalProjectsValue = totalprojectvalue;

                            var imphistory = (from imp in context.tblImprestPaymentDetails
                                              where imp.PIId == PIId
                                              select imp).ToList();
                            var recouphistory = (from rec in context.tblImprestRecoupment
                                                 where rec.PIId == PIId
                                                 select rec).ToList();
                            if (imphistory.Count() > 0)
                            {
                                int?[] _imprestid = new int?[imphistory.Count];
                                string[] _type = new string[imphistory.Count];
                                Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];

                                for (int i = 0; i < imphistory.Count(); i++)
                                {
                                    _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                                    totalimprestvalue += _amount[i];
                                    Imprest.Add(new ImprestListModel()
                                    {
                                        DetailsId = imphistory[i].ImprestPaymentDetailsId,
                                        Type = "Imprest Payment",
                                        Amount = Convert.ToDecimal(imphistory[i].AmountAllocated),
                                        CrtdDate = String.Format("{0:dd}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:MMMM}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:yyyy}", (DateTime)imphistory[i].CrtdTS),
                                    });
                                }
                            }
                            model.TotalPrevImprestValue = totalimprestvalue;
                            if (recouphistory.Count() > 0)
                            {

                                Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                                for (int i = 0; i < recouphistory.Count(); i++)
                                {
                                    _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                                    totalrecoupvalue += _recoupamount[i];
                                    Imprest.Add(new ImprestListModel()
                                    {
                                        DetailsId = recouphistory[i].RecoupmentId,
                                        Type = "Recoupment",
                                        Amount = Convert.ToDecimal(recouphistory[i].RecoupmentValue),
                                        CrtdDate = String.Format("{0:dd}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:MMMM}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:yyyy}", (DateTime)recouphistory[i].CRTD_TS),
                                    });
                                }

                                model.TotalPrevRecoupValue = totalrecoupvalue;
                            }
                            model.PIFirstname = PIquery.FirstName;
                            model.PIEmail = PIquery.Email;
                            model.PIProjectDetails = Project;
                            model.PIImprestDetails = Imprest;
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public List<ImprestPaymentSearchResultModel> SearchImprestPaymentList(ImprestPaymentSearchFieldModel model)
        {
            List<ImprestPaymentSearchResultModel> Card = new List<ImprestPaymentSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.EntryToDate != null)
                {
                    model.EntryToDate = model.EntryToDate.Value.Date.AddDays(1).AddTicks(-1);
                }
                var query = (from Pjct in context.tblImprestPaymentDetails
                             join card in context.tblIMPUserDetails on Pjct.IMPUserDetailsId equals card.IMPUserDetailsId
                             //  join P in context.tblProject on Pjct.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on Pjct.PIId equals user.UserId
                             where ((String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName) || user.EmployeeId.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.ImprestcardNumber) || card.ImprestCardNumber.Contains(model.ImprestcardNumber))
                             && (String.IsNullOrEmpty(model.ImprestacNumber) || card.ImprestACNumber.Contains(model.ImprestacNumber))
                             && (String.IsNullOrEmpty(model.ImprestrefernceNumber) || card.ImprestNumber.Contains(model.ImprestrefernceNumber))
                             && (((card.CrtdTS >= model.EntryFromDate) && (card.CrtdTS <= model.EntryToDate)) ||
                             (model.EntryFromDate == null && model.EntryToDate == null)))
                             orderby Pjct.ImprestPaymentDetailsId descending
                             select new { Pjct, card, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Card.Add(new ImprestPaymentSearchResultModel()
                        {
                            Sno = i + 1,
                            PIId = query[i].card.PIUserId,
                            ImprestcardId = query[i].card.IMPUserDetailsId,
                            ImprestProjectDetailsId = query[i].Pjct.ImprestPaymentDetailsId,
                            // ProjectNumber = query[i].P.ProjectNumber,
                            ImprestValue = query[i].Pjct.AmountAllocated,
                            TotalValueofCard = query[i].card.ImprestTotalValue,
                            ImprestBankACNumber = query[i].card.ImprestACNumber,
                            ImprestcardNumber = query[i].card.ImprestCardNumber,
                            ImprestNumber = query[i].card.ImprestNumber,
                            IsRecoupmentpending = query[i].Pjct.Is_Recoupmentpending,
                            Status = query[i].Pjct.Status,
                            NameofPI = pi,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Card;
        }

        public bool ImprestPaymentApprove(int userdetailsid, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == userdetailsid && m.Status == "Open");
                    var pjcts = context.tblImprestPaymentDetails.FirstOrDefault(m => m.IMPUserDetailsId == userdetailsid && m.Status == "Open");
                    if (query != null && pjcts != null)
                    {
                        if (!getImprestBOAmodeldetails(userdetailsid))
                            return false;
                        query.Status = "Approved";
                        query.UpdtUserId = logged_in_user;
                        query.UpdtTS = DateTime.Now;
                        context.SaveChanges();

                        pjcts.Status = "Approved";
                        pjcts.UpdtUserId = logged_in_user;
                        pjcts.UpdtTS = DateTime.Now;
                        context.SaveChanges();

                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public ImprestPaymentModel GetProjectdetailsbyPI(int PIId)
        {
            try
            {
                ImprestPaymentModel Detail = new ImprestPaymentModel();
                List<ImprestProjectListModel> Project = new List<ImprestProjectListModel>();
                List<ImprestListModel> Imprest = new List<ImprestListModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from pro in context.tblProject
                                 join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                 where pro.PIName == PIId
                                 select new { U, pro }).ToList();
                    var PIquery = (from U in context.vwFacultyStaffDetails
                                   where U.UserId == PIId
                                   select U).FirstOrDefault();
                    var cardquery = (from U in context.tblIMPUserDetails
                                     where U.PIUserId == PIId
                                     select U).FirstOrDefault();
                    Nullable<Decimal> totalprojectvalue = 0;
                    Nullable<Decimal> totalimprestvalue = 0;
                    Nullable<Decimal> totalrecoupvalue = 0;
                    if (Query.Count() > 0)
                    {

                        int?[] _projecttype = new int?[Query.Count];
                        string[] _pjcttype = new string[Query.Count];
                        Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[Query.Count];

                        for (int i = 0; i < Query.Count(); i++)
                        {
                            _projecttype[i] = Query[i].pro.ProjectType;
                            _sanctionvalue[i] = Convert.ToDecimal(Query[i].pro.SanctionValue);
                            totalprojectvalue += _sanctionvalue[i];
                            var projecttype = _projecttype[i];
                            var codecontrol = (from cc in context.tblCodeControl
                                               where cc.CodeValAbbr == projecttype && cc.CodeName == "Projecttype"
                                               select cc).FirstOrDefault();
                            _pjcttype[i] = codecontrol.CodeValDetail;
                            Project.Add(new ImprestProjectListModel()
                            {
                                PIProjectId = Query[i].pro.ProjectId,
                                SelProjecttype = Convert.ToInt32(Query[i].pro.ProjectType),
                                PIProjectNumber = Query[i].pro.ProjectNumber,
                                PIProjectType = codecontrol.CodeValDetail,
                                PIProjectSanctionValue = Convert.ToDecimal(Query[i].pro.SanctionValue),
                                //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                            });

                        }

                        Detail.TotalProjectsValue = totalprojectvalue;

                        var imphistory = (from imp in context.tblImprestPaymentDetails
                                          where imp.PIId == PIId
                                          select imp).ToList();
                        var recouphistory = (from rec in context.tblImprestRecoupment
                                             where rec.PIId == PIId
                                             select rec).ToList();
                        if (imphistory.Count() > 0)
                        {
                            int?[] _imprestid = new int?[imphistory.Count];
                            string[] _type = new string[imphistory.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];

                            for (int i = 0; i < imphistory.Count(); i++)
                            {
                                _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                                totalimprestvalue += _amount[i];
                                Imprest.Add(new ImprestListModel()
                                {
                                    DetailsId = imphistory[i].ImprestPaymentDetailsId,
                                    Type = "Imprest Payment",
                                    Amount = Convert.ToDecimal(imphistory[i].AmountAllocated),
                                    CrtdDate = String.Format("{0:dd}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:MMMM}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:yyyy}", (DateTime)imphistory[i].CrtdTS),
                                });
                            }
                        }
                        Detail.TotalPrevImprestValue = totalimprestvalue;
                        if (recouphistory.Count() > 0)
                        {

                            Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                            for (int i = 0; i < recouphistory.Count(); i++)
                            {
                                _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                                totalrecoupvalue += _recoupamount[i];
                                Imprest.Add(new ImprestListModel()
                                {
                                    DetailsId = recouphistory[i].RecoupmentId,
                                    Type = "Recoupment",
                                    Amount = Convert.ToDecimal(recouphistory[i].RecoupmentValue),
                                    CrtdDate = String.Format("{0:dd}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:MMMM}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:yyyy}", (DateTime)recouphistory[i].CRTD_TS),
                                });
                            }

                            Detail.TotalPrevRecoupValue = totalrecoupvalue;
                        }
                        Detail.PIFirstname = PIquery.FirstName;
                        Detail.PIEmail = PIquery.Email;
                        Detail.PIProjectDetails = Project;
                        Detail.PIImprestDetails = Imprest;
                    }
                    if (cardquery != null)
                    {
                        Detail.ImprestcardId = -1;
                    }
                    return Detail;
                }
            }
            catch (Exception ex)
            {
                ImprestPaymentModel Detail = new ImprestPaymentModel();
                return Detail;
            }
        }
        public bool getImprestBOAmodeldetails(int userdetailsid)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblIMPUserDetails.SingleOrDefault(m => m.IMPUserDetailsId == userdetailsid);
                    if (userdetailsid > 0)
                    {
                        decimal netAmt = (billQuery.ImprestTotalValue ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.TempVoucherNumber = billQuery.ImprestNumber;
                        model.RefNumber = billQuery.ImprestNumber;
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;

                        txList = (from exp in context.tblImprestExpenseDetail
                                  where exp.ImprestDetailsId == userdetailsid && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblImprestDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.ImprestDetailsId == userdetailsid && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 1,
                            SubLedgerId = billQuery.PIUserId
                        });
                        var credit = (from exp in context.tblImprestExpenseDetail
                                      join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                      where exp.ImprestUserId == userdetailsid && exp.Status == "Active" && exp.TransactionType == "Credit"
                                      select new
                                      {
                                          exp.TransactionType,
                                          exp.AccountHeadId,
                                          exp.Amount,
                                          hd.AccountHead,
                                      }).FirstOrDefault();
                        var debit = (from exp in context.tblImprestExpenseDetail
                                     join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                     join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                     where exp.ImprestUserId == userdetailsid && exp.Status == "Active" && exp.TransactionType == "Debit"
                                     select new
                                     {
                                         exp.TransactionType,
                                         exp.AccountHeadId,
                                         exp.Amount,
                                         hd.AccountHead,
                                     }).FirstOrDefault();

                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = credit.TransactionType,
                            BankHeadID = credit.AccountHeadId,
                            Amount = credit.Amount,
                            ReferenceNumber = billQuery.ImprestNumber,
                            ReferenceDate = billQuery.CrtdTS,
                            PayeeId = debit.AccountHeadId,
                            PayeeBank = debit.AccountHead,
                            PayeeName = debit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,

                        });
                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = debit.TransactionType,
                            BankHeadID = debit.AccountHeadId,
                            Amount = debit.Amount,
                            ReferenceNumber = billQuery.ImprestNumber,
                            ReferenceDate = billQuery.CrtdTS,
                            PayeeId = credit.AccountHeadId,
                            PayeeBank = credit.AccountHead,
                            PayeeName = credit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,
                        });

                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Imprest Master Enhancement

        public List<ImprestPaymentModel> GetImprestEnhancementList()
        {
            List<ImprestPaymentModel> ECard = new List<ImprestPaymentModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from IC in context.tblImprestPaymentDetails
                             join IP in context.tblIMPUserDetails on IC.IMPUserDetailsId equals IP.IMPUserDetailsId
                             // join P in context.tblProject on IP.PIId equals P.PIName
                             join user in context.vwFacultyStaffDetails on IP.PIUserId equals user.UserId
                             orderby IP.IMPUserDetailsId descending
                             where ((IP.Status != "Inactive" && IP.Status != "Rejected" && IC.Is_ImprestEnhance == true))
                             select new { IP, IC, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        ECard.Add(new ImprestPaymentModel()
                        {
                            Sno = i + 1,
                            PIId = query[i].IP.PIUserId,
                            //Projecttitle = query[i].P.ProjectTitle,
                            //ProjectNumber = query[i].P.ProjectNumber,
                            ImprestProjectDetailsId = query[i].IC.ImprestPaymentDetailsId,
                            ImprestcardId = query[i].IP.IMPUserDetailsId,
                            ImprestcardNumber = query[i].IP.ImprestCardNumber,
                            ImprestEnhanceNumber = query[i].IC.ImprestEnhanceNumber,
                            ImprestBankACNumber = query[i].IP.ImprestACNumber,
                            NameofPI = query[i].FirstName,
                            TotalValueofCard = query[i].IP.ImprestTotalValue,
                            EnhancedImprestValue = query[i].IC.AmountAllocated,
                            RequestedDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].IC.CrtdTS),
                            Status = query[i].IC.Status,
                            // IsRecoupmentpending = query[i].IP.Is_Recoupmentpending
                        });
                    }
                }
            }
            return ECard;
        }

        public ImprestPaymentModel GetImprestEnhanceDetails(int ProjectID)
        {
            try
            {
                ImprestPaymentModel model = new ImprestPaymentModel();

                using (var context = new IOASDBEntities())
                {
                    var projectid = ProjectID;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    var PIId = query.P.PIName;
                    var CardpjctlistofPI = (from EC in context.tblImprestPaymentDetails
                                            where EC.PIId == PIId
                                            select EC).ToList();
                    model.ImprestcardId = 0;
                    if (query != null)
                    {
                        if (CardpjctlistofPI.Count() > 0)
                        {

                            var carddetailsquery = (from EC in context.tblIMPUserDetails
                                                    where EC.PIUserId == PIId && (EC.Status == "Open" || EC.Status == "Approved" || EC.Status == "Approval Pending")
                                                    select EC).SingleOrDefault();

                            if (carddetailsquery != null)
                            {
                                model.ImprestcardId = carddetailsquery.IMPUserDetailsId;
                            }
                            else if (carddetailsquery == null)
                            {
                                var cardPI = (from EC in context.tblIMPUserDetails
                                              where EC.PIUserId == PIId
                                              orderby EC.IMPUserDetailsId descending
                                              select EC).FirstOrDefault();
                                if (cardPI != null)
                                {
                                    model.PIId = cardPI.PIUserId;
                                }
                            }
                            var date = query.P.ActuaClosingDate.Value;
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public int CreateImprestEnhance(ImprestPaymentModel model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int Imprestcardid = 0;

                        // Existing Card -> New Project entry and Edit Card details
                        if (model.ImprestcardId > 0)
                        {



                            var cardquery = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == model.ImprestcardId);
                            var cardpjctdetails = context.tblImprestPaymentDetails.FirstOrDefault(m => m.ImprestPaymentDetailsId == model.ImprestProjectDetailsId && m.Is_ImprestEnhance == true);
                            // Existing Card new enhance imprest Entry
                            if (cardpjctdetails == null)
                            {


                                Imprestcardid = model.ImprestcardId;

                                tblImprestPaymentDetails project = new tblImprestPaymentDetails();
                                project.IMPUserDetailsId = cardquery.IMPUserDetailsId;
                                project.PIId = model.PIId;
                                project.AmountAllocated = model.EnhancedImprestValue;
                                project.Is_ImprestEnhance = true;
                                project.CrtdTS = DateTime.Now;
                                project.CrtdUserId = LoggedInUser;
                                project.Status = "Open";
                                project.Is_Recoupmentpending = true;
                                project.TransactionTypeCode = "IME";
                                var financialyear = Common.GetCurrentFinYear();
                                var FinYear = financialyear;
                                var Sequencenumber = Common.getImprestEnhanceId();
                                if (Sequencenumber != null && Sequencenumber != "")
                                {
                                    model.ImprestEnhanceNumber = "IME/" + FinYear + "/" + Sequencenumber;
                                }
                                else
                                {
                                    model.ImprestEnhanceNumber = "IME/" + FinYear + "/" + "000001";
                                }
                                project.ImprestEnhanceNumber = model.ImprestEnhanceNumber;
                                //   Card.CardValidTill = DateTime.Parse(model.CardExpryDte);                                            
                                project.Status = "Open";
                                project.Source = model.Source;
                                project.SourceEmailDate = model.SourceEmailDate;
                                project.SourceReferenceNumber = model.SourceReferenceNumber;
                                project.CheckListVerifiedBy = model.CheckListVerified_By;

                                context.tblImprestPaymentDetails.Add(project);
                                context.SaveChanges();
                                Imprestcardid = Convert.ToInt32(project.IMPUserDetailsId);
                                int Cardprojectdetailsid = Convert.ToInt32(project.ImprestPaymentDetailsId);

                                context.tblImprestDeductionDetail.RemoveRange(context.tblImprestDeductionDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblImprestDeductionDetail deduction = new tblImprestDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ImprestUserDetailsId = Imprestcardid;
                                            deduction.ImprestDetailsId = Cardprojectdetailsid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblImprestDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblImprestExpenseDetail.RemoveRange(context.tblImprestExpenseDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestExpenseDetail exp = new tblImprestExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.ImprestDetailsId = Cardprojectdetailsid;
                                    exp.ImprestUserId = Imprestcardid;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblImprestCheckDetail.RemoveRange(context.tblImprestCheckDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestCheckDetail chk = new tblImprestCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestDetailsId = Cardprojectdetailsid;
                                        chk.ImprestUserId = Imprestcardid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                if (model.DocumentDetail.Count() > 0)
                                {
                                    foreach (var item in model.DocumentDetail)
                                    {
                                        var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                        if (docQuery == null)
                                        {
                                            tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                            doc.CRTD_By = LoggedInUser;
                                            doc.CRTD_TS = DateTime.Now;
                                            doc.DocumentActualName = actName;
                                            doc.DocumentName = docName;
                                            doc.DocumentType = item.DocumentType;
                                            doc.Remarks = item.Remarks;
                                            doc.ImprestDetailsId = Cardprojectdetailsid;
                                            doc.ImprestUserDetailsId = Imprestcardid;
                                            doc.IsImprestDoc_f = true;
                                            // doc.ProjectId = model.ProjectID;
                                            doc.Status = "Active";
                                            context.tblImprestDocumentDetail.Add(doc);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                            }
                            // Enhancement update Entry
                            if (cardpjctdetails != null)
                            {
                                var docquery = (from doc in context.tblImprestDocumentDetail
                                                where doc.ImprestUserDetailsId == cardpjctdetails.IMPUserDetailsId
                                                select doc).ToList();


                                cardquery.UpdtTS = DateTime.Now;
                                cardquery.UpdtUserId = LoggedInUser;
                                context.SaveChanges();
                                if (model.ImprestValue > 0)
                                {
                                    cardpjctdetails.AmountAllocated = model.ImprestValue;
                                }
                                else if (model.EnhancedImprestValue > 0)
                                {
                                    cardpjctdetails.AmountAllocated = model.EnhancedImprestValue;
                                }
                                cardpjctdetails.CheckListVerifiedBy = model.CheckListVerified_By;
                                cardpjctdetails.UpdtTS = DateTime.Now;
                                cardpjctdetails.UpdtUserId = LoggedInUser;
                                cardpjctdetails.Source = model.Source;
                                cardpjctdetails.SourceEmailDate = model.SourceEmailDate;
                                cardpjctdetails.SourceReferenceNumber = model.SourceReferenceNumber;
                                context.SaveChanges();
                                Imprestcardid = Convert.ToInt32(cardpjctdetails.IMPUserDetailsId);
                                int Cardprojectdetailsid = Convert.ToInt32(cardpjctdetails.ImprestPaymentDetailsId);

                                context.tblImprestDeductionDetail.RemoveRange(context.tblImprestDeductionDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblImprestDeductionDetail deduction = new tblImprestDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ImprestDetailsId = Cardprojectdetailsid;
                                            deduction.ImprestUserDetailsId = Imprestcardid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblImprestDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblImprestExpenseDetail.RemoveRange(context.tblImprestExpenseDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestExpenseDetail exp = new tblImprestExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.ImprestDetailsId = Cardprojectdetailsid;
                                    exp.ImprestUserId = Imprestcardid;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblImprestCheckDetail.RemoveRange(context.tblImprestCheckDetail.Where(m => m.ImprestDetailsId == Cardprojectdetailsid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestCheckDetail chk = new tblImprestCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestDetailsId = Cardprojectdetailsid;
                                        chk.ImprestUserId = Imprestcardid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }

                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblImprestDocumentDetail.Where(x => x.ImprestDetailsId == Cardprojectdetailsid && !arrList.Contains(x.ImprestDocumentDetailId) && x.IsImprestDoc_f == true && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.ImprestDetailsId = Cardprojectdetailsid;
                                        doc.ImprestUserDetailsId = Imprestcardid;
                                        doc.IsImprestDoc_f = true;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblImprestDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                Imprestcardid = -2;
                            }
                        }

                        transaction.Commit();
                        return Imprestcardid;
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public ImprestPaymentModel EditImprestEnhanceDetails(int PIId, int ImeId)
        {
            try
            {
                ImprestPaymentModel model = new ImprestPaymentModel();

                using (var context = new IOASDBEntities())

                {
                    // var projectid = ProjectID;
                    var query = (from user in context.vwFacultyStaffDetails
                                 where user.UserId == PIId
                                 select user).FirstOrDefault();
                    var Cardpjctdetails = (from EC in context.tblImprestPaymentDetails
                                           where EC.ImprestPaymentDetailsId == ImeId
                                           select EC).FirstOrDefault();
                    var carddetails = (from EC in context.tblIMPUserDetails
                                       where EC.PIUserId == PIId && EC.IMPUserDetailsId == Cardpjctdetails.IMPUserDetailsId
                                       select EC).SingleOrDefault();

                    decimal? impvalue = 0;
                    decimal? availablecardvalue = 0;
                    decimal? totalvalue = 0;

                    var pjctimpenhance = (from EC in context.tblImprestPaymentDetails
                                          where EC.ImprestPaymentDetailsId == ImeId
                                          select EC).FirstOrDefault();
                    impvalue = pjctimpenhance.AmountAllocated;
                    availablecardvalue = carddetails.ImprestTotalValue;
                    totalvalue = carddetails.ImprestTotalValue;

                    //int? finyearid = query.P.FinancialYear;
                    //var finyear = (from yr in context.tblFinYear
                    //               where yr.FinYearId == finyearid
                    //               select yr).SingleOrDefault();
                    if (query != null)
                    {

                        //model.ProjectNumber = query.P.ProjectNumber;
                        //model.ProjectID = query.P.ProjectId;
                        //model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.DepartmentName;
                        // model.CurrentFinancialYear = finyear.Year;
                        model.PIId = PIId;
                        model.NameofPI = query.FirstName;
                        model.ImprestValue = impvalue;
                        model.EnhancedImprestValue = impvalue;
                        model.TotalValueofCard = availablecardvalue;
                        model.TotalImprestValue = totalvalue;
                        model.CurrentImprestValue = totalvalue;

                        model.TotalImprests = carddetails.NoofImprests;

                        model.ImprestcardId = carddetails.IMPUserDetailsId;
                        model.ImprestProjectDetailsId = Cardpjctdetails.ImprestPaymentDetailsId;
                        model.ImprestcardNumber = carddetails.ImprestCardNumber;
                        model.ImprestNumber = Cardpjctdetails.ImprestEnhanceNumber;
                        model.SelBank = carddetails.ImprestBank;
                        model.ImprestBankACNumber = carddetails.ImprestACNumber;
                        model.TotalValueofCard = carddetails.ImprestTotalValue;
                        model.Source = Cardpjctdetails.Source;
                        if (Cardpjctdetails.Source == 1)
                        {
                            model.SourceReferenceNumber = Cardpjctdetails.SourceReferenceNumber;
                        }
                        else if (Cardpjctdetails.Source == 3)
                        {
                            int refId = Cardpjctdetails.SourceReferenceNumber ?? 0;
                            model.SourceReferenceNumber = refId;
                            model.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (Cardpjctdetails.Source == 2)
                            model.SourceEmailDate = Cardpjctdetails.SourceEmailDate;
                        //model.EntryDate = DateTime.Now;
                        //model.EntryDte = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);
                        // model.CardExpiryDate = carddetails.CardValidTill;
                        // model.CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", carddetails.CardValidTill);
                        model.PIFirstname = carddetails.PIFirstName;
                        // model.PIGender = carddetails.Gender;
                        model.PIId = carddetails.PIUserId;

                        model.PIEmail = carddetails.PIEmailId;
                        model.PIMobile = carddetails.PIMobileNumber;
                        //model.DateOfBirth = carddetails.Dateofbirth;
                        model.CheckListVerified_By = Cardpjctdetails.CheckListVerifiedBy;
                        model.CheckListVerifierName = Common.GetUserFirstName(Cardpjctdetails.CheckListVerifiedBy ?? 0);

                        model.CreditorType = "PI";
                        model.CreditorAmount = Cardpjctdetails.AmountAllocated;
                        //  var imprestdetailsId = Cardpjctdetails.ImprestPaymentDetailsId;
                        var imprestpjctId = Cardpjctdetails.ImprestPaymentDetailsId;

                        model.ExpenseDetail = (from e in context.tblImprestExpenseDetail
                                               where e.ImprestDetailsId == imprestpjctId && e.Status == "Active"
                                               select new
                                               {
                                                   e.AccountHeadId,
                                                   e.Amount,
                                                   e.AccountGroupId,
                                                   e.ImprestExpenseDetailId,
                                                   e.TransactionType,
                                                   e.IsJV_f
                                               })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.ImprestExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        model.DeductionDetail = (from d in context.tblImprestDeductionDetail
                                                 join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                 join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                 join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                 where d.ImprestDetailsId == imprestpjctId && d.Status == "Active"
                                                 select new BillDeductionDetailModel()
                                                 {
                                                     AccountGroupId = d.AccountGroupId,
                                                     BillDeductionDetailId = d.ImprestDeductionDetailId,
                                                     Amount = d.Amount,
                                                     DeductionHeadId = d.DeductionHeadId,
                                                     AccountGroup = g.AccountGroup,
                                                     DeductionHead = hd.AccountHead
                                                 }).ToList();

                        model.CheckListDetail = (from ck in context.tblImprestCheckDetail
                                                 join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                 where ck.ImprestDetailsId == imprestpjctId && ck.Status == "Active"
                                                 select new CheckListModel()
                                                 {
                                                     CheckList = chkf.CheckList,
                                                     FunctionCheckListId = ck.FunctionCheckListId,
                                                     IsChecked = true
                                                 }).ToList();
                        model.DocumentDetail = (from d in context.tblImprestDocumentDetail
                                                where d.ImprestDetailsId == imprestpjctId && d.Status == "Active"
                                                select new AttachmentDetailModel()
                                                {
                                                    DocumentActualName = d.DocumentActualName,
                                                    DocumentDetailId = d.ImprestDocumentDetailId,
                                                    DocumentName = d.DocumentName,
                                                    DocumentPath = "~/Content/OtherDocuments",
                                                    DocumentType = d.DocumentType,
                                                    Remarks = d.Remarks
                                                }).ToList();

                        List<ImprestProjectListModel> Project = new List<ImprestProjectListModel>();
                        List<ImprestListModel> Imprest = new List<ImprestListModel>();
                        var Query = (from pro in context.tblProject
                                     join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                     where pro.PIName == PIId
                                     select new { U, pro }).ToList();
                        var PIquery = (from U in context.vwFacultyStaffDetails
                                       where U.UserId == PIId
                                       select U).FirstOrDefault();
                        var cardquery = (from U in context.tblIMPUserDetails
                                         where U.PIUserId == PIId
                                         select U).FirstOrDefault();
                        Nullable<Decimal> totalprojectvalue = 0;
                        Nullable<Decimal> totalimprestvalue = 0;
                        Nullable<Decimal> totalrecoupvalue = 0;
                        if (Query.Count() > 0)
                        {

                            int?[] _projecttype = new int?[Query.Count];
                            string[] _pjcttype = new string[Query.Count];
                            Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[Query.Count];

                            for (int i = 0; i < Query.Count(); i++)
                            {
                                _projecttype[i] = Query[i].pro.ProjectType;
                                _sanctionvalue[i] = Convert.ToDecimal(Query[i].pro.SanctionValue);
                                totalprojectvalue += _sanctionvalue[i];
                                var projecttype = _projecttype[i];
                                var codecontrol = (from cc in context.tblCodeControl
                                                   where cc.CodeValAbbr == projecttype && cc.CodeName == "Projecttype"
                                                   select cc).FirstOrDefault();
                                _pjcttype[i] = codecontrol.CodeValDetail;
                                Project.Add(new ImprestProjectListModel()
                                {
                                    PIProjectId = Query[i].pro.ProjectId,
                                    SelProjecttype = Convert.ToInt32(Query[i].pro.ProjectType),
                                    PIProjectNumber = Query[i].pro.ProjectNumber,
                                    PIProjectType = codecontrol.CodeValDetail,
                                    PIProjectSanctionValue = Convert.ToDecimal(Query[i].pro.SanctionValue),
                                    //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                                });

                            }

                            model.TotalProjectsValue = totalprojectvalue;

                            var imphistory = (from imp in context.tblImprestPaymentDetails
                                              where imp.PIId == PIId
                                              select imp).ToList();
                            var recouphistory = (from rec in context.tblImprestRecoupment
                                                 where rec.PIId == PIId
                                                 select rec).ToList();
                            if (imphistory.Count() > 0)
                            {
                                int?[] _imprestid = new int?[imphistory.Count];
                                string[] _type = new string[imphistory.Count];
                                Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];

                                for (int i = 0; i < imphistory.Count(); i++)
                                {
                                    _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                                    totalimprestvalue += _amount[i];
                                    Imprest.Add(new ImprestListModel()
                                    {
                                        DetailsId = imphistory[i].ImprestPaymentDetailsId,
                                        Type = "Imprest Payment",
                                        Amount = Convert.ToDecimal(imphistory[i].AmountAllocated),
                                        CrtdDate = String.Format("{0:dd}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:MMMM}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:yyyy}", (DateTime)imphistory[i].CrtdTS),
                                    });
                                }
                            }
                            model.TotalPrevImprestValue = totalimprestvalue;
                            if (recouphistory.Count() > 0)
                            {

                                Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                                for (int i = 0; i < recouphistory.Count(); i++)
                                {
                                    _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                                    totalrecoupvalue += _recoupamount[i];
                                    Imprest.Add(new ImprestListModel()
                                    {
                                        DetailsId = recouphistory[i].RecoupmentId,
                                        Type = "Recoupment",
                                        Amount = Convert.ToDecimal(recouphistory[i].RecoupmentValue),
                                        CrtdDate = String.Format("{0:dd}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:MMMM}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:yyyy}", (DateTime)recouphistory[i].CRTD_TS),
                                    });
                                }

                                model.TotalPrevRecoupValue = totalrecoupvalue;
                            }
                            model.PIFirstname = PIquery.FirstName;
                            model.PIEmail = PIquery.Email;
                            model.PIProjectDetails = Project;
                            model.PIImprestDetails = Imprest;
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ImprestPaymentSearchResultModel> SearchImprestEnhanceList(ImprestPaymentSearchFieldModel model)
        {
            List<ImprestPaymentSearchResultModel> Card = new List<ImprestPaymentSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.EntryToDate != null)
                {
                    model.EntryToDate = model.EntryToDate.Value.Date.AddDays(1).AddTicks(-1);
                }
                var query = (from Pjct in context.tblImprestPaymentDetails
                             join card in context.tblIMPUserDetails on Pjct.IMPUserDetailsId equals card.IMPUserDetailsId
                             //  join P in context.tblProject on Pjct.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on Pjct.PIId equals user.UserId
                             where ((String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName) || user.EmployeeId.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.ImprestcardNumber) || card.ImprestCardNumber.Contains(model.ImprestcardNumber))
                             && (String.IsNullOrEmpty(model.ImprestacNumber) || card.ImprestACNumber.Contains(model.ImprestacNumber))
                             && (String.IsNullOrEmpty(model.ImprestrefernceNumber) || Pjct.ImprestEnhanceNumber.Contains(model.ImprestrefernceNumber))
                             && (((Pjct.CrtdTS >= model.EntryFromDate) && (Pjct.CrtdTS <= model.EntryToDate)) ||
                             (model.EntryFromDate == null && model.EntryToDate == null)))
                             where Pjct.Status != "Inactive" && Pjct.Is_ImprestEnhance == true
                             orderby Pjct.ImprestPaymentDetailsId descending
                             select new { Pjct, card, user.FirstName, user.EmployeeId }).ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;
                        var userdetlsid = query[i].Pjct.IMPUserDetailsId;
                        var cardquery = (from card in context.tblIMPUserDetails
                                         where card.IMPUserDetailsId == userdetlsid
                                         select card).FirstOrDefault();
                        Card.Add(new ImprestPaymentSearchResultModel()
                        {
                            Sno = i + 1,
                            PIId = query[i].Pjct.PIId,
                            ImprestcardId = query[i].Pjct.IMPUserDetailsId,
                            ImprestProjectDetailsId = query[i].Pjct.ImprestPaymentDetailsId,
                            // ProjectNumber = query[i].P.ProjectNumber,
                            EnhancedImprestValue = query[i].Pjct.AmountAllocated,
                            TotalValueofCard = cardquery.ImprestTotalValue,
                            ImprestBankACNumber = cardquery.ImprestACNumber,
                            ImprestcardNumber = cardquery.ImprestCardNumber,
                            ImprestEnhanceNumber = query[i].Pjct.ImprestEnhanceNumber,
                            IsRecoupmentpending = query[i].Pjct.Is_Recoupmentpending,
                            RequestedDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].Pjct.CrtdTS),
                            Status = query[i].Pjct.Status,
                            NameofPI = pi,

                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Card;
        }
        public bool ImprestEnhancementApprove(int prjctdetailsid, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestPaymentDetails.FirstOrDefault(m => m.ImprestPaymentDetailsId == prjctdetailsid && m.Status == "Open");
                    if (query != null)
                    {
                        var usr = context.tblIMPUserDetails.FirstOrDefault(m => m.IMPUserDetailsId == query.IMPUserDetailsId);
                        if (!getImprestEnhanceBOAmodeldetails(prjctdetailsid))
                            return false;
                        query.Status = "Approved";
                        query.UpdtUserId = logged_in_user;
                        query.UpdtTS = DateTime.Now;
                        context.SaveChanges();
                        usr.ImprestTotalValue = usr.ImprestTotalValue + query.AmountAllocated;
                        usr.NoofImprests = usr.NoofImprests + 1;
                        usr.UpdtUserId = logged_in_user;
                        usr.UpdtTS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public ImprestPaymentModel GetIMPEnhancedetailsbyPI(int PIId)
        {
            try
            {
                ImprestPaymentModel Detail = new ImprestPaymentModel();
                List<ImprestProjectListModel> Project = new List<ImprestProjectListModel>();
                List<ImprestListModel> Imprest = new List<ImprestListModel>();
                using (var context = new IOASDBEntities())
                {
                    var Query = (from pro in context.tblProject
                                 join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                 where pro.PIName == PIId
                                 select new { U, pro }).ToList();
                    var PIquery = (from U in context.vwFacultyStaffDetails
                                   where U.UserId == PIId
                                   select U).FirstOrDefault();
                    var cardquery = (from U in context.tblIMPUserDetails
                                     where U.PIUserId == PIId
                                     select U).FirstOrDefault();
                    Nullable<Decimal> totalprojectvalue = 0;
                    Nullable<Decimal> totalimprestvalue = 0;
                    Nullable<Decimal> totalrecoupvalue = 0;
                    if (Query.Count() > 0)
                    {

                        int?[] _projecttype = new int?[Query.Count];
                        string[] _pjcttype = new string[Query.Count];
                        Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[Query.Count];

                        for (int i = 0; i < Query.Count(); i++)
                        {
                            _projecttype[i] = Query[i].pro.ProjectType;
                            _sanctionvalue[i] = Convert.ToDecimal(Query[i].pro.SanctionValue);
                            totalprojectvalue += _sanctionvalue[i];
                            var projecttype = _projecttype[i];
                            var codecontrol = (from cc in context.tblCodeControl
                                               where cc.CodeValAbbr == projecttype && cc.CodeName == "Projecttype"
                                               select cc).FirstOrDefault();
                            _pjcttype[i] = codecontrol.CodeValDetail;
                            Project.Add(new ImprestProjectListModel()
                            {
                                PIProjectId = Query[i].pro.ProjectId,
                                SelProjecttype = Convert.ToInt32(Query[i].pro.ProjectType),
                                PIProjectNumber = Query[i].pro.ProjectNumber,
                                PIProjectType = codecontrol.CodeValDetail,
                                PIProjectSanctionValue = Convert.ToDecimal(Query[i].pro.SanctionValue),
                                //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                            });

                        }

                        Detail.TotalProjectsValue = totalprojectvalue;

                        var imphistory = (from imp in context.tblImprestPaymentDetails
                                          where imp.PIId == PIId
                                          select imp).ToList();
                        var recouphistory = (from rec in context.tblImprestRecoupment
                                             where rec.PIId == PIId
                                             select rec).ToList();
                        if (imphistory.Count() > 0)
                        {
                            int?[] _imprestid = new int?[imphistory.Count];
                            string[] _type = new string[imphistory.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];

                            for (int i = 0; i < imphistory.Count(); i++)
                            {
                                _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                                totalimprestvalue += _amount[i];
                                Imprest.Add(new ImprestListModel()
                                {
                                    DetailsId = imphistory[i].ImprestPaymentDetailsId,
                                    Type = "Imprest Payment",
                                    Amount = Convert.ToDecimal(imphistory[i].AmountAllocated),
                                    CrtdDate = String.Format("{0:dd}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:MMMM}", (DateTime)imphistory[i].CrtdTS) + "-" + String.Format("{0:yyyy}", (DateTime)imphistory[i].CrtdTS),
                                });
                            }
                        }
                        Detail.TotalPrevImprestValue = totalimprestvalue;
                        if (recouphistory.Count() > 0)
                        {

                            Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                            for (int i = 0; i < recouphistory.Count(); i++)
                            {
                                _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                                totalrecoupvalue += _recoupamount[i];
                                Imprest.Add(new ImprestListModel()
                                {
                                    DetailsId = recouphistory[i].RecoupmentId,
                                    Type = "Recoupment",
                                    Amount = Convert.ToDecimal(recouphistory[i].RecoupmentValue),
                                    CrtdDate = String.Format("{0:dd}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:MMMM}", (DateTime)recouphistory[i].CRTD_TS) + "-" + String.Format("{0:yyyy}", (DateTime)recouphistory[i].CRTD_TS),
                                });
                            }

                            Detail.TotalPrevRecoupValue = totalrecoupvalue;
                        }
                        Detail.PIFirstname = PIquery.FirstName;
                        Detail.PIEmail = PIquery.Email;
                        Detail.PIProjectDetails = Project;
                        Detail.PIImprestDetails = Imprest;
                    }
                    if (cardquery != null)
                    {
                        Detail.ImprestcardId = cardquery.IMPUserDetailsId;
                        Detail.SelBank = cardquery.ImprestBank;
                        Detail.ImprestNumber = cardquery.ImprestNumber;
                        Detail.ImprestBankACNumber = cardquery.ImprestACNumber;
                        Detail.ImprestcardNumber = cardquery.ImprestCardNumber;

                        Detail.TotalValueofCard = cardquery.ImprestTotalValue;

                    }
                    return Detail;
                }
            }
            catch (Exception ex)
            {
                ImprestPaymentModel Detail = new ImprestPaymentModel();
                return Detail;
            }
        }


        public bool getImprestEnhanceBOAmodeldetails(int prjctdetailsid)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var enhancequery = context.tblImprestPaymentDetails.SingleOrDefault(m => m.ImprestPaymentDetailsId == prjctdetailsid);
                    var billQuery = context.tblIMPUserDetails.SingleOrDefault(m => m.IMPUserDetailsId == enhancequery.IMPUserDetailsId);
                    if (prjctdetailsid > 0)
                    {
                        decimal netAmt = (billQuery.ImprestTotalValue ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.TempVoucherNumber = billQuery.ImprestNumber;
                        model.RefNumber = billQuery.ImprestNumber;
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;

                        txList = (from exp in context.tblImprestExpenseDetail
                                  where exp.ImprestDetailsId == prjctdetailsid && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblImprestDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.ImprestDetailsId == prjctdetailsid && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 1,
                            SubLedgerId = billQuery.PIUserId
                        });

                        var credit = (from exp in context.tblImprestExpenseDetail
                                      join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                      where exp.ImprestDetailsId == prjctdetailsid && exp.Status == "Active" && exp.TransactionType == "Credit"
                                      select new
                                      {
                                          exp.TransactionType,
                                          exp.AccountHeadId,
                                          exp.Amount,
                                          hd.AccountHead,
                                      }).FirstOrDefault();
                        var debit = (from exp in context.tblImprestExpenseDetail
                                     join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                     join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                     where exp.ImprestDetailsId == prjctdetailsid && exp.Status == "Active" && exp.TransactionType == "Debit"
                                     select new
                                     {
                                         exp.TransactionType,
                                         exp.AccountHeadId,
                                         exp.Amount,
                                         hd.AccountHead,
                                     }).FirstOrDefault();

                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = credit.TransactionType,
                            BankHeadID = credit.AccountHeadId,
                            Amount = credit.Amount,
                            ReferenceNumber = billQuery.ImprestNumber,
                            ReferenceDate = billQuery.CrtdTS,
                            PayeeId = debit.AccountHeadId,
                            PayeeBank = debit.AccountHead,
                            PayeeName = debit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,

                        });
                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = debit.TransactionType,
                            BankHeadID = debit.AccountHeadId,
                            Amount = debit.Amount,
                            ReferenceNumber = billQuery.ImprestNumber,
                            ReferenceDate = billQuery.CrtdTS,
                            PayeeId = credit.AccountHeadId,
                            PayeeBank = credit.AccountHead,
                            PayeeName = credit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,
                        });

                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Imprest Bill Booking
        public List<ImprestPaymentModel> GetImprestRecoupmentList(string typeCode)
        {
            try
            {

                List<ImprestPaymentModel> list = new List<ImprestPaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblImprestRecoupment
                            join a in context.tblIMPUserDetails on b.ImprestUserDetailsId equals a.IMPUserDetailsId
                            join d in context.tblImprestPaymentDetails on b.ImprestDetailsId equals d.ImprestPaymentDetailsId
                            // join P in context.tblProject on b.ProjectId equals P.ProjectId
                            orderby b.RecoupmentId descending
                            where b.Status != "InActive" && b.TransactionTypeCode == "IMR"
                            select new
                            {
                                b.RecoupmentId,
                                a.IMPUserDetailsId,
                                d.ImprestPaymentDetailsId,
                                b.PIId,
                                b.RecoupmentNumber,
                                a.ImprestACNumber,
                                b.CRTD_TS,
                                a.ImprestTotalValue,
                                b.RecoupmentValue,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ImprestPaymentModel()
                                 {
                                     SlNo = index + 1,
                                     RecoupmentId = x.RecoupmentId,
                                     ImprestcardId = x.IMPUserDetailsId,
                                     ImprestProjectDetailsId = x.ImprestPaymentDetailsId,
                                     PIId = x.PIId,
                                     ImprestBankACNumber = x.ImprestACNumber,
                                     RecoupmentNumber = x.RecoupmentNumber,
                                     RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     ImprestValue = x.ImprestTotalValue,
                                     RecoupmentValue = x.RecoupmentValue,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ImprestPaymentModel>();
            }
        }
        public int ImprestRecoupment(ImprestPaymentModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.RecoupmentId > 0)
                        {
                            var recoupmentid = model.RecoupmentId;
                            var query = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == model.RecoupmentId);
                            if (query != null)
                            {
                                decimal? totalamount = 0;
                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                // query.ProjectId = model.ProjectID;
                                query.RecoupmentValue = model.RecoupmentValue;
                                query.BalanceinAdvance = model.BalanceValue;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();
                                var recquery = (from IMP in context.tblImprestRecoupment
                                                where IMP.PIId == model.PIId
                                                select IMP).ToList();
                                var impquery = (from IMP in context.tblImprestPaymentDetails
                                                where IMP.PIId == model.PIId
                                                select IMP).ToList();
                                var totalprojectsvalue = model.TotalProjectsValue;
                                decimal? permitedimprest = 0;
                                decimal? totalrecoupedvalue = 0;
                                //permitedimprest = (totalprojectsvalue * 20) / 100;
                                if (impquery != null)
                                {
                                    for (int i = 0; i < recquery.Count(); i++)
                                    {
                                        permitedimprest += impquery[i].AmountAllocated;
                                    }
                                }
                                if (recquery != null)
                                {
                                    for (int i = 0; i < recquery.Count(); i++)
                                    {
                                        totalrecoupedvalue += recquery[i].RecoupmentValue;
                                    }
                                }

                                //if (permitedimprest > 500000)
                                //{
                                //    permitedimprest = 500000;
                                //}
                                if (totalrecoupedvalue == permitedimprest)
                                {
                                    var cardprjct = (from IMP in context.tblImprestPaymentDetails
                                                     where IMP.PIId == model.PIId
                                                     select IMP).ToList();
                                    if (cardprjct != null)
                                    {
                                        for (int i = 0; i < cardprjct.Count(); i++)
                                        {
                                            cardprjct[i].Is_Recoupmentpending = false;
                                            cardprjct[i].Status = "Completed";
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                var recoupbilldetail = (from D in context.tblImprestRecoupBillBreakup
                                                        where D.RecoupmentId == model.RecoupmentId
                                                        select D).ToList();
                                int detaildelCount = recoupbilldetail.Count();
                                if (detaildelCount > 0)
                                {
                                    for (int i = 0; i < detaildelCount; i++)
                                    {
                                        context.Entry(recoupbilldetail[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }


                                    for (int i = 0; i < model.DetailsID.Count(); i++)
                                    {
                                        decimal? amount = model.AmountofItem[i];
                                        totalamount += amount;
                                        tblImprestRecoupBillBreakup details = new tblImprestRecoupBillBreakup();
                                        details.RecoupmentId = model.RecoupmentId;
                                        details.ImprestPaymentDetailsId = model.ImprestProjectDetailsId;
                                        details.Particulars = model.Particulars[i];
                                        //details.Rate = model.RateofItem[i];
                                        //details.Quantity = model.QuantityofItem[i];
                                        details.Amount = model.AmountofItem[i];
                                        details.VendorName = model.VendorName[i];
                                        details.ImprestRecoupBillNumber = model.VendorBillNumber[i];
                                        details.Status = "Active";
                                        details.CRTD_By = LoggedInUser;
                                        details.CRTD_TS = DateTime.Now;
                                        context.tblImprestRecoupBillBreakup.Add(details);
                                        context.SaveChanges();
                                    }
                                    query.RecoupmentValue = totalamount;
                                    context.SaveChanges();
                                }
                                context.tblImpRecoupCommitmentDetail.RemoveRange(context.tblImpRecoupCommitmentDetail.Where(m => m.RecoupmentId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblImpRecoupCommitmentDetail commitment = new tblImpRecoupCommitmentDetail();
                                    commitment.RecoupmentId = recoupmentid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblImpRecoupCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblImprestRecoupDeductionDetail.RemoveRange(context.tblImprestRecoupDeductionDetail.Where(m => m.RecoupmentId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblImprestRecoupDeductionDetail deduction = new tblImprestRecoupDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.RecoupmentId = recoupmentid;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblImprestRecoupDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblImprestRecoupExpenseDetail.RemoveRange(context.tblImprestRecoupExpenseDetail.Where(m => m.ImprestRecoupId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestRecoupExpenseDetail exp = new tblImprestRecoupExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.ImprestRecoupId = recoupmentid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestRecoupExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblImprestRecoupCheckDetail.RemoveRange(context.tblImprestRecoupCheckDetail.Where(m => m.ImprestRecoupId == recoupmentid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestRecoupCheckDetail chk = new tblImprestRecoupCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestRecoupId = recoupmentid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestRecoupCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblImprestDocumentDetail.Where(x => x.ImprestRecoupmentId == model.RecoupmentId && !arrList.Contains(x.ImprestDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblImprestDocumentDetail.FirstOrDefault(m => m.ImprestDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.ImprestDetailsId = model.ImprestProjectDetailsId;
                                        doc.ImprestRecoupmentId = model.RecoupmentId;
                                        doc.IsRecoupmentDoc_f = true;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblImprestDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.RecoupmentId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblImprestRecoupment recoup = new tblImprestRecoupment();
                            recoup.CRTD_By = LoggedInUser;
                            recoup.CRTD_TS = DateTime.Now;
                            recoup.PIId = model.PIId;
                            recoup.ImprestUserDetailsId = model.ImprestcardId;
                            recoup.ImprestDetailsId = model.ImprestProjectDetailsId;
                            recoup.ImprestCardNumber = model.ImprestcardNumber;
                            recoup.AllocatedValue = model.ImprestValue;
                            recoup.CheckListVerifiedBy = model.CheckListVerified_By;
                            recoup.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                recoup.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                recoup.SourceEmailDate = model.SourceEmailDate;
                            }
                            recoup.TransactionTypeCode = "IMR";
                            recoup.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getIMPRecoupId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.RecoupmentNumber = "IMR/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.RecoupmentNumber = "IMR/" + FinYear + "/" + "000001";
                            }
                            recoup.RecoupmentNumber = model.RecoupmentNumber;
                            context.tblImprestRecoupment.Add(recoup);
                            context.SaveChanges();

                            decimal? totalamount = 0;
                            int RecoupId = recoup.RecoupmentId;
                            if (RecoupId > 0)
                            {

                                for (int i = 0; i < model.DetailsID.Count(); i++)
                                {
                                    decimal? amount = model.AmountofItem[i];
                                    totalamount += amount;
                                    tblImprestRecoupBillBreakup details = new tblImprestRecoupBillBreakup();
                                    details.RecoupmentId = RecoupId;
                                    details.ImprestPaymentDetailsId = model.ImprestProjectDetailsId;
                                    details.Particulars = model.Particulars[i];
                                    //details.Rate = model.RateofItem[i];
                                    //details.Quantity = model.QuantityofItem[i];
                                    details.Amount = model.AmountofItem[i];
                                    details.VendorName = model.VendorName[i];
                                    details.ImprestRecoupBillNumber = model.VendorBillNumber[i];
                                    details.Status = "Active";
                                    details.CRTD_By = LoggedInUser;
                                    details.CRTD_TS = DateTime.Now;
                                    context.tblImprestRecoupBillBreakup.Add(details);
                                    context.SaveChanges();
                                }
                                recoup.RecoupmentValue = totalamount;
                                recoup.BalanceinAdvance = recoup.AllocatedValue - totalamount;
                                context.SaveChanges();
                                var advquery = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == RecoupId);
                                advquery.ExpenseValue = totalamount;
                                var recquery = (from IMP in context.tblImprestRecoupment
                                                where IMP.PIId == model.PIId
                                                select IMP).ToList();
                                var totalprojectsvalue = model.TotalProjectsValue;
                                decimal? permitedimprest = 0;
                                decimal? totalrecoupedvalue = 0;
                                permitedimprest = (totalprojectsvalue * 20) / 100;
                                if (recquery != null)
                                {
                                    for (int i = 0; i < recquery.Count(); i++)
                                    {
                                        totalrecoupedvalue += recquery[i].RecoupmentValue;
                                    }
                                }

                                if (permitedimprest > 500000)
                                {
                                    permitedimprest = 500000;
                                }
                                if (totalrecoupedvalue == permitedimprest)
                                {
                                    var cardprjct = (from IMP in context.tblImprestPaymentDetails
                                                     where IMP.PIId == model.PIId
                                                     select IMP).ToList();
                                    if (cardprjct != null)
                                    {
                                        for (int i = 0; i < cardprjct.Count(); i++)
                                        {
                                            cardprjct[i].Is_Recoupmentpending = false;
                                            cardprjct[i].Status = "Completed";
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblImpRecoupCommitmentDetail commitment = new tblImpRecoupCommitmentDetail();
                                    commitment.RecoupmentId = RecoupId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblImpRecoupCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblImprestRecoupDeductionDetail deduction = new tblImprestRecoupDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount;
                                        deduction.RecoupmentId = RecoupId;
                                        deduction.CRTD_By = LoggedInUser;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.DeductionHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblImprestRecoupDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblImprestRecoupExpenseDetail exp = new tblImprestRecoupExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.Amount = item.Amount;
                                    exp.ImprestRecoupId = RecoupId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblImprestRecoupExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblImprestRecoupCheckDetail chk = new tblImprestRecoupCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ImprestRecoupId = RecoupId;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblImprestRecoupCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblImprestDocumentDetail doc = new tblImprestDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.ImprestDetailsId = model.ImprestProjectDetailsId;
                                    doc.ImprestRecoupmentId = RecoupId;
                                    doc.IsRecoupmentDoc_f = true;
                                    //  doc.ProjectId = model.ProjectID;
                                    doc.Status = "Active";
                                    context.tblImprestDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }

                                transaction.Commit();
                                return RecoupId;

                            }

                            return RecoupId;
                        }
                    }


                    catch (Exception ex)
                    {

                        return -1;
                    }
                }
            }
        }
        public ImprestPaymentModel GetImprestRecoupmentDetails(int ImprestRecoupId)
        {
            try
            {
                ImprestPaymentModel recoup = new ImprestPaymentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblImprestRecoupment
                                 join C in context.tblImprestPaymentDetails on U.ImprestDetailsId equals C.ImprestPaymentDetailsId
                                 join T in context.tblIMPUserDetails on C.IMPUserDetailsId equals T.IMPUserDetailsId
                                 where (U.RecoupmentId == ImprestRecoupId)
                                 select new { U, C, T }).FirstOrDefault();

                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.T.PIUserId)
                                     select U).FirstOrDefault();
                    var PjctQuery = (from pro in context.tblProject
                                     join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                     where pro.PIName == query.T.PIUserId
                                     select new { U, pro }).ToList();
                    var recouphistory = (from rec in context.tblImprestRecoupment
                                         where rec.PIId == query.T.PIUserId
                                         select rec).ToList();
                    var imphistory = (from rec in context.tblImprestPaymentDetails
                                      where rec.PIId == query.T.PIUserId
                                      select rec).ToList();
                    Nullable<Decimal> totalprojectvalue = 0;
                    Nullable<Decimal> totalrecoupvalue = 0;
                    Nullable<Decimal> totalimpvalue = 0;
                    if (PjctQuery.Count() > 0)
                    {
                        Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[PjctQuery.Count];

                        for (int i = 0; i < PjctQuery.Count(); i++)
                        {
                            _sanctionvalue[i] = Convert.ToDecimal(PjctQuery[i].pro.SanctionValue);
                            totalprojectvalue += _sanctionvalue[i];
                        }
                    }

                    recoup.TotalProjectsValue = totalprojectvalue;
                    if (recouphistory.Count() > 0)
                    {

                        Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                        for (int i = 0; i < recouphistory.Count(); i++)
                        {
                            _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                            totalrecoupvalue += _recoupamount[i];

                        }

                        recoup.TotalPrevRecoupValue = totalrecoupvalue;
                    }
                    else if (recouphistory.Count() == 0)
                    {
                        recoup.TotalPrevRecoupValue = 0;
                    }
                    if (imphistory.Count() > 0)
                    {

                        Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];
                        for (int i = 0; i < imphistory.Count(); i++)
                        {
                            _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                            totalimpvalue += _amount[i];

                        }

                        recoup.TotalPrevImprestValue = totalimpvalue;
                    }
                    else if (imphistory.Count() == 0)
                    {
                        recoup.TotalPrevImprestValue = 0;
                    }
                    //var pendingsettlement = (from ta in context.tblTemporaryAdvance
                    //                         where (ta.ProjectId == query.ProjectId && ta.IsPendingSettlement_f == true)
                    //                         select ta).ToList();
                    //var count = pendingsettlement.Count();
                    //decimal? amount = 0;

                    //string[] pendingsettlementadvancenumber = new string[pendingsettlement.Count()];
                    //for (int i = 0; i < pendingsettlement.Count(); i++)
                    //{
                    //    amount += pendingsettlement[i].TemporaryAdvanceAmountReceived;
                    //    pendingsettlementadvancenumber[i] = pendingsettlement[i].TemporaryAdvanceNumber;
                    //}
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.U.ProjectId));

                    if (query != null)
                    {

                        recoup.RecoupmentNumber = query.U.RecoupmentNumber;
                        recoup.RecoupmentId = query.U.RecoupmentId;
                        recoup.ImprestcardId = query.T.IMPUserDetailsId;
                        recoup.ImprestProjectDetailsId = query.C.ImprestPaymentDetailsId;
                        recoup.ImprestcardNumber = query.T.ImprestCardNumber;
                        recoup.ImprestValue = query.C.AmountAllocated;
                        recoup.RecoupmentValue = query.U.RecoupmentValue;
                        recoup.Projecttitle = projectdetails.ProjectTittle;
                        recoup.PIId = query.T.PIUserId;
                        recoup.NameofPI = pidetails.FirstName;
                        recoup.CreditorType = "PI";
                        recoup.CheckListVerified_By = query.U.CheckListVerifiedBy;
                        recoup.CheckListVerifierName = Common.GetUserFirstName(query.U.CheckListVerifiedBy ?? 0);
                        recoup.Source = query.U.Source;
                        if (query.U.Source == 1)
                        {
                            recoup.SourceReferenceNumber = query.U.SourceReferenceNumber;
                        }
                        else if (query.U.Source == 3)
                        {
                            int refId = query.U.SourceReferenceNumber ?? 0;
                            recoup.SourceReferenceNumber = refId;
                            recoup.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.U.Source == 2)
                            recoup.SourceEmailDate = query.U.SourceEmailDate;
                        //card.NameofReceiver = query.T.NameofReceiver;
                        //card.ClaimingDepartment = query.T.DepartmentorSection;
                        //temp.Remarks = query.Remarks;
                        //temp.PendingSettlementAmount = amount;
                        //temp.NoofUnsettledAdvance = count;
                        //temp.PendingSettlementAdvanceNumber = "Nil";
                        //if (count == 1)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0];
                        //}
                        //if (count == 2)
                        //{
                        //    temp.PendingSettlementAdvanceNumber = pendingsettlementadvancenumber[0] + ", " + pendingsettlementadvancenumber[1];
                        //}
                        var tQuery = context.tblImprestRecoupBillBreakup.Where(m => m.RecoupmentId == ImprestRecoupId && m.Status == "Active").ToList();
                        if (tQuery.Count > 0)
                        {

                            int[] _detailsid = new int[tQuery.Count];
                            Nullable<int>[] _quantity = new Nullable<int>[tQuery.Count];
                            string[] _particulars = new string[tQuery.Count];
                            Nullable<Decimal>[] _rate = new Nullable<Decimal>[tQuery.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[tQuery.Count];
                            string[] _vendorname = new string[tQuery.Count];
                            string[] _vendorbillnumber = new string[tQuery.Count];

                            for (int i = 0; i < tQuery.Count(); i++)
                            {
                                _detailsid[i] = tQuery[i].ImprestRecoupBillId;
                                _particulars[i] = tQuery[i].Particulars;
                                _amount[i] = tQuery[i].Amount;
                                _vendorname[i] = tQuery[i].VendorName;
                                _vendorbillnumber[i] = tQuery[i].ImprestRecoupBillNumber;

                            }
                            recoup.DetailsID = _detailsid;
                            recoup.Particulars = _particulars;
                            recoup.AmountofItem = _amount;
                            recoup.VendorName = _vendorname;
                            recoup.VendorBillNumber = _vendorbillnumber;
                        }
                        recoup.CommitmentDetail = (from c in context.tblImpRecoupCommitmentDetail
                                                   join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                   join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                   join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                   join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                   orderby det.ComitmentDetailId descending
                                                   where c.RecoupmentId == ImprestRecoupId && c.Status == "Active"
                                                   select new BillCommitmentDetailModel()
                                                   {
                                                       CommitmentDetailId = c.CommitmentDetailId,
                                                       CommitmentNumber = com.CommitmentNumber,
                                                       ProjectNumber = p.ProjectNumber,
                                                       ProjectId = com.ProjectId,
                                                       HeadName = head.HeadName,
                                                       AvailableAmount = det.BalanceAmount ?? 0,
                                                       PaymentAmount = c.PaymentAmount,
                                                       BillCommitmentDetailId = c.ImpRecoupCommitmentDetailId
                                                   }).ToList();
                        recoup.ExpenseDetail = (from e in context.tblImprestRecoupExpenseDetail
                                                where e.ImprestRecoupId == ImprestRecoupId && e.Status == "Active"
                                                select new
                                                {
                                                    e.AccountHeadId,
                                                    e.Amount,
                                                    e.AccountGroupId,
                                                    e.ImprestRecoupExpenseDetailId,
                                                    e.TransactionType,
                                                    e.IsJV_f
                                                })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 BillExpenseDetailId = x.ImprestRecoupExpenseDetailId,
                                                 IsJV = x.IsJV_f ?? false
                                             }).ToList();

                        recoup.DeductionDetail = (from d in context.tblImprestRecoupDeductionDetail
                                                  join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                  join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                  join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                  where d.RecoupmentId == ImprestRecoupId && d.Status == "Active"
                                                  select new BillDeductionDetailModel()
                                                  {
                                                      AccountGroupId = d.AccountGroupId,
                                                      BillDeductionDetailId = d.IMPRecoupDeductionDetailId,
                                                      Amount = d.Amount,
                                                      DeductionHeadId = d.DeductionHeadId,
                                                      AccountGroup = g.AccountGroup,
                                                      DeductionHead = hd.AccountHead
                                                  }).ToList();
                        recoup.CheckListDetail = (from ck in context.tblImprestRecoupCheckDetail
                                                  join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                  where ck.ImprestRecoupId == ImprestRecoupId && ck.Status == "Active"
                                                  select new CheckListModel()
                                                  {
                                                      CheckList = chkf.CheckList,
                                                      FunctionCheckListId = ck.FunctionCheckListId,
                                                      IsChecked = true
                                                  }).ToList();

                        recoup.DocumentDetail = (from d in context.tblImprestDocumentDetail
                                                 where d.ImprestRecoupmentId == ImprestRecoupId && d.Status == "Active" && d.IsRecoupmentDoc_f == true
                                                 select new AttachmentDetailModel()
                                                 {
                                                     DocumentActualName = d.DocumentActualName,
                                                     DocumentDetailId = d.ImprestDocumentDetailId,
                                                     DocumentName = d.DocumentName,
                                                     DocumentPath = "~/Content/OtherDocuments",
                                                     DocumentType = d.DocumentType,
                                                     Remarks = d.Remarks
                                                 }).ToList();
                    }
                }
                return recoup;
            }
            catch (Exception ex)
            {
                return new ImprestPaymentModel();
            }
        }
        public ImprestPaymentModel GetImprestCardDetails(int ImprestCardId)
        {
            try
            {
                ImprestPaymentModel recoup = new ImprestPaymentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from U in context.tblIMPUserDetails
                                 join T in context.tblImprestPaymentDetails on U.IMPUserDetailsId equals T.IMPUserDetailsId
                                 where (U.IMPUserDetailsId == ImprestCardId && U.Status == "Approved")
                                 select new { U, T }).FirstOrDefault();

                    var pidetails = (from U in context.vwFacultyStaffDetails
                                     where (U.UserId == query.U.PIUserId)
                                     select U).FirstOrDefault();

                    var PjctQuery = (from pro in context.tblProject
                                     join U in context.vwFacultyStaffDetails on pro.PIName equals U.UserId
                                     where pro.PIName == query.U.PIUserId
                                     select new { U, pro }).ToList();
                    var recouphistory = (from rec in context.tblImprestRecoupment
                                         where rec.PIId == query.U.PIUserId
                                         select rec).ToList();
                    var imphistory = (from rec in context.tblImprestPaymentDetails
                                      where rec.PIId == query.U.PIUserId
                                      select rec).ToList();
                    Nullable<Decimal> totalprojectvalue = 0;
                    Nullable<Decimal> totalrecoupvalue = 0;
                    Nullable<Decimal> totalimpvalue = 0;
                    if (PjctQuery.Count() > 0)
                    {
                        Nullable<Decimal>[] _sanctionvalue = new Nullable<Decimal>[PjctQuery.Count];

                        for (int i = 0; i < PjctQuery.Count(); i++)
                        {
                            _sanctionvalue[i] = Convert.ToDecimal(PjctQuery[i].pro.SanctionValue);
                            totalprojectvalue += _sanctionvalue[i];
                        }
                    }

                    recoup.TotalProjectsValue = totalprojectvalue;
                    if (recouphistory.Count() > 0)
                    {

                        Nullable<Decimal>[] _recoupamount = new Nullable<Decimal>[recouphistory.Count];
                        for (int i = 0; i < recouphistory.Count(); i++)
                        {
                            _recoupamount[i] = Convert.ToDecimal(recouphistory[i].RecoupmentValue);
                            totalrecoupvalue += _recoupamount[i];

                        }

                        recoup.TotalPrevRecoupValue = totalrecoupvalue;
                    }
                    else if (recouphistory.Count() == 0)
                    {
                        recoup.TotalPrevRecoupValue = 0;
                    }
                    if (imphistory.Count() > 0)
                    {

                        Nullable<Decimal>[] _amount = new Nullable<Decimal>[imphistory.Count];
                        for (int i = 0; i < imphistory.Count(); i++)
                        {
                            _amount[i] = Convert.ToDecimal(imphistory[i].AmountAllocated);
                            totalimpvalue += _amount[i];

                        }

                        recoup.TotalPrevImprestValue = totalimpvalue;
                    }
                    else if (imphistory.Count() == 0)
                    {
                        recoup.TotalPrevImprestValue = 0;
                    }
                    if (query != null)
                    {

                        recoup.ImprestcardId = query.U.IMPUserDetailsId;
                        recoup.ImprestProjectDetailsId = query.T.ImprestPaymentDetailsId;
                        recoup.ImprestcardNumber = query.U.ImprestCardNumber;
                        recoup.ImprestValue = query.U.ImprestTotalValue;

                        recoup.PIId = query.U.PIUserId;
                        recoup.NameofPI = pidetails.FirstName;
                        recoup.CreditorType = "PI";

                    }
                }
                return recoup;
            }
            catch (Exception ex)
            {
                return new ImprestPaymentModel();
            }
        }

        public bool ImprestRecoupmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblImpRecoupCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.RecoupmentId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool ImprestRecoupmentBillApproved(int recoupmentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == recoupmentId && m.Status == "Open" && m.TransactionTypeCode == "IMR");
                    if (query != null)
                    {
                        if (!getImprestRecoupmentBOAmodeldetails(recoupmentId))
                            return false;
                        query.Status = "Approved";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getImprestRecoupmentBOAmodeldetails(int recoupmentId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblImprestRecoupment.SingleOrDefault(m => m.RecoupmentId == recoupmentId);

                    var commitdetail = (from c in context.tblImpRecoupCommitmentDetail
                                        join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                        join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                        join p in context.tblProject on com.ProjectId equals p.ProjectId
                                        join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                        orderby det.ComitmentDetailId descending
                                        where c.RecoupmentId == recoupmentId && c.Status == "Active"
                                        select new BOADetailModel()
                                        {
                                            CommitmentDetailId = c.CommitmentDetailId,
                                            ProjectId = com.ProjectId,
                                            BudgetHead = head.BudgetHeadId,
                                            Amount = c.PaymentAmount ?? 0,
                                        }).ToList();
                    if (billQuery != null)
                    {
                        var cardpjctdetails = context.tblImprestPaymentDetails.SingleOrDefault(m => m.ImprestPaymentDetailsId == billQuery.ImprestDetailsId);

                        decimal netAmt = (billQuery.RecoupmentValue ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.TempVoucherNumber = billQuery.RecoupmentNumber;
                        model.RefNumber = billQuery.RecoupmentNumber;
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        var piname = Common.GetPIName(billQuery.PIId ?? 0, true);
                        txList = (from exp in context.tblImprestRecoupExpenseDetail
                                  where exp.ImprestRecoupId == recoupmentId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblImprestRecoupDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.RecoupmentId == recoupmentId && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 3,
                            SubLedgerId = cardpjctdetails.PIId
                        });

                        BOAPaymentDetail = (from exp in context.tblImprestRecoupExpenseDetail
                                            join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                            join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                            where exp.ImprestRecoupId == recoupmentId && exp.Status == "Active" && exp.AccountGroupId == 61
                                            select new BOAPaymentDetailModel()
                                            {
                                                TransactionType = exp.TransactionType,
                                                BankHeadID = exp.AccountHeadId,
                                                Amount = exp.Amount,
                                                ReferenceNumber = billQuery.RecoupmentNumber,
                                                ReferenceDate = billQuery.CRTD_TS,
                                                PaymentMode = 2,
                                                PayeeBank = hd.AccountHead,
                                                Reconciliation_f = false,
                                                PayeeName = piname,
                                                PayeeId = billQuery.PIId,
                                                PayeeType = "PI",
                                                Remarks = model.Narration,

                                            }).ToList();

                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOADetail = commitdetail;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public List<ImprestPaymentSearchResultModel> SearchImprestRecoupmentList(ImprestPaymentSearchFieldModel model)
        {
            List<ImprestPaymentSearchResultModel> Card = new List<ImprestPaymentSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.EntryToDate != null)
                {
                    model.EntryToDate = model.EntryToDate.Value.Date.AddDays(1).AddTicks(-1);
                }

                var query = (from R in context.tblImprestRecoupment
                             join Pjct in context.tblImprestPaymentDetails on R.ImprestDetailsId equals Pjct.ImprestPaymentDetailsId
                             join card in context.tblIMPUserDetails on Pjct.IMPUserDetailsId equals card.IMPUserDetailsId
                             //  join P in context.tblProject on Pjct.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on Pjct.PIId equals user.UserId
                             where ((String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.ImprestcardNumber) || card.ImprestCardNumber.Contains(model.ImprestcardNumber))
                             && (String.IsNullOrEmpty(model.RecoupmentNumber) || R.RecoupmentNumber.Contains(model.RecoupmentNumber))
                             && (((card.CrtdTS >= model.EntryFromDate) && (card.CrtdTS <= model.EntryToDate)) ||
                             (model.EntryFromDate == null && model.EntryToDate == null)))
                             orderby R.RecoupmentId descending
                             select new { R, Pjct, card, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;

                        Card.Add(new ImprestPaymentSearchResultModel()
                        {
                            SlNo = i + 1,
                            PIId = query[i].card.PIUserId,
                            ImprestcardId = query[i].card.IMPUserDetailsId,
                            ImprestProjectDetailsId = query[i].Pjct.ImprestPaymentDetailsId,
                            RecoupmentId = query[i].R.RecoupmentId,
                            RecoupmentNumber = query[i].R.RecoupmentNumber,
                            RecoupmentValue = query[i].R.RecoupmentValue,
                            RequestedDate = String.Format("{0:s}", query[i].R.CRTD_TS),
                            ImprestValue = query[i].card.ImprestTotalValue,
                            ImprestBankACNumber = query[i].card.ImprestACNumber,
                            IsRecoupmentpending = query[i].Pjct.Is_Recoupmentpending,
                            Status = query[i].R.Status,
                            NameofPI = pi,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Card;
        }
        #endregion

        #region Imprest Bill Recoupment
        public ImprestBillRecoupModel GetIMPBillRecoupDetails(int BillRecoupid)
        {
            try
            {
                ImprestBillRecoupModel bill = new ImprestBillRecoupModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestBillRecoupment.FirstOrDefault(m => m.ImprestBillRecoupId == BillRecoupid);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.ImprestBillRecoupNumber = query.ImprestBillRecoupNumber;
                        bill.Narration = query.Narration;
                        bill.DocumentName = query.DocumentName;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentPath = "~/Content/OtherDocuments";
                        bill.PostedDate = String.Format("{0:s}", query.CRTD_TS);
                        bill.ImprestBillRecoupId = BillRecoupid;

                        bill.CrDetail = (from e in context.tblImprestBillRecoupDetail
                                         where e.ImprestBillRecoupId == BillRecoupid && e.TransactionType == "Credit"
                                         select new
                                         {
                                             e.AccountHeadId,
                                             e.Amount,
                                             e.AccountGroupId,
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new ImprestBillRecoupDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                              }).ToList();

                        bill.DrDetail = (from e in context.tblImprestBillRecoupDetail
                                         where e.ImprestBillRecoupId == BillRecoupid && e.TransactionType == "Debit"
                                         select new
                                         {
                                             e.AccountHeadId,
                                             e.Amount,
                                             e.AccountGroupId,
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new ImprestBillRecoupDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new ImprestBillRecoupModel();
            }
        }
        public int ImprestBillRecoupIU(ImprestBillRecoupModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.ImprestBillRecoupId == null)
                        {
                            int ImprestRecoupBillId = 0;
                            tblImprestBillRecoupment bill = new tblImprestBillRecoupment();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "IBR";
                            bill.ImprestBillRecoupNumber = Common.GetImprestBillRecoupNo();
                            bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                            bill.Narration = model.Narration;
                            if (model.Document != null)
                            {
                                string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                var docName = Guid.NewGuid().ToString() + "_" + actName;
                                model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                bill.DocumentActualName = actName;
                                bill.DocumentName = docName;
                            }
                            context.tblImprestBillRecoupment.Add(bill);
                            context.SaveChanges();
                            ImprestRecoupBillId = bill.ImprestBillRecoupId;
                            var billquery = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == model.ImprestRecoupId && m.Status == "Approved");
                            if (billquery != null)
                            {
                                billquery.Status = "Completed";
                            }
                            foreach (var item in model.CrDetail)
                            {
                                tblImprestBillRecoupDetail crDet = new tblImprestBillRecoupDetail();
                                crDet.ImprestBillRecoupId = ImprestRecoupBillId;
                                crDet.Amount = item.Amount;
                                crDet.AccountGroupId = item.AccountGroupId;
                                crDet.AccountHeadId = item.AccountHeadId;
                                crDet.TransactionType = "Credit";
                                context.tblImprestBillRecoupDetail.Add(crDet);
                                context.SaveChanges();
                            }

                            foreach (var item in model.DrDetail)
                            {
                                tblImprestBillRecoupDetail drDet = new tblImprestBillRecoupDetail();
                                drDet.ImprestBillRecoupId = ImprestRecoupBillId;
                                drDet.Amount = item.Amount;
                                drDet.AccountGroupId = item.AccountGroupId;
                                drDet.AccountHeadId = item.AccountHeadId;
                                drDet.TransactionType = "Debit";
                                context.tblImprestBillRecoupDetail.Add(drDet);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return ImprestRecoupBillId;
                        }
                        else
                        {
                            int ImprestRecoupBillId = model.ImprestBillRecoupId ?? 0;
                            var bill = context.tblImprestBillRecoupment.FirstOrDefault(m => m.ImprestBillRecoupId == ImprestRecoupBillId && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                                bill.Narration = model.Narration;
                                if (model.Document != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                    var docName = Guid.NewGuid().ToString() + "_" + actName;
                                    model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    bill.DocumentActualName = actName;
                                    bill.DocumentName = docName;
                                }

                                context.tblImprestBillRecoupDetail.RemoveRange(context.tblImprestBillRecoupDetail.Where(m => m.ImprestBillRecoupId == ImprestRecoupBillId));
                                context.SaveChanges();
                                foreach (var item in model.CrDetail)
                                {
                                    tblImprestBillRecoupDetail crDet = new tblImprestBillRecoupDetail();
                                    crDet.ImprestBillRecoupId = ImprestRecoupBillId;
                                    crDet.Amount = item.Amount;
                                    crDet.AccountGroupId = item.AccountGroupId;
                                    crDet.AccountHeadId = item.AccountHeadId;
                                    crDet.TransactionType = "Credit";
                                    context.tblImprestBillRecoupDetail.Add(crDet);
                                    context.SaveChanges();
                                }

                                foreach (var item in model.DrDetail)
                                {
                                    tblImprestBillRecoupDetail drDet = new tblImprestBillRecoupDetail();
                                    drDet.ImprestBillRecoupId = ImprestRecoupBillId;
                                    drDet.Amount = item.Amount;
                                    drDet.AccountGroupId = item.AccountGroupId;
                                    drDet.AccountHeadId = item.AccountHeadId;
                                    drDet.TransactionType = "Debit";
                                    context.tblImprestBillRecoupDetail.Add(drDet);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return ImprestRecoupBillId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<ImprestBillRecoupModel> GetImprestRecoupBillList()
        {
            try
            {

                List<ImprestBillRecoupModel> list = new List<ImprestBillRecoupModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblImprestBillRecoupment
                            orderby b.ImprestBillRecoupId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.ImprestBillRecoupId,
                                b.ImprestBillRecoupNumber,
                                b.Amount,
                                b.CRTD_TS,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ImprestBillRecoupModel()
                                 {
                                     SlNo = index + 1,
                                     ImprestBillRecoupId = x.ImprestBillRecoupId,
                                     ImprestBillRecoupNumber = x.ImprestBillRecoupNumber,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     CreditAmount = x.Amount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ImprestBillRecoupModel>();
            }
        }
        public bool ApproveImprestBillRecoupment(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblImprestBillRecoupment.SingleOrDefault(m => m.ImprestBillRecoupId == id && m.Status == "Open");
                    if (billQuery != null && ImprestBillRecoupBOATransaction(id))
                    {

                        billQuery.Status = "Completed";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool ImprestBillRecoupBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblImprestBillRecoupment.SingleOrDefault(m => m.ImprestBillRecoupId == id);
                    if (billQuery != null)
                    {
                        model.TempVoucherNumber = billQuery.ImprestBillRecoupNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 7;
                        model.VoucherNumber = billQuery.ImprestBillRecoupNumber;
                        model.BOAValue = billQuery.Amount;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.ImprestBillRecoupNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblImprestBillRecoupDetail
                                  where exp.ImprestBillRecoupId == id
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType
                                  }).ToList();
                        var credit = (from exp in context.tblImprestBillRecoupDetail
                                      join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                      where exp.ImprestBillRecoupId == id && exp.TransactionType == "Credit"
                                      select new
                                      {
                                          exp.TransactionType,
                                          exp.AccountHeadId,
                                          exp.Amount,
                                          hd.AccountHead,
                                      }).FirstOrDefault();
                        var debit = (from exp in context.tblImprestBillRecoupDetail
                                     join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                     join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                     where exp.ImprestBillRecoupId == id && exp.TransactionType == "Debit"
                                     select new
                                     {
                                         exp.TransactionType,
                                         exp.AccountHeadId,
                                         exp.Amount,
                                         hd.AccountHead,
                                     }).FirstOrDefault();

                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = credit.TransactionType,
                            BankHeadID = credit.AccountHeadId,
                            Amount = credit.Amount,
                            ReferenceNumber = billQuery.ImprestBillRecoupNumber,
                            ReferenceDate = billQuery.CRTD_TS,
                            PayeeId = debit.AccountHeadId,
                            PayeeBank = debit.AccountHead,
                            PayeeName = debit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,

                        });
                        BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                        {
                            TransactionType = debit.TransactionType,
                            BankHeadID = debit.AccountHeadId,
                            Amount = debit.Amount,
                            ReferenceNumber = billQuery.ImprestBillRecoupNumber,
                            ReferenceDate = billQuery.CRTD_TS,
                            PayeeId = credit.AccountHeadId,
                            PayeeBank = credit.AccountHead,
                            PayeeName = credit.AccountHead,
                            PayeeType = "Bank",
                            PaymentMode = 2,
                            Remarks = model.Narration,
                            Reconciliation_f = false,
                        });
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public ImprestBillRecoupModel GetIMPBillDetails(int recoupid)
        {
            try
            {
                ImprestBillRecoupModel bill = new ImprestBillRecoupModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblImprestRecoupment.FirstOrDefault(m => m.RecoupmentId == recoupid);
                    if (query != null)
                    {
                        
                        bill.ImprestRecoupId = recoupid;
                        List<ImprestBillRecoupDetailModel> list = new List<ImprestBillRecoupDetailModel>();
                        list.Add(new ImprestBillRecoupDetailModel()
                        {
                            AccountGroupId = 38,
                            AccountHeadList = Common.GetAccountHeadList(38)
                        });
                        bill.CrDetail = list;

                        bill.DrDetail = (from e in context.tblImprestRecoupExpenseDetail
                                         where e.ImprestRecoupId == recoupid && e.TransactionType == "Credit"
                                         select new
                                         {
                                             e.AccountHeadId,
                                             e.Amount,
                                             e.AccountGroupId,
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new ImprestBillRecoupDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new ImprestBillRecoupModel();
            }
        }
        #endregion
        #endregion
        #region Journal
        public List<JournalModel> GetJournalList()
        {
            try
            {

                List<JournalModel> list = new List<JournalModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblJournal
                            join cc in context.tblCodeControl on
                                             new { reason = b.Reason ?? 0, codeName = "Journal Reason" } equals
                                             new { reason = cc.CodeValAbbr, codeName = cc.CodeName }
                            orderby b.JournalId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.JournalId,
                                b.JournalNumber,
                                cc.CodeValDetail,
                                b.CRTD_TS,
                                b.Amount,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new JournalModel()
                                 {
                                     SlNo = index + 1,
                                     JournalId = x.JournalId,
                                     JournalNumber = x.JournalNumber,
                                     ReasonString = x.CodeValDetail,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     CreditAmount = x.Amount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<JournalModel>();
            }
        }
        public JournalModel GetJournalDetails(int journalId)
        {
            try
            {
                JournalModel jv = new JournalModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblJournal.FirstOrDefault(m => m.JournalId == journalId);
                    if (query != null)
                    {
                        jv.JournalNumber = query.JournalNumber;
                        jv.JournalId = query.JournalId;
                        jv.Narration = query.Narration;
                        jv.Reason = query.Reason;
                        jv.ExpenseDetail = (from e in context.tblJournalTransationDetail
                                            where e.JournalId == journalId && e.Status == "Active"
                                            select new
                                            {
                                                e.AccountHeadId,
                                                e.Amount,
                                                e.AccountGroupId,
                                                e.JournalTransationDetailId,
                                                e.TransactionType
                                            })
                                               .AsEnumerable()
                                               .Select((x) => new BillExpenseDetailModel()
                                               {
                                                   AccountHeadId = x.AccountHeadId,
                                                   Amount = x.Amount,
                                                   TransactionType = x.TransactionType,
                                                   AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                   AccountGroupId = x.AccountGroupId,
                                                   AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                   BillExpenseDetailId = x.JournalTransationDetailId
                                               }).ToList();

                        jv.DocumentDetail = (from d in context.tblJournalDocumentDetail
                                             where d.JournalId == journalId && d.Status == "Active"
                                             select new AttachmentDetailModel()
                                             {
                                                 DocumentActualName = d.DocumentActualName,
                                                 DocumentDetailId = d.JournalDocumentDetailId,
                                                 DocumentName = d.DocumentName,
                                                 DocumentPath = "~/Content/OtherDocuments",
                                                 DocumentType = d.DocumentType,
                                                 Remarks = d.Remarks
                                             }).ToList();
                    }
                }
                return jv;
            }
            catch (Exception ex)
            {
                return new JournalModel();
            }
        }
        public int JournalIU(JournalModel model, int logged_in_user)
        {
            {
                using (var context = new IOASDBEntities())
                {
                    using (var transaction = context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (model.JournalId == 0)
                            {
                                int journalId = 0;
                                tblJournal bill = new tblJournal();
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                bill.Status = "Open";
                                bill.JournalNumber = Common.GetNewJvNo();
                                bill.Narration = model.Narration;
                                bill.Reason = model.Reason;
                                bill.Amount = model.ExpenseDetail.Where(m => m.TransactionType == "Credit").Select(m => m.Amount).Sum();
                                bill.TransactionTypeCode = "JV";
                                context.tblJournal.Add(bill);
                                context.SaveChanges();
                                journalId = bill.JournalId;
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblJournalTransationDetail exp = new tblJournalTransationDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.JournalId = journalId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblJournalTransationDetail.Add(exp);
                                    context.SaveChanges();
                                }

                                foreach (var item in model.DocumentDetail)
                                {
                                    tblJournalDocumentDetail doc = new tblJournalDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = logged_in_user;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.JournalId = journalId;
                                    doc.Status = "Active";
                                    context.tblJournalDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return journalId;
                            }
                            else
                            {
                                int journalId = model.JournalId;
                                var bill = context.tblJournal.FirstOrDefault(m => m.JournalId == journalId && m.Status == "Open");
                                if (bill != null)
                                {
                                    bill.UPTD_By = logged_in_user;
                                    bill.UPTD_TS = DateTime.Now;
                                    bill.Narration = model.Narration;
                                    bill.Reason = model.Reason;
                                    bill.Amount = model.ExpenseDetail.Where(m => m.TransactionType == "Credit").Select(m => m.Amount).Sum();
                                    context.SaveChanges();
                                    context.tblJournalTransationDetail.RemoveRange(context.tblJournalTransationDetail.Where(m => m.JournalId == journalId));
                                    context.SaveChanges();
                                    foreach (var item in model.ExpenseDetail)
                                    {
                                        tblJournalTransationDetail exp = new tblJournalTransationDetail();
                                        exp.AccountGroupId = item.AccountGroupId;
                                        exp.AccountHeadId = item.AccountHeadId;
                                        exp.TransactionType = item.TransactionType;
                                        exp.Amount = item.Amount;
                                        exp.JournalId = journalId;
                                        exp.CRTD_By = logged_in_user;
                                        exp.CRTD_TS = DateTime.Now;
                                        exp.Status = "Active";
                                        context.tblJournalTransationDetail.Add(exp);
                                        context.SaveChanges();
                                    }
                                    var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                    context.tblJournalDocumentDetail.Where(x => x.JournalId == journalId && !arrList.Contains(x.JournalDocumentDetailId) && x.Status != "InActive")
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.Status = "InActive";
                                        m.UPDT_By = logged_in_user;
                                        m.UPDT_TS = DateTime.Now;
                                        m.Delete_By = logged_in_user;
                                    });
                                    foreach (var item in model.DocumentDetail)
                                    {
                                        var docQuery = context.tblJournalDocumentDetail.FirstOrDefault(m => m.JournalDocumentDetailId == item.DocumentDetailId);
                                        if (docQuery == null)
                                        {
                                            tblJournalDocumentDetail doc = new tblJournalDocumentDetail();
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                            doc.CRTD_By = logged_in_user;
                                            doc.CRTD_TS = DateTime.Now;
                                            doc.DocumentActualName = actName;
                                            doc.DocumentName = docName;
                                            doc.DocumentType = item.DocumentType;
                                            doc.Remarks = item.Remarks;
                                            doc.JournalId = journalId;
                                            doc.Status = "Active";
                                            context.tblJournalDocumentDetail.Add(doc);
                                            context.SaveChanges();
                                        }
                                        else
                                        {
                                            if (item.DocumentFile != null)
                                            {
                                                string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                                var guid = Guid.NewGuid().ToString();
                                                var docName = guid + "_" + actName;
                                                item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                                docQuery.DocumentActualName = actName;
                                                docQuery.DocumentName = docName;
                                            }
                                            docQuery.UPDT_By = logged_in_user;
                                            docQuery.UPDT_TS = DateTime.Now;
                                            docQuery.DocumentType = item.DocumentType;
                                            docQuery.Remarks = item.Remarks;
                                            context.SaveChanges();
                                        }
                                    }

                                    transaction.Commit();
                                    return journalId;
                                }
                                else
                                    return -1;

                            }

                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            return -1;
                        }
                    }
                }
            }
        }
        public bool ApproveJournal(Int32 journalId, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    lock (lockObj)
                    {
                        var billQuery = context.tblJournal.SingleOrDefault(m => m.JournalId == journalId && m.Status == "Open");
                        if (billQuery != null)
                        {
                            var tempVoucherNumber = billQuery.JournalNumber;

                            //string voucherNumber = Common.GetNewVoucherNo("JV");
                            BOAModel model = new BOAModel();
                            List<BOATransactionModel> txList = new List<BOATransactionModel>();
                            model.TempVoucherNumber = tempVoucherNumber;
                            model.PostedDate = DateTime.Now;
                            model.VoucherType = 3;
                            model.VoucherNumber = tempVoucherNumber;
                            model.BOAValue = billQuery.Amount;
                            model.TransactionTypeCode = billQuery.TransactionTypeCode;
                            model.RefNumber = tempVoucherNumber;
                            model.RefTransactionCode = billQuery.TransactionTypeCode;
                            txList = (from exp in context.tblJournalTransationDetail
                                      where exp.JournalId == journalId
                                      select new BOATransactionModel()
                                      {
                                          AccountHeadId = exp.AccountHeadId,
                                          Amount = exp.Amount,
                                          TransactionType = exp.TransactionType
                                      }).ToList();
                            model.BOATransaction = txList;
                            if (BOATransaction(model))
                            {
                                billQuery.Status = "Completed";
                                billQuery.UPTD_By = loggedInUser;
                                billQuery.UPTD_TS = DateTime.Now;
                                context.SaveChanges();
                                return true;
                            }
                            else
                                return false;
                        }
                        else
                            return false;
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region PartTimeStudent
        public PartTimePaymentModel GetPartTimePaymentDetails(int paymentid)
        {
            try
            {
                PartTimePaymentModel internship = new PartTimePaymentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == paymentid);
                    var projectid = query.ProjectId;
                    var projectquery = context.tblProject.FirstOrDefault(m => m.ProjectId == projectid);
                    var userquery = context.vwFacultyStaffDetails.FirstOrDefault(m => m.UserId == projectquery.PIName);
                    var studentquery = (from s in context.tblPartTimeStudentDetails
                                        orderby s.PartTimeStudentId
                                        where s.PaymentId == paymentid
                                        select s).ToList();
                    var projectdetails = Common.GetProjectsDetails(Convert.ToInt32(query.ProjectId));

                    if (query != null)
                    {
                        internship.Source = query.Source;
                        if (query.Source == 1)
                        {
                            internship.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            internship.SourceReferenceNumber = refId;
                            internship.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            internship.SourceEmailDate = query.SourceEmailDate;
                        internship.PartTimePaymentId = query.PartTimePaymentId;
                        internship.PartTimePaymentNumber = query.PartTimePaymentNumber;
                        internship.ProjectId = query.ProjectId;
                        internship.PIName = userquery.FirstName;
                        //  internship.ProjectTypeName = projectdetails.ProjectType;
                        internship.PIId = projectquery.PIName;
                        internship.Remark = query.Remarks;
                        internship.CreditorType = "Student";
                        internship.CreditorAmount = query.TotalStipendAmount;
                        internship.TotalStipendValue = query.TotalStipendAmount;
                        internship.TotalnoofStudents = query.TotalNumberofStudents;
                        internship.CheckListVerified_By = query.CheckListVerifiedBy;
                        internship.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);

                        internship.StudentDetails = (from d in context.tblPartTimeStudentDetails
                                                     where d.PaymentId == paymentid && d.Status == "Active"
                                                     select new
                                                     {
                                                         d.StudentName,
                                                         d.RollNo,
                                                         d.Course,
                                                         d.Session,
                                                         // d.Department,
                                                         d.Email,
                                                         d.YearofStudy,
                                                         d.InternStartDate,
                                                         d.InternCloseDate,
                                                         d.Duration,
                                                         d.StipendAmountperHour,
                                                         d.TotalStipend,
                                                         d.BankName,
                                                         d.AccountNumber,
                                                         d.BranchName,
                                                         d.IFSCCode,
                                                     })
                                                     .AsEnumerable()
                                 .Select((x) => new StudentListModel()
                                 {
                                     Name = x.StudentName,
                                     StudentRollNo = x.RollNo,
                                     StudentCourse = x.Course,
                                     Session = x.Session,
                                     //   Department = x.Department,
                                     StudentEmail = x.Email,
                                     StudentYearofStudy = x.YearofStudy,
                                     InternFromDate = String.Format("{0:dd-MMMM-yyyy}", x.InternStartDate),
                                     InternToDate = String.Format("{0:dd-MMMM-yyyy}", x.InternCloseDate),
                                     Duration = x.Duration,
                                     StipendValueperHour = x.StipendAmountperHour,
                                     StipendValue = x.TotalStipend,
                                     BankName = x.BankName,
                                     AccountNumber = x.AccountNumber,
                                     BranchName = x.BranchName,
                                     IFSCCode = x.IFSCCode,
                                 }).ToList();

                        internship.CommitmentDetail = (from c in context.tblPartTimePaymentCommitmentDetail
                                                       join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                       join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                       join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                       join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                       orderby det.ComitmentDetailId descending
                                                       where c.PartTimePaymentId == paymentid && c.Status == "Active"
                                                       select new BillCommitmentDetailModel()
                                                       {
                                                           CommitmentDetailId = c.CommitmentDetailId,
                                                           CommitmentNumber = com.CommitmentNumber,
                                                           ProjectNumber = p.ProjectNumber,
                                                           ProjectId = com.ProjectId,
                                                           HeadName = head.HeadName,
                                                           AvailableAmount = det.BalanceAmount ?? 0,
                                                           PaymentAmount = c.PaymentAmount,
                                                           BillCommitmentDetailId = c.PartTimePaymentCommitmentDetailId
                                                       }).ToList();
                        internship.ExpenseDetail = (from e in context.tblPartTimePaymentExpenseDetail
                                                    where e.PartTimePaymentId == paymentid && e.Status == "Active"
                                                    select new
                                                    {
                                                        e.AccountHeadId,
                                                        e.Amount,
                                                        e.AccountGroupId,
                                                        e.PartTimePaymentExpenseDetailId,
                                                        e.TransactionType,
                                                        e.IsJV_f
                                                    })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  TransactionType = x.TransactionType,
                                                  Amount = x.Amount,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.PartTimePaymentExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        internship.DeductionDetail = (from d in context.tblPartTimePaymentDeductionDetail
                                                      join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                      join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                      where d.PartTimePaymentId == paymentid && d.Status == "Active"
                                                      select new BillDeductionDetailModel()
                                                      {
                                                          AccountGroupId = d.AccountGroupId,
                                                          BillDeductionDetailId = d.PartTimePaymentDeductionDetailId,
                                                          Amount = d.Amount,
                                                          DeductionHeadId = d.DeductionHeadId,
                                                          AccountGroup = g.AccountGroup,
                                                          DeductionHead = hd.AccountHead
                                                      }).ToList();

                        internship.CheckListDetail = (from ck in context.tblPartTimePaymentCheckDetail
                                                      join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                      where ck.PartTimePaymentId == paymentid && ck.Status == "Active"
                                                      select new CheckListModel()
                                                      {
                                                          CheckList = chkf.CheckList,
                                                          FunctionCheckListId = ck.FunctionCheckListId,
                                                          IsChecked = true
                                                      }).ToList();

                        internship.DocumentDetail = (from d in context.tblPartTimePaymentDocumentDetail
                                                     where d.PartTimePaymentId == paymentid && d.Status == "Active"
                                                     select new AttachmentDetailModel()
                                                     {
                                                         DocumentActualName = d.DocumentActualName,
                                                         DocumentDetailId = d.PartTimePaymentDocumentDetailId,
                                                         DocumentName = d.DocumentName,
                                                         DocumentPath = "~/Content/OtherDocuments",
                                                         DocumentType = d.DocumentType,
                                                         Remarks = d.Remarks
                                                     }).ToList();
                    }
                }
                return internship;
            }
            catch (Exception ex)
            {
                return new PartTimePaymentModel();
            }
        }
        public int CreatePartTimePayment(PartTimePaymentModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.PartTimePaymentId > 0)
                        {
                            var internid = model.PartTimePaymentId;
                            var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == model.PartTimePaymentId);
                            int? projectid = query.ProjectId;
                            if (query != null)
                            {

                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.ProjectId = model.ProjectId;
                                query.TotalStipendAmount = model.TotalStipendValue;
                                query.Remarks = model.Remark;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                query.TotalNumberofStudents = model.StudentDetails.Count();
                                context.SaveChanges();

                                context.tblPartTimeStudentDetails.RemoveRange(context.tblPartTimeStudentDetails.Where(m => m.PaymentId == internid));
                                context.SaveChanges();
                                if (model.StudentDetails.Count > 0)
                                {
                                    foreach (var item in model.StudentDetails)
                                    {
                                        if (item.Name != null)
                                        {
                                            tblPartTimeStudentDetails student = new tblPartTimeStudentDetails();
                                            student.PaymentId = internid;
                                            student.StipendAmountperHour = item.StipendValueperHour;
                                            student.TotalStipend = item.StipendValue;
                                            student.StudentName = item.Name;
                                            student.Session = item.Session;
                                            student.RollNo = item.StudentRollNo;
                                            student.YearofStudy = item.StudentYearofStudy;
                                            student.Course = item.StudentCourse;
                                            student.Email = item.StudentEmail;
                                            //     student.Department = item.Department;
                                            student.Duration = item.Duration;
                                            student.InternStartDate = DateTime.Parse(item.InternFromDate);
                                            student.InternCloseDate = DateTime.Parse(item.InternToDate);
                                            student.BankName = item.BankName;
                                            student.BranchName = item.BranchName;
                                            student.AccountNumber = item.AccountNumber;
                                            student.IFSCCode = item.IFSCCode;
                                            student.ProjectId = projectid;
                                            student.CRTD_By = LoggedInUser;
                                            student.CRTD_TS = DateTime.Now;
                                            student.Status = "Active";
                                            context.tblPartTimeStudentDetails.Add(student);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblPartTimePaymentExpenseDetail.RemoveRange(context.tblPartTimePaymentExpenseDetail.Where(m => m.PartTimePaymentId == internid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblPartTimePaymentExpenseDetail exp = new tblPartTimePaymentExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.PartTimePaymentId = internid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblPartTimePaymentExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblPartTimePaymentCommitmentDetail.RemoveRange(context.tblPartTimePaymentCommitmentDetail.Where(m => m.PartTimePaymentId == internid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblPartTimePaymentCommitmentDetail commitment = new tblPartTimePaymentCommitmentDetail();
                                    commitment.PartTimePaymentId = internid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblPartTimePaymentCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblPartTimePaymentDeductionDetail.RemoveRange(context.tblPartTimePaymentDeductionDetail.Where(m => m.PartTimePaymentId == internid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblPartTimePaymentDeductionDetail deduction = new tblPartTimePaymentDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.PartTimePaymentId = internid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblPartTimePaymentDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblPartTimePaymentCheckDetail.RemoveRange(context.tblPartTimePaymentCheckDetail.Where(m => m.PartTimePaymentId == internid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblPartTimePaymentCheckDetail chk = new tblPartTimePaymentCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.PartTimePaymentId = internid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblPartTimePaymentCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblPartTimePaymentDocumentDetail.Where(x => x.PartTimePaymentId == model.PartTimePaymentId && !arrList.Contains(x.PartTimePaymentDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblPartTimePaymentDocumentDetail.FirstOrDefault(m => m.PartTimePaymentDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblPartTimePaymentDocumentDetail doc = new tblPartTimePaymentDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.PartTimePaymentId = model.PartTimePaymentId;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblPartTimePaymentDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.PartTimePaymentId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblPartTimePayment student = new tblPartTimePayment();
                            student.CRTD_By = LoggedInUser;
                            student.CRTD_TS = DateTime.Now;
                            student.ProjectId = model.ProjectId;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);                            
                            student.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                student.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                student.SourceEmailDate = model.SourceEmailDate;
                            }

                            student.TotalStipendAmount = model.TotalStipendValue;
                            student.TransactionTypeCode = "PTP";
                            student.Remarks = model.Remark;
                            student.TotalNumberofStudents = model.StudentDetails.Count();
                            student.CheckListVerifiedBy = model.CheckListVerified_By;

                            student.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getParttimeinternId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.PartTimePaymentNumber = "PTP/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.PartTimePaymentNumber = "PTP/" + FinYear + "/" + "000001";
                            }
                            student.PartTimePaymentNumber = model.PartTimePaymentNumber;
                            context.tblPartTimePayment.Add(student);
                            context.SaveChanges();
                            int parttimepaymentid = student.PartTimePaymentId;
                            if (parttimepaymentid > 0)
                            {
                                foreach (var item in model.StudentDetails)
                                {
                                    if (item.Name != null)
                                    {
                                        tblPartTimeStudentDetails students = new tblPartTimeStudentDetails();
                                        students.PaymentId = parttimepaymentid;
                                        students.StipendAmountperHour = item.StipendValueperHour;
                                        students.TotalStipend = item.StipendValue;
                                        students.StudentName = item.Name;
                                        students.YearofStudy = item.StudentYearofStudy;
                                        students.Session = item.Session;
                                        students.RollNo = item.StudentRollNo;
                                        students.Course = item.StudentCourse;
                                        students.Email = item.StudentEmail;
                                        //    students.Department = item.Department;
                                        students.Duration = item.Duration;
                                        students.InternStartDate = DateTime.Parse(item.InternFromDate);
                                        students.InternCloseDate = DateTime.Parse(item.InternToDate);
                                        students.BankName = item.BankName;
                                        students.BranchName = item.BranchName;
                                        students.AccountNumber = item.AccountNumber;
                                        students.IFSCCode = item.IFSCCode;
                                        students.ProjectId = model.ProjectId;
                                        students.CRTD_By = LoggedInUser;
                                        students.CRTD_TS = DateTime.Now;
                                        students.Status = "Active";
                                        context.tblPartTimeStudentDetails.Add(students);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblPartTimePaymentExpenseDetail exp = new tblPartTimePaymentExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.PartTimePaymentId = parttimepaymentid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblPartTimePaymentExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblPartTimePaymentCommitmentDetail commitment = new tblPartTimePaymentCommitmentDetail();
                                    commitment.PartTimePaymentId = parttimepaymentid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblPartTimePaymentCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblPartTimePaymentDeductionDetail deduction = new tblPartTimePaymentDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.PartTimePaymentId = parttimepaymentid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblPartTimePaymentDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblPartTimePaymentCheckDetail chk = new tblPartTimePaymentCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.PartTimePaymentId = parttimepaymentid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblPartTimePaymentCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblPartTimePaymentDocumentDetail doc = new tblPartTimePaymentDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.PartTimePaymentId = parttimepaymentid;
                                    doc.IsStudentDocument_f = true;
                                    doc.Status = "Active";
                                    context.tblPartTimePaymentDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return parttimepaymentid;
                            }

                            return parttimepaymentid;
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<PartTimePaymentModel> GetPartTimeStudentList()
        {
            try
            {

                List<PartTimePaymentModel> list = new List<PartTimePaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblPartTimePayment
                            join P in context.tblProject on d.ProjectId equals P.ProjectId
                            // join s in context.tblPartTimeStudentDetails on d.PartTimePaymentId equals s.PaymentId
                            join u in context.vwFacultyStaffDetails on P.PIName equals u.UserId
                            orderby d.PartTimePaymentId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.PartTimePaymentId,
                                d.PartTimePaymentNumber,
                                P.ProjectId,
                                P.ProjectNumber,
                                d.CRTD_TS,
                                d.TotalStipendAmount,
                                d.TotalNumberofStudents,
                                P.PIName,
                                u.FirstName,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new PartTimePaymentModel()
                                 {
                                     SlNo = index + 1,
                                     PartTimePaymentId = x.PartTimePaymentId,
                                     ProjectNumber = x.ProjectNumber,
                                     PartTimePaymentNumber = x.PartTimePaymentNumber,
                                     PIName = x.FirstName,
                                     TotalnoofStudents = x.TotalNumberofStudents,
                                     //RequestedDate = String.Format("{0:s}", x.CRTD_TS),
                                     TotalStipendValue = x.TotalStipendAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<PartTimePaymentModel>();
            }
        }

        public CommitmentModel GetPartTimePaymentDetailsForCommitment(int parttimepaymentId)
        {
            try
            {
                CommitmentModel bill = new CommitmentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = (from m in context.tblPartTimePayment
                                 join p in context.tblProject on m.ProjectId equals p.ProjectId
                                 where m.PartTimePaymentId == parttimepaymentId && m.Status == "Approved"
                                 select new { m.Source, m.ProjectId, m.SourceReferenceNumber, m.SourceEmailDate, p.ProjectType }).FirstOrDefault();
                    if (query != null)
                    {
                        bill.selRequestRefrence = query.Source ?? 0;
                        bill.SelProjectNumber = query.ProjectId ?? 0;
                        bill.selProjectType = query.ProjectType ?? 0;
                        if (query.Source == 1 || query.Source == 3)
                            bill.selRefNo = query.SourceReferenceNumber.ToString();
                        if (query.Source == 2)
                            bill.EmailDate = query.SourceEmailDate;
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new CommitmentModel();
            }
        }
        public bool UpdatePTPStatusOnBookCommitment(int parttimepaymentId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == parttimepaymentId && m.Status == "Active");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<PartTimePaymentSearchResultModel> SearchPartTimePaymentList(PartTimePaymentSearchFieldModel model)
        {
            List<PartTimePaymentSearchResultModel> Intern = new List<PartTimePaymentSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.ToDate != null)
                {
                    model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                }

                var query = (from R in context.tblPartTimePayment
                             join P in context.tblProject on R.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             where ((String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.PartTimePaymentNumber) || R.PartTimePaymentNumber.Contains(model.PartTimePaymentNumber))
                             && (String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                             && (((R.CRTD_TS >= model.FromDate) && (R.CRTD_TS <= model.ToDate)) ||
                             (model.FromDate == null && model.ToDate == null)))
                             orderby R.PartTimePaymentId descending
                             select new { R, P, user, user.FirstName, user.EmployeeId }).ToList();

                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        var pi = query[i].FirstName;
                        Intern.Add(new PartTimePaymentSearchResultModel()
                        {
                            SlNo = i + 1,
                            PartTimePaymentId = query[i].R.PartTimePaymentId,
                            Projectid = query[i].R.ProjectId,
                            ProjectNumber = query[i].P.ProjectNumber,
                            PartTimePaymentNumber = query[i].R.PartTimePaymentNumber,
                            TotalnoofStudents = query[i].R.TotalNumberofStudents,
                            TotalStipendValue = query[i].R.TotalStipendAmount,
                            Status = query[i].R.Status,
                            PIName = pi,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }

            return Intern;
        }
        public PartTimePaymentModel GetPartTimePaymentTransactionDetails(string typeCode, string tSubCode)
        {
            try
            {
                PartTimePaymentModel model = new PartTimePaymentModel();
                List<BillExpenseDetailModel> expenses = new List<BillExpenseDetailModel>();
                //  List<BillDeductionDetailModel> deductions = new List<BillDeductionDetailModel>();
                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {
                    //if (commitmentDetailIds != null)
                    //{
                    //var groupIds = (from c in context.tblCommitmentDetails
                    //                where commitmentDetailIds.Contains(c.ComitmentDetailId)
                    //                group c by c.AllocationHeadId into g
                    //                join bh in context.tblBudgetHead on g.FirstOrDefault().AllocationHeadId equals bh.BudgetHeadId
                    //                select new { id = g.Key, headName = bh.HeadName }).ToList();
                    //int count = groupIds.Count;
                    //if (count > 0)
                    //{
                    //    for (int i = 0; i < count; i++)
                    //    {
                    //        int headId = groupIds[i].id ?? 0;
                    //        List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                    //        List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                    //        groupList = (from map in context.tblGroupMapping
                    //                     join g in context.tblAccountGroup on map.AccountGroupId equals g.AccountGroupId
                    //                     orderby g.AccountGroup
                    //                     where map.BudgetHeadId == headId
                    //                     select new MasterlistviewModel()
                    //                     {
                    //                         id = g.AccountGroupId,
                    //                         name = g.AccountGroup
                    //                     }).ToList();
                    //        if (groupList.Count > 0)
                    //        {
                    //            int groupId = groupList[0].id ?? 0;
                    //            headList = (from ah in context.tblAccountHead
                    //                        orderby ah.AccountHead
                    //                        where ah.AccountGroupId == groupId
                    //                        select new MasterlistviewModel()
                    //                        {
                    //                            id = ah.AccountHeadId,
                    //                            name = ah.AccountHead
                    //                        }).ToList();
                    //        }
                    //        expenses.Add(new BillExpenseDetailModel()
                    //        {
                    //            AccountGroupList = groupList,
                    //            AccountHeadList = headList,
                    //            BudgetHeadName = groupIds[i].headName
                    //        });
                    //    }
                    //}
                    var groupIds = (from c in context.tblTransactionDefinition
                                    where c.TransactionTypeCode == typeCode
                                    && c.SubCode == tSubCode
                                    select new { c.AccountGroupId, c.AccountHeadId, c.TransactionType, c.IsJV_f }).ToList();
                    int count = groupIds.Count;
                    if (count > 0)
                    {
                        for (int i = 0; i < count; i++)
                        {
                            int groupId = groupIds[i].AccountGroupId ?? 0;
                            List<MasterlistviewModel> groupList = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> headList = new List<MasterlistviewModel>();
                            groupList = (from g in context.tblAccountGroup
                                         where g.AccountGroupId == groupId
                                         select new MasterlistviewModel()
                                         {
                                             id = g.AccountGroupId,
                                             name = g.AccountGroup
                                         }).ToList();
                            if (groupList.Count > 0)
                            {
                                int headId = groupIds[i].AccountHeadId ?? 0;
                                headList = (from ah in context.tblAccountHead
                                                //orderby ah.AccountHead
                                            where ah.AccountGroupId == groupId && (headId == 0 || ah.AccountHeadId == headId)
                                            select new MasterlistviewModel()
                                            {
                                                id = ah.AccountHeadId,
                                                name = ah.AccountHead
                                            }).OrderBy(num => num.id != headId ? num.id : -1).ToList();
                            }
                            expenses.Add(new BillExpenseDetailModel()
                            {
                                AccountGroupList = groupList,
                                AccountHeadList = headList,
                                TransactionType = groupIds[i].TransactionType,
                                IsJV = groupIds[i].IsJV_f ?? false
                            });
                        }
                    }
                    var query = from Dedut in context.tblDeductionHead
                                join Ah in context.tblAccountHead on Dedut.AccountHeadId equals Ah.AccountHeadId
                                join Ag in context.tblAccountGroup on Ah.AccountGroupId equals Ag.AccountGroupId
                                select new DeductionPredicate
                                {
                                    dedut = Dedut,
                                    ah = Ah,
                                    ag = Ag
                                };

                }
                model.ExpenseDetail = expenses;
                //  model.DeductionDetail = deductions;
                return model;
            }
            catch (Exception ex)
            {
                return new PartTimePaymentModel();
            }
        }
        public List<MasterlistviewModel> getStudentListbyDepartment(string Departmentname)
        {
            try
            {

                List<MasterlistviewModel> PIList = new List<MasterlistviewModel>();
                PIList.Add(new MasterlistviewModel()
                {
                    id = 0,
                    name = "Select any"

                });
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwStudentDetails
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 where C.DepartmentCode == Departmentname
                                 orderby C.FirstName
                                 select new { C.FirstName, C.RollNumber }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PIList.Add(new MasterlistviewModel()
                            {
                                code = query[i].RollNumber,
                                name = query[i].FirstName
                            });
                        }
                    }

                }

                return PIList;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public List<MasterlistviewModel> getStudentDetails(string RollNo)
        {
            List<MasterlistviewModel> PIList = new List<MasterlistviewModel>();
            try
            {
                RollNo = RollNo.Substring(0, RollNo.IndexOf('-'));
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwStudentDetails
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 where C.RollNumber == RollNo
                                 orderby C.FirstName
                                 select new { C.DepartmentName, C.RollNumber }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            PIList.Add(new MasterlistviewModel()
                            {
                                code = query[i].RollNumber,
                                name = query[i].DepartmentName
                            });
                        }
                    }

                }

                return PIList;
            }
            catch (Exception ex)
            {
                PIList.Add(new MasterlistviewModel()
                {
                    code = "",
                    name = ""
                });
                return PIList;
            }

        }
        public bool PartPaymentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblPartTimePaymentCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.PartTimePaymentId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool PartPaymentBillApproved(int paymentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblPartTimePayment.FirstOrDefault(m => m.PartTimePaymentId == paymentId && m.Status == "Open" && m.TransactionTypeCode == "PTP");
                    if (query != null)
                    {
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion
        #region ClaimBill

        public PagedData<ClaimBillSearchResultModel> GetClaimbillList(ClaimBillSearchFieldModel model, int page, int pageSize)
        {
            try
            {
                List<ClaimBillSearchResultModel> list = new List<ClaimBillSearchResultModel>();
                var searchData = new PagedData<ClaimBillSearchResultModel>();
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    //var predicate = PredicateBuilder.BaseAnd<tblProjectInvoice>();
                    //if (!string.IsNullOrEmpty(model.InvoiceNumber))
                    //    predicate = predicate.And(d => d.InvoiceNumber.Contains(model.InvoiceNumber));
                    //if (model.InvoiceType != null)
                    //    predicate = predicate.And(d => d.InvoiceType == model.InvoiceType);
                    //if (model.PIName != null)
                    //    predicate = predicate.And(d => d.PIId == model.PIName);
                    //if (model.FromDate != null && model.ToDate != null)
                    //    predicate = predicate.And(d => d.InvoiceDate >= model.FromDate && d.InvoiceDate <= model.ToDate);
                    //if (model.FromSRBDate != null && model.ToSRBDate != null)
                    //    predicate = predicate.And(d => d.InwardDate >= model.FromSRBDate && d.InwardDate <= model.ToSRBDate);
                    //var query = context.tblProjectInvoice.Where(predicate).OrderByDescending(m => m.InvoiceId).Skip(skiprec).Take(pageSize).ToList();

                    var query = (from I in context.tblProjectInvoice
                                 join prj in context.tblProject on I.ProjectId equals prj.ProjectId
                                 join user in context.vwFacultyStaffDetails on I.PIId equals user.UserId
                                 where ((prj.ProjectType == 1) && (prj.PIName == model.PIName || model.PIName == null) &&
                                 ((I.InvoiceType == model.InvoiceType) || (model.InvoiceType == null))
                                 && ((I.InvoiceDate >= model.FromDate && I.InvoiceDate <= model.ToDate) || (model.FromDate == null && model.ToDate == null))
                                 && (I.InvoiceNumber.Contains(model.InvoiceNumber) || string.IsNullOrEmpty(model.InvoiceNumber))
                                 && (I.Status != "InActive"))
                                 orderby I.InvoiceId descending
                                 select new { I, prj, user }).Skip(skiprec).Take(pageSize).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            var projectid = query[i].prj.ProjectId;
                            var projectquery = context.tblProject.FirstOrDefault(dup => dup.ProjectId == projectid);
                            //var doc = query[i].PODocs.Split(new char[] { '_' }, 2);
                            list.Add(new ClaimBillSearchResultModel()
                            {
                                ProjectNumber = projectquery.ProjectNumber,
                                ProjectId = projectid,
                                ProjectType = projectquery.ProjectType,
                                InvoiceDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].I.InvoiceDate),
                                InvoiceType = query[i].I.InvoiceType,
                                SACNumber = query[i].I.TaxCode,
                                Service = query[i].I.DescriptionofServices,
                                InvoiceNumber = query[i].I.InvoiceNumber,
                                PIId = projectquery.PIName,
                                InvoiceId = query[i].I.InvoiceId,
                                TotalInvoiceValue = query[i].I.TotalInvoiceValue,
                                ProjectTitle = projectquery.ProjectTitle,
                                Status = query[i].I.Status,
                            });

                        }
                    }
                    var records = (from I in context.tblProjectInvoice
                                   join prj in context.tblProject on I.ProjectId equals prj.ProjectId
                                   join user in context.vwFacultyStaffDetails on I.PIId equals user.UserId
                                   where ((prj.ProjectType == 1) && (prj.PIName == model.PIName || model.PIName == null) &&
                                   ((I.InvoiceType == model.InvoiceType) || (model.InvoiceType == null))
                                   && ((I.InvoiceDate >= model.FromDate && I.InvoiceDate <= model.ToDate) || (model.FromDate == null && model.ToDate == null))
                                   && (I.InvoiceNumber.Contains(model.InvoiceNumber) || string.IsNullOrEmpty(model.InvoiceNumber))
                                   && (I.Status != "InActive"))
                                   orderby I.InvoiceId descending
                                   select new { I, prj, user }).Count();
                    searchData.TotalPages = Convert.ToInt32(Math.Ceiling((double)records / pageSize));
                    searchData.Data = list;
                    searchData.pageSize = pageSize;
                    searchData.visiblePages = 10;
                    searchData.CurrentPage = page;
                }

                return searchData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public PagedData<ClaimBillSearchResultModel> GetPIClaimBillList(ClaimBillSearchFieldModel model, int page, int pageSize)
        {
            try
            {
                List<ClaimBillSearchResultModel> list = new List<ClaimBillSearchResultModel>();
                var searchData = new PagedData<ClaimBillSearchResultModel>();
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblProjectInvoice>();
                    if (!string.IsNullOrEmpty(model.InvoiceNumber))
                        predicate = predicate.And(d => d.InvoiceNumber.Contains(model.InvoiceNumber));
                    if (model.InvoiceType != null)
                        predicate = predicate.And(d => d.InvoiceType == model.InvoiceType);
                    if (model.FromDate != null && model.ToDate != null)
                        predicate = predicate.And(d => d.InvoiceDate >= model.FromDate && d.InvoiceDate <= model.ToDate);
                    if (model.PIName != null)
                        predicate = predicate.And(d => d.PIId == model.PIName);
                    //if (model.FromSRBDate != null && model.ToSRBDate != null)
                    //    predicate = predicate.And(d => d.InwardDate >= model.FromSRBDate && d.InwardDate <= model.ToSRBDate);
                    var query = context.tblProjectInvoice.Where(predicate).OrderByDescending(m => m.InvoiceId).Skip(skiprec).Take(pageSize).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            var projectid = query[i].ProjectId;
                            var projectquery = context.tblProject.FirstOrDefault(dup => dup.ProjectId == projectid);
                            //var doc = query[i].PODocs.Split(new char[] { '_' }, 2);
                            list.Add(new ClaimBillSearchResultModel()
                            {
                                ProjectNumber = projectquery.ProjectNumber,
                                ProjectId = projectid,
                                ProjectType = projectquery.ProjectType,
                                InvoiceDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].InvoiceDate),
                                InvoiceType = query[i].InvoiceType,
                                SACNumber = query[i].TaxCode,
                                Service = query[i].DescriptionofServices,
                                InvoiceNumber = query[i].InvoiceNumber,
                                PIId = projectquery.PIName,
                                InvoiceId = query[i].InvoiceId,
                                TotalInvoiceValue = query[i].TotalInvoiceValue,
                                ProjectTitle = projectquery.ProjectTitle,
                            });

                        }
                    }
                    var records = context.tblProjectInvoice.Where(predicate).OrderByDescending(m => m.InvoiceId).Count();
                    searchData.TotalPages = Convert.ToInt32(Math.Ceiling((double)records / pageSize));
                    searchData.Data = list;
                    searchData.pageSize = pageSize;
                    searchData.visiblePages = 10;
                    searchData.CurrentPage = page;
                }

                return searchData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public static List<ClaimBillModel> GetInvoiceList()
        {
            List<ClaimBillModel> invoicelist = new List<ClaimBillModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from I in context.tblProjectInvoice
                             join P in context.tblProject on I.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on I.PIId equals user.UserId
                             orderby I.InvoiceId descending
                             select new { P, I, user.FirstName, user.EmployeeId }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        invoicelist.Add(new ClaimBillModel()
                        {
                            Sno = i + 1,
                            ProjectID = query[i].I.ProjectId,
                            Projecttitle = query[i].P.ProjectTitle,
                            ProjectNumber = query[i].P.ProjectNumber,
                            TotalInvoiceValue = query[i].I.TotalInvoiceValue,
                            InvoiceId = query[i].I.InvoiceId,
                            InvoiceNumber = query[i].I.InvoiceNumber,
                            NameofPI = query[i].FirstName,
                            Invoicedatestrng = String.Format("{0:s}", query[i].I.InvoiceDate)
                        });
                    }
                }
            }
            return invoicelist;
        }

        public List<MasterlistviewModel> LoadSponProjecttitledetails(int PIId)
        {
            try

            {

                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                Title.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "Select Any"
                });
                using (var context = new IOASDBEntities())
                {

                    var query = (from P in context.tblProject
                                 join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                 where (P.PIName == PIId && P.ProjectType == 1)
                                 orderby P.ProjectId
                                 select new { U.FirstName, P }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].P.ProjectId,
                                name = query[i].P.ProjectNumber + "-" + query[i].P.ProjectTitle + "- " + query[i].FirstName,
                            });
                        }
                    }
                }

                return Title;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public List<MasterlistviewModel> LoadClaimBillList(int ProjectId)
        {
            try
            {
                List<MasterlistviewModel> Title = new List<MasterlistviewModel>();

                Title.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "Select Any"
                });
                using (var context = new IOASDBEntities())
                {
                    var query = (from I in context.tblProjectInvoiceDraft
                                 join P in context.tblProject on I.ProjectId equals P.ProjectId
                                 join U in context.vwFacultyStaffDetails on P.PIName equals U.UserId
                                 where (I.ProjectId == ProjectId && I.Status == "Draft")
                                 orderby I.InvoiceDraftId
                                 select new { U.FirstName, P, I }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            Title.Add(new MasterlistviewModel()
                            {
                                id = query[i].I.InvoiceDraftId,
                                name = query[i].I.DescriptionofServices + "-" + query[i].FirstName,
                            });
                        }
                    }
                }

                return Title;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ClaimBillModel GetProjectDetails(int ProjectID)
        {
            try
            {
                ClaimBillModel model = new ClaimBillModel();

                using (var context = new IOASDBEntities())
                {

                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == ProjectID
                                 select new { P, user, agency }).FirstOrDefault();
                    var finyear = (from year in context.tblFinYear
                                   where year.CurrentYearFlag == true
                                   select year).FirstOrDefault();
                    var projectid = query.P.ProjectId;
                    var currentfinyear = finyear.Year;
                    var currfinyearid = finyear.FinYearId;
                    if (query != null)
                    {
                        model.InvoiceDate = DateTime.Now;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.Projecttitle = query.P.ProjectTitle;
                        model.ProjectID = projectid;
                        model.ProjectType = query.P.ProjectType;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.SanctionOrderNumber = query.P.SanctionOrderNumber;
                        model.Sanctionvalue = query.P.SanctionValue;
                        model.SponsoringAgency = query.P.SponsoringAgency;
                        model.SponsoringAgencyName = query.agency.AgencyName;
                        model.Agencyregaddress = query.agency.Address;
                        model.Agencydistrict = query.agency.District;
                        model.AgencyPincode = query.agency.PinCode;
                        model.Agencystate = query.agency.State;
                        model.Agencystatecode = Convert.ToInt32(query.agency.StateCode);
                        model.GSTNumber = query.agency.GSTIN;
                        model.PAN = query.agency.PAN;
                        model.TAN = query.agency.TAN;
                        model.Agencycontactperson = query.agency.ContactPerson;
                        model.AgencycontactpersonEmail = query.agency.ContactEmail;
                        model.Agencycontactpersonmobile = query.agency.ContactNumber;
                        model.CommunicationAddress = query.agency.Address;
                        var agencytype = query.agency.AgencyType;
                        var agencycategory = query.agency.AgencyCountryCategoryId;
                        var indianagencycategory = query.agency.IndianAgencyCategoryId;
                        var nonsezcategory = query.agency.NonSezCategoryId;
                        if (agencycategory == 1)
                        {
                            if (indianagencycategory == 1)
                            {
                                model.InvoiceType = 2;
                            }
                            if (indianagencycategory == 2 && nonsezcategory == 1)
                            {
                                model.InvoiceType = 3;
                            }
                            if (indianagencycategory == 2 && nonsezcategory == 2)
                            {
                                model.InvoiceType = 4;
                            }
                            if (agencytype == 1)
                            {
                                model.InvoiceType = 2;
                            }
                        }
                        if (agencycategory == 2)
                        {
                            model.InvoiceType = 1;
                        }

                        model.CurrentFinancialYear = currentfinyear;
                        model.CurrentFinyearId = currfinyearid;
                        model.AvailableBalance = query.P.SanctionValue;
                        Nullable<Decimal> totalinvoicevalue = 0;
                        var invoicequery = (from I in context.tblProjectInvoice
                                            where I.ProjectId == ProjectID
                                            select I).ToList();
                        if (invoicequery.Count() > 0)
                        {
                            Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                            string[] _invoicenumber = new string[invoicequery.Count];
                            Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                            string[] _invoicedate = new string[invoicequery.Count];

                            for (int i = 0; i < invoicequery.Count(); i++)
                            {
                                _invoiceid[i] = invoicequery[i].InvoiceId;
                                _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                totalinvoicevalue += _invoicevalue[i];
                            }
                            model.PreviousInvoiceDate = _invoicedate;
                            model.PreviousInvoiceId = _invoiceid;
                            model.PreviousInvoiceNumber = _invoicenumber;
                            model.PreviousInvoicevalue = _invoicevalue;
                            model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                        }

                        var instalmentquery = (from I in context.tblInstallment
                                               where I.ProjectId == ProjectID
                                               select I).ToList();
                        if (instalmentquery.Count() > 0)
                        {
                            Nullable<int>[] _instalmentid = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentnumber = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentyear = new Nullable<int>[instalmentquery.Count];
                            Nullable<Decimal>[] _instalmentvalue = new Nullable<Decimal>[instalmentquery.Count];
                            Nullable<Decimal> _totalinstalmentvalue = 0;
                            string[] _isInvoiced = new string[instalmentquery.Count];
                            for (int i = 0; i < instalmentquery.Count(); i++)
                            {
                                _instalmentid[i] = instalmentquery[i].InstallmentID;
                                _instalmentnumber[i] = instalmentquery[i].InstallmentNo;
                                _instalmentyear[i] = instalmentquery[i].Year;
                                _isInvoiced[i] = "No";
                                if (query.P.IsYearWiseAllocation == true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo && invoicequery[j].InstalmentYear == instalmentquery[i].Year)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                if (query.P.IsYearWiseAllocation != true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                _totalinstalmentvalue += _instalmentvalue[i];
                            }
                            model.InstalmentId = _instalmentid;
                            model.InstlmntNumber = _instalmentnumber;
                            model.InstalValue = _instalmentvalue;
                            model.Instalmentyear = _instalmentyear;
                            model.Invoiced = _isInvoiced;
                            // model.AvailableBalance = model.Sanctionvalue - _totalinstalmentvalue;
                        }

                        if (query.P.IsYearWiseAllocation == true)
                        {
                            DateTime startdate = DateTime.Now;
                            DateTime enddate = DateTime.Now;
                            DateTime today = DateTime.Now;

                            if (query.P.ActualStartDate == null)
                            {
                                startdate = (DateTime)query.P.TentativeStartDate;
                                enddate = (DateTime)query.P.TentativeCloseDate;
                                TimeSpan diff_date = today - startdate;
                                int noofdays = diff_date.Days;
                                int years = noofdays / 365;
                                int currentprojectyear = 0;
                                if (years == 0)
                                {
                                    currentprojectyear = 1;
                                }
                                if (years > 0)
                                {
                                    currentprojectyear = years;
                                }
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                     where ins.ProjectId == ProjectID && ins.InstalmentYear == currentprojectyear
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();
                                    int lastinvoicedinstalment = 0;
                                    decimal? currinstval = 0;
                                    decimal? balincurrinstval = 0;
                                    int currentinstalment = 0;
                                    decimal? totalinsinvvalue = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;

                                        var instalinv = (from ins in context.tblProjectInvoice
                                                         where ins.ProjectId == ProjectID && ins.InstalmentYear == currentprojectyear && ins.InstalmentNumber == lastinvoicedinstalment
                                                         orderby ins.InvoiceId descending
                                                         select ins).ToList();

                                        if (instalinv != null)
                                        {
                                            totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                        }
                                        var currinstalment = (from ins in context.tblInstallment
                                                              where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == lastinvoicedinstalment)
                                                              select ins).FirstOrDefault();
                                        if (currinstalment != null)
                                        {
                                            currinstval = currinstalment.InstallmentValue;
                                        }
                                        balincurrinstval = currinstval - totalinsinvvalue;
                                        if (balincurrinstval <= 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }
                                        else if (balincurrinstval > 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment;
                                        }
                                    }
                                    else if (previousinstalmentinvoice == null)
                                    {
                                        currentinstalment = lastinvoicedinstalment + 1;
                                        //var currinstalment = (from ins in context.tblInstallment
                                        //                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                        //                      select ins).FirstOrDefault();
                                        //balincurrinstval = currinstalment.InstallmentValue;
                                    }
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instlmntyr = instalment.Year;
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        model.Instalmentvalue = instalment.InstallmentValue;
                                        model.TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                    }
                                    else if (instalment == null)
                                    {
                                        model.Instlmntyr = currentprojectyear;
                                        model.TaxableValue = model.AvailableBalance;
                                    }
                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    var aloc = (from alloc in context.tblProjectAllocation
                                                where (alloc.ProjectId == projectid)
                                                select alloc).ToList();
                                    var inv = (from alloc in context.tblProjectInvoice
                                               where (alloc.ProjectId == projectid && alloc.InstalmentYear == currentprojectyear)
                                               select alloc).ToList();
                                    var yearallocamt = (from alloc in context.tblProjectAllocation
                                                        where (alloc.ProjectId == projectid && alloc.Year == currentprojectyear)
                                                        select alloc).ToList();
                                    var nextyear = currentprojectyear + 1;
                                    var nextyearalloc = (from alloc in context.tblProjectAllocation
                                                         where (alloc.ProjectId == projectid && alloc.Year == nextyear)
                                                         select alloc).ToList();
                                    decimal? totalyearalloc = 0;
                                    decimal? invtotal = 0;
                                    decimal? totalpjctalloc = 0;
                                    for (int i = 0; i < aloc.Count(); i++)
                                    {
                                        totalpjctalloc += aloc[i].AllocationValue;
                                    }
                                    for (int i = 0; i < inv.Count(); i++)
                                    {
                                        invtotal += inv[i].TotalInvoiceValue;
                                    }
                                    for (int i = 0; i < yearallocamt.Count(); i++)
                                    {
                                        totalyearalloc += yearallocamt[i].AllocationValue;
                                    }
                                    if (invtotal >= 0 && totalyearalloc > 0)
                                    {
                                        model.TaxableValue = totalyearalloc - invtotal;
                                    }
                                    model.Instlmntyr = currentprojectyear;
                                    if (totalpjctalloc != model.Sanctionvalue && model.TaxableValue == 0)
                                    {
                                        model.TaxableValue = model.AvailableBalance;
                                    }
                                    //else if (totalyearalloc <= 0)
                                    //{
                                    //    decimal? nextyrallocamt = 0;
                                    //    for (int i = 0; i < yearallocamt.Count(); i++)
                                    //    {
                                    //        nextyrallocamt += nextyearalloc[i].AllocationValue;
                                    //    }
                                    //    model.TaxableValue = nextyrallocamt - invtotal;
                                    //}

                                    // model.TaxableValue = model.AvailableBalance;
                                }

                            }
                            if (query.P.ActualStartDate != null)
                            {
                                startdate = (DateTime)query.P.ActualStartDate;
                                enddate = (DateTime)query.P.ActuaClosingDate;
                                TimeSpan diff_date = today - startdate;
                                int noofdays = Math.Abs(diff_date.Days);
                                int years = noofdays / 365;
                                int currentprojectyear = 0;
                                if (years == 0)
                                {
                                    currentprojectyear = 1;
                                }
                                if (years > 0)
                                {
                                    currentprojectyear = years;
                                }
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                     where ins.ProjectId == ProjectID && ins.InstalmentYear == currentprojectyear
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();
                                    int lastinvoicedinstalment = 0;
                                    decimal? currinstval = 0;
                                    decimal? balincurrinstval = 0;
                                    int currentinstalment = 0;
                                    decimal? totalinsinvvalue = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                        var instalinv = (from ins in context.tblProjectInvoice
                                                         where ins.ProjectId == ProjectID && ins.InstalmentYear == currentprojectyear && ins.InstalmentNumber == lastinvoicedinstalment
                                                         orderby ins.InvoiceId descending
                                                         select ins).ToList();

                                        if (instalinv != null)
                                        {
                                            totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                        }
                                        var currinstalment = (from ins in context.tblInstallment
                                                              where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == lastinvoicedinstalment)
                                                              select ins).FirstOrDefault();
                                        if (currinstalment != null)
                                        {
                                            currinstval = currinstalment.InstallmentValue;
                                        }
                                        balincurrinstval = currinstval - totalinsinvvalue;
                                        if (balincurrinstval <= 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }
                                        else if (balincurrinstval > 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment;
                                        }
                                    }
                                    else if (previousinstalmentinvoice == null)
                                    {
                                        currentinstalment = lastinvoicedinstalment + 1;
                                        //var currinstalment = (from ins in context.tblInstallment
                                        //                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                        //                      select ins).FirstOrDefault();
                                    }
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instlmntyr = instalment.Year;
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        model.Instalmentvalue = instalment.InstallmentValue;
                                        model.TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                    }
                                    else if (instalment == null)
                                    {
                                        // model.TaxableValue = 0;
                                        model.Instlmntyr = currentprojectyear;
                                        model.TaxableValue = model.AvailableBalance;
                                    }
                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    var aloc = (from alloc in context.tblProjectAllocation
                                                where (alloc.ProjectId == projectid)
                                                select alloc).ToList();
                                    var inv = (from alloc in context.tblProjectInvoice
                                               where (alloc.ProjectId == projectid && alloc.InstalmentYear == currentprojectyear)
                                               select alloc).ToList();
                                    var yearallocamt = (from alloc in context.tblProjectAllocation
                                                        where (alloc.ProjectId == projectid && alloc.Year == currentprojectyear)
                                                        select alloc).ToList();
                                    var nextyear = currentprojectyear + 1;
                                    var nextyearalloc = (from alloc in context.tblProjectAllocation
                                                         where (alloc.ProjectId == projectid && alloc.Year == nextyear)
                                                         select alloc).ToList();
                                    decimal? totalyearalloc = 0;
                                    decimal? invtotal = 0;
                                    decimal? totalpjctalloc = 0;
                                    for (int i = 0; i < aloc.Count(); i++)
                                    {
                                        totalpjctalloc += aloc[i].AllocationValue;
                                    }
                                    for (int i = 0; i < inv.Count(); i++)
                                    {
                                        invtotal += inv[i].TotalInvoiceValue;
                                    }
                                    for (int i = 0; i < yearallocamt.Count(); i++)
                                    {
                                        totalyearalloc += yearallocamt[i].AllocationValue;
                                    }
                                    if (invtotal >= 0 && totalyearalloc > 0)
                                    {
                                        model.TaxableValue = totalyearalloc - invtotal;
                                    }
                                    model.Instlmntyr = currentprojectyear;
                                    if (totalpjctalloc != model.Sanctionvalue && model.TaxableValue == 0)
                                    {
                                        model.TaxableValue = model.AvailableBalance;
                                    }
                                }
                            }
                        }
                        if (query.P.IsYearWiseAllocation != true)
                        {
                            if (instalmentquery.Count() > 0)
                            {
                                var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                 where ins.ProjectId == ProjectID
                                                                 orderby ins.InvoiceId descending
                                                                 select ins).FirstOrDefault();
                                int lastinvoicedinstalment = 0;
                                decimal? currinstval = 0;
                                decimal? balincurrinstval = 0;
                                int currentinstalment = 0;
                                decimal? totalinsinvvalue = 0;
                                if (previousinstalmentinvoice != null)
                                {
                                    lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                    var instalinv = (from ins in context.tblProjectInvoice
                                                     where ins.ProjectId == ProjectID && ins.InstalmentNumber == lastinvoicedinstalment
                                                     orderby ins.InvoiceId descending
                                                     select ins).ToList();

                                    if (instalinv != null)
                                    {
                                        totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                    }
                                    var currinstalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == projectid && ins.InstallmentNo == lastinvoicedinstalment)
                                                          select ins).FirstOrDefault();
                                    if (currinstalment != null)
                                    {
                                        currinstval = currinstalment.InstallmentValue;
                                    }
                                    balincurrinstval = currinstval - totalinsinvvalue;
                                    if (balincurrinstval <= 0)
                                    {
                                        currentinstalment = lastinvoicedinstalment + 1;
                                    }
                                    else if (balincurrinstval > 0)
                                    {
                                        currentinstalment = lastinvoicedinstalment;
                                    }
                                }
                                else if (previousinstalmentinvoice == null)
                                {
                                    currentinstalment = lastinvoicedinstalment + 1;
                                    var currinstalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == projectid && ins.InstallmentNo == currentinstalment)
                                                          select ins).FirstOrDefault();
                                }
                                var instalment = (from ins in context.tblInstallment
                                                  where (ins.ProjectId == projectid && ins.InstallmentNo == currentinstalment)
                                                  select ins).FirstOrDefault();
                                if (instalment != null)
                                {
                                    model.Instlmntyr = instalment.Year;
                                    model.Instalmentnumber = instalment.InstallmentNo;
                                    model.Instalmentvalue = instalment.InstallmentValue;
                                    model.TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                }
                                else if (instalment == null)
                                {
                                    model.TaxableValue = model.AvailableBalance;
                                }
                            }
                            else if (instalmentquery.Count() == 0)
                            {
                                model.TaxableValue = model.AvailableBalance;
                            }
                        }
                        if (query.P.ProjectType == 1)
                        {
                            var projectcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "SponBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             where projectgroup.ProjectGroup == projectcategory
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();

                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                            // model.TaxableValue = model.AvailableBalance;
                        }
                        if (query.P.ProjectType == 2)
                        {
                            var prjctgroup = 0;
                            if (query.P.ConsProjectSubType == 1)
                            {
                                prjctgroup = 3;
                            }
                            if (query.P.ConsProjectSubType == 2)
                            {
                                prjctgroup = 4;
                            }

                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = prjctgroup, codeName = "ConsBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             where projectgroup.ProjectGroup == prjctgroup
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public ClaimBillModel GetClaimBillDetails(int InvoiceId)
        {
            try
            {
                ClaimBillModel model = new ClaimBillModel();

                using (var context = new IOASDBEntities())
                {
                    var invquery = (from inv in context.tblProjectInvoice
                                    where inv.InvoiceId == InvoiceId && inv.Status == "Approval Pending"
                                    select inv).FirstOrDefault();
                    if (invquery != null)
                    {
                        var projectid = invquery.ProjectId;
                        var query = (from P in context.tblProject
                                         //join cc in context.tblCodeControl on
                                         //new { Category = srb.ItemCategoryId ?? 0, codeName = "SRB_ItemCategory" } equals
                                         //new { Category = cc.CodeValAbbr, codeName = cc.CodeName }
                                     join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                     join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                     from user in g.DefaultIfEmpty()
                                     from agency in i.DefaultIfEmpty()
                                     where P.ProjectId == projectid
                                     select new { P, user, agency }).FirstOrDefault();
                        var finyear = (from year in context.tblFinYear
                                       where year.CurrentYearFlag == true
                                       select year).FirstOrDefault();
                        var currentfinyear = finyear.Year;


                        model.CurrentFinancialYear = currentfinyear;
                        model.InvoiceDate = invquery.InvoiceDate;
                        model.InvoiceId = InvoiceId;
                        model.InvoiceNumber = invquery.InvoiceNumber;
                        model.DescriptionofServices = invquery.DescriptionofServices;
                        model.ServiceType = invquery.ServiceType;
                        model.SACNumber = invquery.TaxCode;
                        model.TaxableValue = invquery.TaxableValue;
                        model.TotalInvoiceValue = invquery.TotalInvoiceValue;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", invquery.InvoiceDate);
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.ProjectType = query.P.ProjectType;
                        model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.SanctionOrderNumber = query.P.SanctionOrderNumber;
                        model.Sanctionvalue = query.P.SanctionValue;
                        model.SponsoringAgency = query.P.SponsoringAgency;
                        model.SponsoringAgencyName = query.agency.AgencyName;
                        model.Agencyregaddress = query.agency.Address;
                        model.Agencydistrict = query.agency.District;
                        model.AgencyPincode = query.agency.PinCode;
                        model.Agencystate = query.agency.State;
                        model.Agencystatecode = Convert.ToInt32(query.agency.StateCode);
                        model.GSTNumber = query.agency.GSTIN;
                        model.PAN = query.agency.PAN;
                        model.TAN = query.agency.TAN;
                        model.Agencycontactperson = query.agency.ContactPerson;
                        model.AgencycontactpersonEmail = query.agency.ContactEmail;
                        model.Agencycontactpersonmobile = query.agency.ContactNumber;
                        model.CommunicationAddress = query.agency.Address;
                        model.InvoiceType = invquery.InvoiceType;
                        Nullable<Decimal> totalinvoicevalue = 0;
                        var invoicequery = (from I in context.tblProjectInvoice
                                            where I.ProjectId == projectid
                                            select I).ToList();
                        if (invoicequery.Count() > 0)
                        {
                            Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                            string[] _invoicenumber = new string[invoicequery.Count];
                            Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                            string[] _invoicedate = new string[invoicequery.Count];

                            for (int i = 0; i < invoicequery.Count(); i++)
                            {
                                _invoiceid[i] = invoicequery[i].InvoiceId;
                                _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                totalinvoicevalue += _invoicevalue[i];
                            }
                            model.PreviousInvoiceDate = _invoicedate;
                            model.PreviousInvoiceId = _invoiceid;
                            model.PreviousInvoiceNumber = _invoicenumber;
                            model.PreviousInvoicevalue = _invoicevalue;
                            model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                            if (model.AvailableBalance < 0)
                            {
                                model.AvailableBalance = 0;
                            }
                        }
                        var instalmentquery = (from I in context.tblInstallment
                                               where I.ProjectId == projectid
                                               select I).ToList();
                        if (instalmentquery.Count() > 0)
                        {
                            Nullable<int>[] _instalmentid = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentnumber = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentyear = new Nullable<int>[instalmentquery.Count];
                            Nullable<Decimal>[] _instalmentvalue = new Nullable<Decimal>[instalmentquery.Count];
                            string[] _isInvoiced = new string[instalmentquery.Count];
                            for (int i = 0; i < instalmentquery.Count(); i++)
                            {
                                _instalmentid[i] = instalmentquery[i].InstallmentID;
                                _instalmentnumber[i] = instalmentquery[i].InstallmentNo;
                                _instalmentyear[i] = instalmentquery[i].Year;
                                _isInvoiced[i] = "No";
                                if (query.P.IsYearWiseAllocation == true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo && invoicequery[j].InstalmentYear == instalmentquery[i].Year)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                if (query.P.IsYearWiseAllocation != true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                //  totalinvoicevalue += _invoicevalue[i];
                            }
                            model.InstalmentId = _instalmentid;
                            model.InstlmntNumber = _instalmentnumber;
                            model.InstalValue = _instalmentvalue;
                            model.Instalmentyear = _instalmentyear;
                            model.Invoiced = _isInvoiced;
                            // model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                        }
                        if (query.P.ProjectType == 1)
                        {
                            var projectcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "SponBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             where projectgroup.ProjectGroup == projectcategory
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                        //if (query.P.ProjectType == 2)
                        //{
                        //    var projectcategory = Convert.ToInt32(query.P.ConsProjectSubType);
                        //    var balanceinstvalue = query.P.SanctionValue - totalinvoicevalue;
                        //    model.Instalmentvalue = balanceinstvalue;
                        //    model.Instalmentnumber = 1;
                        //    model.Instlmntyr = 1;
                        //    if (query.P.IsYearWiseAllocation == true)
                        //    {
                        //        DateTime startdate = DateTime.Now;
                        //        DateTime enddate = DateTime.Now;
                        //        DateTime today = DateTime.Now;

                        //        if (query.P.ActualStartDate == null)
                        //        {
                        //            startdate = (DateTime)query.P.TentativeStartDate;
                        //            enddate = (DateTime)query.P.TentativeCloseDate;
                        //            TimeSpan diff_date = today - startdate;
                        //            int noofdays = diff_date.Days;
                        //            int years = noofdays / 365;
                        //            int currentprojectyear = 0;
                        //            if (years == 0)
                        //            {
                        //                currentprojectyear = 1;
                        //            }
                        //            if (years > 0)
                        //            {
                        //                currentprojectyear = years;
                        //            }
                        //            var instalment = (from ins in context.tblInstallment
                        //                              where (ins.ProjectId == projectid && ins.Year == currentprojectyear)
                        //                              select ins).FirstOrDefault();
                        //            if (instalment != null)
                        //            {
                        //                model.Instalmentnumber = instalment.InstallmentNo;
                        //                var balanceinstalment = instalment.InstallmentValueForYear - totalinvoicevalue;
                        //                model.Instalmentvalue = balanceinstalment;
                        //                model.Instlmntyr = instalment.Year;
                        //            }
                        //        }
                        //        if (query.P.ActualStartDate != null)
                        //        {
                        //            startdate = (DateTime)query.P.ActualStartDate;
                        //            enddate = (DateTime)query.P.ActuaClosingDate;
                        //            TimeSpan diff_date = today - startdate;
                        //            int noofdays = diff_date.Days;
                        //            int years = noofdays / 365;
                        //            int currentprojectyear = 0;
                        //            if (years == 0)
                        //            {
                        //                currentprojectyear = 1;
                        //            }
                        //            if (years > 0)
                        //            {
                        //                currentprojectyear = years;
                        //            }

                        //            var instalment = (from ins in context.tblInstallment
                        //                              where (ins.ProjectId == projectid && ins.Year == currentprojectyear)
                        //                              select ins).FirstOrDefault();
                        //            if (instalment != null)
                        //            {
                        //                model.Instalmentnumber = instalment.InstallmentNo;
                        //                var balanceinstalment = instalment.InstallmentValueForYear - totalinvoicevalue;
                        //                model.Instalmentvalue = balanceinstalment;
                        //                model.Instlmntyr = instalment.Year;
                        //            }
                        //        }
                        //    }
                        //    if (query.P.IsYearWiseAllocation != true)
                        //    {
                        //        var instalment = (from ins in context.tblInstallment
                        //                          where (ins.ProjectId == projectid)
                        //                          select ins).FirstOrDefault();
                        //        if (instalment != null)
                        //        {
                        //            var balanceinstalment = instalment.InstallmentValue - totalinvoicevalue;
                        //            model.Instalmentvalue = balanceinstalment;
                        //            model.Instalmentnumber = 1;
                        //            model.Instlmntyr = 1;
                        //        }
                        //    }
                        //    var bankquery = (from Bank in context.tblIITMBankMaster
                        //                     join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                        //                     join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                        //                     join cc in context.tblCodeControl on
                        //                     new { pjctgroup = projectcategory, codeName = "ConsBankProjectGroup" } equals
                        //                     new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                        //                     select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                        //    if (bankquery != null)
                        //    {
                        //        model.Bank = bankquery.Bank.BankId;
                        //        model.BankName = bankquery.Bank.BankName;
                        //        model.BankAccountNumber = bankquery.account.AccountNumber;
                        //        model.BankAccountId = bankquery.account.BankAccountId;
                        //    }
                        //}
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ClaimBillModel GetClaimBillDraftDetails(int DraftId)
        {
            try
            {
                ClaimBillModel model = new ClaimBillModel();

                using (var context = new IOASDBEntities())
                {
                    var invquery = (from inv in context.tblProjectInvoiceDraft
                                    where inv.InvoiceDraftId == DraftId
                                    select inv).FirstOrDefault();
                    var projectid = invquery.ProjectId;
                    var query = (from P in context.tblProject
                                     //join cc in context.tblCodeControl on
                                     //new { Category = srb.ItemCategoryId ?? 0, codeName = "SRB_ItemCategory" } equals
                                     //new { Category = cc.CodeValAbbr, codeName = cc.CodeName }
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    var finyear = (from year in context.tblFinYear
                                   where year.CurrentYearFlag == true
                                   select year).FirstOrDefault();

                    var currentfinyear = finyear.Year;
                    if (query != null)
                    {
                        model.CurrentFinancialYear = currentfinyear;
                        model.InvoiceDate = invquery.InvoiceDate;
                        // model.InvoiceId = DraftId;
                        model.InvoiceDraftId = DraftId;
                        model.DescriptionofServices = invquery.DescriptionofServices;
                        model.ServiceType = invquery.ServiceType;
                        model.TaxableValue = invquery.TaxableValue;
                        //  model.TotalInvoiceValue = invquery.TotalInvoiceValue;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", invquery.InvoiceDate);
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.Projecttitle = query.P.ProjectTitle;
                        model.ProjectType = query.P.ProjectType;
                        // model.Department = query.user.DepartmentId;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.SanctionOrderNumber = query.P.SanctionOrderNumber;
                        model.Sanctionvalue = query.P.SanctionValue;
                        model.SponsoringAgency = query.P.SponsoringAgency;
                        model.SponsoringAgencyName = query.agency.AgencyName;
                        model.Agencyregaddress = query.agency.Address;
                        model.Agencydistrict = query.agency.District;
                        model.AgencyPincode = query.agency.PinCode;
                        model.Agencystate = query.agency.State;
                        model.Agencystatecode = Convert.ToInt32(query.agency.StateCode);
                        model.GSTNumber = query.agency.GSTIN;
                        model.PAN = query.agency.PAN;
                        model.TAN = query.agency.TAN;
                        model.Instlmntyr = invquery.InstalmentYear;
                        model.Instalmentnumber = invquery.InstalmentYear;
                        model.Agencycontactperson = query.agency.ContactPerson;
                        model.AgencycontactpersonEmail = query.agency.ContactEmail;
                        model.Agencycontactpersonmobile = query.agency.ContactNumber;
                        model.CommunicationAddress = query.agency.Address;
                        model.InvoiceType = invquery.InvoiceType;
                        Nullable<Decimal> totalinvoicevalue = 0;
                        var invoicequery = (from I in context.tblProjectInvoice
                                            where I.ProjectId == projectid
                                            select I).ToList();
                        if (invoicequery.Count() > 0)
                        {
                            Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                            string[] _invoicenumber = new string[invoicequery.Count];
                            Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                            string[] _invoicedate = new string[invoicequery.Count];
                            for (int i = 0; i < invoicequery.Count(); i++)
                            {
                                _invoiceid[i] = invoicequery[i].InvoiceId;
                                _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                totalinvoicevalue += _invoicevalue[i];
                            }
                            model.PreviousInvoiceDate = _invoicedate;
                            model.PreviousInvoiceId = _invoiceid;
                            model.PreviousInvoiceNumber = _invoicenumber;
                            model.PreviousInvoicevalue = _invoicevalue;
                            model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                        }
                        var instalmentquery = (from I in context.tblInstallment
                                               where I.ProjectId == projectid
                                               select I).ToList();
                        if (instalmentquery.Count() > 0)
                        {
                            Nullable<int>[] _instalmentid = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentnumber = new Nullable<int>[instalmentquery.Count];
                            Nullable<int>[] _instalmentyear = new Nullable<int>[instalmentquery.Count];
                            Nullable<Decimal>[] _instalmentvalue = new Nullable<Decimal>[instalmentquery.Count];
                            string[] _isInvoiced = new string[instalmentquery.Count];
                            for (int i = 0; i < instalmentquery.Count(); i++)
                            {
                                _instalmentid[i] = instalmentquery[i].InstallmentID;
                                _instalmentnumber[i] = instalmentquery[i].InstallmentNo;
                                _instalmentyear[i] = instalmentquery[i].Year;
                                _isInvoiced[i] = "No";
                                if (query.P.IsYearWiseAllocation == true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo && invoicequery[j].InstalmentYear == instalmentquery[i].Year)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                if (query.P.IsYearWiseAllocation != true)
                                {
                                    _instalmentvalue[i] = Convert.ToDecimal(instalmentquery[i].InstallmentValue);
                                    for (int j = 0; j < invoicequery.Count(); j++)
                                    {
                                        if (invoicequery[j].InstalmentNumber == instalmentquery[i].InstallmentNo)
                                        {
                                            _isInvoiced[i] = "Yes";
                                        }
                                    }
                                }
                                //  totalinvoicevalue += _invoicevalue[i];
                            }
                            model.InstalmentId = _instalmentid;
                            model.InstlmntNumber = _instalmentnumber;
                            model.InstalValue = _instalmentvalue;
                            model.Instalmentyear = _instalmentyear;
                            model.Invoiced = _isInvoiced;
                            // model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                        }

                        if (query.P.IsYearWiseAllocation == true)
                        {
                            DateTime startdate = DateTime.Now;
                            DateTime enddate = DateTime.Now;
                            DateTime today = DateTime.Now;

                            if (query.P.ActualStartDate == null)
                            {
                                startdate = (DateTime)query.P.TentativeStartDate;
                                enddate = (DateTime)query.P.TentativeCloseDate;
                                TimeSpan diff_date = today - startdate;
                                int noofdays = diff_date.Days;
                                int years = noofdays / 365;
                                int currentprojectyear = 0;
                                if (years == 0)
                                {
                                    currentprojectyear = 1;
                                }
                                if (years > 0)
                                {
                                    currentprojectyear = years;
                                }
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProformaInvoice
                                                                     where ins.ProjectId == projectid && ins.InstalmentYear == currentprojectyear
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();
                                    int lastinvoicedinstalment = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                    }
                                    int currentinstalment = lastinvoicedinstalment + 1;
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instlmntyr = instalment.Year;
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        model.Instalmentvalue = instalment.InstallmentValue;
                                        model.TaxableValue = instalment.InstallmentValue;
                                    }
                                    else if (instalment == null)
                                    {
                                        model.TaxableValue = 0;
                                    }
                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    model.TaxableValue = model.AvailableBalance;
                                }

                            }
                            if (query.P.ActualStartDate != null)
                            {
                                startdate = (DateTime)query.P.ActualStartDate;
                                enddate = (DateTime)query.P.ActuaClosingDate;
                                TimeSpan diff_date = today - startdate;
                                int noofdays = diff_date.Days;
                                int years = noofdays / 365;
                                int currentprojectyear = 0;
                                if (years == 0)
                                {
                                    currentprojectyear = 1;
                                }
                                if (years > 0)
                                {
                                    currentprojectyear = years;
                                }
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProformaInvoice
                                                                     where ins.ProjectId == projectid && ins.InstalmentYear == currentprojectyear
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();
                                    int lastinvoicedinstalment = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                    }
                                    int currentinstalment = lastinvoicedinstalment + 1;
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instlmntyr = instalment.Year;
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        model.Instalmentvalue = instalment.InstallmentValue;
                                        model.TaxableValue = instalment.InstallmentValue;
                                    }
                                    else if (instalment == null)
                                    {
                                        model.TaxableValue = 0;
                                    }
                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    model.TaxableValue = model.AvailableBalance;
                                }
                            }
                        }
                        if (query.P.IsYearWiseAllocation != true)
                        {
                            if (instalmentquery.Count() > 0)
                            {
                                var previousinstalmentinvoice = (from ins in context.tblProformaInvoice
                                                                 where ins.ProjectId == projectid
                                                                 orderby ins.InvoiceId descending
                                                                 select ins).FirstOrDefault();
                                int lastinvoicedinstalment = 0;
                                if (previousinstalmentinvoice != null)
                                {
                                    lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                }
                                int currentinstalment = lastinvoicedinstalment + 1;
                                var instalment = (from ins in context.tblInstallment
                                                  where (ins.ProjectId == projectid && ins.InstallmentNo == currentinstalment)
                                                  select ins).FirstOrDefault();
                                if (instalment != null)
                                {
                                    model.Instlmntyr = instalment.Year;
                                    model.Instalmentnumber = instalment.InstallmentNo;
                                    model.Instalmentvalue = instalment.InstallmentValue;
                                    model.TaxableValue = instalment.InstallmentValue;
                                }
                                else if (instalment == null)
                                {
                                    model.TaxableValue = 0;
                                }
                            }
                            else if (instalmentquery.Count() == 0)
                            {
                                model.TaxableValue = model.AvailableBalance;
                            }
                        }
                        if (query.P.ProjectType == 1)
                        {
                            var projectcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "SponBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             where projectgroup.ProjectGroup == projectcategory
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                        if (query.P.ProjectType == 2)
                        {
                            var projectcategory = Convert.ToInt32(query.P.ConsProjectSubType);
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "ConsBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public MasterlistviewModel gettaxpercentage(int servicetype)
        {
            try
            {

                MasterlistviewModel taxpercent = new MasterlistviewModel();

                using (var context = new IOASDBEntities())
                {
                    taxpercent.id = null;
                    taxpercent.name = "";
                    if (servicetype > 0)
                    {
                        var query = (from C in context.tblTaxMaster
                                     where (C.TaxMasterId == servicetype)
                                     select C).FirstOrDefault();
                        if (query != null)
                        {
                            taxpercent.id = query.TaxMasterId;
                            taxpercent.name = Convert.ToString(query.TaxRate);
                            taxpercent.code = query.TaxCode;
                        }
                    }


                }

                return taxpercent;
            }
            catch (Exception ex)
            {
                return null;
            }

        }


        public int CreateClaimBill(ClaimBillModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int InvoiceId = 0;
                        // Edit Invoice function start
                        if (model.InvoiceId > 0)
                        {
                            var query = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                            var taxquery = context.tblInvoiceTaxDetails.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);

                            // Validation for EditInvoice details
                            if (query != null)
                            {
                                var ProjectId = model.ProjectID;
                                var Pjctquery = (from P in context.tblProject
                                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                                 from user in g.DefaultIfEmpty()
                                                 from agency in i.DefaultIfEmpty()
                                                 where P.ProjectId == ProjectId
                                                 select new { P, user, agency }).FirstOrDefault();

                                var invoicequery = (from I in context.tblProjectInvoice
                                                    where I.ProjectId == ProjectId && I.InvoiceId != model.InvoiceId
                                                    select I).ToList();
                                Nullable<Decimal> totalprevinvoicevalue = 0;
                                var AvailableBalance = Pjctquery.P.SanctionValue;
                                Nullable<Decimal> TaxableValue = 0;
                                if (invoicequery.Count() > 0)
                                {
                                    Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                                    string[] _invoicenumber = new string[invoicequery.Count];
                                    Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                                    string[] _invoicedate = new string[invoicequery.Count];

                                    for (int i = 0; i < invoicequery.Count(); i++)
                                    {
                                        _invoiceid[i] = invoicequery[i].InvoiceId;
                                        _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                        _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                        _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                        totalprevinvoicevalue += _invoicevalue[i];
                                    }

                                    AvailableBalance = model.Sanctionvalue - totalprevinvoicevalue;
                                }

                                var instalmentquery = (from I in context.tblInstallment
                                                       where I.ProjectId == ProjectId
                                                       select I).ToList();

                                if (Pjctquery.P.IsYearWiseAllocation == true)
                                {
                                    DateTime startdate = DateTime.Now;
                                    DateTime enddate = DateTime.Now;
                                    DateTime today = DateTime.Now;

                                    startdate = (DateTime)Pjctquery.P.TentativeStartDate;
                                    enddate = (DateTime)Pjctquery.P.TentativeCloseDate;
                                    TimeSpan diff_date = today - startdate;
                                    int noofdays = diff_date.Days;
                                    int years = noofdays / 365;
                                    int currentprojectyear = 0;
                                    if (years == 0)
                                    {
                                        currentprojectyear = 1;
                                    }
                                    if (years > 0)
                                    {
                                        currentprojectyear = years;
                                    }
                                    if (instalmentquery.Count() > 0)
                                    {
                                        int lastinvoicedinstalment = 0;
                                        decimal? currinstval = 0;
                                        decimal? balincurrinstval = 0;
                                        int currentinstalment = 0;
                                        decimal? totalinsinvvalue = 0;
                                        var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                         where ins.ProjectId == ProjectId && ins.InvoiceId == model.InvoiceId
                                                                         orderby ins.InvoiceId descending
                                                                         select ins).FirstOrDefault();
                                        // int lastinvoicedinstalment = 1;
                                        if (previousinstalmentinvoice != null)
                                        {
                                            lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                            var instalinv = (from ins in context.tblProjectInvoice
                                                             where ins.ProjectId == ProjectId && ins.InstalmentYear == currentprojectyear && ins.InstalmentNumber == lastinvoicedinstalment
                                                             orderby ins.InvoiceId descending
                                                             select ins).ToList();

                                            if (instalinv != null)
                                            {
                                                totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                            }
                                            var currinstalment = (from ins in context.tblInstallment
                                                                  where (ins.ProjectId == ProjectId && ins.Year == currentprojectyear && ins.InstallmentNo == lastinvoicedinstalment)
                                                                  select ins).FirstOrDefault();
                                            if (currinstalment != null)
                                            {
                                                currinstval = currinstalment.InstallmentValue;
                                            }
                                            balincurrinstval = currinstval - totalinsinvvalue;
                                            if (balincurrinstval <= 0)
                                            {
                                                currentinstalment = lastinvoicedinstalment + 1;
                                            }
                                            else if (balincurrinstval > 0)
                                            {
                                                currentinstalment = lastinvoicedinstalment;
                                            }
                                        }
                                        else if (previousinstalmentinvoice == null)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }
                                        //  int currentinstalment = lastinvoicedinstalment + 1;
                                        var instalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == ProjectId && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                          select ins).FirstOrDefault();
                                        if (instalment != null)
                                        {
                                            TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                        }
                                        else if (instalment == null)
                                        {
                                            TaxableValue = AvailableBalance;
                                        }
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }

                                    }
                                    else if (instalmentquery.Count() == 0)
                                    {
                                        TaxableValue = AvailableBalance;
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                }

                                if (Pjctquery.P.IsYearWiseAllocation != true)
                                {
                                    if (instalmentquery.Count() > 0)
                                    {
                                        var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                         where ins.ProjectId == ProjectId && ins.InvoiceId == model.InvoiceId
                                                                         orderby ins.InvoiceId descending
                                                                         select ins).FirstOrDefault();

                                        int lastinvoicedinstalment = 0;
                                        decimal? currinstval = 0;
                                        decimal? balincurrinstval = 0;
                                        int currentinstalment = 0;
                                        decimal? totalinsinvvalue = 0;
                                        if (previousinstalmentinvoice != null)
                                        {

                                            lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                            var currinstalment = (from ins in context.tblInstallment
                                                                  where (ins.ProjectId == ProjectId && ins.InstallmentNo == lastinvoicedinstalment)
                                                                  select ins).FirstOrDefault();
                                            var instalinv = (from ins in context.tblProjectInvoice
                                                             where ins.ProjectId == ProjectId && ins.InstalmentNumber == lastinvoicedinstalment
                                                             orderby ins.InvoiceId descending
                                                             select ins).ToList();

                                            if (instalinv != null)
                                            {
                                                totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                            }
                                            if (currinstalment != null)
                                            {
                                                currinstval = currinstalment.InstallmentValue;
                                            }
                                            balincurrinstval = currinstval - totalinsinvvalue;
                                            if (balincurrinstval <= 0)
                                            {
                                                currentinstalment = lastinvoicedinstalment + 1;
                                            }
                                            else if (balincurrinstval > 0)
                                            {
                                                currentinstalment = lastinvoicedinstalment;
                                            }
                                        }
                                        else if (previousinstalmentinvoice == null)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }

                                        // int currentinstalment = lastinvoicedinstalment + 1;
                                        var instalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == ProjectId && ins.InstallmentNo == currentinstalment)
                                                          select ins).FirstOrDefault();
                                        if (instalment != null)
                                        {
                                            TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                        }
                                        else if (instalment == null)
                                        {
                                            TaxableValue = AvailableBalance;
                                        }
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                    else if (instalmentquery.Count() == 0)
                                    {
                                        TaxableValue = AvailableBalance;
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                }
                                // Validation ends and save edit in table                
                                query.UpdtUserId = LoggedInUser;
                                query.UpdtTS = DateTime.Now;
                                query.InvoiceNumber = model.InvoiceNumber;
                                query.InvoiceType = model.InvoiceType;
                                query.InvoiceDate = DateTime.Parse(model.Invoicedatestrng);
                                query.ProjectId = model.ProjectID;
                                query.PIId = model.PIId;
                                query.TaxCode = model.SACNumber;
                                query.AgencyId = model.SponsoringAgency;
                                query.ServiceType = model.ServiceType;
                                query.DescriptionofServices = model.DescriptionofServices;
                                query.TaxableValue = model.TaxableValue;
                                query.CurrencyCode = model.CurrencyCode;
                                query.InstalmentNumber = model.Instalmentnumber;
                                query.InstalmentYear = model.Instlmntyr;
                                query.TotalInvoiceValue = model.TotalInvoiceValue;
                                query.TotalInvoiceValueinWords = model.TotalInvoiceValueinwords;
                                query.Bank = model.Bank;
                                query.BankAccountNumber = model.BankAccountNumber;
                                query.Status = "Approval Pending";
                                context.SaveChanges();
                                if (taxquery != null)
                                {
                                    context.Entry(taxquery).State = System.Data.Entity.EntityState.Deleted;
                                    context.SaveChanges();
                                }
                                InvoiceId = query.InvoiceId;
                                tblInvoiceTaxDetails tax = new tblInvoiceTaxDetails();
                                if (model.IGSTPercentage == "NA")
                                {
                                    tax.InvoiceId = InvoiceId;
                                    // Regex regexObj = new Regex(@"[^\d]");
                                    //var cgstpercent = regexObj.Replace(model.CGSTPercentage, ""); 
                                    var cgstpercent = model.CGSTPercentage.Substring(0, (model.CGSTPercentage.Length - 1));
                                    tax.CGSTRate = Convert.ToDecimal(cgstpercent);
                                    tax.CGSTAmount = model.CGST;
                                    var sgstpercent = model.SGSTPercentage.Substring(0, (model.SGSTPercentage.Length - 1));
                                    tax.SGSTRate = Convert.ToDecimal(sgstpercent);
                                    tax.SGSTAmount = model.SGST;
                                    tax.IGSTRate = 0;
                                    tax.IGSTAmount = 0;
                                    tax.CrtdTS = DateTime.Now;
                                    tax.CrtdUserId = LoggedInUser;
                                    tax.TotalTaxValue = model.TotalTaxValue;
                                }
                                if (model.IGSTPercentage != "NA")
                                {
                                    //Regex regexObj = new Regex(@"[^\d]");
                                    tax.InvoiceId = InvoiceId;
                                    tax.CGSTRate = 0;
                                    tax.CGSTAmount = 0;
                                    tax.SGSTRate = 0;
                                    tax.SGSTAmount = 0;
                                    var igstrate = model.IGSTPercentage.Substring(0, (model.IGSTPercentage.Length - 1));
                                    tax.IGSTRate = Convert.ToDecimal(igstrate);
                                    tax.IGSTAmount = model.IGST;
                                    tax.CrtdTS = DateTime.Now;
                                    tax.CrtdUserId = LoggedInUser;
                                    tax.TotalTaxValue = model.TotalTaxValue;
                                }
                                context.tblInvoiceTaxDetails.Add(tax);
                                context.SaveChanges();

                                return -2;
                            }
                            else
                            {
                                return -3;
                            }
                        }
                        // Edit Invoice function ends

                        // Creating new invoice function starts 
                        else
                        {
                            var ProjectId = model.ProjectID;
                            var Pjctquery = (from P in context.tblProject
                                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                             join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                             from user in g.DefaultIfEmpty()
                                             from agency in i.DefaultIfEmpty()
                                             where P.ProjectId == ProjectId
                                             select new { P, user, agency }).FirstOrDefault();

                            var invoicequery = (from I in context.tblProjectInvoice
                                                where I.ProjectId == ProjectId
                                                select I).ToList();
                            Nullable<Decimal> totalprevinvoicevalue = 0;
                            var AvailableBalance = Pjctquery.P.SanctionValue;
                            Nullable<Decimal> TaxableValue = 0;
                            if (invoicequery.Count() > 0)
                            {
                                Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                                string[] _invoicenumber = new string[invoicequery.Count];
                                Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                                string[] _invoicedate = new string[invoicequery.Count];

                                for (int i = 0; i < invoicequery.Count(); i++)
                                {
                                    _invoiceid[i] = invoicequery[i].InvoiceId;
                                    _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                    _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                    _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                    totalprevinvoicevalue += _invoicevalue[i];
                                }

                                AvailableBalance = model.Sanctionvalue - totalprevinvoicevalue;
                            }

                            var instalmentquery = (from I in context.tblInstallment
                                                   where I.ProjectId == ProjectId
                                                   select I).ToList();

                            if (Pjctquery.P.IsYearWiseAllocation == true)
                            {
                                DateTime startdate = DateTime.Now;
                                DateTime enddate = DateTime.Now;
                                DateTime today = DateTime.Now;

                                startdate = (DateTime)Pjctquery.P.TentativeStartDate;
                                enddate = (DateTime)Pjctquery.P.TentativeCloseDate;
                                TimeSpan diff_date = today - startdate;
                                int noofdays = diff_date.Days;
                                int years = noofdays / 365;
                                int currentprojectyear = 0;
                                if (years == 0)
                                {
                                    currentprojectyear = 1;
                                }
                                if (years > 0)
                                {
                                    currentprojectyear = years;
                                }
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                     where ins.ProjectId == ProjectId && ins.InstalmentYear == currentprojectyear
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();

                                    int lastinvoicedinstalment = 0;
                                    decimal? currinstval = 0;
                                    decimal? balincurrinstval = 0;
                                    int currentinstalment = 0;
                                    decimal? totalinsinvvalue = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                        var instalinv = (from ins in context.tblProjectInvoice
                                                         where ins.ProjectId == ProjectId && ins.InstalmentYear == currentprojectyear && ins.InstalmentNumber == lastinvoicedinstalment
                                                         orderby ins.InvoiceId descending
                                                         select ins).ToList();

                                        if (instalinv != null)
                                        {
                                            totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                        }
                                        var currinstalment = (from ins in context.tblInstallment
                                                              where (ins.ProjectId == ProjectId && ins.Year == currentprojectyear && ins.InstallmentNo == lastinvoicedinstalment)
                                                              select ins).FirstOrDefault();
                                        if (currinstalment != null)
                                        {
                                            currinstval = currinstalment.InstallmentValue;
                                        }
                                        balincurrinstval = currinstval - totalinsinvvalue;
                                        if (balincurrinstval <= 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }
                                        else if (balincurrinstval > 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment;
                                        }
                                    }
                                    else if (previousinstalmentinvoice == null)
                                    {
                                        currentinstalment = lastinvoicedinstalment + 1;
                                    }
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == ProjectId && ins.Year == currentprojectyear && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        TaxableValue = instalment.InstallmentValueForYear - balincurrinstval;
                                    }
                                    else if (instalment == null)
                                    {
                                        TaxableValue = 0;
                                    }
                                    if (model.TaxableValue > TaxableValue)
                                    {
                                        return -4;
                                    }

                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    TaxableValue = AvailableBalance;
                                    if (model.TaxableValue > TaxableValue)
                                    {
                                        return -4;
                                    }
                                }
                            }

                            if (Pjctquery.P.IsYearWiseAllocation != true)
                            {
                                if (instalmentquery.Count() > 0)
                                {
                                    var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                     where ins.ProjectId == ProjectId
                                                                     orderby ins.InvoiceId descending
                                                                     select ins).FirstOrDefault();

                                    int lastinvoicedinstalment = 0;
                                    decimal? currinstval = 0;
                                    decimal? balincurrinstval = 0;
                                    int currentinstalment = 0;
                                    decimal? totalinsinvvalue = 0;
                                    if (previousinstalmentinvoice != null)
                                    {
                                        lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                        var currinstalment = (from ins in context.tblInstallment
                                                              where (ins.ProjectId == ProjectId && ins.InstallmentNo == lastinvoicedinstalment)
                                                              select ins).FirstOrDefault();
                                        var instalinv = (from ins in context.tblProjectInvoice
                                                         where ins.ProjectId == ProjectId && ins.InstalmentNumber == lastinvoicedinstalment
                                                         orderby ins.InvoiceId descending
                                                         select ins).ToList();

                                        if (instalinv != null)
                                        {
                                            totalinsinvvalue = instalinv.Select(m => m.TotalInvoiceValue).Sum() ?? 0;
                                        }
                                        if (currinstalment != null)
                                        {
                                            currinstval = currinstalment.InstallmentValue;
                                        }
                                        balincurrinstval = currinstval - totalinsinvvalue;
                                        if (balincurrinstval <= 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment + 1;
                                        }
                                        else if (balincurrinstval > 0)
                                        {
                                            currentinstalment = lastinvoicedinstalment;
                                        }
                                    }
                                    else if (previousinstalmentinvoice == null)
                                    {
                                        currentinstalment = lastinvoicedinstalment + 1;
                                    }


                                    //int currentinstalment = lastinvoicedinstalment + 1;
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == ProjectId && ins.InstallmentNo == currentinstalment)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        TaxableValue = instalment.InstallmentValue - balincurrinstval;
                                    }
                                    else if (instalment == null)
                                    {
                                        TaxableValue = AvailableBalance;
                                    }
                                    if (model.TaxableValue > TaxableValue)
                                    {
                                        return -4;
                                    }
                                }
                                else if (instalmentquery.Count() == 0)
                                {
                                    TaxableValue = AvailableBalance;
                                    if (model.TaxableValue > TaxableValue)
                                    {
                                        return -4;
                                    }
                                }
                            }
                            tblProjectInvoice Invoice = new tblProjectInvoice();
                            Invoice.CrtdUserId = LoggedInUser;
                            Invoice.CrtdTS = DateTime.Now;
                            Invoice.InvoiceNumber = model.InvoiceNumber;
                            Invoice.InvoiceType = model.InvoiceType;
                            Invoice.InvoiceDate = DateTime.Parse(model.Invoicedatestrng);
                            Invoice.ProjectId = model.ProjectID;
                            Invoice.PIId = model.PIId;
                            Invoice.TaxCode = model.SACNumber;
                            Invoice.AgencyId = model.SponsoringAgency;
                            Invoice.ServiceType = model.ServiceType;
                            Invoice.DescriptionofServices = model.DescriptionofServices;
                            Invoice.TaxableValue = model.TaxableValue;
                            Invoice.CurrencyCode = model.CurrencyCode;
                            Invoice.InstalmentNumber = model.Instalmentnumber;
                            Invoice.InstalmentYear = model.Instlmntyr;
                            Invoice.TotalInvoiceValue = model.TotalInvoiceValue;
                            Invoice.TotalInvoiceValueinWords = model.TotalInvoiceValueinwords;
                            Invoice.Bank = model.Bank;
                            Invoice.BankAccountNumber = model.BankAccountNumber;
                            Invoice.FinancialYear = model.CurrentFinyearId;
                            Invoice.Status = "Approval Pending";
                            var PI = model.PIId;
                            var facultycode = Common.getfacultycode(Convert.ToInt32(PI));
                            int CurrentYear = (DateTime.Today.Year) % 100;
                            int PreviousYear = (DateTime.Today.Year - 1) % 100;
                            int NextYear = (DateTime.Today.Year + 1) % 100;
                            string PreYear = PreviousYear.ToString();
                            string NexYear = NextYear.ToString();
                            string CurYear = CurrentYear.ToString();
                            string FinYear = null;
                            int finyear = model.CurrentFinyearId ?? 0;
                            //if (DateTime.Today.Month > 3)
                            //    FinYear = CurYear + NexYear;
                            //else
                            //    FinYear = PreYear + CurYear;
                            var Sequencenumber = Common.getInvoiceId(finyear, 1);
                            Invoice.SequenceNumber = Sequencenumber;
                            Invoice.ProjectType = 1;
                            FinYear = Common.GetCurrentFinYear();
                            var facltycode = Convert.ToInt32(facultycode);
                            if (Sequencenumber > 0)
                            {
                                model.InvoiceNumber = "C" + FinYear + facltycode + "S" + Sequencenumber;
                            }
                            if (Sequencenumber == 0)
                            {
                                model.InvoiceNumber = "C" + FinYear + facltycode + "S1";
                            }
                            //var Sequencenumber = Common.getInvoiceId();
                            //if (Sequencenumber != null && Sequencenumber != "")
                            //{
                            //    // model.InvoiceNumber = "C" + FinYear + facultycode + "C" + Sequencenumber;
                            //    model.InvoiceNumber = "C" + FinYear + "C" + Sequencenumber;
                            //}
                            //else
                            //{
                            //    model.InvoiceNumber = "C" + FinYear + facultycode + "C00001";
                            //}
                            Invoice.InvoiceNumber = model.InvoiceNumber;
                            context.tblProjectInvoice.Add(Invoice);
                            context.SaveChanges();

                            InvoiceId = Invoice.InvoiceId;
                            tblInvoiceTaxDetails tax = new tblInvoiceTaxDetails();
                            if (model.IGSTPercentage == "NA")
                            {
                                tax.InvoiceId = InvoiceId;
                                //  Regex regexObj = new Regex(@"[^\d]");
                                var cgstpercent = model.CGSTPercentage.Substring(0, (model.CGSTPercentage.Length - 1));
                                tax.CGSTRate = Convert.ToDecimal(cgstpercent);
                                tax.CGSTAmount = model.CGST;
                                var sgstpercent = model.SGSTPercentage.Substring(0, (model.SGSTPercentage.Length - 1));
                                tax.SGSTRate = Convert.ToDecimal(sgstpercent);
                                tax.SGSTAmount = model.SGST;
                                tax.IGSTRate = 0;
                                tax.IGSTAmount = 0;
                                tax.CrtdTS = DateTime.Now;
                                tax.CrtdUserId = LoggedInUser;
                                tax.TotalTaxValue = model.TotalTaxValue;
                            }
                            if (model.IGSTPercentage != "NA")
                            {
                                // Regex regexObj = new Regex(@"[^\d]");
                                tax.InvoiceId = InvoiceId;
                                tax.CGSTRate = 0;
                                tax.CGSTAmount = 0;
                                tax.SGSTRate = 0;
                                tax.SGSTAmount = 0;
                                var igstrate = model.IGSTPercentage.Substring(0, (model.IGSTPercentage.Length - 1));
                                tax.IGSTRate = Convert.ToDecimal(igstrate);
                                tax.IGSTAmount = model.IGST;
                                tax.CrtdTS = DateTime.Now;
                                tax.CrtdUserId = LoggedInUser;
                                tax.TotalTaxValue = model.TotalTaxValue;
                            }
                            context.tblInvoiceTaxDetails.Add(tax);
                            context.SaveChanges();


                            if (model.InvoiceDraftId != null && model.InvoiceDraftId != 0)
                            {
                                tblProjectInvoiceDraft InvoiceDraft = new tblProjectInvoiceDraft();
                                InvoiceDraft.Status = "Invoiced";
                            }

                        }
                        transaction.Commit();
                        return InvoiceId;

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public int DraftClaimBill(ClaimBillModel model, int LoggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    tblProjectInvoiceDraft Draft = new tblProjectInvoiceDraft();
                    Draft.CrtdUserId = LoggedInUser;
                    Draft.CrtdTS = DateTime.Now;
                    Draft.InvoiceType = model.InvoiceType;
                    Draft.InvoiceDate = model.InvoiceDate;
                    Draft.ProjectId = model.ProjectID;
                    Draft.PIId = model.PIId;
                    Draft.TaxCode = model.SACNumber;
                    Draft.AgencyId = model.SponsoringAgency;
                    Draft.ServiceType = model.ServiceType;
                    Draft.DescriptionofServices = model.DescriptionofServices;
                    Draft.TaxableValue = model.TaxableValue;
                    Draft.InstalmentNumber = model.Instalmentnumber;
                    Draft.InstalmentYear = model.Instlmntyr;
                    Draft.CurrencyCode = model.CurrencyCode;
                    Draft.TotalInvoiceValue = model.TotalTaxValue + model.TaxableValue;
                    Draft.TotalInvoiceValueinWords = model.TotalInvoiceValueinwords;
                    Draft.Bank = model.Bank;
                    Draft.BankAccountNumber = model.BankAccountNumber;
                    Draft.Status = "Draft";
                    context.tblProjectInvoiceDraft.Add(Draft);
                    context.SaveChanges();
                    int InvoiceDraftId = Draft.InvoiceDraftId;
                    return InvoiceDraftId;
                }
            }
            catch (Exception ex)
            {
                return -1;
            }
        }
        #endregion
        #region Credit Note
        public List<CreditNoteModel> GetCreditNoteList()
        {
            try
            {

                List<CreditNoteModel> list = new List<CreditNoteModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from cn in context.tblCreditNote
                            join inv in context.tblProjectInvoice on cn.InvoiceId equals inv.InvoiceId
                            orderby cn.CreditNoteId descending
                            where cn.Status != "InActive"
                            select new
                            {
                                cn.CreditNoteId,
                                cn.CreditNoteNumber,
                                cn.TotalCreditAmount,
                                cn.CRTD_TS,
                                cn.Status,
                                inv.InvoiceNumber
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new CreditNoteModel()
                                 {
                                     SlNo = index + 1,
                                     CreditNoteId = x.CreditNoteId,
                                     CreditNoteNumber = x.CreditNoteNumber,
                                     InvoiceNumber = x.InvoiceNumber,
                                     InvoiceDate = String.Format("{0:s}", x.CRTD_TS),
                                     TotalCreditAmount = x.TotalCreditAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<CreditNoteModel>();
            }
        }
        public CreditNoteModel GetInvoiceDetailsForCreditNote(int id, bool isEditMode)
        {
            try
            {
                CreditNoteModel model = new CreditNoteModel();
                List<ReceiptSearchResultModel> list = new List<ReceiptSearchResultModel>();
                using (var context = new IOASDBEntities())
                {
                    decimal invoiceAmt = 0;
                    int projectid = 0;
                    int invoiceId = 0;
                    int invoiceType = 0;
                    int serviceType = 0;
                    decimal taxPct = 0;
                    decimal previousCreditNote = 0;
                    if (!isEditMode)
                    {
                        invoiceId = id;
                        var invquery = (from inv in context.tblProjectInvoice
                                        where inv.InvoiceId == id && inv.Status == "Active"
                                        select inv).FirstOrDefault();
                        if (invquery == null)
                            return model;
                        projectid = invquery.ProjectId ?? 0;
                        invoiceAmt = invquery.TotalInvoiceValue ?? 0;
                        model.InvoiceDate = String.Format("{0:s}", invquery.InvoiceDate);
                        model.InvoiceId = id;
                        model.InvoiceNumber = invquery.InvoiceNumber;
                        invoiceType = invquery.InvoiceType ?? 0;
                        serviceType = invquery.ServiceType ?? 0;
                        previousCreditNote = context.tblCreditNote.Where(m => m.InvoiceId == invoiceId && m.Status != "InActive").Sum(m => m.TotalCreditAmount) ?? 0;
                    }
                    else
                    {
                        var invquery = (from cn in context.tblCreditNote
                                        join inv in context.tblProjectInvoice on cn.InvoiceId equals inv.InvoiceId
                                        where cn.CreditNoteId == id
                                        select new { inv, cn }).FirstOrDefault();
                        if (invquery == null)
                            return model;
                        invoiceId = invquery.inv.InvoiceId;
                        projectid = invquery.inv.ProjectId ?? 0;
                        invoiceAmt = invquery.inv.TotalInvoiceValue ?? 0;
                        model.InvoiceDate = String.Format("{0:s}", invquery.inv.InvoiceDate);
                        model.InvoiceId = invoiceId;
                        model.InvoiceNumber = invquery.inv.InvoiceNumber;
                        invoiceType = invquery.inv.InvoiceType ?? 0;
                        serviceType = invquery.inv.ServiceType ?? 0;
                        previousCreditNote = context.tblCreditNote.Where(m => m.InvoiceId == invoiceId && m.Status != "InActive" && m.CreditNoteId != id).Sum(m => m.TotalCreditAmount) ?? 0;
                        model.Source = invquery.cn.Source;
                        if (invquery.cn.Source == 1)
                        {
                            model.SourceReferenceNumber = invquery.cn.SourceReferenceNumber;
                        }
                        else if (invquery.cn.Source == 3)
                        {
                            int refId = invquery.cn.SourceReferenceNumber ?? 0;
                            model.SourceReferenceNumber = refId;
                            model.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (invquery.cn.Source == 2)
                            model.SourceEmailDate = invquery.cn.SourceEmailDate;
                        model.CreditNoteNumber = invquery.cn.CreditNoteNumber;
                        model.TaxableAmount = invquery.cn.CreditAmount;
                        model.CGSTPercentage = invquery.cn.CGSTPercentage;
                        model.SGSTPercentage = invquery.cn.SGSTPercentage;
                        model.IGSTPercentage = invquery.cn.IGSTPercentage;
                        model.Reason = invquery.cn.Reason;
                        taxPct = (invquery.cn.CGSTPercentage ?? 0) + (invquery.cn.SGSTPercentage ?? 0) + (invquery.cn.IGSTPercentage ?? 0);
                    }
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    model.TotalInvoiceValue = invoiceAmt;
                    model.ProjectNumber = query.P.ProjectNumber;
                    model.PIDepartmentName = query.user.DepartmentName;
                    model.NameofPI = query.user.FirstName;
                    model.SponsoringAgencyName = query.agency.AgencyName;
                    model.Agencyregaddress = query.agency.Address;
                    model.Agencydistrict = query.agency.District;
                    model.AgencyPincode = query.agency.PinCode;
                    model.Agencystate = query.agency.State;
                    int stateCode = query.agency.StateId ?? 0;


                    if (!isEditMode && (query.P.TaxStatus != 1 || invoiceType != 2))
                    {
                        var det = Common.GetServiceDetail(serviceType);
                        taxPct = det.TaxRate ?? 0;
                        if (stateCode == 33)
                        {
                            model.CGSTPercentage = det.TaxRate / 2;
                            model.SGSTPercentage = det.TaxRate / 2;
                        }
                        else
                            model.IGSTPercentage = det.TaxRate;
                    }

                    model.Agencystatecode = stateCode;
                    model.GSTNumber = query.agency.GSTIN;
                    model.PAN = query.agency.PAN;
                    model.TAN = query.agency.TAN;
                    model.Agencycontactperson = query.agency.ContactPerson;
                    model.AgencycontactpersonEmail = query.agency.ContactEmail;
                    model.Agencycontactpersonmobile = query.agency.ContactNumber;
                    list = (from r in context.tblReceipt
                            where r.InvoiceId == invoiceId && r.Status != "InActive"
                            select new
                            {
                                r.ReceiptDate,
                                r.ReceiptAmount,
                                r.ReceiptNumber
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ReceiptSearchResultModel()
                                 {
                                     ReceiptDate = String.Format("{0:s}", x.ReceiptDate),
                                     TotalReceiptValue = x.ReceiptAmount,
                                     ReceiptNumber = x.ReceiptNumber
                                 }).ToList();

                    decimal receiptAmt = list.Sum(m => m.TotalReceiptValue) ?? 0;
                    model.PreviousReceiptDetails = list;
                    decimal withOutTx = invoiceAmt - previousCreditNote - receiptAmt;
                    model.AvailableBalance = Math.Round(withOutTx * 100 / (100 + taxPct));

                }
                return model;
            }
            catch (Exception ex)
            {
                return new CreditNoteModel();
            }
        }
        public int CreditNoteIU(CreditNoteModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                try
                {
                    if (model.CreditNoteId == null)
                    {
                        tblCreditNote bill = new tblCreditNote();
                        bill.CRTD_By = logged_in_user;
                        bill.CRTD_TS = DateTime.Now;
                        bill.Source = model.Source;
                        if (model.Source == 1 || model.Source == 3)
                        {
                            bill.SourceReferenceNumber = model.SourceReferenceNumber;
                        }
                        if (model.Source == 2)
                        {
                            bill.SourceEmailDate = model.SourceEmailDate;
                        }
                        bill.Status = "Open";
                        bill.TransactionTypeCode = "CRN";
                        bill.CreditNoteNumber = Common.GetNewCrNoteNo();
                        bill.Remarks = model.Remarks;
                        if (model.CGST != null)
                            bill.CGST = Math.Round(model.CGST.Value);
                        bill.CGSTPercentage = model.CGSTPercentage;
                        bill.CreditAmount = model.TaxableAmount;
                        if (model.IGST != null)
                            bill.IGST = Math.Round(model.IGST.Value);
                        bill.IGSTPercentage = model.IGSTPercentage;
                        bill.InvoiceId = model.InvoiceId;
                        if (model.SGST != null)
                            bill.SGST = Math.Round(model.SGST.Value);
                        bill.SGSTPercentage = model.SGSTPercentage;
                        bill.TotalCreditAmount = Math.Round(model.TotalCreditAmount.Value);
                        bill.Reason = model.Reason;
                        context.tblCreditNote.Add(bill);
                        context.SaveChanges();
                        return bill.CreditNoteId;
                    }
                    else
                    {
                        int crNoteId = model.CreditNoteId ?? 0;
                        var bill = context.tblCreditNote.FirstOrDefault(m => m.CreditNoteId == crNoteId && m.Status == "Open");
                        if (bill != null)
                        {
                            bill.UPTD_By = logged_in_user;
                            bill.UPTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Remarks = model.Remarks;
                            if (model.CGST != null)
                                bill.CGST = Math.Round(model.CGST.Value);
                            bill.CGSTPercentage = model.CGSTPercentage;
                            bill.CreditAmount = model.TaxableAmount;
                            if (model.IGST != null)
                                bill.IGST = Math.Round(model.IGST.Value);
                            bill.IGSTPercentage = model.IGSTPercentage;
                            bill.InvoiceId = model.InvoiceId;
                            if (model.SGST != null)
                                bill.SGST = Math.Round(model.SGST.Value);
                            bill.SGSTPercentage = model.SGSTPercentage;
                            bill.TotalCreditAmount = Math.Round(model.TotalCreditAmount.Value);
                            bill.Reason = model.Reason;
                            context.SaveChanges();

                            return crNoteId;
                        }
                        else
                            return -1;
                    }
                }
                catch (Exception ex)
                {
                    return -1;
                }
            }
        }
        public bool ApproveCreditNote(int CrNoteId, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    BOAModel BOA = new BOAModel();
                    List<BOATransactionModel> BOATrans = new List<BOATransactionModel>();
                    var query = (from cn in context.tblCreditNote
                                 join inv in context.tblProjectInvoice on cn.InvoiceId equals inv.InvoiceId
                                 join p in context.tblProject on inv.ProjectId equals p.ProjectId
                                 where cn.CreditNoteId == CrNoteId && cn.Status == "Open"
                                 select new { cn, p.SponsoringAgency }).FirstOrDefault();
                    if (query == null)
                        return false;
                    query.cn.Status = "Completed";
                    query.cn.UPTD_By = loggedInUser;
                    query.cn.UPTD_TS = DateTime.Now;
                    BOA.PostedDate = query.cn.CRTD_TS;
                    BOA.TempVoucherNumber = query.cn.CreditNoteNumber;
                    BOA.VoucherType = 5;
                    BOA.VoucherNumber = query.cn.CreditNoteNumber;
                    BOA.TransactionTypeCode = query.cn.TransactionTypeCode;
                    BOA.Narration = query.cn.Remarks;
                    BOA.BOAValue = query.cn.TotalCreditAmount;
                    BOA.RefNumber = query.cn.CreditNoteNumber;
                    BOA.RefTransactionCode = query.cn.TransactionTypeCode;

                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 10,
                        Amount = query.cn.CreditAmount,
                        TransactionType = "Credit",
                        SubLedgerType = 2,
                        SubLedgerId = query.SponsoringAgency
                    });

                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 136,
                        Amount = query.cn.CreditAmount,
                        TransactionType = "Debit"

                    });

                    if (query.cn.CGST != 0 && query.cn.CGST != null)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = 36,
                            Amount = query.cn.CGST,
                            TransactionType = "Credit"
                        });
                    }
                    if (query.cn.SGST != 0 && query.cn.SGST != null)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = 37,
                            Amount = query.cn.SGST,
                            TransactionType = "Credit"
                        });
                    }
                    if (query.cn.IGST != null && query.cn.IGST != 0)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = 38,
                            Amount = query.cn.IGST,
                            TransactionType = "Credit"
                        });
                    }
                    BOA.BOATransaction = BOATrans;
                    if (BOATransaction(BOA))
                    {
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Transaction definition
        public static List<TransactionAndTaxesModel> Transaction(string transaction, string subcode)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    model = (from T in context.tblTransactionDefinition
                             join G in context.tblAccountGroup on T.AccountGroupId equals G.AccountGroupId
                             join H in context.tblAccountHead on T.AccountHeadId ?? 0 equals H.AccountHeadId into g
                             from H in g.DefaultIfEmpty()
                             where ((T.TransactionTypeCode == transaction) && (T.SubCode == subcode))
                             orderby T.TransactionDefinitionId descending
                             select new
                             {
                                 G.AccountGroupId,
                                 G.AccountGroup,
                                 H,
                                 T.TransactionType,
                                 T.IsJV_f,
                                 T.TransactionDefinitionId,
                             })
                               .AsEnumerable()
                                 .Select((x, index) => new TransactionAndTaxesModel()
                                 {
                                     GroupId = Convert.ToInt32(x.AccountGroupId),
                                     Group = x.AccountGroup,
                                     Head = x.H == null ? "Any" : x.H.AccountHead,
                                     HeadId = x.H == null ? 0 : x.H.AccountHeadId,
                                     TransactionType = x.TransactionType,
                                     ISJV = Convert.ToBoolean(x.IsJV_f),
                                     TransactionDefID = x.TransactionDefinitionId,

                                 }).ToList();



                }
                return model;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return model;
        }
        public static List<TransactionAndTaxesModel> AddTransaction(string group, string head, string type, string isjv, string transaction, string subcode)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {

                int headid = Convert.ToInt32(head);
                int grpid = Convert.ToInt32(group);
                bool Isjv = Convert.ToBoolean(isjv);
                using (var context = new IOASDBEntities())
                {
                    tblTransactionDefinition trandef = new tblTransactionDefinition();
                    trandef.AccountGroupId = grpid;
                    trandef.AccountHeadId = headid;
                    trandef.IsJV_f = Isjv;
                    trandef.TransactionType = type;
                    trandef.SubCode = subcode;
                    trandef.TransactionTypeCode = transaction;
                    context.tblTransactionDefinition.Add(trandef);
                    context.SaveChanges();
                    model = (from T in context.tblTransactionDefinition
                             join G in context.tblAccountGroup on T.AccountGroupId equals G.AccountGroupId
                             join H in context.tblAccountHead on T.AccountHeadId ?? 0 equals H.AccountHeadId into g
                             from H in g.DefaultIfEmpty()
                             where ((T.TransactionTypeCode == transaction) && (T.SubCode == subcode))
                             orderby T.TransactionDefinitionId descending
                             select new
                             {
                                 G.AccountGroupId,
                                 G.AccountGroup,
                                 H,
                                 T.TransactionType,
                                 T.IsJV_f,
                                 T.TransactionDefinitionId,
                             })
                                    .AsEnumerable()
                                      .Select((x, index) => new TransactionAndTaxesModel()
                                      {
                                          GroupId = Convert.ToInt32(x.AccountGroupId),
                                          Group = x.AccountGroup,
                                          Head = x.H == null ? "Any" : x.H.AccountHead,
                                          HeadId = x.H == null ? 0 : x.H.AccountHeadId,
                                          TransactionType = x.TransactionType,
                                          ISJV = Convert.ToBoolean(x.IsJV_f),
                                          TransactionDefID = x.TransactionDefinitionId,

                                      }).ToList();
                }
                return model;
            }
            catch (Exception ex)
            {

            }
            return model;
        }
        public static List<TransactionAndTaxesModel> Taxes(string transaction)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();

            try
            {
                using (var context = new IOASDBEntities())
                {
                    model = (from D in context.tblDeductionHead
                             join C in context.tblCodeControl on new { codeName = "DeductionCategory", codeAbbr = D.DeductionCategoryId ?? 0 } equals new { codeName = C.CodeName, codeAbbr = C.CodeValAbbr } into g

                             from C in g.DefaultIfEmpty()
                             join H in context.tblAccountHead on D.AccountHeadId equals H.AccountHeadId
                             join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                             where (D.TransactionTypeCode == transaction)
                             orderby D.DeductionHeadId descending
                             select new
                             {
                                 G.AccountGroup,
                                 G.AccountGroupId,
                                 H.AccountHead,
                                 H.AccountHeadId,
                                 D.DeductionCategoryId,
                                 D.DeductionType,
                                 D.Interstate_f,
                                 C,
                                 D.DeductionHeadId
                             })
                                     .AsEnumerable()
                                     .Select((x, index) => new TransactionAndTaxesModel()
                                     {
                                         GroupId = Convert.ToInt32(x.AccountGroupId),
                                         Group = x.AccountGroup,
                                         Head = x.AccountHead,
                                         HeadId = Convert.ToInt32(x.AccountHeadId),
                                         DeductionType = x.DeductionType,
                                         INTERSTATE = Convert.ToBoolean(x.Interstate_f) == true ? "Yes" : "No",
                                         DeductionId = Convert.ToInt32(x.DeductionHeadId),
                                         Category = x.C == null ? "" : x.C.CodeValDetail,
                                     }).ToList();
                }
                return model;
            }
            catch (Exception ex)
            {

            }
            return model;
        }
        public static List<TransactionAndTaxesModel> AddTaxes(string taxgroup, string taxhead, string taxcategory, string taxinterstate, string transaction)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            try
            {
                int categoryid = 0;
                int headid = Convert.ToInt32(taxhead);
                if (taxcategory != "")
                {
                    categoryid = Convert.ToInt32(taxcategory);
                }
                bool Interstate = Convert.ToBoolean(taxinterstate);
                using (var context = new IOASDBEntities())
                {
                    tblDeductionHead dedhead = new tblDeductionHead();
                    dedhead.TransactionTypeCode = transaction;
                    dedhead.AccountHeadId = headid;
                    if (taxcategory != "")
                    {
                        dedhead.DeductionCategoryId = categoryid;
                    }
                    dedhead.Interstate_f = Interstate;
                    dedhead.DeductionType = "GST";
                    context.tblDeductionHead.Add(dedhead);
                    context.SaveChanges();
                    model = (from D in context.tblDeductionHead
                             join C in context.tblCodeControl on new { codeName = "DeductionCategory", codeAbbr = D.DeductionCategoryId ?? 0 } equals new { codeName = C.CodeName, codeAbbr = C.CodeValAbbr } into g

                             from C in g.DefaultIfEmpty()
                             join H in context.tblAccountHead on D.AccountHeadId equals H.AccountHeadId
                             join G in context.tblAccountGroup on H.AccountGroupId equals G.AccountGroupId
                             where (D.TransactionTypeCode == transaction)
                             orderby D.DeductionHeadId descending
                             select new
                             {
                                 G.AccountGroup,
                                 G.AccountGroupId,
                                 H.AccountHead,
                                 H.AccountHeadId,
                                 D.DeductionCategoryId,
                                 D.DeductionType,
                                 D.Interstate_f,
                                 C,
                                 D.DeductionHeadId
                             })
                                      .AsEnumerable()
                                      .Select((x, index) => new TransactionAndTaxesModel()
                                      {
                                          GroupId = Convert.ToInt32(x.AccountGroupId),
                                          Group = x.AccountGroup,
                                          Head = x.AccountHead,
                                          HeadId = Convert.ToInt32(x.AccountHeadId),
                                          DeductionType = x.DeductionType,
                                          INTERSTATE = Convert.ToBoolean(x.Interstate_f) == true ? "Yes" : "No",
                                          DeductionId = Convert.ToInt32(x.DeductionHeadId),
                                          Category = x.C == null ? "" : x.C.CodeValDetail,
                                      }).ToList();
                }
                return model;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return model;
        }
        public static List<TransactionAndTaxesModel> DeleteTransaction(string transdefid)
        {
            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();
            int TransID = Convert.ToInt32(transdefid);
            try
            {
                using (var context = new IOASDBEntities())
                {
                    tblTransactionDefinition trandef = new tblTransactionDefinition();
                    var qry = context.tblTransactionDefinition.RemoveRange(context.tblTransactionDefinition.Where(U => U.TransactionDefinitionId == TransID));
                    context.SaveChanges();
                    model.Add(new TransactionAndTaxesModel()
                    {
                        Delete = 1
                    });
                }
                return model;
            }
            catch (Exception ex)
            {

            }
            return model;
        }
        public static List<TransactionAndTaxesModel> DeleteTaxes(int deheadid)
        {

            List<TransactionAndTaxesModel> model = new List<TransactionAndTaxesModel>();

            try
            {
                using (var context = new IOASDBEntities())
                {
                    var qry = context.tblDeductionHead.RemoveRange(context.tblDeductionHead.Where(U => U.DeductionHeadId == deheadid));
                    context.SaveChanges();
                    model.Add(new TransactionAndTaxesModel()
                    {
                        Delete = 1
                    });
                }
                return model;
            }
            catch (Exception ex)
            {

            }
            return model;
        }
        #endregion
        #region Adhoc Payment
        public List<AdhocPaymentModel> GetAdhocPaymentList()
        {
            try
            {

                List<AdhocPaymentModel> list = new List<AdhocPaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblAdhocPayment
                            orderby d.AdhocPaymentId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.AdhocPaymentId,
                                d.AdhocPaymentNumber,
                                d.CRTD_TS,
                                d.NetPayableAmount,
                                d.PayeeName,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new AdhocPaymentModel()
                                 {
                                     SlNo = index + 1,
                                     AdhocId = x.AdhocPaymentId,
                                     AdhocPaymentNumber = x.AdhocPaymentNumber,
                                     Name = x.PayeeName,
                                     AdhocPaymentDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     NetPayableValue = x.NetPayableAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<AdhocPaymentModel>();
            }
        }
        public AdhocPaymentModel GetAdhocPaymentDetails(int adhocpayId)
        {
            try
            {
                AdhocPaymentModel adhoc = new AdhocPaymentModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAdhocPayment.FirstOrDefault(m => m.AdhocPaymentId == adhocpayId);
                    var categoryId = query.PayeeType;
                    var ID = query.PayeeID;
                    var detailsquery = (from s in context.tblAdhocPayInvoiceDetails
                                        orderby s.AdhocPayinvId
                                        where s.AdhocPaymentId == adhocpayId
                                        select s).ToList();


                    if (query != null)
                    {
                        adhoc.Source = query.Source;
                        if (query.Source == 1)
                        {
                            adhoc.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            adhoc.SourceReferenceNumber = refId;
                            adhoc.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            adhoc.SourceEmailDate = query.SourceEmailDate;
                        adhoc.AdhocId = query.AdhocPaymentId;
                        adhoc.AdhocPaymentNumber = query.AdhocPaymentNumber;
                        adhoc.PaymentType = query.AdhocPaymentType;
                        adhoc.PaymentMode = query.AdhocPaymentMode;
                        adhoc.CategoryId = query.PayeeType;
                        adhoc.BankName = query.BankName;
                        adhoc.BranchName = query.BankBranch;
                        adhoc.AccountNumber = query.AccountNumber;
                        adhoc.IFSCCode = query.IFSC;
                        if (categoryId == 1)
                        {
                            adhoc.UserId = query.PayeeID;
                            adhoc.Name = query.PayeeName;
                            adhoc.CreditorType = "PI";
                        }
                        if (categoryId == 2)
                        {
                            adhoc.UserId = "0";
                            adhoc.Name = query.PayeeName;
                            adhoc.CreditorType = "Student";
                        }
                        if (categoryId == 3)
                        {
                            adhoc.Name = query.PayeeName;
                            adhoc.CreditorType = "Others";
                        }
                        adhoc.Remark = query.Remarks;
                        adhoc.CreditorAmount = query.NetPayableAmount - query.EligibleTaxAmount;
                        adhoc.TotalAdhocPayValue = query.TotalAmount;
                        adhoc.TotalTaxValue = query.TotalTaxAmount;
                        adhoc.NetPayableValue = query.NetPayableAmount;
                        adhoc.EligibleTaxValue = query.EligibleTaxAmount;
                        adhoc.CheckListVerified_By = query.CheckListVerifiedBy;
                        adhoc.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);

                        adhoc.PaymentDetails = (from d in context.tblAdhocPayInvoiceDetails
                                                where d.AdhocPaymentId == adhocpayId && d.Status == "Active"
                                                select new
                                                {
                                                    d.InvoiceNumber,
                                                    d.InvoiceDate,
                                                    d.Description,
                                                    d.TaxablePercentage,
                                                    // d.Department,
                                                    d.TaxValue,
                                                    d.Amount,
                                                    d.GSTIN,
                                                    d.IsTaxEligible,
                                                })
                                                     .AsEnumerable()
                                 .Select((x) => new AdhocPaymentListModel()
                                 {
                                     InvoiceNumber = x.InvoiceNumber,
                                     TaxablePercentage = x.TaxablePercentage,
                                     TaxValue = x.TaxValue,
                                     Description = x.Description,
                                     //   Department = x.Department,
                                     Amount = x.Amount,
                                     GSTIN = x.GSTIN,
                                     InvDate = String.Format("{0:dd-MMMM-yyyy}", x.InvoiceDate),
                                     IsTaxEligible = x.IsTaxEligible,
                                 }).ToList();

                        adhoc.CommitmentDetail = (from c in context.tblAdhocPayCommitmentDetail
                                                  join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                  join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                  join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                  join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                  orderby det.ComitmentDetailId descending
                                                  where c.AdhocPaymentId == adhocpayId && c.Status == "Active"
                                                  select new BillCommitmentDetailModel()
                                                  {
                                                      CommitmentDetailId = c.CommitmentDetailId,
                                                      CommitmentNumber = com.CommitmentNumber,
                                                      ProjectNumber = p.ProjectNumber,
                                                      ProjectId = com.ProjectId,
                                                      HeadName = head.HeadName,
                                                      AvailableAmount = det.BalanceAmount ?? 0,
                                                      PaymentAmount = c.PaymentAmount,
                                                      BillCommitmentDetailId = c.AdhocPayCommitmentDetailId
                                                  }).ToList();
                        adhoc.ExpenseDetail = (from e in context.tblAdhocPayExpenseDetail
                                               where e.AdhocPaymentId == adhocpayId && e.Status == "Active"
                                               select new
                                               {
                                                   e.AccountHeadId,
                                                   e.Amount,
                                                   e.AccountGroupId,
                                                   e.AdhocPayExpenseDetailId,
                                                   e.TransactionType,
                                                   e.IsJV_f
                                               })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  TransactionType = x.TransactionType,
                                                  Amount = x.Amount,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.AdhocPayExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        adhoc.DeductionDetail = (from d in context.tblAdhocPayDeductionDetail
                                                 join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                 join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                 join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                 where d.AdhocPaymentId == adhocpayId && d.Status == "Active"
                                                 select new BillDeductionDetailModel()
                                                 {
                                                     AccountGroupId = d.AccountGroupId,
                                                     BillDeductionDetailId = d.AdhocPayDeductionDetailId,
                                                     Amount = d.Amount,
                                                     DeductionHeadId = d.DeductionHeadId,
                                                     AccountGroup = g.AccountGroup,
                                                     DeductionHead = hd.AccountHead
                                                 }).ToList();

                        adhoc.CheckListDetail = (from ck in context.tblAdhocPayCheckDetail
                                                 join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                 where ck.AdhocPaymentId == adhocpayId && ck.Status == "Active"
                                                 select new CheckListModel()
                                                 {
                                                     CheckList = chkf.CheckList,
                                                     FunctionCheckListId = ck.FunctionCheckListId,
                                                     IsChecked = true
                                                 }).ToList();

                        adhoc.DocumentDetail = (from d in context.tblAdhocPayDocumentDetail
                                                where d.AdhocPaymentId == adhocpayId && d.Status == "Active"
                                                select new AttachmentDetailModel()
                                                {
                                                    DocumentActualName = d.DocumentActualName,
                                                    DocumentDetailId = d.AdhocPayDocumentDetailId,
                                                    DocumentName = d.DocumentName,
                                                    DocumentPath = "~/Content/OtherDocuments",
                                                    DocumentType = d.DocumentType,
                                                    Remarks = d.Remarks
                                                }).ToList();
                    }
                }
                return adhoc;
            }
            catch (Exception ex)
            {
                return new AdhocPaymentModel();
            }
        }
        public int CreateAdhocPayment(AdhocPaymentModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.AdhocId > 0)
                        {
                            var adhocid = model.AdhocId;
                            var query = context.tblAdhocPayment.FirstOrDefault(m => m.AdhocPaymentId == model.AdhocId);
                            int? categoryid = query.PayeeType;
                            if (query != null)
                            {

                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                if (model.CategoryId == 1)
                                {
                                    query.PayeeType = model.CategoryId;
                                    query.PayeeName = model.Name;
                                    query.PayeeID = model.UserId;
                                }
                                if (model.CategoryId == 2)
                                {
                                    query.PayeeType = model.CategoryId;
                                    query.PayeeName = model.Name;
                                    query.PayeeID = "0";
                                }
                                if (model.CategoryId == 3)
                                {
                                    query.PayeeName = model.Name;
                                    query.PayeeType = model.CategoryId;
                                }
                                query.TotalAmount = model.TotalAdhocPayValue;
                                query.TotalTaxAmount = model.TotalTaxValue;
                                query.NetPayableAmount = model.NetPayableValue;
                                query.EligibleTaxAmount = model.EligibleTaxValue;
                                query.AdhocPaymentType = model.PaymentType;
                                query.AdhocPaymentMode = model.PaymentMode;
                                query.BankName = model.BankName;
                                query.BankBranch = model.BranchName;
                                query.AccountNumber = model.AccountNumber;
                                query.IFSC = model.IFSCCode;
                                query.Remarks = model.Remark;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();

                                context.tblAdhocPayInvoiceDetails.RemoveRange(context.tblAdhocPayInvoiceDetails.Where(m => m.AdhocPaymentId == adhocid));
                                context.SaveChanges();
                                if (model.PaymentDetails.Count > 0)
                                {
                                    foreach (var item in model.PaymentDetails)
                                    {
                                        if (item.InvoiceNumber != null)
                                        {
                                            tblAdhocPayInvoiceDetails invdetails = new tblAdhocPayInvoiceDetails();
                                            invdetails.AdhocPaymentId = adhocid;
                                            invdetails.InvoiceNumber = item.InvoiceNumber;
                                            invdetails.Amount = item.Amount;
                                            invdetails.TaxablePercentage = item.TaxablePercentage;
                                            invdetails.TaxValue = item.TaxValue;
                                            invdetails.Description = item.Description;
                                            invdetails.Amount = item.Amount;
                                            invdetails.GSTIN = item.GSTIN;
                                            invdetails.IsTaxEligible = item.IsTaxEligible;
                                            invdetails.InvoiceDate = DateTime.Parse(item.InvDate);
                                            invdetails.CRTD_By = LoggedInUser;
                                            invdetails.CRTD_TS = DateTime.Now;
                                            invdetails.Status = "Active";
                                            context.tblAdhocPayInvoiceDetails.Add(invdetails);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblAdhocPayExpenseDetail.RemoveRange(context.tblAdhocPayExpenseDetail.Where(m => m.AdhocPaymentId == adhocid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblAdhocPayExpenseDetail exp = new tblAdhocPayExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.AdhocPaymentId = adhocid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblAdhocPayExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblAdhocPayCommitmentDetail.RemoveRange(context.tblAdhocPayCommitmentDetail.Where(m => m.AdhocPaymentId == adhocid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblAdhocPayCommitmentDetail commitment = new tblAdhocPayCommitmentDetail();
                                    commitment.AdhocPaymentId = adhocid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblAdhocPayCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblAdhocPayDeductionDetail.RemoveRange(context.tblAdhocPayDeductionDetail.Where(m => m.AdhocPaymentId == adhocid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblAdhocPayDeductionDetail deduction = new tblAdhocPayDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.AdhocPaymentId = adhocid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblAdhocPayDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblAdhocPayCheckDetail.RemoveRange(context.tblAdhocPayCheckDetail.Where(m => m.AdhocPaymentId == adhocid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblAdhocPayCheckDetail chk = new tblAdhocPayCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.AdhocPaymentId = adhocid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblAdhocPayCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblAdhocPayDocumentDetail.Where(x => x.AdhocPaymentId == model.AdhocId && !arrList.Contains(x.AdhocPayDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblAdhocPayDocumentDetail.FirstOrDefault(m => m.AdhocPayDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblAdhocPayDocumentDetail doc = new tblAdhocPayDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.AdhocPaymentId = model.AdhocId;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblAdhocPayDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.AdhocId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblAdhocPayment adhocpay = new tblAdhocPayment();
                            adhocpay.CRTD_By = LoggedInUser;
                            adhocpay.CRTD_TS = DateTime.Now;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);                            
                            adhocpay.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                adhocpay.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                adhocpay.SourceEmailDate = model.SourceEmailDate;
                            }
                            if (model.CategoryId == 1)
                            {
                                adhocpay.PayeeType = model.CategoryId;
                                adhocpay.PayeeName = model.Name;
                                adhocpay.PayeeID = model.UserId;
                            }
                            if (model.CategoryId == 2)
                            {
                                adhocpay.PayeeType = model.CategoryId;
                                adhocpay.PayeeName = model.Name;
                                adhocpay.PayeeID = "0";
                            }
                            if (model.CategoryId == 3)
                            {
                                adhocpay.PayeeName = model.Name;
                                adhocpay.PayeeType = model.CategoryId;
                            }
                            adhocpay.TotalAmount = model.TotalAdhocPayValue;
                            adhocpay.TransactionTypeCode = model.TransactionTypeCode;
                            adhocpay.Remarks = model.Remark;
                            adhocpay.TotalTaxAmount = model.TotalTaxValue;
                            adhocpay.NetPayableAmount = model.NetPayableValue;
                            adhocpay.EligibleTaxAmount = model.EligibleTaxValue;
                            adhocpay.AdhocPaymentType = model.PaymentType;
                            adhocpay.AdhocPaymentMode = model.PaymentMode;
                            adhocpay.BankName = model.BankName;
                            adhocpay.BankBranch = model.BranchName;
                            adhocpay.AccountNumber = model.AccountNumber;
                            adhocpay.IFSC = model.IFSCCode;
                            adhocpay.Remarks = model.Remark;
                            adhocpay.CheckListVerifiedBy = model.CheckListVerified_By;
                            adhocpay.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getAdhocPaymentId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.AdhocPaymentNumber = model.TransactionTypeCode + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.AdhocPaymentNumber = model.TransactionTypeCode + "/" + FinYear + "/" + "000001";
                            }
                            adhocpay.AdhocPaymentNumber = model.AdhocPaymentNumber;
                            context.tblAdhocPayment.Add(adhocpay);
                            context.SaveChanges();
                            int adhocpaymentid = adhocpay.AdhocPaymentId;
                            if (adhocpaymentid > 0)
                            {
                                foreach (var item in model.PaymentDetails)
                                {
                                    if (item.InvoiceNumber != null)
                                    {
                                        tblAdhocPayInvoiceDetails invdetails = new tblAdhocPayInvoiceDetails();
                                        invdetails.AdhocPaymentId = adhocpaymentid;
                                        invdetails.InvoiceNumber = item.InvoiceNumber;
                                        invdetails.Amount = item.Amount;
                                        invdetails.TaxablePercentage = item.TaxablePercentage;
                                        invdetails.TaxValue = item.TaxValue;
                                        invdetails.Description = item.Description;
                                        invdetails.Amount = item.Amount;
                                        invdetails.GSTIN = item.GSTIN;
                                        invdetails.IsTaxEligible = item.IsTaxEligible;
                                        invdetails.InvoiceDate = DateTime.Parse(item.InvDate);
                                        invdetails.CRTD_By = LoggedInUser;
                                        invdetails.CRTD_TS = DateTime.Now;
                                        invdetails.Status = "Active";
                                        context.tblAdhocPayInvoiceDetails.Add(invdetails);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {

                                    tblAdhocPayExpenseDetail exp = new tblAdhocPayExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.AdhocPaymentId = adhocpaymentid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblAdhocPayExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblAdhocPayCommitmentDetail commitment = new tblAdhocPayCommitmentDetail();
                                    commitment.AdhocPaymentId = adhocpaymentid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblAdhocPayCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null && item.Amount != 0)
                                        {
                                            if (item.AccountGroupId == null)
                                                return -1;
                                            tblAdhocPayDeductionDetail deduction = new tblAdhocPayDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.AdhocPaymentId = adhocpaymentid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblAdhocPayDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblAdhocPayCheckDetail chk = new tblAdhocPayCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.AdhocPaymentId = adhocpaymentid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblAdhocPayCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblAdhocPayDocumentDetail doc = new tblAdhocPayDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.AdhocPaymentId = adhocpaymentid;
                                    doc.IsStudentDocument_f = true;
                                    doc.Status = "Active";
                                    context.tblAdhocPayDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return adhocpaymentid;
                            }

                            return adhocpaymentid;
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        public bool UpdateAHPStatusOnBookCommitment(int adhocpaymentId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAdhocPayment.FirstOrDefault(m => m.AdhocPaymentId == adhocpaymentId && m.Status == "Active");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<AdhocPaySearchResultModel> SearchAdhocPaymentList(AdhocPaySearchFieldModel model)
        {
            List<AdhocPaySearchResultModel> Adhoc = new List<AdhocPaySearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.ToDate != null)
                {
                    model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                }

                var query = (from R in context.tblAdhocPayment
                                 // join D in context.tblAdhocPayInvoiceDetails on R.AdhocPaymentId equals D.AdhocPaymentId
                             where ((String.IsNullOrEmpty(model.PayeeName) || R.PayeeName.Contains(model.PayeeName))
                             // && (String.IsNullOrEmpty(model.InvoiceNumber) || D.InvoiceNumber.Contains(model.InvoiceNumber))
                             && (String.IsNullOrEmpty(model.AdhocPaymentNumber) || R.AdhocPaymentNumber.Contains(model.AdhocPaymentNumber))
                             && (((R.CRTD_TS >= model.FromDate) && (R.CRTD_TS <= model.ToDate)) ||
                             (model.FromDate == null && model.ToDate == null)))
                             orderby R.AdhocPaymentId descending
                             select new { R }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        Adhoc.Add(new AdhocPaySearchResultModel()
                        {
                            SlNo = i + 1,
                            AdhocId = query[i].R.AdhocPaymentId,
                            AdhocPaymentNumber = query[i].R.AdhocPaymentNumber,
                            Name = query[i].R.PayeeName,
                            AdhocPaymentDate = String.Format("{0:dd-MMMM-yyyy}", query[i].R.CRTD_TS),
                            NetPayableValue = query[i].R.NetPayableAmount,
                            Status = query[i].R.Status,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Adhoc;
        }

        public bool AdhocPayCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblAdhocPayCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.AdhocPaymentId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool AdhocPaymentBillApproved(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblAdhocPayment.FirstOrDefault(m => m.AdhocPaymentId == id && m.Status == "Open" && m.TransactionTypeCode == "REM");
                    if (billQuery != null)
                    {

                        billQuery.Status = "Completed";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getAdhocPayBOAmodeldetails(int paymentId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblAdhocPayment.SingleOrDefault(m => m.AdhocPaymentId == paymentId);

                    var commitdetail = (from c in context.tblAdhocPayCommitmentDetail
                                        join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                        join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                        join p in context.tblProject on com.ProjectId equals p.ProjectId
                                        join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                        orderby det.ComitmentDetailId descending
                                        where c.AdhocPaymentId == paymentId && c.Status == "Active"
                                        select new BOADetailModel()
                                        {
                                            CommitmentDetailId = c.CommitmentDetailId,
                                            ProjectId = com.ProjectId,
                                            BudgetHead = head.BudgetHeadId,
                                            Amount = c.PaymentAmount ?? 0,
                                        }).ToList();
                    var subledgerid = 0;
                    var subledgertype = 0;
                    if (billQuery.PayeeType == 1)
                    {
                        subledgerid = Convert.ToInt32(billQuery.PayeeID);
                        subledgertype = 3;
                    }
                    if (billQuery.PayeeType == 2)
                    {
                        subledgerid = 0;
                        subledgertype = 4;
                    }
                    if (billQuery.PayeeType == 2)
                    {
                        subledgerid = 0;
                        subledgertype = 5;
                    }
                    if (billQuery != null)
                    {
                        // var pjctquery = context.tblProject.SingleOrDefault(m => m.ProjectId == billQuery.ProjectId);

                        decimal netAmt = (billQuery.NetPayableAmount ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("JV");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.TempVoucherNumber = billQuery.AdhocPaymentNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.AdhocPaymentNumber;
                        txList = (from exp in context.tblAdhocPayExpenseDetail
                                  where exp.AdhocPaymentId == paymentId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblAdhocPayDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.AdhocPaymentId == paymentId && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = subledgertype,
                            SubLedgerId = subledgerid,
                        });

                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOADetail = commitdetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public List<MasterlistviewModel> getPIDetails(string Name)
        {
            List<MasterlistviewModel> PIList = new List<MasterlistviewModel>();
            try
            {
                Name = Name.Substring(0, Name.IndexOf('-'));
                var userid = Convert.ToInt32(Name);
                using (var context = new IOASDBEntities())
                {
                    var query = (from C in context.vwFacultyStaffDetails
                                     //join ins in context.tblInstituteMaster on C.InstituteId equals ins.InstituteId
                                 where C.UserId == userid
                                 orderby C.UserId descending
                                 select new { C.FirstName, C.UserId }).FirstOrDefault();
                    if (query != null)
                    {
                        PIList.Add(new MasterlistviewModel()
                        {
                            code = Convert.ToString(query.UserId),
                            name = query.FirstName
                        });
                    }
                    else
                    {
                        PIList.Add(new MasterlistviewModel()
                        {
                            code = "",
                            name = ""
                        });
                    }

                }

                return PIList;
            }
            catch (Exception ex)
            {
                PIList.Add(new MasterlistviewModel()
                {
                    code = "",
                    name = ""
                });
                return PIList;
            }

        }
        #endregion
        #region Contra
        public ContraModel GetContraDetails(int id)
        {
            try
            {
                ContraModel bill = new ContraModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblContra.FirstOrDefault(m => m.ContraId == id);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.ContraNumber = query.ContraNumber;
                        bill.Narration = query.Narration;
                        bill.DocumentName = query.DocumentName;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentPath = "~/Content/OtherDocuments";
                        bill.PostedDate = String.Format("{0:s}", query.CRTD_TS);
                        bill.ContraId = id;

                        bill.CrDetail = (from e in context.tblContraDetail
                                         where e.ContraId == id && e.TransactionType == "Credit"
                                         select new
                                         {
                                             e.AccountHeadId,
                                             e.Amount,
                                             e.AccountGroupId,
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new ContraDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                              }).ToList();

                        bill.DrDetail = (from e in context.tblContraDetail
                                         where e.ContraId == id && e.TransactionType == "Debit"
                                         select new
                                         {
                                             e.AccountHeadId,
                                             e.Amount,
                                             e.AccountGroupId,
                                         })
                                              .AsEnumerable()
                                              .Select((x) => new ContraDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0)
                                              }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new ContraModel();
            }
        }
        public int ContraIU(ContraModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.ContraId == null)
                        {
                            int ContraId = 0;
                            tblContra bill = new tblContra();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "CTR";
                            bill.ContraNumber = Common.GetNewContraNo();
                            bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                            bill.Narration = model.Narration;
                            if (model.Document != null)
                            {
                                string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                var docName = Guid.NewGuid().ToString() + "_" + actName;
                                model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                bill.DocumentActualName = actName;
                                bill.DocumentName = docName;
                            }
                            context.tblContra.Add(bill);
                            context.SaveChanges();
                            ContraId = bill.ContraId;

                            foreach (var item in model.CrDetail)
                            {
                                tblContraDetail crDet = new tblContraDetail();
                                crDet.ContraId = ContraId;
                                crDet.Amount = item.Amount;
                                crDet.AccountGroupId = item.AccountGroupId;
                                crDet.AccountHeadId = item.AccountHeadId;
                                crDet.TransactionType = "Credit";
                                context.tblContraDetail.Add(crDet);
                                context.SaveChanges();
                            }

                            foreach (var item in model.DrDetail)
                            {
                                tblContraDetail drDet = new tblContraDetail();
                                drDet.ContraId = ContraId;
                                drDet.Amount = item.Amount;
                                drDet.AccountGroupId = item.AccountGroupId;
                                drDet.AccountHeadId = item.AccountHeadId;
                                drDet.TransactionType = "Debit";
                                context.tblContraDetail.Add(drDet);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return ContraId;
                        }
                        else
                        {
                            int ContraId = model.ContraId ?? 0;
                            var bill = context.tblContra.FirstOrDefault(m => m.ContraId == ContraId && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.Amount = model.CrDetail.Select(m => m.Amount).Sum();
                                bill.Narration = model.Narration;
                                if (model.Document != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                    var docName = Guid.NewGuid().ToString() + "_" + actName;
                                    model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    bill.DocumentActualName = actName;
                                    bill.DocumentName = docName;
                                }

                                context.tblContraDetail.RemoveRange(context.tblContraDetail.Where(m => m.ContraId == ContraId));
                                context.SaveChanges();
                                foreach (var item in model.CrDetail)
                                {
                                    tblContraDetail crDet = new tblContraDetail();
                                    crDet.ContraId = ContraId;
                                    crDet.Amount = item.Amount;
                                    crDet.AccountGroupId = item.AccountGroupId;
                                    crDet.AccountHeadId = item.AccountHeadId;
                                    crDet.TransactionType = "Credit";
                                    context.tblContraDetail.Add(crDet);
                                    context.SaveChanges();
                                }

                                foreach (var item in model.DrDetail)
                                {
                                    tblContraDetail drDet = new tblContraDetail();
                                    drDet.ContraId = ContraId;
                                    drDet.Amount = item.Amount;
                                    drDet.AccountGroupId = item.AccountGroupId;
                                    drDet.AccountHeadId = item.AccountHeadId;
                                    drDet.TransactionType = "Debit";
                                    context.tblContraDetail.Add(drDet);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return ContraId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<ContraModel> GetContraList()
        {
            try
            {

                List<ContraModel> list = new List<ContraModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblContra
                            orderby b.ContraId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.ContraId,
                                b.ContraNumber,
                                b.Amount,
                                b.CRTD_TS,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ContraModel()
                                 {
                                     SlNo = index + 1,
                                     ContraId = x.ContraId,
                                     ContraNumber = x.ContraNumber,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     CreditAmount = x.Amount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ContraModel>();
            }
        }
        public bool ApproveContra(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblContra.SingleOrDefault(m => m.ContraId == id && m.Status == "Open");
                    if (billQuery != null && ContraBOATransaction(id))
                    {

                        billQuery.Status = "Completed";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool ContraBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblContra.SingleOrDefault(m => m.ContraId == id);
                    if (billQuery != null)
                    {
                        model.TempVoucherNumber = billQuery.ContraNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 7;
                        model.VoucherNumber = billQuery.ContraNumber;
                        model.BOAValue = billQuery.Amount;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.ContraNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblContraDetail
                                  where exp.ContraId == id
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType
                                  }).ToList();
                        BOAPaymentDetail = (from exp in context.tblContraDetail
                                            where exp.ContraId == id
                                            select new BOAPaymentDetailModel()
                                            {
                                                BankHeadID = exp.AccountHeadId,
                                                Amount = exp.Amount,
                                                TransactionType = exp.TransactionType,
                                                PayeeType = "Contra",
                                                PayeeId = id
                                            }).ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Distribution
        public List<DistributionModel> GetDistributionList()
        {
            try
            {

                List<DistributionModel> list = new List<DistributionModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblDistribution
                            join pjct in context.tblProject on d.ProjectId equals pjct.ProjectId
                            join u in context.vwFacultyStaffDetails on d.PIId equals u.UserId
                            orderby d.DistributionId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.DistributionId,
                                d.DistributionNumber,
                                d.CRTD_TS,
                                pjct.ProjectNumber,
                                u.FirstName,
                                d.DistributionAmount,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new DistributionModel()
                                 {
                                     SlNo = index + 1,
                                     DistributionId = x.DistributionId,
                                     DistributionNumber = x.DistributionNumber,
                                     ProjectNumber = x.ProjectNumber,
                                     PIName = x.FirstName,
                                     DistributionDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     DistributionAmount = x.DistributionAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<DistributionModel>();
            }
        }
        public DistributionModel GetDistributionDetails(int distributionId)
        {
            try
            {
                DistributionModel distribute = new DistributionModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblDistribution.FirstOrDefault(m => m.DistributionId == distributionId);
                    var pjctquery = context.tblProject.FirstOrDefault(m => m.ProjectId == query.ProjectId);
                    var projectType = 2;
                    var detailsquery = (from s in context.tblDistributionDetails
                                        orderby s.DistributionDetailsId
                                        where s.DistributionId == distributionId
                                        select s).ToList();

                    if (query != null)
                    {
                        distribute.Source = query.Source;
                        if (query.Source == 1)
                        {
                            distribute.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            distribute.SourceReferenceNumber = refId;
                            distribute.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            distribute.SourceEmailDate = query.SourceEmailDate;
                        distribute.DistributionId = query.DistributionId;
                        distribute.DistributionNumber = query.DistributionNumber;
                        distribute.DistributionType = query.DistributionType;
                        distribute.DistributionDate = String.Format("{0:MM-yyyy}", query.MonthandYear);
                        distribute.ProjectType = 2;
                        if (projectType == 2)
                        {
                            distribute.ProjectId = query.ProjectId;
                            distribute.ProjectNumber = pjctquery.ProjectNumber;
                            distribute.CreditorType = "Professor/Staff";
                        }

                        distribute.Remark = query.Remarks;
                        distribute.CreditorAmount = query.DistributionAmount;
                        distribute.DistributionAmount = query.DistributionAmount;
                        distribute.TotalIndividualShareAmount = query.TotalAmount;
                        distribute.AmountAvailableforDistribution = query.AmountAvailableforDistribution;
                        distribute.PjctAvailableBalanceAmount = query.AvailableBalance;
                        distribute.TotalPCFShareAmount = query.TotalPCF;
                        distribute.PCFTransferedAmount = query.TotalPCF;
                        distribute.FacultyDistributedTotalAmount = query.TotalAmount;
                        distribute.FacultyDistributedTotalNetAmount = query.TotalIndividualPayableAmount;
                        distribute.FacultyDistributedTotalTDSAmount = query.TotalTDS;
                        distribute.InstituteOverheadAmount = query.InstituteOverhead;
                        distribute.LabCode = query.LabCode;
                        distribute.LabCodeAmount = query.ToLabCodeAmount;
                        distribute.EUCOAmount = query.EUCOAmount;
                        distribute.StoresConsumedAmount = query.StoresConsumedAmount;
                        distribute.CentralFacilitiesAmount = query.CentralFacilitiesAmount;
                        distribute.OthersAmount = query.OthersAmount;
                        distribute.TransferedToIITAmount = query.AmountToIITAccount;
                        distribute.CheckListVerified_By = query.CheckListVerifiedBy;
                        distribute.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);
                        AccountService _as = new AccountService();
                        var summary = _as.getProjectSummary(Convert.ToInt32(query.ProjectId));
                        distribute.PjctTotalAmtReceivedincldngOHandGST = summary.TotalReceipt + summary.GST + summary.OverHeads;
                        distribute.PjctTotalAmountReceivedOH = summary.OverHeads;
                        distribute.PjctTotalAmountReceivedGST = summary.GST;
                        distribute.PjctTotalAmountReceived = summary.TotalReceipt;
                        distribute.PIName = summary.PIname;
                        distribute.PjctTotalAmountSpent = summary.AmountSpent;
                        distribute.PjctOpenCommitmentAmount = summary.PreviousCommitment;

                        distribute.DistributionOverheads = (from d in context.tblDistributeInstituteOHBreakup
                                                            where d.DistributionId == distributionId && d.Status == "Active"
                                                            select new
                                                            {
                                                                d.DistributionId,
                                                                d.InstituteOverheadbreakupId,
                                                                d.InstituteOverheadTypeId,
                                                                d.InstituteOverheadType,
                                                                d.InstituteOverheadPercentage,
                                                                d.InstituteOverheadAmount,
                                                            })
                                                             .AsEnumerable()
                                         .Select((x) => new DistributionOverheadListModel()
                                         {
                                             InstituteOverheadbreakupId = x.InstituteOverheadbreakupId,
                                             OverheadtypeId = x.InstituteOverheadTypeId,
                                             Overheadtypename = x.InstituteOverheadType,
                                             OverheadPercentage = x.InstituteOverheadPercentage,
                                             OverheadAmount = x.InstituteOverheadAmount,
                                         }).ToList();
                        distribute.InstituteOverheadPercentage = distribute.DistributionOverheads.Select(m => m.OverheadPercentage).Sum() ?? 0;
                        distribute.InstituteOverheadAmount = distribute.DistributionOverheads.Select(m => m.OverheadAmount).Sum() ?? 0;

                        distribute.DistributionDetails = (from d in context.tblDistributionDetails
                                                          where d.DistributionId == distributionId && d.Status == "Active"
                                                          select new
                                                          {
                                                              d.DistributionDetailsId,
                                                              d.DistributionId,
                                                              d.Category,
                                                              d.UserID,
                                                              d.Name,
                                                              d.PayBillNumber,
                                                              d.ProjectNumber,
                                                              d.Amount,
                                                              d.FacultyDepartment,
                                                              d.FacultyDesignation,
                                                              //d.TDSAmount,
                                                              //d.NetAmount,
                                                              d.PaymentMode,
                                                              //d.BankName,
                                                              //d.BankBranch,
                                                              //d.AccountNumber,
                                                              //d.IFSC,
                                                              d.PaymentCompleted_f,
                                                              d.CRTD_TS,
                                                          })
                                                             .AsEnumerable()
                                         .Select((x) => new DistributionListModel()
                                         {
                                             DistributionDetailId = x.DistributionDetailsId,
                                             PayBillNumber = x.PayBillNumber,
                                             ProjectNumber = x.ProjectNumber,
                                             Category = x.Category,
                                             UserId = x.UserID,
                                             Name = x.Name,
                                             FacultyDepartment = x.FacultyDepartment,
                                             FacultyDesignation = x.FacultyDesignation,
                                             // BankName = x.BankName,
                                             Amount = x.Amount,
                                             //  TDSValue = x.TDSAmount,
                                             //  NetAmount = x.NetAmount,
                                             PaymentMode = x.PaymentMode,
                                             IsPaymentCompleted = x.PaymentCompleted_f,
                                             //AccountNumber = x.AccountNumber,
                                             //BranchName = x.BankBranch,
                                             //IFSCCode = x.IFSC,

                                         }).ToList();
                        distribute.PCFDetails = (from d in context.tblDistributionPCFDetails
                                                 where d.DistributionId == distributionId && d.Status == "Active"
                                                 select new
                                                 {
                                                     d.DistributionPCFDetailsId,
                                                     d.DistributionId,
                                                     d.PCFPIName,
                                                     d.PCFPIUserId,
                                                     d.PCFPIDepartment,
                                                     d.PCFPIDesignation,
                                                     d.PIPCFId,
                                                     d.PCFAmount,
                                                     d.CRTD_TS,
                                                 })
                                                             .AsEnumerable()
                                         .Select((x) => new PCFDetailsModel()
                                         {
                                             PCFDetailId = x.DistributionPCFDetailsId,
                                             PCFName = x.PCFPIName,
                                             PCFPIUserId = x.PCFPIUserId,
                                             DepartmentofStaff = x.PCFPIDepartment,
                                             DesignationofStaff = x.PCFPIDesignation,
                                             EmployeePCFId = x.PIPCFId,
                                             PCFAmount = x.PCFAmount,

                                         }).ToList();

                        distribute.CommitmentDetail = (from c in context.tblDistributionCommitmentDetail
                                                       join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                       join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                       join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                       join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                       orderby det.ComitmentDetailId descending
                                                       where c.DistributionId == distributionId && c.Status == "Active"
                                                       select new BillCommitmentDetailModel()
                                                       {
                                                           CommitmentDetailId = c.CommitmentDetailId,
                                                           CommitmentNumber = com.CommitmentNumber,
                                                           ProjectNumber = p.ProjectNumber,
                                                           ProjectId = com.ProjectId,
                                                           HeadName = head.HeadName,
                                                           AvailableAmount = det.BalanceAmount ?? 0,
                                                           PaymentAmount = c.PaymentAmount,
                                                           BillCommitmentDetailId = c.DistributionCommitmentDetailId
                                                       }).ToList();
                        distribute.ExpenseDetail = (from e in context.tblDistributionExpenseDetail
                                                    where e.DistributionId == distributionId && e.Status == "Active"
                                                    select new
                                                    {
                                                        e.AccountHeadId,
                                                        e.Amount,
                                                        e.AccountGroupId,
                                                        e.DistributionExpenseDetailId,
                                                        e.TransactionType,
                                                        e.IsJV_f
                                                    })
                                                  .AsEnumerable()
                                                  .Select((x) => new BillExpenseDetailModel()
                                                  {
                                                      AccountHeadId = x.AccountHeadId,
                                                      TransactionType = x.TransactionType,
                                                      Amount = x.Amount,
                                                      AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                      AccountGroupId = x.AccountGroupId,
                                                      AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                      BillExpenseDetailId = x.DistributionExpenseDetailId,
                                                      IsJV = x.IsJV_f ?? false
                                                  }).ToList();

                        distribute.DeductionDetail = (from d in context.tblDistributionDeductionDetail
                                                      join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                      join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                      join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                      where d.DistributionId == distributionId && d.Status == "Active"
                                                      select new BillDeductionDetailModel()
                                                      {
                                                          AccountGroupId = d.AccountGroupId,
                                                          BillDeductionDetailId = d.DistributionDeductionDetailId,
                                                          Amount = d.Amount,
                                                          DeductionHeadId = d.DeductionHeadId,
                                                          AccountGroup = g.AccountGroup,
                                                          DeductionHead = hd.AccountHead
                                                      }).ToList();

                        distribute.CheckListDetail = (from ck in context.tblDistributionCheckDetail
                                                      join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                      where ck.DistributionId == distributionId && ck.Status == "Active"
                                                      select new CheckListModel()
                                                      {
                                                          CheckList = chkf.CheckList,
                                                          FunctionCheckListId = ck.FunctionCheckListId,
                                                          IsChecked = true
                                                      }).ToList();

                        distribute.DocumentDetail = (from d in context.tblDistributionDocumentDetail
                                                     where d.DistributionId == distributionId && d.Status == "Active"
                                                     select new AttachmentDetailModel()
                                                     {
                                                         DocumentActualName = d.DocumentActualName,
                                                         DocumentDetailId = d.DistributionDocumentDetailId,
                                                         DocumentName = d.DocumentName,
                                                         DocumentPath = "~/Content/OtherDocuments",
                                                         DocumentType = d.DocumentType,
                                                         Remarks = d.Remarks
                                                     }).ToList();

                    }
                }
                return distribute;
            }
            catch (Exception ex)
            {
                return new DistributionModel();
            }
        }

        public int CreateDistribution(DistributionModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.DistributionId > 0)
                        {
                            var distributionid = model.DistributionId;
                            var query = context.tblDistribution.FirstOrDefault(m => m.DistributionId == model.DistributionId);
                            var pjctquery = context.tblProject.FirstOrDefault(m => m.ProjectId == query.ProjectId);
                            if (query != null)
                            {

                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.ProjectId = model.ProjectId;
                                query.PIId = pjctquery.PIName;
                                query.PIName = model.PIName;
                                query.DistributionType = model.DistributionType;
                                query.TotalAmount = model.FacultyDistributedTotalAmount;
                                query.TotalTDS = model.FacultyDistributedTotalTDSAmount;
                                query.TotalIndividualPayableAmount = model.FacultyDistributedTotalNetAmount;
                                query.TotalPCF = model.PCFTransferedAmount;
                                query.DistributionAmount = model.DistributionAmount;
                                query.MonthandYear = DateTime.Parse(model.DistributionDate);
                                query.AmountAvailableforDistribution = model.AmountAvailableforDistribution;
                                query.AvailableBalance = model.PjctAvailableBalanceAmount;
                                query.LabCode = model.LabCode;
                                query.ToLabCodeAmount = model.LabCodeAmount;
                                query.EUCOAmount = model.EUCOAmount;
                                query.StoresConsumedAmount = model.StoresConsumedAmount;
                                query.CentralFacilitiesAmount = model.CentralFacilitiesAmount;
                                query.OthersAmount = model.OthersAmount;
                                query.AmountToIITAccount = model.TransferedToIITAmount;
                                query.InstituteOverhead = model.InstituteOverheadAmount;
                                query.InstituteOverheadPercentage = model.InstituteOverheadPercentage;
                                query.Remarks = model.Remark;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                query.PaymentProcess_f = false;
                                context.SaveChanges();

                                context.tblDistributeInstituteOHBreakup.RemoveRange(context.tblDistributeInstituteOHBreakup.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                if (model.DistributionOverheads.Count > 0)
                                {
                                    foreach (var item in model.DistributionOverheads)
                                    {
                                        if (item.OverheadtypeId != null)
                                        {
                                            tblDistributeInstituteOHBreakup details = new tblDistributeInstituteOHBreakup();
                                            details.DistributionId = distributionid;
                                            details.InstituteOverheadTypeId = item.OverheadtypeId;
                                            details.InstituteOverheadType = item.Overheadtypename;
                                            details.InstituteOverheadAmount = item.OverheadAmount;
                                            details.InstituteOverheadPercentage = item.OverheadPercentage;

                                            details.Status = "Active";
                                            context.tblDistributeInstituteOHBreakup.Add(details);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                context.tblDistributionDetails.RemoveRange(context.tblDistributionDetails.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                if (model.DistributionDetails.Count > 0)
                                {
                                    foreach (var item in model.DistributionDetails)
                                    {
                                        if (item.Name != null)
                                        {
                                            tblDistributionDetails details = new tblDistributionDetails();
                                            details.DistributionId = distributionid;
                                            details.ProjectNumber = item.ProjectNumber;
                                            details.PayBillNumber = item.PayBillNumber;
                                            details.Amount = item.Amount;
                                            details.Category = item.Category;
                                            details.Name = item.Name;
                                            details.UserID = item.UserId;
                                            details.FacultyDepartment = item.FacultyDepartment;
                                            details.FacultyDesignation = item.FacultyDesignation;
                                            //details.TDSAmount = item.TDSValue;
                                            //details.NetAmount = item.NetAmount;
                                            details.PaymentMode = item.PaymentMode;
                                            //details.BankName = item.BankName;
                                            //details.BankBranch = item.BranchName;
                                            details.PaymentCompleted_f = false;
                                            //details.AccountNumber = item.AccountNumber;
                                            //details.IFSC = item.IFSCCode;
                                            details.CRTD_By = LoggedInUser;
                                            details.CRTD_TS = DateTime.Now;
                                            details.Status = "Active";
                                            context.tblDistributionDetails.Add(details);
                                            context.SaveChanges();
                                            if (item.PaymentMode == 2)
                                            {
                                                query.PaymentProcess_f = true;
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                context.tblDistributionPCFDetails.RemoveRange(context.tblDistributionPCFDetails.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                if (model.PCFDetails.Count > 0)
                                {
                                    foreach (var item in model.PCFDetails)
                                    {
                                        if (item.PCFName != null)
                                        {
                                            tblDistributionPCFDetails details = new tblDistributionPCFDetails();
                                            details.DistributionId = distributionid;
                                            details.PCFPIName = item.PCFName;
                                            details.PCFPIUserId = item.PCFPIUserId;
                                            details.PCFPIDepartment = item.DepartmentofStaff;
                                            details.PCFPIDesignation = item.DesignationofStaff;
                                            details.PIPCFId = item.EmployeePCFId;
                                            details.PCFAmount = item.PCFAmount;
                                            details.CRTD_By = LoggedInUser;
                                            details.CRTD_TS = DateTime.Now;
                                            details.Status = "Active";
                                            context.tblDistributionPCFDetails.Add(details);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblDistributionExpenseDetail.RemoveRange(context.tblDistributionExpenseDetail.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblDistributionExpenseDetail exp = new tblDistributionExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.DistributionId = distributionid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblDistributionExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblDistributionCommitmentDetail.RemoveRange(context.tblDistributionCommitmentDetail.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblDistributionCommitmentDetail commitment = new tblDistributionCommitmentDetail();
                                    commitment.DistributionId = distributionid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblDistributionCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblDistributionDeductionDetail.RemoveRange(context.tblDistributionDeductionDetail.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null)
                                        {
                                            tblDistributionDeductionDetail deduction = new tblDistributionDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.DistributionId = distributionid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblDistributionDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblDistributionCheckDetail.RemoveRange(context.tblDistributionCheckDetail.Where(m => m.DistributionId == distributionid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblDistributionCheckDetail chk = new tblDistributionCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.DistributionId = distributionid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblDistributionCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblDistributionDocumentDetail.Where(x => x.DistributionId == model.DistributionId && !arrList.Contains(x.DistributionDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblDistributionDocumentDetail.FirstOrDefault(m => m.DistributionDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblDistributionDocumentDetail doc = new tblDistributionDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.DistributionId = model.DistributionId;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblDistributionDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.DistributionId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            var pjctquery = context.tblProject.FirstOrDefault(m => m.ProjectId == model.ProjectId);
                            tblDistribution distribute = new tblDistribution();
                            distribute.CRTD_By = LoggedInUser;
                            distribute.CRTD_TS = DateTime.Now;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);                            
                            distribute.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                distribute.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                distribute.SourceEmailDate = model.SourceEmailDate;
                            }

                            distribute.ProjectId = model.ProjectId;
                            distribute.PIId = pjctquery.PIName;
                            distribute.PIName = model.PIName;
                            distribute.DistributionType = model.DistributionType;
                            distribute.TotalAmount = model.FacultyDistributedTotalAmount;
                            distribute.TotalTDS = model.FacultyDistributedTotalTDSAmount;
                            distribute.TotalIndividualPayableAmount = model.FacultyDistributedTotalNetAmount;
                            distribute.TotalPCF = model.PCFTransferedAmount;
                            distribute.DistributionAmount = model.DistributionAmount;
                            distribute.MonthandYear = DateTime.Parse(model.DistributionDate);
                            distribute.AmountAvailableforDistribution = model.AmountAvailableforDistribution;
                            distribute.AvailableBalance = model.PjctAvailableBalanceAmount;
                            distribute.LabCode = model.LabCode;
                            distribute.ToLabCodeAmount = model.LabCodeAmount;
                            distribute.EUCOAmount = model.EUCOAmount;
                            distribute.StoresConsumedAmount = model.StoresConsumedAmount;
                            distribute.CentralFacilitiesAmount = model.CentralFacilitiesAmount;
                            distribute.OthersAmount = model.OthersAmount;
                            distribute.AmountToIITAccount = model.TransferedToIITAmount;
                            distribute.InstituteOverhead = model.InstituteOverheadAmount;
                            distribute.InstituteOverheadPercentage = model.InstituteOverheadPercentage;
                            distribute.TransactionTypeCode = "DIS";
                            distribute.Remarks = model.Remark;
                            distribute.Source = model.Source;
                            distribute.SourceEmailDate = model.SourceEmailDate;
                            distribute.SourceReferenceNumber = model.SourceReferenceNumber;
                            distribute.CheckListVerifiedBy = model.CheckListVerified_By;
                            distribute.PaymentProcess_f = false;
                            distribute.Status = "Open";

                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getDistributionId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.DistributionNumber = "DIS" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.DistributionNumber = "DIS" + "/" + FinYear + "/" + "000001";
                            }
                            distribute.DistributionNumber = model.DistributionNumber;
                            context.tblDistribution.Add(distribute);
                            context.SaveChanges();
                            int distributionid = distribute.DistributionId;
                            if (distributionid > 0)
                            {
                                if (model.DistributionOverheads.Count > 0)
                                {
                                    foreach (var item in model.DistributionOverheads)
                                    {
                                        if (item.OverheadtypeId != null)
                                        {
                                            tblDistributeInstituteOHBreakup details = new tblDistributeInstituteOHBreakup();
                                            details.DistributionId = distributionid;
                                            details.InstituteOverheadTypeId = item.OverheadtypeId;
                                            details.InstituteOverheadType = item.Overheadtypename;
                                            details.InstituteOverheadAmount = item.OverheadAmount;
                                            details.InstituteOverheadPercentage = item.OverheadPercentage;

                                            details.Status = "Active";
                                            context.tblDistributeInstituteOHBreakup.Add(details);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.DistributionDetails)
                                {
                                    if (item.Name != null)
                                    {
                                        tblDistributionDetails details = new tblDistributionDetails();
                                        details.DistributionId = distributionid;
                                        details.ProjectNumber = item.ProjectNumber;
                                        details.PayBillNumber = item.PayBillNumber;
                                        details.Amount = item.Amount;
                                        details.Category = item.Category;
                                        details.Name = item.Name;
                                        details.UserID = item.UserId;
                                        details.FacultyDepartment = item.FacultyDepartment;
                                        details.FacultyDesignation = item.FacultyDesignation;
                                        //details.TDSAmount = item.TDSValue;
                                        //details.NetAmount = item.NetAmount;
                                        //details.BankName = item.BankName;
                                        //details.BankBranch = item.BranchName;
                                        //details.AccountNumber = item.AccountNumber;
                                        //details.IFSC = item.IFSCCode;
                                        details.PaymentMode = item.PaymentMode;
                                        details.PaymentCompleted_f = false;
                                        details.CRTD_By = LoggedInUser;
                                        details.CRTD_TS = DateTime.Now;
                                        details.Status = "Active";
                                        context.tblDistributionDetails.Add(details);
                                        context.SaveChanges();
                                        if (item.PaymentMode == 2)
                                        {
                                            distribute.PaymentProcess_f = true;
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.PCFDetails.Count > 0)
                                {
                                    foreach (var item in model.PCFDetails)
                                    {
                                        if (item.PCFName != null)
                                        {
                                            tblDistributionPCFDetails details = new tblDistributionPCFDetails();
                                            details.DistributionId = distributionid;
                                            details.PCFPIName = item.PCFName;
                                            details.PCFPIUserId = item.PCFPIUserId;
                                            details.PCFPIDepartment = item.DepartmentofStaff;
                                            details.PCFPIDesignation = item.DesignationofStaff;
                                            details.PIPCFId = item.EmployeePCFId;
                                            details.PCFAmount = item.PCFAmount;
                                            details.CRTD_By = LoggedInUser;
                                            details.CRTD_TS = DateTime.Now;
                                            details.Status = "Active";
                                            context.tblDistributionPCFDetails.Add(details);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.ExpenseDetail)
                                {

                                    tblDistributionExpenseDetail exp = new tblDistributionExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.DistributionId = distributionid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblDistributionExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblDistributionCommitmentDetail commitment = new tblDistributionCommitmentDetail();
                                    commitment.DistributionId = distributionid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblDistributionCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null)
                                        {
                                            tblDistributionDeductionDetail deduction = new tblDistributionDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.DistributionId = distributionid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblDistributionDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblDistributionCheckDetail chk = new tblDistributionCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.DistributionId = distributionid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblDistributionCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblDistributionDocumentDetail doc = new tblDistributionDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.DistributionId = distributionid;
                                    doc.Status = "Active";
                                    context.tblDistributionDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return distributionid;
                            }

                            return distributionid;
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public bool UpdateDISStatusOnBookCommitment(int distributionId, int logged_in_user, int commitmentId)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblDistribution.FirstOrDefault(m => m.DistributionId == distributionId && m.Status == "Active");
                    if (query != null)
                    {
                        query.Status = "Approval Pending";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        query.CommitmentId = commitmentId;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<DistributionSearchResultModel> SearchDistributionList(DistributionSearchFieldModel model)
        {
            List<DistributionSearchResultModel> Distribution = new List<DistributionSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.ToDate != null)
                {
                    model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                }

                var query = (from R in context.tblDistribution
                             join pjct in context.tblProject on R.ProjectId equals pjct.ProjectId
                             join u in context.vwFacultyStaffDetails on R.PIId equals u.UserId
                             where ((String.IsNullOrEmpty(model.PIName) || u.FirstName.Contains(model.PIName))
                             && (String.IsNullOrEmpty(model.DistributionNumber) || R.DistributionNumber.Contains(model.DistributionNumber))
                             && (String.IsNullOrEmpty(model.ProjectNumber) || pjct.ProjectNumber.Contains(model.ProjectNumber))
                             && (((R.CRTD_TS >= model.FromDate) && (R.CRTD_TS <= model.ToDate)) ||
                             (model.FromDate == null && model.ToDate == null)))
                             orderby R.DistributionId descending
                             select new { R, pjct, u.FirstName }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        Distribution.Add(new DistributionSearchResultModel()
                        {
                            SlNo = i + 1,
                            DistributionId = query[i].R.DistributionId,
                            DistributionNumber = query[i].R.DistributionNumber,
                            PIName = query[i].FirstName,
                            ProjectNumber = query[i].pjct.ProjectNumber,
                            DistributionDate = String.Format("{0:dd-MMMM-yyyy}", query[i].R.CRTD_TS),
                            DistributionAmount = query[i].R.DistributionAmount,
                            Status = query[i].R.Status,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                        });
                    }
                }
            }
            return Distribution;
        }
        public bool DistributionCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblDistributionCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.DistributionId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = revoke ? c.PaymentAmount : 0
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool DistributionBillApproved(int paymentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblDistribution.FirstOrDefault(m => m.DistributionId == paymentId && m.Status == "Open" && m.TransactionTypeCode == "DIS");
                    var querydetails = (from c in context.tblDistributionDetails
                                        where c.DistributionId == paymentId && c.PaymentMode == 2
                                        select c).ToList();
                    if (query != null)
                    {
                        //if (!getDistributionBOAmodeldetails(paymentId))
                        //    return false;
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        if (querydetails.Count() > 0)
                        {
                            for (int i = 0; i < querydetails.Count; i++)
                            {
                                var categoryid = Convert.ToInt32(querydetails[i].Category);
                                var categoryname = "";
                                if (categoryid == 3)
                                {
                                    categoryname = "Professor";
                                }
                                if (categoryid == 7)
                                {
                                    categoryname = "Staff";
                                }
                                if (categoryid == 8)
                                {
                                    categoryname = "Project Staffs";
                                }

                                var employeeid = Common.getEmployeeid(Convert.ToInt32(querydetails[i].UserID), categoryname);
                                tblEmpOtherAllowance emp = new tblEmpOtherAllowance();
                                emp.EmployeeId = querydetails[i].UserID;
                                emp.EmployeeIdStr = employeeid;
                                emp.Category = categoryid;
                                emp.ComponentName = "Distribution";
                                emp.Amount = querydetails[i].Amount;
                                emp.AddedDate = query.CRTD_TS;
                                emp.Description = query.Remarks;
                                emp.deduction = false;
                                emp.IsPaid = false;
                                emp.CreatedAt = DateTime.Now;
                                emp.CreatedBy = logged_in_user;
                                emp.Status = "Open";
                                context.tblEmpOtherAllowance.Add(emp);
                                context.SaveChanges();
                            }
                        }
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public List<ProjectDetailsModel> getProjectDuration(int ProjectId)
        {
            try
            {

                List<ProjectDetailsModel> Date = new List<ProjectDetailsModel>();

                using (var context = new IOASDBEntities())
                {
                    if (ProjectId > 0)
                    {
                        var query = (from C in context.tblProject
                                     where (C.ProjectId == ProjectId)
                                     select C).FirstOrDefault();
                        var extendquery = (from E in context.tblProjectEnhancement
                                           where (E.ProjectId == ProjectId && E.IsCurrentVersion == true && (E.IsExtensiononly == true || E.IsEnhancementWithExtension == true))
                                           orderby E.ProjectEnhancementId descending
                                           select E).FirstOrDefault();
                        DateTime? Today = DateTime.Now;
                        if (query != null)
                        {
                            if (extendquery != null)
                            {
                                Date.Add(new ProjectDetailsModel()
                                {
                                    ProjectId = query.ProjectId,
                                    ProjectCloseDate = String.Format("{0:dd-MMMM-yyyy}", extendquery.ExtendedDueDate),
                                    TodayDate = String.Format("{0:dd-MMMM-yyyy}", Today)
                                });
                            }
                            else if (extendquery == null)
                            {
                                Date.Add(new ProjectDetailsModel()
                                {
                                    ProjectId = query.ProjectId,
                                    ProjectCloseDate = String.Format("{0:dd-MMMM-yyyy}", query.ActuaClosingDate),
                                    TodayDate = String.Format("{0:dd-MMMM-yyyy}", Today),
                                });
                            }

                        }
                        else
                        {
                            Date.Add(new ProjectDetailsModel()
                            {
                                ProjectId = null,
                                ProjectCloseDate = "",
                                TodayDate = String.Format("{0:dd-MMMM-yyyy}", Today),
                            });
                        }

                    }


                }

                return Date;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public List<ProjectDetailsModel> getStaffDetails(int EmpId)
        {
            try
            {

                List<ProjectDetailsModel> details = new List<ProjectDetailsModel>();

                using (var context = new IOASDBEntities())
                {
                    if (EmpId != null)
                    {
                        var query = (from C in context.vwCombineStaffDetails
                                     where (C.ID == EmpId)
                                     select C).FirstOrDefault();


                        if (query != null)
                        {
                            details.Add(new ProjectDetailsModel()
                            {
                                FacultyDepartment = query.DepartmentName,
                                FacultyDesignation = query.EmployeeDesignation,
                            });

                        }
                        else
                        {
                            details.Add(new ProjectDetailsModel()
                            {
                                FacultyDepartment = "",
                                FacultyDesignation = "",
                            });
                        }

                    }


                }

                return details;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        public List<ProjectDetailsModel> getPIDesigandDep(int UserId)
        {
            try
            {
                List<ProjectDetailsModel> details = new List<ProjectDetailsModel>();

                using (var context = new IOASDBEntities())
                {
                    if (UserId > 0)
                    {
                        var query = (from C in context.vwFacultyStaffDetails
                                     join V in context.vwCombineStaffDetails on C.UserId equals V.ID
                                     where (C.UserId == UserId)
                                     select new { C, V }).FirstOrDefault();

                        if (query != null)
                        {
                            details.Add(new ProjectDetailsModel()
                            {
                                FacultyDepartment = query.C.DepartmentName,
                                FacultyDesignation = query.C.Designation,
                                FacultyPCFId = query.V.EmployeePCFId,
                            });
                        }
                        else
                        {
                            details.Add(new ProjectDetailsModel()
                            {
                                FacultyDepartment = "",
                                FacultyDesignation = "",
                                FacultyPCFId = "",
                            });
                        }
                    }

                }

                return details;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        #endregion
        #region Honororium
        public int CreateHonororium(HonororiumModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.HonororiumId > 0)
                        {
                            var honorid = model.HonororiumId;
                            var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == model.HonororiumId);
                            if (query != null)
                            {
                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    query.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    query.SourceEmailDate = model.SourceEmailDate;
                                }
                                query.TotalAmount = model.TotalAmount;
                                query.TotalTDS = model.TotalTDS;
                                query.RequestReceivedFrom = model.RequestReceivedFrom;
                                query.NetPayableAmount = model.NetPayableAmount;
                                query.NetTotal = model.NetTotal;
                                query.Remarks = model.Remarks;
                                query.TotalPayableToOH = model.TotalPayableToOH;
                                query.TotalPayableToPCF = model.TotalPayableToPCF;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                if (model.PODetail != null)
                                {
                                    foreach (var item in model.PODetail)
                                    {
                                        if (item.PaymentMode != 3)
                                        {
                                            query.PaymentProcess_f = true;
                                        }
                                    }
                                }
                                context.SaveChanges();

                                context.tblHonororiumDetails.RemoveRange(context.tblHonororiumDetails.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                if (model.PODetail.Count > 0)
                                {
                                    foreach (var item in model.PODetail)
                                    {
                                        tblHonororiumDetails HonDet = new tblHonororiumDetails();
                                        if (item.PayeeType == "PI")
                                        {

                                            HonDet.PayeeType = 3;
                                            HonDet.PayeeName = Common.GetPIName(Convert.ToInt32(item.UserId));
                                            HonDet.PayeeID = item.UserId;
                                        }
                                        if (item.PayeeType == "Student")
                                        {
                                            HonDet.PayeeType = 4;
                                            HonDet.PayeeName = item.Name;
                                            HonDet.PayeeID = 0;
                                        }
                                        if (item.PayeeType == "Others")
                                        {
                                            HonDet.PayeeName = item.Name;
                                            HonDet.PayeeType = 6;
                                        }
                                        HonDet.HonororiumId = honorid;
                                        HonDet.AccountNo = item.AccountNo;
                                        HonDet.Amount = item.Amount;
                                        HonDet.BankName = item.BankName;
                                        HonDet.Branch = item.Branch;
                                        HonDet.TDSPercentage = item.tdsdropdown;
                                        HonDet.IFSC = item.IFSC;
                                        HonDet.ModeOfPayment = item.PaymentMode;
                                        HonDet.NetAmount = item.NetAmount;
                                        HonDet.Status = "Active";
                                        HonDet.TDS = item.TDS;
                                        context.tblHonororiumDetails.Add(HonDet);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblHonororiumExpenseDetail.RemoveRange(context.tblHonororiumExpenseDetail.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblHonororiumExpenseDetail HonExp = new tblHonororiumExpenseDetail();
                                    HonExp.HonororiumId = honorid;
                                    HonExp.AccountGroupId = item.AccountGroupId;
                                    HonExp.AccountHeadId = item.AccountHeadId;
                                    HonExp.Amount = item.Amount;
                                    HonExp.TransactionType = item.TransactionType;
                                    HonExp.CRTD_By = LoggedInUser;
                                    HonExp.IsJV_f = item.IsJV;
                                    HonExp.CRTD_TS = DateTime.Now;
                                    HonExp.Status = "Active";
                                    context.tblHonororiumExpenseDetail.Add(HonExp);
                                    context.SaveChanges();
                                }
                                context.tblHonororiumCommitmentDetail.RemoveRange(context.tblHonororiumCommitmentDetail.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblHonororiumCommitmentDetail HonComm = new tblHonororiumCommitmentDetail();
                                    HonComm.HonororiumId = honorid;
                                    HonComm.CommitmentDetailId = item.CommitmentDetailId;
                                    HonComm.Amount = item.PaymentAmount;
                                    HonComm.CRTD_By = LoggedInUser;
                                    HonComm.CRTD_TS = DateTime.Now;
                                    HonComm.Status = "Active";
                                    context.tblHonororiumCommitmentDetail.Add(HonComm);
                                    context.SaveChanges();
                                }
                                context.tblHonororiumDeductionDetail.RemoveRange(context.tblHonororiumDeductionDetail.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        tblHonororiumDeductionDetail HonDed = new tblHonororiumDeductionDetail();
                                        HonDed.AccountGroupId = item.AccountGroupId;
                                        HonDed.Amount = item.Amount;
                                        HonDed.HonororiumId = honorid;
                                        HonDed.CRTD_By = LoggedInUser;
                                        HonDed.CRTD_TS = DateTime.Now;
                                        HonDed.DeductionHeadId = item.DeductionHeadId;
                                        HonDed.Status = "Active";
                                        context.tblHonororiumDeductionDetail.Add(HonDed);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblHonororiumPCFDetail.RemoveRange(context.tblHonororiumPCFDetail.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                foreach (var item in model.PCFDetail)
                                {
                                    if (item.PCFUserId > 0)
                                    {
                                        tblHonororiumPCFDetail HonPCF = new tblHonororiumPCFDetail();

                                        HonPCF.HonororiumId = honorid;
                                        HonPCF.PayableToOH = item.PayableToOH;
                                        HonPCF.PayeeID = item.PCFUserId;
                                        HonPCF.OHPercentage = item.OHDropdown;
                                        HonPCF.status = "Active";
                                        HonPCF.Amount = item.PCFAmount;
                                        HonPCF.PayableToPCF = item.PayableToPCF;
                                        HonPCF.PayeeName = item.PCFName;
                                        context.tblHonororiumPCFDetail.Add(HonPCF);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblHonororiumCheckDetail.RemoveRange(context.tblHonororiumCheckDetail.Where(m => m.HonororiumId == honorid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblHonororiumCheckDetail HonCheck = new tblHonororiumCheckDetail();
                                        HonCheck.Verified_By = model.CheckListVerified_By;
                                        HonCheck.FunctionCheckListId = item.FunctionCheckListId;
                                        HonCheck.HonororiumId = honorid;
                                        HonCheck.CRTD_By = LoggedInUser;
                                        HonCheck.CRTD_TS = DateTime.Now;
                                        HonCheck.Status = "Active";
                                        context.tblHonororiumCheckDetail.Add(HonCheck);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblHonororiumDocumentDetail.Where(x => x.HonororiumId == model.HonororiumId && !arrList.Contains(x.HonororiumDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblHonororiumDocumentDetail.FirstOrDefault(m => m.HonororiumDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblHonororiumDocumentDetail HonDoc = new tblHonororiumDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                        HonDoc.CRTD_By = LoggedInUser;
                                        HonDoc.CRTD_TS = DateTime.Now;
                                        HonDoc.DocumentActualName = actName;
                                        HonDoc.DocumentName = docName;
                                        HonDoc.DocumentType = item.DocumentType;
                                        HonDoc.Remarks = item.Remarks;
                                        HonDoc.HonororiumId = honorid;
                                        HonDoc.Status = "Active";
                                        context.tblHonororiumDocumentDetail.Add(HonDoc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.HonororiumId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblHonororium Hon = new tblHonororium();
                            Hon.CRTD_By = LoggedInUser;
                            Hon.CRTD_TS = DateTime.Now;
                            Hon.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                Hon.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                Hon.SourceEmailDate = model.SourceEmailDate;
                            }

                            Hon.TotalAmount = model.TotalAmount;
                            Hon.TotalTDS = model.TotalTDS;
                            Hon.RequestReceivedFrom = model.RequestReceivedFrom;
                            Hon.NetPayableAmount = model.NetPayableAmount;
                            Hon.NetTotal = model.NetTotal;
                            Hon.Remarks = model.Remarks;
                            Hon.TotalPayableToOH = model.TotalPayableToOH;
                            Hon.TotalPayableToPCF = model.TotalPayableToPCF;
                            Hon.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.gethonorid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.HonororiumNo = "HON" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.HonororiumNo = "HON" + "/" + FinYear + "/" + "000001";
                            }
                            Hon.HonororiumNo = model.HonororiumNo;
                            Hon.CheckListVerifiedBy = model.CheckListVerified_By;
                            if (model.PODetail != null)
                            {
                                foreach (var item in model.PODetail)
                                {
                                    if (item.PaymentMode != 3)
                                    {
                                        Hon.PaymentProcess_f = true;
                                    }
                                }
                            }
                            context.tblHonororium.Add(Hon);
                            context.SaveChanges();
                            int honorid = Hon.HonororiumId;
                            if (honorid > 0)
                            {
                                foreach (var item in model.PODetail)
                                {
                                    tblHonororiumDetails HonDet = new tblHonororiumDetails();
                                    if (item.PayeeType == "PI")
                                    {

                                        HonDet.PayeeType = 3;
                                        HonDet.PayeeName = Common.GetPIName(Convert.ToInt32(item.UserId));
                                        HonDet.PayeeID = item.UserId;
                                    }
                                    if (item.PayeeType == "Student")
                                    {
                                        HonDet.PayeeType = 4;
                                        HonDet.PayeeName = item.Name;
                                        HonDet.PayeeID = 0;
                                    }
                                    if (item.PayeeType == "Others")
                                    {
                                        HonDet.PayeeName = item.Name;
                                        HonDet.PayeeType = 6;
                                    }
                                    HonDet.HonororiumId = honorid;
                                    HonDet.AccountNo = item.AccountNo;
                                    HonDet.Amount = item.Amount;
                                    HonDet.BankName = item.BankName;
                                    HonDet.Branch = item.Branch;
                                    HonDet.TDSPercentage = item.tdsdropdown;
                                    HonDet.IFSC = item.IFSC;
                                    HonDet.ModeOfPayment = item.PaymentMode;
                                    HonDet.NetAmount = item.NetAmount;
                                    HonDet.Status = "Active";
                                    HonDet.TDS = item.TDS;
                                    context.tblHonororiumDetails.Add(HonDet);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblHonororiumExpenseDetail HonExp = new tblHonororiumExpenseDetail();
                                    HonExp.HonororiumId = honorid;
                                    HonExp.AccountGroupId = item.AccountGroupId;
                                    HonExp.AccountHeadId = item.AccountHeadId;
                                    HonExp.Amount = item.Amount;
                                    HonExp.TransactionType = item.TransactionType;
                                    HonExp.CRTD_By = LoggedInUser;
                                    HonExp.IsJV_f = item.IsJV;
                                    HonExp.CRTD_TS = DateTime.Now;
                                    HonExp.Status = "Active";
                                    context.tblHonororiumExpenseDetail.Add(HonExp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.PCFDetail)
                                {
                                    if (item.PCFUserId > 0)
                                    {
                                        tblHonororiumPCFDetail HonPCF = new tblHonororiumPCFDetail();

                                        HonPCF.HonororiumId = honorid;
                                        HonPCF.PayableToOH = item.PayableToOH;
                                        HonPCF.PayeeID = item.PCFUserId;
                                        HonPCF.OHPercentage = item.OHDropdown;
                                        HonPCF.status = "Active";
                                        HonPCF.Amount = item.PCFAmount;
                                        HonPCF.PayableToPCF = item.PayableToPCF;
                                        HonPCF.PayeeName = item.PCFName;
                                        context.tblHonororiumPCFDetail.Add(HonPCF);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblHonororiumCommitmentDetail HonComm = new tblHonororiumCommitmentDetail();
                                    HonComm.HonororiumId = honorid;
                                    HonComm.CommitmentDetailId = item.CommitmentDetailId;
                                    HonComm.Amount = item.PaymentAmount;
                                    HonComm.CRTD_By = LoggedInUser;
                                    HonComm.CRTD_TS = DateTime.Now;
                                    HonComm.Status = "Active";
                                    context.tblHonororiumCommitmentDetail.Add(HonComm);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        tblHonororiumDeductionDetail HonDed = new tblHonororiumDeductionDetail();
                                        HonDed.AccountGroupId = item.AccountGroupId;
                                        HonDed.Amount = item.Amount;
                                        HonDed.HonororiumId = honorid;
                                        HonDed.CRTD_By = LoggedInUser;
                                        HonDed.CRTD_TS = DateTime.Now;
                                        HonDed.DeductionHeadId = item.DeductionHeadId;
                                        HonDed.Status = "Active";
                                        context.tblHonororiumDeductionDetail.Add(HonDed);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblHonororiumCheckDetail HonCheck = new tblHonororiumCheckDetail();
                                        HonCheck.Verified_By = model.CheckListVerified_By;
                                        HonCheck.FunctionCheckListId = item.FunctionCheckListId;
                                        HonCheck.HonororiumId = honorid;
                                        HonCheck.CRTD_By = LoggedInUser;
                                        HonCheck.CRTD_TS = DateTime.Now;
                                        HonCheck.Status = "Active";
                                        context.tblHonororiumCheckDetail.Add(HonCheck);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblHonororiumDocumentDetail HonDoc = new tblHonororiumDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    HonDoc.CRTD_By = LoggedInUser;
                                    HonDoc.CRTD_TS = DateTime.Now;
                                    HonDoc.DocumentActualName = actName;
                                    HonDoc.DocumentName = docName;
                                    HonDoc.DocumentType = item.DocumentType;
                                    HonDoc.Remarks = item.Remarks;
                                    HonDoc.HonororiumId = honorid;
                                    HonDoc.Status = "Active";
                                    context.tblHonororiumDocumentDetail.Add(HonDoc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return honorid;
                            }
                            return honorid;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<HonororiumModel> GetHonororiumList()
        {
            try
            {
                List<HonororiumModel> list = new List<HonororiumModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblHonororium
                            orderby d.HonororiumId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.HonororiumId,
                                d.HonororiumNo,
                                d.CRTD_TS,
                                d.NetTotal,
                                d.RequestReceivedFrom,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new HonororiumModel()
                                 {
                                     SlNo = index + 1,
                                     HonororiumId = x.HonororiumId,
                                     HonororiumNo = x.HonororiumNo,
                                     RequestReceivedFrom = x.RequestReceivedFrom,
                                     HonororiumDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     NetTotal = x.NetTotal,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<HonororiumModel>();
            }
        }
        public HonororiumModel GetHonororiumDetails(int HonorId)
        {
            try
            {
                HonororiumModel Hon = new HonororiumModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == HonorId);
                    if (query != null)
                    {
                        Hon.Source = Convert.ToInt32(query.Source);
                        if (query.Source == 1)
                        {
                            Hon.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            Hon.SourceReferenceNumber = refId;
                            Hon.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            Hon.SourceEmailDate = query.SourceEmailDate;
                        Hon.HonororiumId = query.HonororiumId;
                        Hon.HonororiumNo = query.HonororiumNo;
                        Hon.NetPayableAmount = query.NetPayableAmount;
                        Hon.NetTotal = query.NetTotal;
                        Hon.Remarks = query.Remarks;
                        Hon.RequestReceivedFrom = query.RequestReceivedFrom;
                        Hon.TotalAmount = query.TotalAmount;
                        Hon.TotalPayableToOH = query.TotalPayableToOH;
                        Hon.TotalPayableToPCF = query.TotalPayableToPCF;
                        Hon.TotalTDS = query.TotalTDS;
                        Hon.CheckListVerified_By = query.CheckListVerifiedBy;
                        Hon.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);

                        Hon.PODetail = (from d in context.tblHonororiumDetails
                                        where d.HonororiumId == HonorId && d.Status == "Active"
                                        select new
                                        {
                                            d.AccountNo,
                                            d.Amount,
                                            d.BankName,
                                            d.Branch,
                                            d.IFSC,
                                            d.ModeOfPayment,
                                            d.NetAmount,
                                            d.PayeeName,
                                            d.PayeeType,
                                            d.TDS,
                                            d.TDSPercentage,
                                            d.PayeeID


                                        })
                                                     .AsEnumerable()
                                 .Select((x) => new HonororiumListModel()
                                 {
                                     Amount = x.Amount,
                                     TDS = x.TDS,
                                     NetAmount = x.NetAmount,
                                     BankName = x.BankName,
                                     Branch = x.Branch,
                                     IFSC = x.IFSC,
                                     AccountNo = x.AccountNo,
                                     PaymentMode = Convert.ToInt32(x.ModeOfPayment),
                                     PayeeType = Common.getpayeetype(x.PayeeType ?? 0),
                                     Name = x.PayeeName,
                                     tdsdropdown = x.TDSPercentage,
                                     UserId = x.PayeeID

                                 }).ToList();

                        Hon.CommitmentDetail = (from c in context.tblHonororiumCommitmentDetail
                                                join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                orderby det.ComitmentDetailId descending
                                                where c.HonororiumId == HonorId && c.Status == "Active"
                                                select new BillCommitmentDetailModel()
                                                {
                                                    CommitmentDetailId = c.CommitmentDetailId,
                                                    CommitmentNumber = com.CommitmentNumber,
                                                    ProjectNumber = p.ProjectNumber,
                                                    ProjectId = com.ProjectId,
                                                    HeadName = head.HeadName,
                                                    AvailableAmount = det.BalanceAmount ?? 0,
                                                    PaymentAmount = c.Amount,
                                                    BillCommitmentDetailId = c.HonororiumCommitmentDetailId,

                                                }).ToList();

                        Hon.ExpenseDetail = (from e in context.tblHonororiumExpenseDetail
                                             where e.HonororiumId == HonorId && e.Status == "Active"
                                             select new
                                             {
                                                 e.AccountHeadId,
                                                 e.Amount,
                                                 e.AccountGroupId,
                                                 e.HonororiumPayExpenseDetailId,
                                                 e.TransactionType,
                                                 e.IsJV_f

                                             })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 BillExpenseDetailId = x.HonororiumPayExpenseDetailId,
                                                 IsJV = x.IsJV_f ?? false

                                             }).ToList();
                        Hon.DeductionDetail = (from d in context.tblHonororiumDeductionDetail
                                               join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                               join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                               join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                               where d.HonororiumId == HonorId && d.Status == "Active"
                                               select new BillDeductionDetailModel()
                                               {
                                                   AccountGroupId = d.AccountGroupId,
                                                   BillDeductionDetailId = d.HonororiumDeductionDetailId,
                                                   Amount = d.Amount,
                                                   DeductionHeadId = d.DeductionHeadId,
                                                   AccountGroup = g.AccountGroup,
                                                   DeductionHead = hd.AccountHead
                                               }).ToList();
                        Hon.CheckListDetail = (from ck in context.tblHonororiumCheckDetail
                                               join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                               where ck.HonororiumId == HonorId && ck.Status == "Active"
                                               select new CheckListModel()
                                               {
                                                   CheckList = chkf.CheckList,
                                                   FunctionCheckListId = ck.FunctionCheckListId,
                                                   IsChecked = true
                                               }).ToList();
                        Hon.DocumentDetail = (from d in context.tblHonororiumDocumentDetail
                                              where d.HonororiumId == HonorId && d.Status == "Active"
                                              select new AttachmentDetailModel()
                                              {
                                                  DocumentActualName = d.DocumentActualName,
                                                  DocumentDetailId = d.HonororiumDocumentDetailId,
                                                  DocumentName = d.DocumentName,
                                                  DocumentPath = "~/Content/OtherDocuments",
                                                  DocumentType = d.DocumentType,
                                                  Remarks = d.Remarks
                                              }).ToList();
                        Hon.PCFDetail = (from d in context.tblHonororiumPCFDetail
                                         where d.HonororiumId == HonorId && d.status == "Active"
                                         select new
                                         {
                                             d.Amount,
                                             d.PayableToOH,
                                             d.PayeeName,
                                             d.PayableToPCF,
                                             d.OHPercentage,
                                             d.PayeeID
                                         })
                                                     .AsEnumerable()
                                 .Select((x) => new HonororiumPCFModel()
                                 {
                                     PCFAmount = x.Amount,
                                     PayableToPCF = x.PayableToPCF,
                                     PayableToOH = x.PayableToOH,
                                     PCFName = x.PayeeName,
                                     OHDropdown = x.OHPercentage,
                                     PCFUserId = x.PayeeID

                                 }).ToList();

                    }

                }
                return Hon;
            }
            catch (Exception ex)
            {
                return new HonororiumModel();
            }
        }
        public static List<HonororiumModel> SearchHonororiumList(honororiumSearchFieldModel model)
        {
            List<HonororiumModel> honor = new List<HonororiumModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblHonororium>();
                    if (!string.IsNullOrEmpty(model.HonororiumNumber))
                        predicate = predicate.And(d => d.HonororiumNo == model.HonororiumNumber);
                    if (!string.IsNullOrEmpty(model.ReqResFrom))
                        predicate = predicate.And(d => d.RequestReceivedFrom == model.ReqResFrom);
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status == model.Status);
                    if (model.FromDate != null && model.ToDate != null)
                    {
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                        predicate = predicate.And(d => d.CRTD_TS >= model.FromDate && d.CRTD_TS <= model.ToDate);
                    }
                    var query = context.tblHonororium.Where(predicate).OrderByDescending(m => m.HonororiumId).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            honor.Add(new HonororiumModel()
                            {
                                SlNo = i + 1,
                                HonororiumId = query[i].HonororiumId,
                                HonororiumNo = query[i].HonororiumNo,
                                RequestReceivedFrom = query[i].RequestReceivedFrom,
                                HonororiumDate = String.Format("{0:dd-MMMM-yyyy}", query[i].CRTD_TS),
                                NetTotal = query[i].NetTotal,
                                Status = query[i].Status
                            });
                        }
                    }
                    return honor;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool HonororiumCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblHonororiumCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.HonororiumId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.Amount,
                                  CommitmentId = com.CommitmentId
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool HonororiumBillApproved(int paymentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == paymentId && m.Status == "Approval Pending");
                    var querydetails = (from c in context.tblHonororiumDetails
                                        where c.HonororiumId == paymentId && c.ModeOfPayment == 3
                                        select c).ToList();
                    if (query != null)
                    {
                        //if (!getDistributionBOAmodeldetails(paymentId))
                        //    return false;
                        query.Status = "Approved";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        if (querydetails.Count() > 0)
                        {
                            for (int i = 0; i < querydetails.Count; i++)
                            {
                                tblEmpOtherAllowance emp = new tblEmpOtherAllowance();
                                emp.EmployeeId = querydetails[i].PayeeID;
                                emp.EmployeeIdStr = Common.getempid(Convert.ToInt32(querydetails[i].PayeeID));
                                emp.ComponentName = "Honororium";
                                emp.Amount = querydetails[i].Amount;
                                emp.AddedDate = query.CRTD_TS;
                                emp.Description = query.Remarks;
                                emp.deduction = false;
                                emp.IsPaid = false;
                                emp.CreatedAt = DateTime.Now;
                                emp.CreatedBy = logged_in_user;
                                emp.Status = "Open";
                                context.tblEmpOtherAllowance.Add(emp);
                                context.SaveChanges();
                            }
                        }
                        return true;
                    }


                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool HonororiumBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblHonororium.FirstOrDefault(m => m.HonororiumId == id);
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.NetTotal ?? 0;
                        model.TempVoucherNumber = billQuery.HonororiumNo;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "HON";
                        model.RefNumber = billQuery.HonororiumNo;
                        model.RefTransactionCode = "HON";
                        txList = (from exp in context.tblHonororiumExpenseDetail
                                  where exp.HonororiumId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblHonororiumDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.HonororiumId == id && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region BRS
        public List<BOAPaymentDetailModel> GetBOAPaymentDetails(DateTime frmDate, DateTime toDate, int bankId)
        {
            try
            {
                List<BOAPaymentDetailModel> listTx = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    listTx = (from b in context.tblBOAPaymentDetail
                              join m in context.tblBOA on b.BOAId equals m.BOAId
                              join tx in context.tblBOATransaction on
                              new { boaId = m.BOAId, headId = bankId } equals
                              new { boaId = tx.BOAId ?? 0, headId = tx.AccountHeadId ?? 0 }
                              orderby m.PostedDate
                              where (m.PostedDate >= frmDate && m.PostedDate <= toDate) &&
                               b.Reconciliation_f != true
                              select new
                              {
                                  b.BOAPaymentDetailId,
                                  b.PayeeName,
                                  m.PostedDate,
                                  m.TempVoucherNumber,
                                  m.VoucherNumber,
                                  tx.TransactionType,
                                  tx.Amount
                              })
                                 .AsEnumerable()
                                 .Select((x, index) => new BOAPaymentDetailModel()
                                 {
                                     BOAPaymentDetailId = x.BOAPaymentDetailId,
                                     Remarks = String.Format("{0:s}", x.PostedDate) + ", " + x.VoucherNumber + ", " + x.PayeeName,
                                     Amount = x.Amount,
                                     TransactionType = x.TransactionType,
                                     ReferenceNumber = x.TempVoucherNumber
                                 }).ToList();

                }
                return listTx;
            }
            catch (Exception ex)
            {
                return new List<BOAPaymentDetailModel>();
            }
        }
        public CommonPaymentModel GetAdhocTransaction(int headId, string txType)
        {
            try
            {
                CommonPaymentModel model = new CommonPaymentModel();
                List<BillExpenseDetailModel> expList = new List<BillExpenseDetailModel>();
                expList.Add(new BillExpenseDetailModel()
                {
                    AccountGroupList = Common.GetAccountGroup(false),
                    AccountHeadList = new List<MasterlistviewModel>(),
                    IsJV = false
                });
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblAccountHead.FirstOrDefault(m => m.AccountHeadId == headId);
                    if (query != null)
                        expList.Add(new BillExpenseDetailModel()
                        {
                            AccountHeadId = query.AccountHeadId,
                            TransactionType = txType,
                            AccountGroupList = Common.GetAccountGroup(query.AccountGroupId ?? 0),
                            AccountGroupId = query.AccountGroupId,
                            AccountHeadList = Common.GetAccountHeadList(query.AccountGroupId ?? 0),
                            IsJV = false
                        });


                }
                model.ExpenseDetail = expList;
                return model;
            }
            catch (Exception ex)
            {
                return new CommonPaymentModel();
            }
        }
        public int BRSIU(BRSModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int BRSId = 0;
                        tblBRS bill = new tblBRS();
                        bill.CRTD_By = logged_in_user;
                        bill.CRTD_TS = DateTime.Now;
                        bill.Status = "Open";
                        bill.TransactionTypeCode = "BRS";
                        bill.BRSNumber = Common.GetNewBRSNo();
                        bill.BOAFromDate = model.BOAFromDate;
                        bill.BOAToDate = model.BOAToDate;
                        bill.DocumentActualName = model.DocumentActualName;
                        bill.DocumentName = model.DocumentName;
                        bill.Remarks = model.Remarks;
                        bill.BankHeadId = model.BankHeadId;
                        bill.Verified_By = model.Verified_By;
                        context.tblBRS.Add(bill);
                        context.SaveChanges();
                        BRSId = bill.BRSId;

                        foreach (var item in model.boaDetail)
                        {
                            if (item.Reconciliation_f == true)
                            {
                                var updtQuery = context.tblBOAPaymentDetail.FirstOrDefault(m => m.BOAPaymentDetailId == item.BOAPaymentDetailId && m.Reconciliation_f != true);
                                if (updtQuery != null)
                                {
                                    updtQuery.Reconciliation_f = true;
                                    updtQuery.ReferenceDate = item.ReferenceDate;
                                    updtQuery.TransactionID = item.ReferenceNumber;
                                    context.SaveChanges();

                                    tblBRSBOADetail boaDetail = new tblBRSBOADetail();
                                    boaDetail.BankTxDate = item.ReferenceDate;
                                    boaDetail.BOAPaymentDetailId = item.BOAPaymentDetailId;
                                    boaDetail.ReferenceNumber = item.ReferenceNumber;
                                    boaDetail.BRSId = BRSId;
                                    boaDetail.Amount = item.Amount;
                                    boaDetail.TransactionType = item.TransactionType;
                                    boaDetail.Remarks = item.Remarks;
                                    context.tblBRSBOADetail.Add(boaDetail);
                                    context.SaveChanges();
                                }
                            }
                        }

                        foreach (var item in model.txDetail)
                        {
                            tblBRSDetail txDet = new tblBRSDetail();
                            txDet.Balance = item.Balance;
                            txDet.BRSId = BRSId;
                            txDet.Credit = item.Credit;
                            txDet.Debit = item.Debit;
                            txDet.Description = item.Description;
                            txDet.ReferenceNumber = item.ReferenceNumber;
                            txDet.Status = item.Status;
                            txDet.TransactionDate = item.TransactionDate;
                            context.tblBRSDetail.Add(txDet);
                            context.SaveChanges();
                        }
                        transaction.Commit();
                        return BRSId;

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<BRSModel> GetBRSList()
        {
            try
            {

                List<BRSModel> list = new List<BRSModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblBRS
                            orderby b.BRSId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.BRSId,
                                b.BRSNumber,
                                b.BankHeadId,
                                b.CRTD_TS,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new BRSModel()
                                 {
                                     SlNo = index + 1,
                                     BRSId = x.BRSId,
                                     BRSNumber = x.BRSNumber,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     Bank = Common.GetAccountHeadName(x.BankHeadId ?? 0),
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<BRSModel>();
            }
        }
        public BRSModel GetBRSDetails(int id)
        {
            try
            {
                BRSModel bill = new BRSModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblBRS.FirstOrDefault(m => m.BRSId == id);
                    if (query != null)
                    {
                        int bankId = query.BankHeadId ?? 0;
                        bill.BankHeadId = bankId;
                        bill.BOAFromDate = query.BOAFromDate;
                        bill.BOAToDate = query.BOAToDate;
                        bill.BRSId = query.BRSId;
                        bill.BRSNumber = query.BRSNumber;
                        bill.DocumentName = query.DocumentName;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentPath = "~/Content/BankStatement";
                        bill.Remarks = query.Remarks;
                        bill.Verified_By = query.Verified_By;
                        bill.VerifierName = Common.GetUserFirstName(query.Verified_By ?? 0);

                        bill.boaDetail = (from e in context.tblBRSBOADetail
                                          orderby e.BOAPaymentDetailId
                                          where e.BRSId == id
                                          select new BOAPaymentDetailModel()
                                          {
                                              BOAPaymentDetailId = e.BOAPaymentDetailId ?? 0,
                                              Remarks = e.Remarks,
                                              Amount = e.Amount,
                                              TransactionType = e.TransactionType,
                                              ReferenceNumber = e.ReferenceNumber,
                                              ReferenceDate = e.BankTxDate
                                          }).ToList();
                        bill.txDetail = (from e in context.tblBRSDetail
                                         orderby e.BRSDetailId
                                         where e.BRSId == id
                                         select new BankStatementDetailModel()
                                         {
                                             Balance = e.Balance,
                                             Credit = e.Credit,
                                             Debit = e.Debit,
                                             Description = e.Description,
                                             Status = e.Status,
                                             TransactionDate = e.TransactionDate,
                                             ReferenceNumber = e.ReferenceNumber
                                         }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new BRSModel();
            }
        }
        #endregion
        #region GSTOffset
        public static List<GSTOffsetInputModel> GetGSTInputList(DateTime fromdate, DateTime todate)
        {
            List<GSTOffsetInputModel> model = new List<GSTOffsetInputModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    // var arrList = context.tblGSTOffsetdetails.Select(m => m.BOATransactionId).ToArray();
                    var query = (from T in context.tblBOATransaction
                                 join B in context.tblBOA on T.BOAId equals B.BOAId
                                 join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                 from C in context.tblTransactionTypeCode.Where(m => m.TransactionTypeCode == B.TransactionTypeCode).Take(1)
                                 where (!context.tblGSTOffsetdetails.Any(m => m.BOATransactionId == T.BOATransactionId) &&
                                 (T.AccountHeadId <= 34 && T.AccountHeadId >= 32) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (B.RefTransactionCode != "GOF") && (T.Amount > 0))
                                 //group new { }
                                 //by new { T.BOATransactionId, T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber,C.TransactionType,TransType=T.TransactionType,B.TransactionTypeCode } into g
                                 orderby T.BOATransactionId descending
                                 select new
                                 {

                                     T.Amount,
                                     H.AccountHead,
                                     B.RefNumber,
                                     C.TransactionType,
                                     TransType = T.TransactionType,
                                     T.BOATransactionId,
                                     T.AccountHeadId,
                                     B.TransactionTypeCode

                                 }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {

                            model.Add(new GSTOffsetInputModel()
                            {
                                SlNo = i,
                                InputTransaction = query[i].TransactionType,
                                InputAmount = query[i].Amount,
                                InputHead = query[i].AccountHead,
                                InputNumber = query[i].RefNumber,
                                InputCredit = Convert.ToString(query[i].TransType) == "Credit" ? query[i].Amount : 0,
                                InputDebit = Convert.ToString(query[i].TransType) == "Debit" ? query[i].Amount : 0,
                                InputFlag = true,
                                InputId = query[i].BOATransactionId,
                                InputHeadId = Convert.ToInt32(query[i].AccountHeadId),
                                InputTransactionCode = query[i].TransactionTypeCode
                            });

                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<GSTOffsetOutputModel> GetGSTOutputList(DateTime fromdate, DateTime todate)
        {
            List<GSTOffsetOutputModel> model = new List<GSTOffsetOutputModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    //var arrList = context.tblGSTOffsetdetails.Select(m => m.BOATransactionId).ToArray();
                    var query = (from T in context.tblBOATransaction
                                     // where !arrList.Contains(T.BOATransactionId)
                                 join B in context.tblBOA on T.BOAId equals B.BOAId
                                 join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                 from C in context.tblTransactionTypeCode.Where(m => m.TransactionTypeCode == B.TransactionTypeCode).Take(1)
                                 where (!context.tblGSTOffsetdetails.Any(m => m.BOATransactionId == T.BOATransactionId) &&
                                 (T.AccountHeadId <= 38 && T.AccountHeadId >= 36) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (B.RefTransactionCode != "GOF") && (T.Amount > 0))
                                 //group new { }
                                 //by new { T.BOATransactionId,T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber, C.TransactionType, TransType = T.TransactionType,B.TransactionTypeCode } into g
                                 orderby T.BOATransactionId descending
                                 select new
                                 {

                                     T.Amount,
                                     H.AccountHead,
                                     B.RefNumber,
                                     C.TransactionType,
                                     TransType = T.TransactionType,
                                     T.BOATransactionId,
                                     T.AccountHeadId,
                                     B.TransactionTypeCode
                                 }).ToList();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {

                            model.Add(new GSTOffsetOutputModel()
                            {
                                SlNo = i,
                                OutputTransaction = query[i].TransactionType,
                                OutputAmount = query[i].Amount,
                                OutputHead = query[i].AccountHead,
                                OutputNumber = query[i].RefNumber,
                                OutputCredit = Convert.ToString(query[i].TransType) == "Credit" ? query[i].Amount : 0,
                                OutputDebit = Convert.ToString(query[i].TransType) == "Debit" ? query[i].Amount : 0,
                                OutputFlag = true,
                                OutputId = query[i].BOATransactionId,
                                OutputHeadId = Convert.ToInt32(query[i].AccountHeadId),
                                OutputTransactionCode = query[i].TransactionTypeCode
                            });

                        }
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<GSTOffsetTDSModel> GetTDSList(DateTime fromdate, DateTime todate)
        {
            List<GSTOffsetTDSModel> model = new List<GSTOffsetTDSModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    //var arrList = context.tblGSTOffsetdetails.Select(m => m.BOATransactionId).ToArray();
                    int[] headid = { 27, 296, 297 };
                    var query = (from T in context.tblBOATransaction
                                     // where !arrList.Contains(T.BOATransactionId)
                                 join B in context.tblBOA on T.BOAId equals B.BOAId
                                 join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                 from C in context.tblTransactionTypeCode.Where(m => m.TransactionTypeCode == B.TransactionTypeCode).Take(1)
                                 where (!context.tblGSTOffsetdetails.Any(m => m.BOATransactionId == T.BOATransactionId) &&
                                 (headid.Contains(T.AccountHeadId ?? 0)) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (B.RefTransactionCode != "GOF"))
                                 && T.Amount > 0
                                 //group new { }
                                 //by new { T.BOATransactionId, T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber, C.TransactionType, TransType = T.TransactionType,B.TransactionTypeCode } into g
                                 orderby T.BOATransactionId descending
                                 select new
                                 {

                                     T.Amount,
                                     H.AccountHead,
                                     B.RefNumber,
                                     C.TransactionType,
                                     TransType = T.TransactionType,
                                     T.BOATransactionId,
                                     T.AccountHeadId,
                                     B.TransactionTypeCode
                                 }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            model.Add(new GSTOffsetTDSModel()
                            {
                                SlNo = i,
                                TDSTransaction = query[i].TransactionType,
                                TDSAmount = query[i].Amount,
                                TDSHead = query[i].AccountHead,
                                TDSNumber = query[i].RefNumber,
                                TDSCredit = Convert.ToString(query[i].TransType) == "Credit" ? query[i].Amount : 0,
                                TDSDebit = Convert.ToString(query[i].TransType) == "Debit" ? query[i].Amount : 0,
                                TDSFlag = true,
                                TDSHeadId = Convert.ToInt32(query[i].AccountHeadId),
                                TDSId = query[i].BOATransactionId,
                                TDSTransactionCode = query[i].TransactionTypeCode
                            });
                        }
                    }
                    return model;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<GSTOffsetModel> GetPreviousGST()
        {
            List<GSTOffsetModel> model = new List<GSTOffsetModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGSTBalanceSummary.ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            model.Add(new GSTOffsetModel()
                            {
                                PreviousCGST = query[i].CGST == null ? 0 : query[i].CGST,
                                PreviousSGST = query[i].SGST == null ? 0 : query[i].SGST,
                                PreviousIGST = query[i].IGST == null ? 0 : query[i].IGST,
                            });
                        }
                    }
                    return model;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int CreateGSTOffset(GSTOffsetModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.GSTOffsetId > 0)
                        {
                            var GSTId = model.GSTOffsetId;
                            var GSTPrev = context.tblGSTMonthlySplitup.Where(m => m.GSTOffsetid == model.GSTOffsetId).FirstOrDefault();
                            var query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == model.GSTOffsetId);
                            if (query != null)
                            {
                                query.FromDate = Convert.ToDateTime(model.FromDate);
                                query.Remarks = model.Remarks;
                                query.ToDate = Convert.ToDateTime(model.ToDate);
                                query.TotalInput = model.TotalInput;
                                query.TotalOutput = model.TotalOutput;
                                query.TotalReceivable = model.TotalReceivable;
                                context.SaveChanges();
                                //
                                var que = context.tblGSTBalanceSummary.FirstOrDefault();
                                var cgst = (que.CGST == null ? 0 : que.CGST) - (GSTPrev.CGSTBalanceForAdj == null ? 0 : GSTPrev.CGSTBalanceForAdj);
                                var sgst = (que.SGST == null ? 0 : que.SGST) - (GSTPrev.SGSTBalanceForAdj == null ? 0 : GSTPrev.SGSTBalanceForAdj);
                                var igst = (que.IGST == null ? 0 : que.IGST) - (GSTPrev.IGSTBalanceForAdj == null ? 0 : GSTPrev.IGSTBalanceForAdj);
                                que.CGST = (cgst == null ? 0 : cgst) + (model.CGSTBalance == null ? 0 : model.CGSTBalance);
                                que.SGST = (sgst == null ? 0 : sgst) + (model.SGSTBalance == null ? 0 : model.SGSTBalance);
                                que.IGST = (igst == null ? 0 : igst) + (model.IGSTBalance == null ? 0 : model.IGSTBalance);
                                context.SaveChanges();
                                //
                                var GSTquery = context.tblGSTMonthlySplitup.FirstOrDefault(m => m.GSTOffsetid == GSTId);
                                GSTquery.AdjInCGST = model.IGSTadjInCGST;
                                GSTquery.AdjInSGST = model.IGSTadjInSGST;
                                GSTquery.AdjPayableCGST = model.AdjPayableCGST;
                                GSTquery.AdjPayableIGST = model.AdjPayableIGST;
                                GSTquery.AdjPayableSGST = model.AdjPayableSGST;
                                GSTquery.BalanceTDSinCGST = model.BalanceTDSinCGST;
                                GSTquery.BalanceTDSinIGST = model.BalanceTDSinIGST;
                                GSTquery.BalanceTDSinSGST = model.BalanceTDSinSGST;
                                GSTquery.CGSTAdjInIGST = model.CGSTadjInIGST;
                                GSTquery.CGSTBalanceForAdj = model.CGSTBalance;
                                GSTquery.CGSTInput = model.TotalCGSTInput;
                                GSTquery.CGSTOutput = model.TotalCGSTOutput;
                                GSTquery.CreditAdjInCGST = model.CreditAdjCGST;
                                GSTquery.CreditAdjInIGST = model.CreditAdjIGST;
                                GSTquery.CreditAdjInSGST = model.CreditAdjSGST;
                                GSTquery.UPDT_By = LoggedInUser;
                                GSTquery.UPDT_TS = DateTime.Now;
                                GSTquery.IGSTBalanceForAdj = model.IGSTBalance;
                                GSTquery.IGSTInput = model.TotalIGSTInput;
                                GSTquery.IGSTOutput = model.TotalIGSTOutput;
                                GSTquery.NetPayableInCGST = model.NetPayableCGST;
                                GSTquery.NetPayableInIGST = model.NetPayableIGST;
                                GSTquery.NetPayableInSGST = model.NetPayableSGST;
                                GSTquery.PayableCGST = model.PayableCGST;
                                GSTquery.PayableIGST = model.PayableIGST;
                                GSTquery.PayableSGST = model.PayableSGST;
                                GSTquery.SGSTAdjInIGST = model.SGSTadjInIGST;
                                GSTquery.SGSTBalanceForAdj = model.SGSTBalance;
                                GSTquery.SGSTInput = model.TotalSGSTInput;
                                GSTquery.SGSTOutput = model.TotalSGSTOutput;
                                GSTquery.Status = "Active";
                                GSTquery.TDSCGST = model.TDSCGST;
                                GSTquery.TDSIGST = model.TDSIGST;
                                GSTquery.TDSSGST = model.TDSSGST;
                                GSTquery.TotalGSTPayable = model.TotalGSTPayable;
                                GSTquery.TotalTDS = model.TotalTDS;
                                context.SaveChanges();
                                context.tblGSTOffsetExpenseDetail.RemoveRange(context.tblGSTOffsetExpenseDetail.Where(m => m.GSTOffsetId == GSTId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblGSTOffsetExpenseDetail GSTExp = new tblGSTOffsetExpenseDetail();
                                    GSTExp.GSTOffsetId = GSTId;
                                    GSTExp.AccountGroupId = item.AccountGroupId;
                                    GSTExp.AccountHeadId = item.AccountHeadId;
                                    GSTExp.Amount = item.Amount;
                                    GSTExp.TransactionType = item.TransactionType;
                                    GSTExp.UPDT_By = LoggedInUser;
                                    GSTExp.IsJV_f = item.IsJV;
                                    GSTExp.UPDT_TS = DateTime.Now;
                                    GSTExp.Status = "Active";
                                    context.tblGSTOffsetExpenseDetail.Add(GSTExp);
                                    context.SaveChanges();
                                }
                                context.tblGSTOffsetdetails.RemoveRange(context.tblGSTOffsetdetails.Where(m => m.GSTOffsetid == GSTId));
                                context.SaveChanges();
                                foreach (var item in model.GSTOffsetOutput)
                                {
                                    if (item.GSTCheckbox == true)
                                    {
                                        tblGSTOffsetdetails GSTd = new tblGSTOffsetdetails();
                                        GSTd.GSTOffsetid = GSTId;
                                        GSTd.AccountHeadId = item.OutputHeadId;
                                        GSTd.Amount = Common.getBoaTransactionAmount(item.OutputId);
                                        GSTd.TransactionType = item.OutputTransactionCode;
                                        GSTd.BOATransactionId = item.OutputId;
                                        context.tblGSTOffsetdetails.Add(GSTd);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.GSTOffsetInput)
                                {
                                    if (item.GSTCheckbox == true)
                                    {
                                        tblGSTOffsetdetails GSTde = new tblGSTOffsetdetails();
                                        //var GSTde = context.tblGSTOffsetdetails.FirstOrDefault(m => m.GSTOffsetid == GSTId);
                                        GSTde.GSTOffsetid = GSTId;
                                        GSTde.AccountHeadId = item.InputHeadId;
                                        GSTde.Amount = Common.getBoaTransactionAmount(item.InputId);
                                        GSTde.TransactionType = item.InputTransactionCode;
                                        GSTde.BOATransactionId = item.InputId;
                                        context.tblGSTOffsetdetails.Add(GSTde);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.GSTOffsetTDS)
                                {
                                    if (item.GSTCheckbox == true)
                                    {
                                        tblGSTOffsetdetails GSTdet = new tblGSTOffsetdetails();
                                        //var GSTdet = context.tblGSTOffsetdetails.FirstOrDefault(m => m.GSTOffsetid == GSTId);
                                        GSTdet.GSTOffsetid = GSTId;
                                        GSTdet.AccountHeadId = item.TDSHeadId;
                                        GSTdet.Amount = Common.getBoaTransactionAmount(item.TDSId);
                                        GSTdet.TransactionType = item.TDSTransactionCode;
                                        GSTdet.BOATransactionId = item.TDSId;
                                        context.tblGSTOffsetdetails.Add(GSTdet);
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.GSTOffsetId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblGSTOffset GST = new tblGSTOffset();
                            GST.CRTD_TS = DateTime.Now;
                            GST.CRTD_By = LoggedInUser;
                            GST.FromDate = Convert.ToDateTime(model.FromDate);
                            GST.Remarks = model.Remarks;
                            GST.Status = "Open";
                            GST.ToDate = Convert.ToDateTime(model.ToDate);
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getGSTOffsetid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.GSTOffsetNumber = "GOF" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.GSTOffsetNumber = "GOF" + "/" + FinYear + "/" + "000001";
                            }
                            GST.GSTOffsetNumber = model.GSTOffsetNumber;
                            GST.TotalInput = model.TotalInput;
                            GST.TotalOutput = model.TotalOutput;
                            GST.TotalReceivable = model.TotalReceivable;
                            context.tblGSTOffset.Add(GST);
                            context.SaveChanges();
                            //
                            var que = context.tblGSTBalanceSummary.FirstOrDefault();
                            if (que != null)
                            {
                                que.CGST = ((model.CGSTBalance) + (que.CGST));
                                que.SGST = ((model.SGSTBalance) + (que.SGST));
                                que.IGST = ((model.IGSTBalance) + (que.IGST));
                                context.SaveChanges();
                            }
                            else
                            {
                                tblGSTBalanceSummary sum = new tblGSTBalanceSummary();
                                sum.CGST = model.CGSTBalance;
                                sum.SGST = model.SGSTBalance;
                                sum.IGST = model.IGSTBalance;
                                context.tblGSTBalanceSummary.Add(sum);
                                context.SaveChanges();

                            }

                            //
                            int GSTid = GST.GSTOffsetid;
                            tblGSTMonthlySplitup GSTSplit = new tblGSTMonthlySplitup();
                            if (GSTid > 0)
                            {
                                GSTSplit.AdjInCGST = model.IGSTadjInCGST;
                                GSTSplit.AdjInSGST = model.IGSTadjInSGST;
                                GSTSplit.AdjPayableCGST = model.AdjPayableCGST;
                                GSTSplit.AdjPayableIGST = model.AdjPayableIGST;
                                GSTSplit.AdjPayableSGST = model.AdjPayableSGST;
                                GSTSplit.BalanceTDSinCGST = model.BalanceTDSinCGST;
                                GSTSplit.BalanceTDSinIGST = model.BalanceTDSinIGST;
                                GSTSplit.BalanceTDSinSGST = model.BalanceTDSinSGST;
                                GSTSplit.CGSTAdjInIGST = model.CGSTadjInIGST;
                                GSTSplit.CGSTBalanceForAdj = model.CGSTBalance;
                                GSTSplit.CGSTInput = model.TotalCGSTInput;
                                GSTSplit.CGSTOutput = model.TotalCGSTOutput;
                                GSTSplit.CreditAdjInCGST = model.CreditAdjCGST;
                                GSTSplit.CreditAdjInIGST = model.CreditAdjIGST;
                                GSTSplit.CreditAdjInSGST = model.CreditAdjSGST;
                                GSTSplit.CRTD_By = LoggedInUser;
                                GSTSplit.CRTD_TS = DateTime.Now;
                                GSTSplit.GSTOffsetid = GSTid;
                                GSTSplit.IGSTBalanceForAdj = model.IGSTBalance;
                                GSTSplit.IGSTInput = model.TotalIGSTInput;
                                GSTSplit.IGSTOutput = model.TotalIGSTOutput;
                                GSTSplit.NetPayableInCGST = model.NetPayableCGST;
                                GSTSplit.NetPayableInIGST = model.NetPayableIGST;
                                GSTSplit.NetPayableInSGST = model.NetPayableSGST;
                                GSTSplit.PayableCGST = model.PayableCGST;
                                GSTSplit.PayableIGST = model.PayableIGST;
                                GSTSplit.PayableSGST = model.PayableSGST;
                                GSTSplit.SGSTAdjInIGST = model.SGSTadjInIGST;
                                GSTSplit.SGSTBalanceForAdj = model.SGSTBalance;
                                GSTSplit.SGSTInput = model.TotalSGSTInput;
                                GSTSplit.SGSTOutput = model.TotalSGSTOutput;
                                GSTSplit.Status = "Active";
                                GSTSplit.TDSCGST = model.TDSCGST;
                                GSTSplit.TDSIGST = model.TDSIGST;
                                GSTSplit.TDSSGST = model.TDSSGST;
                                GSTSplit.TotalGSTPayable = model.TotalGSTPayable;
                                GSTSplit.TotalTDS = model.TotalTDS;
                                context.tblGSTMonthlySplitup.Add(GSTSplit);
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblGSTOffsetExpenseDetail GSTExp = new tblGSTOffsetExpenseDetail();
                                    GSTExp.GSTOffsetId = GSTid;
                                    GSTExp.AccountGroupId = item.AccountGroupId;
                                    GSTExp.AccountHeadId = item.AccountHeadId;
                                    GSTExp.Amount = item.Amount;
                                    GSTExp.TransactionType = item.TransactionType;
                                    GSTExp.CRTD_By = LoggedInUser;
                                    GSTExp.IsJV_f = item.IsJV;
                                    GSTExp.CRTD_TS = DateTime.Now;
                                    GSTExp.Status = "Active";
                                    context.tblGSTOffsetExpenseDetail.Add(GSTExp);
                                    context.SaveChanges();
                                }
                                if (model.GSTOffsetOutput != null)
                                {
                                    foreach (var item in model.GSTOffsetOutput)
                                    {
                                        tblGSTOffsetdetails GSTdet = new tblGSTOffsetdetails();
                                        if (item.GSTCheckbox == true)
                                        {
                                            GSTdet.GSTOffsetid = GSTid;
                                            GSTdet.AccountHeadId = item.OutputHeadId;
                                            GSTdet.Amount = Common.getBoaTransactionAmount(item.OutputId);
                                            GSTdet.TransactionType = item.OutputTransactionCode;
                                            GSTdet.BOATransactionId = item.OutputId;
                                            context.tblGSTOffsetdetails.Add(GSTdet);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.GSTOffsetInput != null)
                                {
                                    foreach (var item in model.GSTOffsetInput)
                                    {
                                        tblGSTOffsetdetails GSTdet = new tblGSTOffsetdetails();
                                        if (item.GSTCheckbox == true)
                                        {
                                            GSTdet.GSTOffsetid = GSTid;
                                            GSTdet.AccountHeadId = item.InputHeadId;
                                            GSTdet.Amount = Common.getBoaTransactionAmount(item.InputId);
                                            GSTdet.TransactionType = item.InputTransactionCode;
                                            GSTdet.BOATransactionId = item.InputId;
                                            context.tblGSTOffsetdetails.Add(GSTdet);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.GSTOffsetTDS != null)
                                {
                                    foreach (var item in model.GSTOffsetTDS)
                                    {
                                        tblGSTOffsetdetails GSTdet = new tblGSTOffsetdetails();
                                        if (item.GSTCheckbox == true)
                                        {
                                            GSTdet.GSTOffsetid = GSTid;
                                            GSTdet.AccountHeadId = item.TDSHeadId;
                                            GSTdet.Amount = Common.getBoaTransactionAmount(item.TDSId);
                                            GSTdet.TransactionType = item.TDSTransactionCode;
                                            GSTdet.BOATransactionId = item.TDSId;
                                            context.tblGSTOffsetdetails.Add(GSTdet);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                transaction.Commit();
                                return GSTid;
                            }
                            return GSTid;
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public GSTOffsetModel GetGSTOffsetDetails(int GSTOffsetId)
        {
            try
            {
                GSTOffsetModel GST = new GSTOffsetModel();
                List<GSTOffsetModel> GSTGrid = new List<GSTOffsetModel>();
                using (var context = new IOASDBEntities())
                {
                    var GSTSummary = context.tblGSTBalanceSummary.FirstOrDefault();
                    var query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == GSTOffsetId);
                    var GSTquery = context.tblGSTMonthlySplitup.FirstOrDefault(m => m.GSTOffsetid == GSTOffsetId);
                    if (query != null)
                    {
                        GST.FromDate = String.Format("{0:ddd dd-MMM-yyyy}", query.FromDate);
                        GST.Remarks = query.Remarks;
                        GST.ToDate = String.Format("{0:ddd dd-MMM-yyyy}", query.ToDate);
                        GST.GSTOffsetNumber = query.GSTOffsetNumber;
                        GST.TotalInput = query.TotalInput;
                        GST.TotalOutput = query.TotalOutput;
                        GST.TotalTDSReceivable = query.TotalReceivable;
                        GST.Remarks = query.Remarks;
                        GST.PreviousCGST = (GSTSummary.CGST == null ? 0 : GSTSummary.CGST) - (GSTquery.CGSTBalanceForAdj == null ? 0 : GSTquery.CGSTBalanceForAdj);
                        GST.PreviousSGST = (GSTSummary.SGST == null ? 0 : GSTSummary.SGST) - (GSTquery.SGSTBalanceForAdj == null ? 0 : GSTquery.SGSTBalanceForAdj);
                        GST.PreviousIGST = (GSTSummary.IGST == null ? 0 : GSTSummary.IGST) - (GSTquery.IGSTBalanceForAdj == null ? 0 : GSTquery.IGSTBalanceForAdj);
                        GST.TotalDebit = query.TotalInput;
                        GST.TotalCredit = query.TotalOutput;
                        GST.TotalReceivable = query.TotalReceivable;
                        GST.IGSTadjInCGST = GSTquery.AdjInCGST;
                        GST.IGSTadjInSGST = GSTquery.AdjInSGST;
                        GST.AdjPayableCGST = GSTquery.AdjPayableCGST;
                        GST.AdjPayableIGST = GSTquery.AdjPayableIGST;
                        GST.AdjPayableSGST = GSTquery.AdjPayableSGST;
                        GST.BalanceTDSinCGST = GSTquery.BalanceTDSinCGST;
                        GST.BalanceTDSinIGST = GSTquery.BalanceTDSinIGST;
                        GST.BalanceTDSinSGST = GSTquery.BalanceTDSinSGST;
                        GST.CGSTadjInIGST = GSTquery.CGSTAdjInIGST;
                        GST.CGSTBalance = GSTquery.CGSTBalanceForAdj;
                        GST.HiddenCGSTBalance = (GSTquery.CGSTBalanceForAdj == null ? 0 : GSTquery.CGSTBalanceForAdj) + (GSTquery.CGSTAdjInIGST == null ? 0 : GSTquery.CGSTAdjInIGST);
                        GST.TotalCGSTInput = GSTquery.CGSTInput;
                        GST.TotalCGSTOutput = GSTquery.CGSTOutput;
                        GST.CreditAdjCGST = GSTquery.CreditAdjInCGST;
                        GST.CreditAdjIGST = GSTquery.CreditAdjInIGST;
                        GST.CreditAdjSGST = GSTquery.CreditAdjInSGST;
                        GST.IGSTBalance = GSTquery.IGSTBalanceForAdj;
                        GST.HiddenIGSTBalance = (GSTquery.IGSTBalanceForAdj == null ? 0 : GSTquery.IGSTBalanceForAdj) + (GSTquery.AdjInCGST == null ? 0 : GSTquery.AdjInCGST) + (GSTquery.AdjInSGST == null ? 0 : GSTquery.AdjInSGST);
                        GST.TotalIGSTInput = GSTquery.IGSTInput;
                        GST.TotalIGSTOutput = GSTquery.IGSTOutput;
                        GST.NetPayableCGST = GSTquery.NetPayableInCGST;
                        GST.NetPayableIGST = GSTquery.NetPayableInIGST;
                        GST.NetPayableSGST = GSTquery.NetPayableInSGST;
                        GST.PayableCGST = GSTquery.PayableCGST;
                        GST.HiddenPayableCGST = (GSTquery.PayableCGST == null ? 0 : GSTquery.PayableCGST) + (GSTquery.AdjInCGST == null ? 0 : GSTquery.AdjInCGST);
                        GST.PayableIGST = GSTquery.PayableIGST;
                        GST.HiddenPayableIGST = (GSTquery.PayableIGST == null ? 0 : GSTquery.PayableIGST) + (GSTquery.SGSTAdjInIGST == null ? 0 : GSTquery.SGSTAdjInIGST) + (GSTquery.CGSTAdjInIGST == null ? 0 : GSTquery.CGSTAdjInIGST);
                        GST.PayableSGST = GSTquery.PayableSGST;
                        GST.HiddenPayableSGST = (GSTquery.PayableSGST == null ? 0 : GSTquery.PayableSGST) + (GSTquery.AdjInSGST == null ? 0 : GSTquery.AdjInSGST);
                        GST.SGSTadjInIGST = GSTquery.SGSTAdjInIGST;
                        GST.SGSTBalance = GSTquery.SGSTBalanceForAdj;
                        GST.HiddenSGSTBalance = (GSTquery.SGSTBalanceForAdj == null ? 0 : GSTquery.SGSTBalanceForAdj) + (GSTquery.SGSTAdjInIGST == null ? 0 : GSTquery.SGSTAdjInIGST);
                        GST.TotalSGSTInput = GSTquery.SGSTInput;
                        GST.TotalSGSTOutput = GSTquery.SGSTOutput;
                        GST.TDSCGST = GSTquery.TDSCGST;
                        GST.TDSIGST = GSTquery.TDSIGST;
                        GST.TDSSGST = GSTquery.TDSSGST;
                        GST.TotalGSTPayable = GSTquery.TotalGSTPayable;
                        GST.TotalTDS = GSTquery.TotalTDS;

                        GST.ExpenseDetail = (from e in context.tblGSTOffsetExpenseDetail
                                             where e.GSTOffsetId == GSTOffsetId && e.Status == "Active"
                                             select new
                                             {
                                                 e.AccountHeadId,
                                                 e.Amount,
                                                 e.AccountGroupId,
                                                 e.TransactionType,
                                                 e.IsJV_f,
                                                 e.GSTOffsetExpenseDetailId

                                             })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 IsJV = x.IsJV_f ?? false,
                                                 BillExpenseDetailId = x.GSTOffsetExpenseDetailId
                                             }).ToList();
                        var arrList = context.tblGSTOffsetdetails.Where(m => m.GSTOffsetid == GSTOffsetId).Select(m => m.BOATransactionId).ToArray();
                        var IDarrList = context.tblGSTOffsetdetails.Where(m => m.GSTOffsetid != GSTOffsetId).Select(m => m.BOATransactionId).ToArray();
                        var fromdate = context.tblGSTOffset.Where(m => m.GSTOffsetid == GSTOffsetId).Select(m => m.FromDate).FirstOrDefault();
                        var todate = context.tblGSTOffset.Where(m => m.GSTOffsetid == GSTOffsetId).Select(m => m.ToDate).FirstOrDefault();
                        // int[] ID = { GSTOffsetId };
                        GST.GSTOffsetInput = (from G in context.tblGSTOffsetdetails
                                              from T in context.tblBOATransaction
                                              where !IDarrList.Contains(T.BOATransactionId)
                                              join B in context.tblBOA on T.BOAId equals B.BOAId
                                              join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                              join C in context.tblTransactionTypeCode on B.TransactionTypeCode equals C.TransactionTypeCode
                                              where ((T.AccountHeadId <= 34 && T.AccountHeadId >= 32) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (T.Amount > 0) && (B.RefTransactionCode != "GOF"))
                                              group new { }
                                              by new { T.BOATransactionId, T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber, C.TransactionType, TransType = T.TransactionType, B.TransactionTypeCode } into g
                                              orderby g.Key.BOATransactionId descending
                                              select new
                                              {
                                                  g.Key.Amount,
                                                  g.Key.AccountHead,
                                                  g.Key.RefNumber,
                                                  g.Key.TransactionType,
                                                  g.Key.TransType,
                                                  g.Key.BOATransactionId,
                                                  g.Key.AccountHeadId,
                                                  g.Key.TransactionTypeCode

                                              })
                                     .AsEnumerable()
                                           .Select((x, index) => new GSTOffsetInputModel()
                                           {

                                               SlNo = index,
                                               InputTransaction = x.TransactionType,
                                               InputAmount = x.Amount,
                                               InputHead = x.AccountHead,
                                               InputNumber = x.RefNumber,
                                               InputCredit = Convert.ToString(x.TransType) == "Credit" ? x.Amount : 0,
                                               InputDebit = Convert.ToString(x.TransType) == "Debit" ? x.Amount : 0,
                                               GSTCheckbox = arrList.Contains(x.BOATransactionId) == true,
                                               InputId = x.BOATransactionId,
                                               InputHeadId = Convert.ToInt32(x.AccountHeadId),
                                               InputTransactionCode = x.TransactionTypeCode
                                           }).ToList();
                        GST.GSTOffsetOutput = (from G in context.tblGSTOffsetdetails
                                               from T in context.tblBOATransaction
                                               where !IDarrList.Contains(T.BOATransactionId)
                                               join B in context.tblBOA on T.BOAId equals B.BOAId
                                               join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                               join C in context.tblTransactionTypeCode on B.TransactionTypeCode equals C.TransactionTypeCode
                                               where ((T.AccountHeadId <= 38 && T.AccountHeadId >= 36) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (T.Amount > 0) && (B.RefTransactionCode != "GOF"))
                                               group new { }
                                               by new { T.BOATransactionId, T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber, C.TransactionType, TransType = T.TransactionType, B.TransactionTypeCode } into g
                                               orderby g.Key.BOATransactionId descending
                                               select new
                                               {

                                                   g.Key.Amount,
                                                   g.Key.AccountHead,
                                                   g.Key.RefNumber,
                                                   g.Key.TransactionType,
                                                   g.Key.TransType,
                                                   g.Key.BOATransactionId,
                                                   g.Key.AccountHeadId,
                                                   g.Key.TransactionTypeCode
                                               })
                                     .AsEnumerable()
                                           .Select((x, index) => new GSTOffsetOutputModel()
                                           {
                                               SlNo = index,
                                               OutputTransaction = x.TransactionType,
                                               OutputAmount = x.Amount,
                                               OutputHead = x.AccountHead,
                                               OutputNumber = x.RefNumber,
                                               OutputCredit = Convert.ToString(x.TransType) == "Credit" ? x.Amount : 0,
                                               OutputDebit = Convert.ToString(x.TransType) == "Debit" ? x.Amount : 0,
                                               GSTCheckbox = arrList.Contains(x.BOATransactionId) == true,
                                               OutputId = x.BOATransactionId,
                                               OutputHeadId = Convert.ToInt32(x.AccountHeadId),
                                               OutputTransactionCode = x.TransactionTypeCode
                                           }).ToList();
                        int[] headid = { 27, 296, 297 };
                        GST.GSTOffsetTDS = (from G in context.tblGSTOffsetdetails
                                            from T in context.tblBOATransaction
                                            where !IDarrList.Contains(T.BOATransactionId)
                                            join B in context.tblBOA on T.BOAId equals B.BOAId
                                            join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                            join C in context.tblTransactionTypeCode on B.TransactionTypeCode equals C.TransactionTypeCode
                                            where ((headid.Contains(T.AccountHeadId ?? 0)) && (B.PostedDate >= fromdate && B.PostedDate <= todate) && (T.Amount > 0) && (B.RefTransactionCode != "GOF"))
                                            group new { }
                                            by new { T.BOATransactionId, T.AccountHeadId, T.Amount, H.AccountHead, B.RefNumber, C.TransactionType, TransType = T.TransactionType, B.TransactionTypeCode } into g
                                            orderby g.Key.BOATransactionId descending
                                            select new
                                            {
                                                g.Key.Amount,
                                                g.Key.AccountHead,
                                                g.Key.RefNumber,
                                                g.Key.TransactionType,
                                                g.Key.TransType,
                                                g.Key.BOATransactionId,
                                                g.Key.AccountHeadId,
                                                g.Key.TransactionTypeCode
                                            })
                                      .AsEnumerable()
                                           .Select((x, index) => new GSTOffsetTDSModel()
                                           {

                                               SlNo = index,
                                               TDSTransaction = x.TransactionType,
                                               TDSAmount = x.Amount,
                                               TDSHead = x.AccountHead,
                                               TDSNumber = x.RefNumber,
                                               TDSCredit = Convert.ToString(x.TransType) == "Credit" ? x.Amount : 0,
                                               TDSDebit = Convert.ToString(x.TransType) == "Debit" ? x.Amount : 0,
                                               GSTCheckbox = arrList.Contains(x.BOATransactionId) == true,
                                               TDSHeadId = Convert.ToInt32(x.AccountHeadId),
                                               TDSId = x.BOATransactionId,
                                               TDSTransactionCode = x.TransactionTypeCode
                                           }).ToList();
                    }
                }
                return GST;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<GSTOffsetModel> GetGSTOffsetList()
        {
            try
            {
                List<GSTOffsetModel> list = new List<GSTOffsetModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblGSTOffset
                            orderby d.GSTOffsetid descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.GSTOffsetid,
                                d.GSTOffsetNumber,
                                d.CRTD_TS,
                                d.TotalInput,
                                d.TotalOutput,
                                d.TotalReceivable,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new GSTOffsetModel()
                                 {
                                     SlNo = index + 1,
                                     TotalInput = x.TotalInput,
                                     TotalOutput = x.TotalOutput,
                                     TotalTDSReceivable = x.TotalReceivable,
                                     GSTOffsetDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     GSTOffsetNumber = x.GSTOffsetNumber,
                                     Status = x.Status,
                                     GSTOffsetId = x.GSTOffsetid
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<GSTOffsetModel>();
            }
        }
        public static List<GSTOffsetModel> SearchGSTOffsetList(GSTOffsetSearchFieldModel model)
        {
            List<GSTOffsetModel> GST = new List<GSTOffsetModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblGSTOffset>();
                    if (!string.IsNullOrEmpty(model.GSTOffsetNumber))
                        predicate = predicate.And(d => d.GSTOffsetNumber == model.GSTOffsetNumber);
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status == model.Status);
                    if (model.FromDate != null && model.ToDate != null)
                    {
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                        predicate = predicate.And(d => d.CRTD_TS >= model.FromDate && d.CRTD_TS <= model.ToDate);
                    }
                    var query = context.tblGSTOffset.Where(predicate).OrderByDescending(m => m.GSTOffsetid).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            GST.Add(new GSTOffsetModel()
                            {
                                SlNo = i + 1,
                                GSTOffsetId = query[i].GSTOffsetid,
                                GSTOffsetNumber = query[i].GSTOffsetNumber,
                                TotalInput = query[i].TotalInput,
                                TotalOutput = query[i].TotalOutput,
                                TotalTDSReceivable = query[i].TotalReceivable,
                                GSTOffsetDate = String.Format("{0:dd-MMMM-yyyy}", query[i].CRTD_TS),
                                Status = query[i].Status
                            });
                        }
                    }
                    return GST;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool GSTOffsetBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblGSTOffsetdetails.FirstOrDefault(m => m.GSTOffsetid == id);
                    var Query = context.tblGSTOffset.FirstOrDefault(m => m.GSTOffsetid == id);
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.Amount ?? 0;
                        model.TempVoucherNumber = Query.GSTOffsetNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "GOF";
                        model.RefNumber = Query.GSTOffsetNumber;
                        model.RefTransactionCode = "GOF";
                        txList = (from exp in context.tblGSTOffsetExpenseDetail
                                  where exp.GSTOffsetId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  }).ToList();

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Negative Balance
        public NegativeBalanceModel GetNegativeBalanceDetails(int id)
        {
            try
            {
                NegativeBalanceModel bill = new NegativeBalanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblNegativeBalance.FirstOrDefault(m => m.NegativeBalanceId == id);
                    if (query != null)
                    {
                        bill.Source = query.Source;
                        if (query.Source == 1)
                        {
                            bill.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            bill.SourceReferenceNumber = refId;
                            bill.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            bill.SourceEmailDate = query.SourceEmailDate;
                        bill.ProjectId = query.ProjectId;
                        bill.Remarks = query.Remarks;
                        bill.PIId = query.PIId;
                        bill.NegativeBalanceId = query.NegativeBalanceId;
                        bill.NegativeBalanceNumber = query.NegativeBalanceNumber;
                        bill.RequestDate = String.Format("{0:dd-MMMM-yyyy}", query.RequestedDate);
                        bill.ClaimAmount = query.ClaimAmount;
                        bill.ReceiptAdjustmentAmount = query.ReceiptAdjustmentAmount;
                        bill.NegativeBalanceAmount = query.NegativeBalanceAmount;
                        bill.NegativeBalanceDocPath = query.NegativeBalanceDocPath;
                        bill.DocumentName = query.NegativeBalanceDocPath;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentPath = "~/Content/OtherDocuments";
                        bill.PostedDate = String.Format("{0:dd-MMMM-yyyy}", query.CRTD_TS);
                        // bill.ImprestBillRecoupId = BillRecoupid;
                        AccountService _AS = new AccountService();
                        var details = _AS.getProjectSummary(Convert.ToInt32(query.ProjectId));
                        bill.prjDetails = details;
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new NegativeBalanceModel();
            }
        }
        public int NegativeBalanceIU(NegativeBalanceModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.NegativeBalanceId == 0)
                        {
                            int NegativeBalanceId = 0;
                            tblNegativeBalance bill = new tblNegativeBalance();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.ProjectId = model.ProjectId;
                            bill.PIId = model.PIId;
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "NBL";
                            bill.NegativeBalanceNumber = Common.GetNegativeBalanceNo();
                            bill.ClaimAmount = model.ClaimAmount;
                            bill.RequestedDate = DateTime.Parse(model.RequestDate);
                            //bill.ReceiptAdjustmentAmount = model.ReceiptAdjustmentAmount;
                            //bill.NegativeBalanceAmount = model.NegativeBalanceAmount;
                            bill.NegativeBalanceAmount = model.ClaimAmount;
                            if (model.Document != null)
                            {
                                string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                var docName = Guid.NewGuid().ToString() + "_" + actName;
                                model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                bill.DocumentActualName = actName;
                                bill.NegativeBalanceDocPath = docName;
                            }
                            context.tblNegativeBalance.Add(bill);
                            context.SaveChanges();
                            NegativeBalanceId = bill.NegativeBalanceId;

                            transaction.Commit();
                            return NegativeBalanceId;
                        }
                        else
                        {
                            int NegativeBalanceId = model.NegativeBalanceId;
                            var bill = context.tblNegativeBalance.FirstOrDefault(m => m.NegativeBalanceId == NegativeBalanceId && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;
                                bill.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    bill.SourceEmailDate = model.SourceEmailDate;
                                }
                                bill.ClaimAmount = model.ClaimAmount;
                                bill.RequestedDate = DateTime.Parse(model.RequestDate);
                                bill.ProjectId = model.ProjectId;
                                bill.PIId = model.PIId;
                                //bill.ReceiptAdjustmentAmount = model.ReceiptAdjustmentAmount;
                                //bill.NegativeBalanceAmount = model.NegativeBalanceAmount;
                                bill.NegativeBalanceAmount = model.ClaimAmount;
                                bill.Remarks = model.Remarks;
                                if (model.Document != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.Document.FileName);
                                    var docName = Guid.NewGuid().ToString() + "_" + actName;
                                    model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    bill.DocumentActualName = actName;
                                    bill.NegativeBalanceDocPath = docName;
                                }

                                context.SaveChanges();
                                transaction.Commit();
                                return NegativeBalanceId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<NegativeBalanceModel> GetNegativeBalanceList()
        {
            try
            {

                List<NegativeBalanceModel> list = new List<NegativeBalanceModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblNegativeBalance
                            join p in context.tblProject on b.ProjectId equals p.ProjectId
                            join s in context.vwFacultyStaffDetails on b.PIId equals s.UserId
                            orderby b.NegativeBalanceId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.NegativeBalanceId,
                                b.NegativeBalanceNumber,
                                b.ClaimAmount,
                                p.ProjectNumber,
                                s.FirstName,
                                b.CRTD_TS,
                                b.RequestedDate,
                                b.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new NegativeBalanceModel()
                                 {
                                     SlNo = index + 1,
                                     NegativeBalanceId = x.NegativeBalanceId,
                                     NegativeBalanceNumber = x.NegativeBalanceNumber,
                                     ProjectNumber = x.ProjectNumber,
                                     PIName = x.FirstName,
                                     RequestDate = String.Format("{0:s}", x.RequestedDate),
                                     ClaimAmount = x.ClaimAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<NegativeBalanceModel>();
            }
        }
        public bool ApproveNegativeBalance(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblNegativeBalance.SingleOrDefault(m => m.NegativeBalanceId == id && m.Status == "Open");
                    if (billQuery != null)
                    {
                        billQuery.Status = "Approved";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public int SaveCloseNegativeBal(CloseNegativeBalanceModel model, int UserId, bool isActive = false)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    int nblId = model.NegativeBalanceId;
                    var Query = (from C in context.tblNegativeBalance where C.NegativeBalanceId == model.NegativeBalanceId select C).FirstOrDefault();
                    if (Query != null)
                    {
                        string docpath = "";
                        string docname = "";
                        if (model.Document != null)
                        {
                            docname = System.IO.Path.GetFileName(model.Document.FileName);
                            var docfileId = Guid.NewGuid().ToString();
                            docpath = docfileId + "_" + docname;
                            /*Saving the file in server folder*/
                            model.Document.SaveAs(HttpContext.Current.Server.MapPath("~/Content/CommitmentDocument/" + docpath));
                            Query.NegativeBalanceCloseDocPath = docpath;
                            Query.DocumentActualName = docname;
                        }
                        Query.UPTD_By = UserId;
                        Query.UPTD_TS = DateTime.Now;
                        Query.ReasonForClose = model.ReasonforClose;
                        Query.RemarksForClose = model.RemarksforClose;
                        Query.ClosedDate = DateTime.Now;
                        Query.BalanceWhenClosing = model.NegativeBalanceAmount;
                        Query.NegativeBalanceAmount = 0;
                        Query.Status = "Closed";
                        context.SaveChanges();

                        return nblId;
                    }
                    else
                        return -1;
                }

            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public CloseNegativeBalanceModel GetNegativeBalCloseDetails(int id)
        {
            try
            {
                CloseNegativeBalanceModel bill = new CloseNegativeBalanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblNegativeBalance.FirstOrDefault(m => m.NegativeBalanceId == id);
                    if (query != null)
                    {

                        bill.ProjectId = query.ProjectId;

                        bill.PIId = query.PIId;
                        bill.NegativeBalanceId = query.NegativeBalanceId;
                        bill.NegativeBalanceNumber = query.NegativeBalanceNumber;
                        bill.ClaimAmount = query.ClaimAmount;
                        bill.ReceiptAdjustmentAmount = query.ReceiptAdjustmentAmount;
                        bill.NegativeBalanceAmount = query.NegativeBalanceAmount;

                        //bill.DocumentActualName = query.DocumentActualName;
                        //bill.NegativeBalanceCloseDocPath = "~/Content/OtherDocuments";
                        //bill.PostedDate = String.Format("{0:dd-MMMM-yyyy}", query.CRTD_TS);
                        // bill.ImprestBillRecoupId = BillRecoupid;

                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new CloseNegativeBalanceModel();
            }
        }
        #endregion
        #region General Voucher
        public GeneralVoucherModel GetGeneralVoucherDetails(int id)
        {
            try
            {
                GeneralVoucherModel bill = new GeneralVoucherModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblGeneralVoucher.FirstOrDefault(m => m.GeneralVoucherId == id);
                    if (query != null)
                    {
                        bill.VoucherNumber = query.VoucherNumber;
                        bill.PaymentRemarks = query.Remarks;
                        bill.PaymentBank = query.BankHeadId;
                        bill.PaymentBankAmount = query.BankTxAmount;
                        bill.PaymentCategory = query.CategoryId;
                        bill.PaymentTDSAmount = query.PaymentTDSAmount;
                        bill.VoucherId = id;

                        if (query.Payee_f == true)
                        {
                            bill.PaymentBreakDetail = (from e in context.tblGeneralVoucherPaymentBreakUpDetail
                                                       where e.GeneralVoucherId == id && e.Status == "Active"
                                                       select new
                                                       {
                                                           e.GeneralVoucherPaymentBreakUpDetailId,
                                                           e.CategoryId,
                                                           e.UserId,
                                                           e.Name,
                                                           e.ModeOfPayment,
                                                           e.PaymentAmount
                                                       })
                                               .AsEnumerable()
                                               .Select((x) => new PaymentBreakUpDetailModel()
                                               {
                                                   PaymentBreakUpDetailId = x.GeneralVoucherPaymentBreakUpDetailId,
                                                   CategoryId = x.CategoryId,
                                                   UserId = x.UserId ?? 0,
                                                   Name = x.Name,
                                                   ModeOfPayment = x.ModeOfPayment,
                                                   PaymentAmount = x.PaymentAmount
                                               }).ToList();
                            bill.CommitmentDetail = (from c in context.tblGeneralVoucherCommitmentDetail
                                                     join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                     join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                     join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                     join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                     orderby det.ComitmentDetailId descending
                                                     where c.GeneralVoucherId == id && c.Status == "Active"
                                                     select new BillCommitmentDetailModel()
                                                     {
                                                         CommitmentDetailId = c.CommitmentDetailId,
                                                         CommitmentNumber = com.CommitmentNumber,
                                                         ProjectNumber = p.ProjectNumber,
                                                         ProjectId = com.ProjectId,
                                                         HeadName = head.HeadName,
                                                         AvailableAmount = det.BalanceAmount ?? 0,
                                                         PaymentAmount = c.PaymentAmount,
                                                         BillCommitmentDetailId = c.GeneralVoucherCommitmentDetailId
                                                     }).ToList();
                        }
                        bill.PaymentExpenseDetail = (from e in context.tblGeneralVoucherExpenseDetail
                                                     where e.GeneralVoucherId == id && e.Status == "Active"
                                                     select new
                                                     {
                                                         e.AccountHeadId,
                                                         e.Amount,
                                                         e.AccountGroupId,
                                                         e.GeneralVoucherExpenseDetailId,
                                                         e.TransactionType,
                                                         e.IsJV_f
                                                     })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.AccountHeadId,
                                                  Amount = x.Amount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.GeneralVoucherExpenseDetailId,
                                                  IsJV = x.IsJV_f ?? false
                                              }).ToList();

                        bill.PaymentDeductionDetail = (from d in context.tblGeneralVoucherDeductionDetail
                                                       join hd in context.tblAccountHead on d.AccountHeadId equals hd.AccountHeadId
                                                       join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                       where d.GeneralVoucherId == id && d.Status == "Active"
                                                       select new BillDeductionDetailModel()
                                                       {
                                                           AccountGroupId = d.AccountGroupId,
                                                           BillDeductionDetailId = d.GeneralVoucherDeductionDetailId,
                                                           Amount = d.Amount,
                                                           DeductionHeadId = d.AccountHeadId,
                                                           AccountGroup = g.AccountGroup,
                                                           DeductionHead = hd.AccountHead
                                                       }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new GeneralVoucherModel();
            }
        }
        public int GeneralVoucherIU(GeneralVoucherModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal ttlAmt = model.PaymentBankAmount ?? 0;// model.PaymentExpenseDetail.Where(m=>m.TransactionType == "Credit").Select(m => m.Amount).Sum() ?? 0;
                        //ttlAmt = ttlAmt + (model.PaymentBankAmount ?? 0);
                        if (model.VoucherId == null)
                        {
                            int VoucherId = 0;
                            tblGeneralVoucher bill = new tblGeneralVoucher();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "GVR";
                            bill.BankHeadId = model.PaymentBank;
                            bill.BankTxAmount = model.PaymentBankAmount;
                            bill.CategoryId = model.PaymentCategory;
                            bill.VoucherNumber = Common.GetNewGeneralVoucherNo();
                            bill.PaymentTDSAmount = model.PaymentTDSAmount;
                            bill.TotalAmount = ttlAmt;
                            bill.Remarks = model.PaymentRemarks;
                            if (model.PaymentCategory != 1)
                                bill.Payee_f = true;
                            context.tblGeneralVoucher.Add(bill);
                            context.SaveChanges();
                            VoucherId = bill.GeneralVoucherId;
                            if (model.PaymentCategory != 1)
                            {
                                foreach (var item in model.PaymentBreakDetail)
                                {
                                    tblGeneralVoucherPaymentBreakUpDetail payDet = new tblGeneralVoucherPaymentBreakUpDetail();
                                    payDet.CategoryId = item.CategoryId;
                                    payDet.UserId = item.UserId;
                                    payDet.GeneralVoucherId = VoucherId;
                                    payDet.Name = item.Name;
                                    payDet.ModeOfPayment = item.ModeOfPayment;
                                    payDet.PaymentAmount = item.PaymentAmount;
                                    payDet.CRTD_By = logged_in_user;
                                    payDet.CRTD_TS = DateTime.Now;
                                    payDet.Status = "Active";
                                    context.tblGeneralVoucherPaymentBreakUpDetail.Add(payDet);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblGeneralVoucherCommitmentDetail commitment = new tblGeneralVoucherCommitmentDetail();
                                    commitment.GeneralVoucherId = VoucherId;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = logged_in_user;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblGeneralVoucherCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.PaymentDeductionDetail)
                            {
                                if (item.Amount != null && item.Amount != 0)
                                {
                                    if (item.AccountGroupId == null)
                                        return -1;
                                    tblGeneralVoucherDeductionDetail deduction = new tblGeneralVoucherDeductionDetail();
                                    deduction.AccountGroupId = item.AccountGroupId;
                                    deduction.Amount = item.Amount ?? 0;
                                    deduction.GeneralVoucherId = VoucherId;
                                    deduction.CRTD_By = logged_in_user;
                                    deduction.CRTD_TS = DateTime.Now;
                                    deduction.AccountHeadId = item.DeductionHeadId;
                                    deduction.Status = "Active";
                                    context.tblGeneralVoucherDeductionDetail.Add(deduction);
                                    context.SaveChanges();
                                }
                            }
                            foreach (var item in model.PaymentExpenseDetail)
                            {
                                tblGeneralVoucherExpenseDetail exp = new tblGeneralVoucherExpenseDetail();
                                exp.AccountGroupId = item.AccountGroupId;
                                exp.AccountHeadId = item.AccountHeadId;
                                exp.IsJV_f = item.IsJV;
                                exp.TransactionType = item.TransactionType;
                                exp.Amount = item.Amount;
                                exp.GeneralVoucherId = VoucherId;
                                exp.CRTD_By = logged_in_user;
                                exp.CRTD_TS = DateTime.Now;
                                exp.Status = "Active";
                                context.tblGeneralVoucherExpenseDetail.Add(exp);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return VoucherId;
                        }
                        else
                        {
                            int VoucherId = model.VoucherId ?? 0;
                            var bill = context.tblGeneralVoucher.FirstOrDefault(m => m.GeneralVoucherId == VoucherId && m.Status == "Open");
                            if (bill != null)
                            {
                                bill.UPTD_By = logged_in_user;
                                bill.UPTD_TS = DateTime.Now;

                                bill.BankHeadId = model.PaymentBank;
                                bill.BankTxAmount = model.PaymentBankAmount;
                                bill.CategoryId = model.PaymentCategory;
                                bill.PaymentTDSAmount = model.PaymentTDSAmount;
                                bill.TotalAmount = ttlAmt;
                                bill.Remarks = model.PaymentRemarks;
                                if (model.PaymentCategory != 1)
                                    bill.Payee_f = true;
                                else
                                    bill.Payee_f = false;
                                context.SaveChanges();
                                VoucherId = bill.GeneralVoucherId;

                                context.tblGeneralVoucherPaymentBreakUpDetail.RemoveRange(context.tblGeneralVoucherPaymentBreakUpDetail.Where(m => m.GeneralVoucherId == VoucherId));
                                context.tblGeneralVoucherCommitmentDetail.RemoveRange(context.tblGeneralVoucherCommitmentDetail.Where(m => m.GeneralVoucherId == VoucherId));
                                context.tblGeneralVoucherDeductionDetail.RemoveRange(context.tblGeneralVoucherDeductionDetail.Where(m => m.GeneralVoucherId == VoucherId));
                                context.tblGeneralVoucherExpenseDetail.RemoveRange(context.tblGeneralVoucherExpenseDetail.Where(m => m.GeneralVoucherId == VoucherId));
                                context.SaveChanges();
                                if (model.PaymentCategory != 1)
                                {
                                    foreach (var item in model.PaymentBreakDetail)
                                    {
                                        tblGeneralVoucherPaymentBreakUpDetail payDet = new tblGeneralVoucherPaymentBreakUpDetail();
                                        payDet.CategoryId = item.CategoryId;
                                        payDet.UserId = item.UserId;
                                        payDet.GeneralVoucherId = VoucherId;
                                        payDet.Name = item.Name;
                                        payDet.ModeOfPayment = item.ModeOfPayment;
                                        payDet.PaymentAmount = item.PaymentAmount;
                                        payDet.CRTD_By = logged_in_user;
                                        payDet.CRTD_TS = DateTime.Now;
                                        payDet.Status = "Active";
                                        context.tblGeneralVoucherPaymentBreakUpDetail.Add(payDet);
                                        context.SaveChanges();
                                    }
                                    foreach (var item in model.CommitmentDetail)
                                    {
                                        if (item.CommitmentDetailId == null)
                                            return -3;
                                        tblGeneralVoucherCommitmentDetail commitment = new tblGeneralVoucherCommitmentDetail();
                                        commitment.GeneralVoucherId = VoucherId;
                                        commitment.CommitmentDetailId = item.CommitmentDetailId;
                                        commitment.CRTD_By = logged_in_user;
                                        commitment.CRTD_TS = DateTime.Now;
                                        commitment.PaymentAmount = item.PaymentAmount;
                                        commitment.Status = "Active";
                                        context.tblGeneralVoucherCommitmentDetail.Add(commitment);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.PaymentDeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblGeneralVoucherDeductionDetail deduction = new tblGeneralVoucherDeductionDetail();
                                        deduction.AccountGroupId = item.AccountGroupId;
                                        deduction.Amount = item.Amount ?? 0;
                                        deduction.GeneralVoucherId = VoucherId;
                                        deduction.CRTD_By = logged_in_user;
                                        deduction.CRTD_TS = DateTime.Now;
                                        deduction.AccountHeadId = item.DeductionHeadId;
                                        deduction.Status = "Active";
                                        context.tblGeneralVoucherDeductionDetail.Add(deduction);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.PaymentExpenseDetail)
                                {
                                    tblGeneralVoucherExpenseDetail exp = new tblGeneralVoucherExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.IsJV_f = item.IsJV;
                                    exp.TransactionType = item.TransactionType;
                                    exp.Amount = item.Amount;
                                    exp.GeneralVoucherId = VoucherId;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblGeneralVoucherExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return VoucherId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<GeneralVoucherModel> GetGeneralVoucherList()
        {
            try
            {

                List<GeneralVoucherModel> list = new List<GeneralVoucherModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblGeneralVoucher
                            join h in context.tblAccountHead on b.BankHeadId equals h.AccountHeadId
                            orderby b.GeneralVoucherId descending
                            where b.Status != "InActive"
                            select new
                            {
                                b.GeneralVoucherId,
                                b.VoucherNumber,
                                b.TotalAmount,
                                b.CRTD_TS,
                                b.Status,
                                h.AccountHead
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new GeneralVoucherModel()
                                 {
                                     SlNo = index + 1,
                                     VoucherId = x.GeneralVoucherId,
                                     VoucherNumber = x.VoucherNumber,
                                     PostedDate = String.Format("{0:s}", x.CRTD_TS),
                                     PaymentBankAmount = x.TotalAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<GeneralVoucherModel>();
            }
        }
        public bool ApproveGeneralVoucher(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblGeneralVoucher.SingleOrDefault(m => m.GeneralVoucherId == id && m.Status == "Open");
                    if (billQuery != null)
                    {
                        if (billQuery.Payee_f != true && !GeneralVoucherBOATransaction(id))
                            return false;
                        billQuery.Status = "Completed";
                        billQuery.UPTD_By = loggedInUser;
                        billQuery.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool GeneralVoucherBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblGeneralVoucher.SingleOrDefault(m => m.GeneralVoucherId == id);
                    if (billQuery != null)
                    {
                        model.TempVoucherNumber = billQuery.VoucherNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 6;
                        model.VoucherNumber = billQuery.VoucherNumber;
                        model.BOAValue = billQuery.TotalAmount;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.VoucherNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblGeneralVoucherExpenseDetail
                                  where exp.GeneralVoucherId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblGeneralVoucherDeductionDetail
                                     where d.GeneralVoucherId == id && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = d.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        if (billQuery.BankTxAmount > 0)
                        {
                            txList.Add(new BOATransactionModel()
                            {
                                Amount = billQuery.BankTxAmount,
                                TransactionType = "Credit",
                                AccountHeadId = billQuery.BankHeadId
                            });

                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                Amount = billQuery.BankTxAmount,
                                TransactionType = "Credit",
                                BankHeadID = billQuery.BankHeadId,
                                PayeeType = "General Voucher",
                                PayeeId = id
                            });
                        }

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool GVRCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int uId, string tCode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblGeneralVoucherCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.GeneralVoucherId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId,
                                  ReversedAmount = isReversed ? c.ReversedAmount : c.PaymentAmount
                              }).ToList();
                    if (txList.Count > 0)
                        return UpdateCommitmentBalance(txList, revoke, isReversed, uId, billId, tCode);
                    else
                        return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region FellowShip
        public int CreateFellowShip(FellowShipModel model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {

                        if (model.FellowShipId > 0)
                        {
                            int FellowId = Convert.ToInt32(model.FellowShipId);
                            var query = context.tblFellowShip.Where(m => m.FellowShipId == FellowId).FirstOrDefault();
                            var changelog = context.tblFellowShipChangeLog.Where(m => m.FellowShipId == FellowId).FirstOrDefault();
                            var chanlog = context.tblFellowShipChangeLog.Where(m => m.FellowShipId == FellowId).OrderByDescending(m => m.RevisionSeqNbr).FirstOrDefault();
                            var qry = (from H in context.tblFellowShipChangeLog
                                       where (H.FellowShipId == FellowId)
                                       orderby H.RevisionSeqNbr descending
                                       select new
                                       {
                                           H.CRTD_By,
                                           H.CRTD_TS,
                                           H.RevisedAvailableBalance,
                                           H.RevisedCommitmentNumber,
                                           H.RevisedDate,
                                           H.RevisedValue,
                                           H.RevisionSeqNbr,
                                           H.DurationFromdate,
                                           H.FellowShipNumber,
                                           H.PayeeId,
                                           H.ProjectNo,
                                       }).FirstOrDefault();
                            if (query != null)
                            {
                                if (model.ReviseEditId == 1)
                                {
                                    chanlog.UPTD_By = LoggedInUser;
                                    chanlog.UPTD_TS = DateTime.Now;
                                    chanlog.RevisedValue = model.NewValue == null ? qry.RevisedValue : model.NewValue;
                                    chanlog.RevisedDate = model.DueDate == null ? qry.RevisedDate : Convert.ToDateTime(model.DueDate);
                                    chanlog.RevisedCommitmentNumber = model.ReviseCommitmentNo == null ? qry.RevisedCommitmentNumber : model.ReviseCommitmentNo;
                                    chanlog.RevisedAvailableBalance = model.AvailableBalance == null ? qry.RevisedAvailableBalance : model.AvailableBalance;
                                    chanlog.Is_Daterevise = model.ReviseCheckBox1;
                                    chanlog.Is_Valuerevise = model.ReviseCheckBox2;
                                    context.SaveChanges();
                                }
                                else
                                {
                                    if (model.ReviseId == 1)
                                    {
                                        tblFellowShipChangeLog FelowCha = new tblFellowShipChangeLog();
                                        FelowCha.FellowShipId = FellowId;
                                        FelowCha.Balancevalue = qry.RevisedAvailableBalance;
                                        FelowCha.RevisedAvailableBalance = model.AvailableBalance == null ? qry.RevisedAvailableBalance : model.AvailableBalance;
                                        FelowCha.CommitmentNo = qry.RevisedCommitmentNumber;
                                        FelowCha.RevisedCommitmentNumber = model.ReviseCommitmentNo == null ? qry.RevisedCommitmentNumber : model.ReviseCommitmentNo;
                                        FelowCha.CRTD_By = qry.CRTD_By;
                                        FelowCha.CRTD_TS = qry.CRTD_TS;
                                        FelowCha.UPTD_By = LoggedInUser;
                                        FelowCha.UPTD_TS = DateTime.Now;
                                        FelowCha.DurationFromdate = qry.DurationFromdate;
                                        FelowCha.DurationTodate = qry.RevisedDate;
                                        FelowCha.RevisedDate = model.DueDate == null ? qry.RevisedDate : Convert.ToDateTime(model.DueDate);
                                        FelowCha.FellowShipNumber = qry.FellowShipNumber;
                                        FelowCha.FellowShipValue = qry.RevisedValue;
                                        FelowCha.RevisedValue = model.NewValue == null ? qry.RevisedValue : model.NewValue;
                                        FelowCha.PayeeId = qry.PayeeId;
                                        FelowCha.ProjectNo = qry.ProjectNo;
                                        FelowCha.RevisionSeqNbr = qry.RevisionSeqNbr + 1;
                                        FelowCha.Is_Valuerevise = model.ReviseCheckBox2;
                                        FelowCha.Is_Daterevise = model.ReviseCheckBox1;
                                        FelowCha.Status = "Active";
                                        context.tblFellowShipChangeLog.Add(FelowCha);
                                        context.SaveChanges();
                                        query.Status = "Revised";
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        query.Balancevalue = model.AvailableBalance;
                                        query.CommitmentNo = model.ReviseCommitmentNo;
                                        query.DurationFromdate = Convert.ToDateTime(model.FromDate);
                                        query.DurationTodate = Convert.ToDateTime(model.ToDate);
                                        query.FellowShipValue = model.FellowShipValue;
                                        query.PayeeId = Convert.ToInt32(model.PI);
                                        query.ProjectNo = model.ProjectNo;
                                        query.UPTD_By = LoggedInUser;
                                        query.UPTD_TS = DateTime.Now;
                                        context.SaveChanges();
                                        if (changelog != null)
                                        {
                                            changelog.Balancevalue = model.AvailableBalance;
                                            changelog.RevisedAvailableBalance = model.AvailableBalance;
                                            changelog.CommitmentNo = model.ReviseCommitmentNo;
                                            changelog.RevisedCommitmentNumber = model.ReviseCommitmentNo;
                                            changelog.DurationFromdate = Convert.ToDateTime(model.FromDate);
                                            changelog.DurationTodate = Convert.ToDateTime(model.ToDate);
                                            changelog.RevisedDate = Convert.ToDateTime(model.ToDate);
                                            changelog.FellowShipValue = model.FellowShipValue;
                                            changelog.RevisedValue = model.FellowShipValue;
                                            changelog.PayeeId = Convert.ToInt32(model.PI);
                                            changelog.ProjectNo = model.ProjectNo;
                                            changelog.UPTD_By = LoggedInUser;
                                            changelog.UPTD_TS = DateTime.Now;
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                transaction.Commit();
                                return Convert.ToInt32(model.FellowShipId);
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblFellowShip Fel = new tblFellowShip();
                            Fel.Balancevalue = model.AvailableBalance;
                            Fel.CommitmentNo = model.ReviseCommitmentNo;
                            Fel.CRTD_By = LoggedInUser;
                            Fel.CRTD_TS = DateTime.Now;
                            Fel.UPTD_By = LoggedInUser;
                            Fel.UPTD_TS = DateTime.Now;
                            Fel.DurationFromdate = Convert.ToDateTime(model.FromDate);
                            Fel.DurationTodate = Convert.ToDateTime(model.ToDate);
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getFellowShipid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.FellowShipNumber = "FSP" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.FellowShipNumber = "FSP" + "/" + FinYear + "/" + "000001";
                            }
                            Fel.FellowShipNumber = model.FellowShipNumber;
                            Fel.FellowShipValue = model.FellowShipValue;
                            Fel.PayeeId = Convert.ToInt32(model.PI);
                            Fel.ProjectNo = model.ProjectNo;
                            Fel.ProjectId = model.ProjectId;
                            Fel.Status = "Open";
                            context.tblFellowShip.Add(Fel);
                            context.SaveChanges();
                            int FellowId = Fel.FellowShipId;
                            if (FellowId > 0)
                            {
                                tblFellowShipChangeLog FelowCha = new tblFellowShipChangeLog();
                                FelowCha.FellowShipId = FellowId;
                                FelowCha.Balancevalue = model.AvailableBalance;
                                FelowCha.RevisedAvailableBalance = model.AvailableBalance;
                                FelowCha.CommitmentNo = model.ReviseCommitmentNo;
                                FelowCha.RevisedCommitmentNumber = model.ReviseCommitmentNo;
                                FelowCha.CRTD_By = LoggedInUser;
                                FelowCha.CRTD_TS = DateTime.Now;
                                FelowCha.UPTD_By = LoggedInUser;
                                FelowCha.UPTD_TS = DateTime.Now;
                                FelowCha.DurationFromdate = Convert.ToDateTime(model.FromDate);
                                FelowCha.DurationTodate = Convert.ToDateTime(model.ToDate);
                                FelowCha.RevisedDate = Convert.ToDateTime(model.ToDate);
                                FelowCha.FellowShipNumber = Fel.FellowShipNumber;
                                FelowCha.FellowShipValue = model.FellowShipValue;
                                FelowCha.RevisedValue = model.FellowShipValue;
                                FelowCha.PayeeId = Convert.ToInt32(model.PI);
                                FelowCha.ProjectNo = model.ProjectNo;
                                FelowCha.RevisionSeqNbr = 0;
                                FelowCha.ProjectId = model.ProjectId;
                                FelowCha.Status = "Active";
                                context.tblFellowShipChangeLog.Add(FelowCha);
                                context.SaveChanges();

                            }
                            transaction.Commit();
                            return FellowId;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }

        }
        public List<FellowShipModel> GetFellowShipList()
        {
            try
            {
                List<FellowShipModel> list = new List<FellowShipModel>();
                using (var context = new IOASDBEntities())
                {
                    var qry = (from d in context.tblFellowShip
                               from C in context.tblFellowShipChangeLog.Where(m => m.FellowShipId == d.FellowShipId).OrderByDescending(m => m.RevisionSeqNbr).Take(1)
                               orderby C.FellowShipId descending
                               select new
                               {
                                   d.FellowShipId,
                                   d.FellowShipNumber,
                                   d.PayeeId,
                                   d.ProjectNo,
                                   d.CRTD_TS,
                                   d.UPTD_TS,
                                   d.DurationFromdate,
                                   C.RevisedDate,
                                   C.RevisedValue,
                                   C.RevisionSeqNbr,
                                   d.Status
                               }).ToList();
                    if (qry.Count > 0)
                    {
                        for (int i = 0; i < qry.Count; i++)
                        {
                            list.Add(new FellowShipModel()
                            {
                                SlNo = i + 1,
                                PayeeName = Common.getpayeename(Convert.ToInt32(qry[i].PayeeId)),
                                ProjectNumber = qry[i].ProjectNo,
                                FellowShipId = qry[i].FellowShipId,
                                FellowShipNumber = qry[i].FellowShipNumber,
                                FellowShipDate = String.Format("{0:dd-MMMM-yyyy}", qry[i].UPTD_TS),
                                FromDate = String.Format("{0:dd-MMMM-yyyy}", qry[i].DurationFromdate),
                                ToDate = String.Format("{0:dd-MMMM-yyyy}", qry[i].RevisedDate),
                                Status = qry[i].Status,
                                FellowShipValue = qry[i].RevisedValue,
                                RevisionNo = Convert.ToInt32(qry[i].RevisionSeqNbr)
                            });
                        }
                    }

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<FellowShipModel>();
            }
        }
        public FellowShipModel GetFellowShipDetails(int FellowId = 0, bool view = false, bool edit = false, bool revise = false, bool revisededit = false)
        {
            try
            {
                FellowShipModel Fel = new FellowShipModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblFellowShip.FirstOrDefault(m => m.FellowShipId == FellowId);
                    var qury = context.tblFellowShipChangeLog.FirstOrDefault(m => m.FellowShipId == FellowId);
                    var qry = (from H in context.tblFellowShipChangeLog
                               where (H.FellowShipId == FellowId)
                               orderby H.RevisionSeqNbr descending
                               select new
                               {
                                   H.CommitmentNo,
                                   H.Balancevalue,
                                   H.DurationFromdate,
                                   H.RevisedAvailableBalance,
                                   H.RevisedDate,
                                   H.RevisedValue,
                                   H.RevisedCommitmentNumber,
                                   H.Is_Daterevise,
                                   H.Is_Valuerevise
                               }).FirstOrDefault();
                    if (query != null && view == false && edit == false && revise == true && revisededit == false)
                    {
                        Fel.ProjectNumber = query.ProjectNo;
                        Fel.PayeeName = Common.getpayeename(Convert.ToInt32(query.PayeeId));
                        Fel.DueFromDate = String.Format("{0:ddd dd-MMM-yyyy}", query.DurationFromdate);
                        Fel.DueToDate = String.Format("{0:ddd dd-MMM-yyyy}", qry.RevisedDate);
                        Fel.FellowShipId = query.FellowShipId;
                        Fel.ProjectId = query.ProjectId;
                        Fel.AvailableBalance = qry.RevisedAvailableBalance;
                        Fel.ReviseCommitmentNo = qry.RevisedCommitmentNumber;
                        Fel.FellowShipId = query.FellowShipId;
                        Fel.FellowShipNumber = query.FellowShipNumber;
                        Fel.ReviseId = 1;
                        return Fel;
                    }
                    if (query != null && view == false && edit == false && revise == false && revisededit == true)
                    {
                        Fel.ProjectNumber = query.ProjectNo;
                        Fel.PayeeName = Common.getpayeename(Convert.ToInt32(query.PayeeId));
                        Fel.DueFromDate = String.Format("{0:ddd dd-MMM-yyyy}", query.DurationFromdate);
                        Fel.DueToDate = String.Format("{0:ddd dd-MMM-yyyy}", qry.RevisedDate);
                        Fel.FellowShipId = query.FellowShipId;
                        Fel.ProjectId = query.ProjectId;
                        Fel.AvailableBalance = qry.RevisedAvailableBalance;
                        Fel.ReviseCommitmentNo = qry.RevisedCommitmentNumber;
                        Fel.FellowShipId = query.FellowShipId;
                        Fel.DueDate = qry.Is_Daterevise == true ? String.Format("{0:ddd dd-MMM-yyyy}", qry.RevisedDate) : "";
                        Fel.NewValue = qry.Is_Valuerevise == true ? Convert.ToDecimal(qry.RevisedValue) : 0;
                        Fel.ReviseCheckBox1 = Convert.ToBoolean(qry.Is_Daterevise);
                        Fel.ReviseCheckBox2 = Convert.ToBoolean(qry.Is_Valuerevise);
                        Fel.FellowShipNumber = query.FellowShipNumber;
                        Fel.ReviseEditId = 1;
                        return Fel;
                    }
                    if (query != null && view == false && edit == true && revise == false && revisededit == false)
                    {
                        Fel.AvailableBalance = query.Balancevalue;
                        Fel.ReviseCommitmentNo = query.CommitmentNo;
                        Fel.FromDate = String.Format("{0:ddd dd-MMM-yyyy}", query.DurationFromdate);
                        Fel.ToDate = String.Format("{0:ddd dd-MMM-yyyy}", query.DurationTodate);
                        Fel.FellowShipNumber = query.FellowShipNumber;
                        Fel.FellowShipValue = query.FellowShipValue;
                        Fel.UserId = Common.getpayeename(Convert.ToInt32(query.PayeeId));
                        Fel.ProjectNo = query.ProjectNo;
                        Fel.FellowShipId = query.FellowShipId;
                        Fel.EditId = 1;
                        Fel.ProjectId = query.ProjectId;
                        return Fel;
                    }

                    if (view == true && qury != null && edit == false && revise == false && revisededit == false)
                    {
                        Fel.FellowShipId = FellowId;
                        Fel.ViewProjectNo = query.ProjectNo;
                        Fel.ViewPayeeName = Common.getpayeename(Convert.ToInt32(query.PayeeId));
                        Fel.ViewCommitmentNo = qry.RevisedCommitmentNumber;
                        Fel.ViewId = 1;
                        Fel.FellowShipNumber = query.FellowShipNumber;
                        Fel.viewAvailableBalance = qry.RevisedAvailableBalance;
                        Fel.ViewFromDate = String.Format("{0:ddd dd-MMM-yyyy}", qry.DurationFromdate);
                        Fel.ViewToDate = String.Format("{0:ddd dd-MMM-yyyy}", qry.RevisedDate);
                        Fel.ViewFellowShipValue = qry.RevisedValue;
                        Fel.ProjectId = query.ProjectId;
                        Fel.FellowRevision = (from C in context.tblFellowShipChangeLog
                                              where ((C.FellowShipId == FellowId) && (C.RevisionSeqNbr > 0))
                                              select new
                                              {
                                                  C.FellowShipId,
                                                  C.Balancevalue,
                                                  C.CommitmentNo,
                                                  C.CRTD_By,
                                                  C.CRTD_TS,
                                                  C.DurationFromdate,
                                                  C.DurationTodate,
                                                  C.FellowShipNumber,
                                                  C.FellowShipValue,
                                                  C.PayeeId,
                                                  C.ProjectNo,
                                                  C.RevisedAvailableBalance,
                                                  C.RevisedCommitmentNumber,
                                                  C.RevisedDate,
                                                  C.RevisionSeqNbr,
                                                  C.Status,
                                                  C.UPTD_By,
                                                  C.UPTD_TS,
                                                  C.RevisedValue
                                              })
                                             .AsEnumerable()
                                             .Select((x, Index) => new FellowShipRevisionModel()
                                             {
                                                 Slno = Index + 1,
                                                 Date = String.Format("{0:ddd dd-MMM-yyyy}", x.UPTD_TS),
                                                 CommitNo = x.RevisedCommitmentNumber,
                                                 OldDate = String.Format("{0:ddd dd-MMM-yyyy}", x.DurationTodate),
                                                 NewDate = String.Format("{0:ddd dd-MMM-yyyy}", x.RevisedDate),
                                                 OldValue = x.FellowShipValue,
                                                 NewValue = x.RevisedValue,

                                             }).ToList();
                    }
                    return Fel;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<FellowShipModel> SearchFellowShipList(FellowShipSearchFieldModel model)
        {
            List<FellowShipModel> honor = new List<FellowShipModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblFellowShipChangeLog>();
                    if (!string.IsNullOrEmpty(model.FellowShipNumber))
                        predicate = predicate.And(d => d.FellowShipNumber == (model.FellowShipNumber).Trim());
                    if (!string.IsNullOrEmpty(model.ProjectNumber))
                        predicate = predicate.And(d => d.ProjectNo == model.ProjectNumber);
                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status == model.Status);
                    if (model.FromDate != null && model.ToDate != null)
                    {
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                        predicate = predicate.And(d => d.CRTD_TS >= model.FromDate && d.CRTD_TS <= model.ToDate);
                    }
                    var query = context.tblFellowShipChangeLog.Where(predicate).OrderByDescending(m => m.RevisionSeqNbr).Take(1).ToList();
                    //var qry = (from d in context.tblFellowShip
                    //           from C in context.tblFellowShipChangeLog.Where((predicate)).OrderByDescending(m => m.RevisionSeqNbr).Take(1)
                    //           orderby C.FellowShipId descending

                    //           select new
                    //           {
                    //               d.FellowShipId,
                    //               d.FellowShipNumber,
                    //               d.PayeeId,
                    //               d.ProjectNo,
                    //               d.CRTD_TS,
                    //               d.UPTD_TS,
                    //               d.DurationFromdate,
                    //               C.RevisedDate,
                    //               C.RevisedValue,
                    //               C.RevisionSeqNbr,
                    //               d.Status
                    //           }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            honor.Add(new FellowShipModel()
                            {
                                SlNo = i + 1,
                                PayeeName = Common.getpayeename(Convert.ToInt32(query[i].PayeeId)),
                                ProjectNumber = query[i].ProjectNo,
                                FellowShipId = Convert.ToInt32(query[i].FellowShipId),
                                FellowShipNumber = query[i].FellowShipNumber,
                                FellowShipDate = String.Format("{0:dd-MMMM-yyyy}", query[i].UPTD_TS),
                                FromDate = String.Format("{0:dd-MMMM-yyyy}", query[i].DurationFromdate),
                                ToDate = String.Format("{0:dd-MMMM-yyyy}", query[i].RevisedDate),
                                Status = query[i].Status,
                                FellowShipValue = query[i].RevisedValue,
                                RevisionNo = Convert.ToInt32(query[i].RevisionSeqNbr)
                            });
                        }
                    }
                    return honor;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #region Import Payment

        #region Foreign Remittance
        public List<ForeignRemittanceModel> GetForeignRemittanceList()
        {
            try
            {

                List<ForeignRemittanceModel> list = new List<ForeignRemittanceModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblForeignRemittance
                            join c in context.tblCurrency on d.RemittanceCurrency equals c.CurrencyID
                            join v in context.tblVendorMaster on d.Beneficiary equals v.VendorId
                            orderby d.ForeignRemitId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.ForeignRemitId,
                                d.ForeignRemitNumber,
                                d.ForeignRemitanceDate,
                                v.Name,
                                d.PONumber,
                                d.RemittanceAmount,
                                c.ISOCode,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ForeignRemittanceModel()
                                 {
                                     SlNo = index + 1,
                                     ForeignRemittanceId = x.ForeignRemitId,
                                     ForeignRemitNumber = x.ForeignRemitNumber,
                                     PONumber = x.PONumber,
                                     BeneficiaryName = x.Name,
                                     RemitDate = String.Format("{0:dd-MMMM-yyyy}", x.ForeignRemitanceDate),
                                     ForeignRemittanceAmt = x.RemittanceAmount + " " + x.ISOCode,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ForeignRemittanceModel>();
            }
        }
        public ForeignRemittanceModel GetForeignRemitDetails(int foreignRemitId)
        {
            try
            {
                ForeignRemittanceModel remit = new ForeignRemittanceModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblForeignRemittance.FirstOrDefault(m => m.ForeignRemitId == foreignRemitId);

                    var detailsquery = (from s in context.tblForeignRemittance
                                        orderby s.ForeignRemitId
                                        where s.ForeignRemitId == foreignRemitId
                                        select s).ToList();

                    if (query != null)
                    {
                        remit.Source = query.Source;
                        if (query.Source == 1)
                        {
                            remit.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            remit.SourceReferenceNumber = refId;
                            remit.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            remit.SourceEmailDate = query.SourceEmailDate;
                        remit.ForeignRemittanceId = query.ForeignRemitId;
                        remit.ForeignRemitNumber = query.ForeignRemitNumber;
                        remit.RemitDate = String.Format("{0:dd-MMMM-yyyy}", query.ForeignRemitanceDate);
                        remit.Beneficiary = query.Beneficiary;
                        remit.PONumber = query.PONumber;

                        remit.Remark = query.Remarks;
                        remit.CreditorAmount = query.RemittanceAmount;
                        remit.TypeofPayment = query.TypeofPayment;
                        remit.PaymentBank = query.PaymentBank;
                        remit.PortfolioName = query.PortfolioName;
                        remit.AccountNumber = query.AccountNumber;
                        remit.AccountNumberDebitedforCharges = query.AccountNumberForDebitCharges;
                        remit.ForgnCurrncyEqualtoINR = query.ForgnCurrncyEqualtoINR;
                        remit.ForeignRemittanceAmount = query.RemittanceAmount;
                        remit.RemittanceAmountinWords = query.RemittanceAmountinWords;
                        remit.RemittanceCurrency = query.RemittanceCurrency;
                        remit.InvoiceNumber = query.InvoiceNumber;
                        remit.InvDate = String.Format("{0:dd-MMMM-yyyy}", query.InvoiceDate); ;
                        remit.IntermediaryBank = query.IntermediaryBank;
                        remit.IntermediaryBankAddress = query.IntermediaryBankAddress;
                        remit.IntermediaryBankCodeNumber = query.IntermediaryBankCodeNumber;
                        remit.ForeignBankChargesType = query.ForeignBankChargesType;
                        remit.ExpensesHead = query.ExpensesHead;
                        remit.ShipmentDetails = query.ShipmentDetails;
                        remit.PurposeofRemittance = query.PurposeofRemittance;
                        remit.HSClassificationCode = query.HSClassificationCode;
                        remit.GoodsDescription = query.GoodsDescription;
                        remit.ImportLicenseDetails = query.ImportLicenseDetails;
                        remit.SpecialReferenceNumber = query.SpecialReferenceNumber;
                        remit.RateorContractBookedDetails = query.RateorContractBookedDetails;
                        remit.PaymentMode = query.PaymentMode;
                        remit.CommentstoBank = query.CommentstoBank;

                        remit.CheckListVerified_By = query.CheckListVerifiedBy;
                        remit.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);


                        remit.CommitmentDetail = (from c in context.tblForeignRemitCommitmentDetail
                                                  join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                  join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                  join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                  join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                  orderby det.ComitmentDetailId descending
                                                  where c.ForeignRemitId == foreignRemitId && c.Status == "Active"
                                                  select new BillCommitmentDetailModel()
                                                  {
                                                      CommitmentDetailId = c.CommitmentDetailId,
                                                      CommitmentNumber = com.CommitmentNumber,
                                                      ProjectNumber = p.ProjectNumber,
                                                      ProjectId = com.ProjectId,
                                                      HeadName = head.HeadName,
                                                      AvailableAmount = det.BalanceAmount ?? 0,
                                                      PaymentAmount = c.PaymentAmount,
                                                      BillCommitmentDetailId = c.ForeignRemitCommitmentDetailId
                                                  }).ToList();
                        remit.ExpenseDetail = (from e in context.tblForeignRemitExpenseDetail
                                               where e.ForeignRemitId == foreignRemitId && e.Status == "Active"
                                               select new
                                               {
                                                   e.AccountHeadId,
                                                   e.Amount,
                                                   e.AccountGroupId,
                                                   e.ForeignRemitExpenseDetailId,
                                                   e.TransactionType,
                                                   e.IsJV_f
                                               })
                                                  .AsEnumerable()
                                                  .Select((x) => new BillExpenseDetailModel()
                                                  {
                                                      AccountHeadId = x.AccountHeadId,
                                                      TransactionType = x.TransactionType,
                                                      Amount = x.Amount,
                                                      AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                      AccountGroupId = x.AccountGroupId,
                                                      AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                      BillExpenseDetailId = x.ForeignRemitExpenseDetailId,
                                                      IsJV = x.IsJV_f ?? false
                                                  }).ToList();

                        remit.DeductionDetail = (from d in context.tblForeignRemitDeductionDetail
                                                 join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                 join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                 join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                 where d.ForeignRemitId == foreignRemitId && d.Status == "Active"
                                                 select new BillDeductionDetailModel()
                                                 {
                                                     AccountGroupId = d.AccountGroupId,
                                                     BillDeductionDetailId = d.ForeignRemitDeductionDetailId,
                                                     Amount = d.Amount,
                                                     DeductionHeadId = d.DeductionHeadId,
                                                     AccountGroup = g.AccountGroup,
                                                     DeductionHead = hd.AccountHead
                                                 }).ToList();

                        remit.CheckListDetail = (from ck in context.tblForeignRemitCheckDetail
                                                 join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                                 where ck.ForeignRemitId == foreignRemitId && ck.Status == "Active"
                                                 select new CheckListModel()
                                                 {
                                                     CheckList = chkf.CheckList,
                                                     FunctionCheckListId = ck.FunctionCheckListId,
                                                     IsChecked = true
                                                 }).ToList();

                        remit.DocumentDetail = (from d in context.tblForeignRemitDocumentDetail
                                                where d.ForeignRemitId == foreignRemitId && d.Status == "Active"
                                                select new AttachmentDetailModel()
                                                {
                                                    DocumentActualName = d.DocumentActualName,
                                                    DocumentDetailId = d.ForeignRemitDocumentDetailId,
                                                    DocumentName = d.DocumentName,
                                                    DocumentPath = "~/Content/OtherDocuments",
                                                    DocumentType = d.DocumentType,
                                                    Remarks = d.Remarks
                                                }).ToList();

                    }
                }
                return remit;
            }
            catch (Exception ex)
            {
                return new ForeignRemittanceModel();
            }
        }
        public int CreateForeignRemittance(ForeignRemittanceModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.ForeignRemittanceId > 0)
                        {
                            var foreignRemitid = model.ForeignRemittanceId;
                            var query = context.tblForeignRemittance.FirstOrDefault(m => m.ForeignRemitId == model.ForeignRemittanceId);

                            if (query != null)
                            {

                                query.UPTD_By = LoggedInUser;
                                query.UPTD_TS = DateTime.Now;
                                query.Beneficiary = model.Beneficiary;
                                query.ForeignRemitanceDate = DateTime.Parse(model.RemitDate);
                                query.PONumber = model.PONumber;
                                query.TypeofPayment = model.TypeofPayment;
                                query.PaymentBank = model.PaymentBank;
                                query.PortfolioName = model.PortfolioName;
                                query.AccountNumber = model.AccountNumber;
                                query.AccountNumberForDebitCharges = model.AccountNumberDebitedforCharges;
                                query.ForgnCurrncyEqualtoINR = model.ForgnCurrncyEqualtoINR;
                                query.RemittanceAmount = model.ForeignRemittanceAmount;
                                query.RemittanceAmountinWords = model.RemittanceAmountinWords;
                                query.RemittanceCurrency = model.RemittanceCurrency;
                                query.InvoiceNumber = model.InvoiceNumber;
                                query.InvoiceDate = DateTime.Parse(model.InvDate);
                                query.IntermediaryBank = model.IntermediaryBank;
                                query.IntermediaryBankAddress = model.IntermediaryBankAddress;
                                query.IntermediaryBankCodeNumber = model.IntermediaryBankCodeNumber;
                                query.ForeignBankChargesType = model.ForeignBankChargesType;
                                query.ShipmentDetails = model.ShipmentDetails;
                                query.PurposeofRemittance = model.PurposeofRemittance;
                                query.GoodsDescription = model.GoodsDescription;
                                query.ImportLicenseDetails = model.ImportLicenseDetails;
                                query.SpecialReferenceNumber = model.SpecialReferenceNumber;
                                query.RateorContractBookedDetails = model.RateorContractBookedDetails;
                                query.HSClassificationCode = model.HSClassificationCode;
                                query.ExpensesHead = model.ExpensesHead;

                                query.CommentstoBank = model.CommentstoBank;
                                query.PaymentMode = model.PaymentMode;
                                query.Remarks = model.Remark;
                                query.Source = model.Source;
                                query.SourceEmailDate = model.SourceEmailDate;
                                query.SourceReferenceNumber = model.SourceReferenceNumber;
                                query.CheckListVerifiedBy = model.CheckListVerified_By;
                                context.SaveChanges();

                                context.tblForeignRemitExpenseDetail.RemoveRange(context.tblForeignRemitExpenseDetail.Where(m => m.ForeignRemitId == foreignRemitid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblForeignRemitExpenseDetail exp = new tblForeignRemitExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.ForeignRemitId = foreignRemitid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblForeignRemitExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                context.tblForeignRemitCommitmentDetail.RemoveRange(context.tblForeignRemitCommitmentDetail.Where(m => m.ForeignRemitId == foreignRemitid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblForeignRemitCommitmentDetail commitment = new tblForeignRemitCommitmentDetail();
                                    commitment.ForeignRemitId = foreignRemitid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblForeignRemitCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                context.tblForeignRemitDeductionDetail.RemoveRange(context.tblForeignRemitDeductionDetail.Where(m => m.ForeignRemitId == foreignRemitid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null)
                                        {
                                            tblForeignRemitDeductionDetail deduction = new tblForeignRemitDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ForeignRemitId = foreignRemitid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblForeignRemitDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                context.tblForeignRemitCheckDetail.RemoveRange(context.tblForeignRemitCheckDetail.Where(m => m.ForeignRemitId == foreignRemitid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblForeignRemitCheckDetail chk = new tblForeignRemitCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ForeignRemitId = foreignRemitid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblForeignRemitCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblForeignRemitDocumentDetail.Where(x => x.ForeignRemitId == model.ForeignRemittanceId && !arrList.Contains(x.ForeignRemitDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;
                                    m.Delete_By = LoggedInUser;
                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblForeignRemitDocumentDetail.FirstOrDefault(m => m.ForeignRemitDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblForeignRemitDocumentDetail doc = new tblForeignRemitDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                        doc.CRTD_By = LoggedInUser;
                                        doc.CRTD_TS = DateTime.Now;
                                        doc.DocumentActualName = actName;
                                        doc.DocumentName = docName;
                                        doc.DocumentType = item.DocumentType;
                                        doc.Remarks = item.Remarks;
                                        doc.ForeignRemitId = model.ForeignRemittanceId;
                                        //  doc.ProjectId = model.ProjectID;
                                        doc.Status = "Active";
                                        context.tblForeignRemitDocumentDetail.Add(doc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.ForeignRemittanceId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {

                            tblForeignRemittance remit = new tblForeignRemittance();
                            remit.CRTD_By = LoggedInUser;
                            remit.CRTD_TS = DateTime.Now;
                            //  tempadv.ReceiptDate = DateTime.Parse(model.ReceiptDateString);                            
                            remit.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                remit.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                remit.SourceEmailDate = model.SourceEmailDate;
                            }

                            remit.UPTD_By = LoggedInUser;
                            remit.UPTD_TS = DateTime.Now;
                            remit.Beneficiary = model.Beneficiary;
                            remit.ForeignRemitanceDate = DateTime.Parse(model.RemitDate);
                            remit.PONumber = model.PONumber;
                            remit.TypeofPayment = model.TypeofPayment;
                            remit.PaymentBank = model.PaymentBank;
                            remit.PortfolioName = model.PortfolioName;
                            remit.AccountNumber = model.AccountNumber;
                            remit.AccountNumberForDebitCharges = model.AccountNumberDebitedforCharges;
                            remit.ForgnCurrncyEqualtoINR = model.ForgnCurrncyEqualtoINR;
                            remit.RemittanceAmount = model.ForeignRemittanceAmount;
                            remit.RemittanceAmountinWords = model.RemittanceAmountinWords;
                            remit.RemittanceCurrency = model.RemittanceCurrency;
                            remit.InvoiceNumber = model.InvoiceNumber;
                            remit.InvoiceDate = DateTime.Parse(model.InvDate);
                            remit.IntermediaryBank = model.IntermediaryBank;
                            remit.IntermediaryBankAddress = model.IntermediaryBankAddress;
                            remit.IntermediaryBankCodeNumber = model.IntermediaryBankCodeNumber;
                            remit.ForeignBankChargesType = model.ForeignBankChargesType;
                            remit.ShipmentDetails = model.ShipmentDetails;
                            remit.PurposeofRemittance = model.PurposeofRemittance;
                            remit.GoodsDescription = model.GoodsDescription;
                            remit.ImportLicenseDetails = model.ImportLicenseDetails;
                            remit.SpecialReferenceNumber = model.SpecialReferenceNumber;
                            remit.RateorContractBookedDetails = model.RateorContractBookedDetails;
                            remit.HSClassificationCode = model.HSClassificationCode;
                            remit.ExpensesHead = model.ExpensesHead;
                            remit.TransactionTypeCode = "FRM";

                            remit.CommentstoBank = model.CommentstoBank;
                            remit.PaymentMode = model.PaymentMode;
                            remit.Remarks = model.Remark;
                            remit.Source = model.Source;
                            remit.SourceEmailDate = model.SourceEmailDate;
                            remit.SourceReferenceNumber = model.SourceReferenceNumber;
                            remit.CheckListVerifiedBy = model.CheckListVerified_By;
                            remit.Status = "Open";

                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            var Sequencenumber = Common.getForeignRemitId();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.ForeignRemitNumber = "FRM" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.ForeignRemitNumber = "FRM" + "/" + FinYear + "/" + "000001";
                            }
                            remit.ForeignRemitNumber = model.ForeignRemitNumber;
                            context.tblForeignRemittance.Add(remit);
                            context.SaveChanges();
                            int foreignremittanceid = remit.ForeignRemitId;
                            if (foreignremittanceid > 0)
                            {

                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblForeignRemitExpenseDetail exp = new tblForeignRemitExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.ForeignRemitId = foreignremittanceid;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = LoggedInUser;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblForeignRemitExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblForeignRemitCommitmentDetail commitment = new tblForeignRemitCommitmentDetail();
                                    commitment.ForeignRemitId = foreignremittanceid;
                                    commitment.CommitmentDetailId = item.CommitmentDetailId;
                                    commitment.CRTD_By = LoggedInUser;
                                    commitment.CRTD_TS = DateTime.Now;
                                    commitment.PaymentAmount = item.PaymentAmount;
                                    commitment.Status = "Active";
                                    context.tblForeignRemitCommitmentDetail.Add(commitment);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null)
                                        {
                                            tblForeignRemitDeductionDetail deduction = new tblForeignRemitDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.ForeignRemitId = foreignremittanceid;
                                            deduction.CRTD_By = LoggedInUser;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblForeignRemitDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblForeignRemitCheckDetail chk = new tblForeignRemitCheckDetail();
                                        chk.FunctionCheckListId = item.FunctionCheckListId;
                                        chk.Verified_By = model.CheckListVerified_By;
                                        chk.ForeignRemitId = foreignremittanceid;
                                        chk.CRTD_By = LoggedInUser;
                                        chk.CRTD_TS = DateTime.Now;
                                        chk.Status = "Active";
                                        context.tblForeignRemitCheckDetail.Add(chk);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblForeignRemitDocumentDetail doc = new tblForeignRemitDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));

                                    doc.CRTD_By = LoggedInUser;
                                    doc.CRTD_TS = DateTime.Now;
                                    doc.DocumentActualName = actName;
                                    doc.DocumentName = docName;
                                    doc.DocumentType = item.DocumentType;
                                    doc.Remarks = item.Remarks;
                                    doc.ForeignRemitId = foreignremittanceid;
                                    doc.Status = "Active";
                                    context.tblForeignRemitDocumentDetail.Add(doc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return foreignremittanceid;
                            }

                            return foreignremittanceid;
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        public List<ForeignRemitSearchResultModel> SearchForeignRemittanceList(ForeignRemitSearchFieldModel model)
        {
            List<ForeignRemitSearchResultModel> ForeignRemitance = new List<ForeignRemitSearchResultModel>();
            using (var context = new IOASDBEntities())
            {
                if (model.ToDate != null)
                {
                    model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                }
                if (model.ToFRDate != null)
                {
                    model.ToFRDate = model.ToFRDate.Value.Date.AddDays(1).AddTicks(-1);
                }

                var query = (from d in context.tblForeignRemittance
                             join c in context.tblCurrency on d.RemittanceCurrency equals c.CurrencyID
                             join v in context.tblVendorMaster on d.Beneficiary equals v.VendorId
                             // join D in context.tblAdhocPayInvoiceDetails on R.AdhocPaymentId equals D.AdhocPaymentId
                             where ((String.IsNullOrEmpty(model.ForeignRemitNumber) || d.ForeignRemitNumber.Contains(model.ForeignRemitNumber))
                             && (String.IsNullOrEmpty(model.InvoiceNumber) || d.InvoiceNumber.Contains(model.InvoiceNumber))
                             && (String.IsNullOrEmpty(model.PONumber) || d.PONumber.Contains(model.PONumber))
                             && (String.IsNullOrEmpty(model.BeneficiaryName) || v.Name.Contains(model.BeneficiaryName))
                             && (((d.CRTD_TS >= model.FromDate) && (d.CRTD_TS <= model.ToDate)) ||
                             (model.FromDate == null && model.ToDate == null))
                             && (((d.ForeignRemitanceDate >= model.FromFRDate) && (d.ForeignRemitanceDate <= model.ToFRDate)) ||
                             (model.FromFRDate == null && model.ToFRDate == null)))
                             orderby d.ForeignRemitId descending
                             select new { d, c, v }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        ForeignRemitance.Add(new ForeignRemitSearchResultModel()
                        {
                            //SlNo = i + 1,
                            //AdhocId = query[i].R.AdhocPaymentId,
                            //AdhocPaymentNumber = query[i].R.AdhocPaymentNumber,
                            //Name = query[i].R.PayeeName,
                            //AdhocPaymentDate = String.Format("{0:dd-MMMM-yyyy}", query[i].R.CRTD_TS),
                            //NetPayableValue = query[i].R.NetPayableAmount,
                            //Status = query[i].R.Status,
                            //   CardExpryDte = String.Format("{0:ddd dd-MMM-yyyy}", query[i].card.CardValidTill)
                            SlNo = i + 1,
                            ForeignRemitId = query[i].d.ForeignRemitId,
                            ForeignRemitNumber = query[i].d.ForeignRemitNumber,
                            PONumber = query[i].d.PONumber,
                            Beneficiary = query[i].d.Beneficiary,
                            BeneficiaryName = query[i].v.Name,
                            RemitDate = String.Format("{0:dd-MMMM-yyyy}", query[i].d.ForeignRemitanceDate),
                            ForeignRemittanceAmt = query[i].d.RemittanceAmount + " " + query[i].c.ISOCode,
                            Status = query[i].d.Status
                        });
                    }
                }
            }
            return ForeignRemitance;
        }

        public bool ForeignRemittanceCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblForeignRemitCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.ForeignRemitId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.PaymentAmount,
                                  CommitmentId = com.CommitmentId
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool ForeignRemittanceBillApproved(int paymentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblForeignRemittance.FirstOrDefault(m => m.ForeignRemitId == paymentId && m.Status == "Open" && m.TransactionTypeCode == "FRM");
                    if (query != null)
                    {
                        //if (!getForeignRemittanceBOAmodeldetails(paymentId))
                        //    return false;
                        query.Status = "Completed";
                        query.UPTD_By = logged_in_user;
                        query.UPTD_TS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }

                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getForeignRemittanceBOAmodeldetails(int paymentId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblForeignRemittance.SingleOrDefault(m => m.ForeignRemitId == paymentId);

                    var commitdetail = (from c in context.tblForeignRemitCommitmentDetail
                                        join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                        join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                        join p in context.tblProject on com.ProjectId equals p.ProjectId
                                        join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                        orderby det.ComitmentDetailId descending
                                        where c.ForeignRemitId == paymentId && c.Status == "Active"
                                        select new BOADetailModel()
                                        {
                                            CommitmentDetailId = c.CommitmentDetailId,
                                            ProjectId = com.ProjectId,
                                            BudgetHead = head.BudgetHeadId,
                                            Amount = c.PaymentAmount ?? 0,
                                        }).ToList();

                    if (billQuery != null)
                    {
                        var agencyquery = context.tblVendorMaster.SingleOrDefault(m => m.VendorId == billQuery.Beneficiary);
                        var name = agencyquery.Name;
                        decimal netAmt = (billQuery.RemittanceAmount ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 3;
                        model.VoucherNumber = Common.GetNewVoucherNo("FRM");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;

                        txList = (from exp in context.tblDistributionExpenseDetail
                                  where exp.DistributionId == paymentId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .Concat(from d in context.tblForeignRemitDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.ForeignRemitId == paymentId && d.Status == "Active" && d.Amount > 0
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 3,
                            SubLedgerId = billQuery.Beneficiary,
                        });

                        BOAPaymentDetail = (from exp in context.tblForeignRemitExpenseDetail
                                            join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                            join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                            where exp.ForeignRemitId == paymentId && exp.Status == "Active" && exp.AccountGroupId == 38
                                            select new BOAPaymentDetailModel()
                                            {
                                                TransactionType = exp.TransactionType,
                                                BankHeadID = exp.AccountHeadId,
                                                Amount = exp.Amount,
                                                ReferenceNumber = billQuery.ForeignRemitNumber,
                                                ReferenceDate = billQuery.CRTD_TS,
                                                PaymentMode = 2,
                                                PayeeBank = hd.AccountHead,
                                                Reconciliation_f = false,
                                                PayeeName = name,
                                                PayeeId = billQuery.Beneficiary,
                                                PayeeType = "Vendor",
                                                Remarks = model.Narration,

                                            }).ToList();


                    }
                    else
                        return false;
                    model.BOATransaction = txList;
                    model.BOADetail = commitdetail;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion

        #endregion
        #region ManDay
        public int CreateManDay(ManDayModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.ManDayId > 0)
                        {
                            var Mandayid = model.ManDayId;
                            var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == model.ManDayId);
                            if (query != null)
                            {
                                query.UPDT_By = LoggedInUser;
                                query.UPDT_TS = DateTime.Now;
                                query.Source = model.Source;
                                if (model.Source == 1 || model.Source == 3)
                                {
                                    query.SourceReferenceNumber = model.SourceReferenceNumber;
                                }
                                if (model.Source == 2)
                                {
                                    query.SourceEmailDate = model.SourceEmailDate;
                                }
                                query.Amount = model.TotalAmount;
                                query.ReqDate = Convert.ToDateTime(model.ReqDate);
                                query.Remark = model.Remark;
                                query.MonthYear = Convert.ToDateTime(model.MonthYear);
                                query.Status = "Open";
                                if (model.MDY != null)
                                {
                                    foreach (var item in model.MDY)
                                    {
                                        if (item.PaymentMode != 3)
                                        {
                                            query.PaymentProcess_f = true;
                                        }
                                    }
                                }
                                context.SaveChanges();

                                context.tblManDayDetails.RemoveRange(context.tblManDayDetails.Where(m => m.ManDayId == Mandayid));
                                context.SaveChanges();
                                foreach (var item in model.MDY)
                                {
                                    tblManDayDetails ManDet = new tblManDayDetails();
                                    ManDet.AccountNo = item.AccountNo;
                                    ManDet.AmountPerDay = item.AmountPerDay;
                                    ManDet.BankName = item.BankName;
                                    ManDet.Branch = item.Branch;
                                    ManDet.CRTD_By = LoggedInUser;
                                    ManDet.CRTD_TS = DateTime.Now;
                                    var code = item.DeptCode.Trim();
                                    ManDet.Department = code;
                                    // ManDet.Department = item.DeptCode;
                                    ManDet.IFSC = item.IFSC;
                                    ManDet.ManDayId = Mandayid;
                                    ManDet.ModeOfPayment = item.PaymentMode;
                                    ManDet.NoofDays = item.NoOfDays;
                                    //ManDet.ProjectId = item.ProjectId;
                                    //ManDet.ProjectNumber = item.ProjectNumber;
                                    ManDet.StaffId = Convert.ToInt32(item.StaffId);
                                    ManDet.StaffName = item.StaffName;
                                    ManDet.Status = "Active";
                                    ManDet.TotalAmount = item.Amount;
                                    context.tblManDayDetails.Add(ManDet);
                                    context.SaveChanges();

                                }
                                context.tblManDayExpenseDetail.RemoveRange(context.tblManDayExpenseDetail.Where(m => m.ManDayId == Mandayid));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblManDayExpenseDetail HonExp = new tblManDayExpenseDetail();
                                    HonExp.ManDayId = Mandayid;
                                    HonExp.AccountGroupId = item.AccountGroupId;
                                    HonExp.AccountHeadId = item.AccountHeadId;
                                    HonExp.Amount = item.Amount;
                                    HonExp.TransactionType = item.TransactionType;
                                    HonExp.CRTD_By = LoggedInUser;
                                    HonExp.IsJV_f = item.IsJV;
                                    HonExp.CRTD_TS = DateTime.Now;
                                    HonExp.Status = "Active";
                                    context.tblManDayExpenseDetail.Add(HonExp);
                                    context.SaveChanges();
                                }
                                context.tblManDayCommitmentDetail.RemoveRange(context.tblManDayCommitmentDetail.Where(m => m.ManDayId == Mandayid));
                                context.SaveChanges();
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblManDayCommitmentDetail HonComm = new tblManDayCommitmentDetail();
                                    HonComm.ManDayId = Mandayid;
                                    HonComm.CommitmentDetailId = item.CommitmentDetailId;
                                    HonComm.Amount = item.PaymentAmount;
                                    HonComm.CRTD_By = LoggedInUser;
                                    HonComm.CRTD_TS = DateTime.Now;
                                    HonComm.Status = "Active";
                                    context.tblManDayCommitmentDetail.Add(HonComm);
                                    context.SaveChanges();
                                }
                                context.tblManDayDeductionDetail.RemoveRange(context.tblManDayDeductionDetail.Where(m => m.ManDayId == Mandayid));
                                context.SaveChanges();
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        tblManDayDeductionDetail HonDed = new tblManDayDeductionDetail();
                                        HonDed.AccountGroupId = item.AccountGroupId;
                                        HonDed.Amount = item.Amount;
                                        HonDed.ManDayId = Mandayid;
                                        HonDed.CRTD_By = LoggedInUser;
                                        HonDed.CRTD_TS = DateTime.Now;
                                        HonDed.DeductionHeadId = item.DeductionHeadId;
                                        HonDed.Status = "Active";
                                        context.tblManDayDeductionDetail.Add(HonDed);
                                        context.SaveChanges();
                                    }
                                }
                                context.tblManDayCheckDetail.RemoveRange(context.tblManDayCheckDetail.Where(m => m.ManDayId == Mandayid));
                                context.SaveChanges();
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblManDayCheckDetail HonCheck = new tblManDayCheckDetail();
                                        HonCheck.Verified_By = model.CheckListVerified_By;
                                        HonCheck.FunctionCheckListId = item.FunctionCheckListId;
                                        HonCheck.ManDayId = Mandayid;
                                        HonCheck.CRTD_By = LoggedInUser;
                                        HonCheck.CRTD_TS = DateTime.Now;
                                        HonCheck.Status = "Active";
                                        context.tblManDayCheckDetail.Add(HonCheck);
                                        context.SaveChanges();
                                    }
                                }
                                var arrList = model.DocumentDetail.Select(m => m.DocumentDetailId ?? 0).ToArray();
                                context.tblManDayDocumentDetail.Where(x => x.ManDayId == model.ManDayId && !arrList.Contains(x.ManDayDocumentDetailId) && x.Status != "InActive")
                                .ToList()
                                .ForEach(m =>
                                {
                                    m.Status = "InActive";
                                    m.UPDT_By = LoggedInUser;
                                    m.UPDT_TS = DateTime.Now;

                                });
                                foreach (var item in model.DocumentDetail)
                                {
                                    var docQuery = context.tblManDayDocumentDetail.FirstOrDefault(m => m.ManDayDocumentDetailId == item.DocumentDetailId);
                                    if (docQuery == null)
                                    {
                                        tblManDayDocumentDetail HonDoc = new tblManDayDocumentDetail();
                                        string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                        var guid = Guid.NewGuid().ToString();
                                        var docName = guid + "_" + actName;
                                        item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                        HonDoc.CRTD_By = LoggedInUser;
                                        HonDoc.CRTD_TS = DateTime.Now;
                                        HonDoc.DocumentActualName = actName;
                                        HonDoc.DocumentName = docName;
                                        HonDoc.DocumentType = item.DocumentType;
                                        HonDoc.Remarks = item.Remarks;
                                        HonDoc.ManDayId = Mandayid;
                                        HonDoc.Status = "Active";
                                        context.tblManDayDocumentDetail.Add(HonDoc);
                                        context.SaveChanges();
                                    }
                                    else
                                    {
                                        if (item.DocumentFile != null)
                                        {
                                            string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                            var guid = Guid.NewGuid().ToString();
                                            var docName = guid + "_" + actName;
                                            item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                            docQuery.DocumentActualName = actName;
                                            docQuery.DocumentName = docName;
                                        }
                                        docQuery.UPDT_By = LoggedInUser;
                                        docQuery.UPDT_TS = DateTime.Now;
                                        docQuery.DocumentType = item.DocumentType;
                                        docQuery.Remarks = item.Remarks;
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return model.ManDayId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            tblManDay Man = new tblManDay();
                            Man.CRTD_By = LoggedInUser;
                            Man.CRTD_TS = DateTime.Now;
                            Man.Source = model.Source;
                            if (Man.Source == 1 || model.Source == 3)
                            {
                                Man.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                Man.SourceEmailDate = model.SourceEmailDate;
                            }
                            Man.Amount = model.TotalAmount;
                            Man.ReqDate = Convert.ToDateTime(model.ReqDate);
                            Man.Remark = model.Remark;
                            Man.MonthYear = Convert.ToDateTime(model.MonthYear);
                            Man.Status = "Open";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getmandayid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.ManDayNumber = "MDY" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.ManDayNumber = "MDY" + "/" + FinYear + "/" + "000001";
                            }
                            Man.ManDayNumber = model.ManDayNumber;
                            Man.CheckListVerifiedBy = model.CheckListVerified_By;
                            if (model.MDY != null)
                            {
                                foreach (var item in model.MDY)
                                {
                                    if (item.PaymentMode != 1)
                                    {
                                        Man.PaymentProcess_f = true;
                                    }
                                }
                            }
                            context.tblManDay.Add(Man);
                            context.SaveChanges();
                            int mandayid = Man.ManDayId;
                            if (mandayid > 0)
                            {
                                foreach (var item in model.MDY)
                                {
                                    tblManDayDetails ManDet = new tblManDayDetails();
                                    ManDet.AccountNo = item.AccountNo;
                                    ManDet.AmountPerDay = item.AmountPerDay;
                                    ManDet.BankName = item.BankName;
                                    ManDet.MonthYear = Convert.ToDateTime(model.MonthYear);
                                    ManDet.Branch = item.Branch;
                                    ManDet.CRTD_By = LoggedInUser;
                                    ManDet.CRTD_TS = DateTime.Now;
                                    var code = item.DeptCode.Trim();
                                    ManDet.Department = code;
                                    ManDet.IFSC = item.IFSC;
                                    ManDet.ManDayId = mandayid;
                                    ManDet.ModeOfPayment = item.PaymentMode;
                                    ManDet.NoofDays = item.NoOfDays;
                                    //ManDet.ProjectId = item.ProjectId;
                                    //ManDet.ProjectNumber = item.ProjectNumber;
                                    ManDet.StaffId = Convert.ToInt32(item.StaffId);
                                    ManDet.StaffName = item.StaffName;
                                    ManDet.Status = "Active";
                                    ManDet.TotalAmount = item.Amount;
                                    context.tblManDayDetails.Add(ManDet);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblManDayExpenseDetail HonExp = new tblManDayExpenseDetail();
                                    HonExp.ManDayId = mandayid;
                                    HonExp.AccountGroupId = item.AccountGroupId;
                                    HonExp.AccountHeadId = item.AccountHeadId;
                                    HonExp.Amount = item.Amount;
                                    HonExp.TransactionType = item.TransactionType;
                                    HonExp.CRTD_By = LoggedInUser;
                                    HonExp.IsJV_f = item.IsJV;
                                    HonExp.CRTD_TS = DateTime.Now;
                                    HonExp.Status = "Active";
                                    context.tblManDayExpenseDetail.Add(HonExp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CommitmentDetail)
                                {
                                    if (item.CommitmentDetailId == null)
                                        return -3;
                                    tblManDayCommitmentDetail HonComm = new tblManDayCommitmentDetail();
                                    HonComm.ManDayId = mandayid;
                                    HonComm.CommitmentDetailId = item.CommitmentDetailId;
                                    HonComm.Amount = item.PaymentAmount;
                                    HonComm.CRTD_By = LoggedInUser;
                                    HonComm.CRTD_TS = DateTime.Now;
                                    HonComm.Status = "Active";
                                    context.tblManDayCommitmentDetail.Add(HonComm);
                                    context.SaveChanges();
                                }
                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        tblManDayDeductionDetail HonDed = new tblManDayDeductionDetail();
                                        HonDed.AccountGroupId = item.AccountGroupId;
                                        HonDed.Amount = item.Amount;
                                        HonDed.ManDayId = mandayid;
                                        HonDed.CRTD_By = LoggedInUser;
                                        HonDed.CRTD_TS = DateTime.Now;
                                        HonDed.DeductionHeadId = item.DeductionHeadId;
                                        HonDed.Status = "Active";
                                        context.tblManDayDeductionDetail.Add(HonDed);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.CheckListDetail)
                                {
                                    if (item.IsChecked)
                                    {
                                        tblManDayCheckDetail HonCheck = new tblManDayCheckDetail();
                                        HonCheck.Verified_By = model.CheckListVerified_By;
                                        HonCheck.FunctionCheckListId = item.FunctionCheckListId;
                                        HonCheck.ManDayId = mandayid;
                                        HonCheck.CRTD_By = LoggedInUser;
                                        HonCheck.CRTD_TS = DateTime.Now;
                                        HonCheck.Status = "Active";
                                        context.tblManDayCheckDetail.Add(HonCheck);
                                        context.SaveChanges();
                                    }
                                }
                                foreach (var item in model.DocumentDetail)
                                {
                                    tblManDayDocumentDetail HonDoc = new tblManDayDocumentDetail();
                                    string actName = System.IO.Path.GetFileName(item.DocumentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    item.DocumentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    HonDoc.CRTD_By = LoggedInUser;
                                    HonDoc.CRTD_TS = DateTime.Now;
                                    HonDoc.DocumentActualName = actName;
                                    HonDoc.DocumentName = docName;
                                    HonDoc.DocumentType = item.DocumentType;
                                    HonDoc.Remarks = item.Remarks;
                                    HonDoc.ManDayId = mandayid;
                                    HonDoc.Status = "Active";
                                    context.tblManDayDocumentDetail.Add(HonDoc);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return mandayid;
                            }
                            return mandayid;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<ManDayModel> GetManDayList()
        {
            try
            {
                List<ManDayModel> list = new List<ManDayModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblManDay
                            orderby d.ManDayId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.ManDayId,
                                d.ManDayNumber,
                                d.CRTD_TS,
                                d.ReqDate,
                                d.Status,
                                d.Amount,
                                d.MonthYear
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new ManDayModel()
                                 {
                                     SlNo = index + 1,
                                     ManDayId = x.ManDayId,
                                     ManDayNumber = x.ManDayNumber,
                                     ReDate = String.Format("{0:dd-MMMM-yyyy}", x.ReqDate),
                                     Date = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     Amount = x.Amount,
                                     Status = x.Status,
                                     MonYear = String.Format("{0:MMM yyyy}", x.MonthYear),

                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<ManDayModel>();
            }
        }
        public ManDayModel GetManDayDetails(int Mandayid)
        {
            try
            {
                ManDayModel Man = new ManDayModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == Mandayid);
                    if (query != null)
                    {
                        Man.Source = Convert.ToInt32(query.Source);
                        if (query.Source == 1)
                        {
                            Man.SourceReferenceNumber = query.SourceReferenceNumber;
                        }
                        else if (query.Source == 3)
                        {
                            int refId = query.SourceReferenceNumber ?? 0;
                            Man.SourceReferenceNumber = refId;
                            Man.ReferenceNumber = Common.GetTapalNo(refId);
                        }
                        if (query.Source == 2)
                            Man.SourceEmailDate = query.SourceEmailDate;
                        Man.ManDayId = query.ManDayId;
                        Man.ManDayNumber = query.ManDayNumber;
                        Man.ReqDate = query.ReqDate;
                        Man.MonthYear = Convert.ToDateTime(query.MonthYear);
                        Man.Remark = query.Remark;
                        Man.TotalAmount = query.Amount;
                        Man.CheckListVerified_By = query.CheckListVerifiedBy;
                        Man.CheckListVerifierName = Common.GetUserFirstName(query.CheckListVerifiedBy ?? 0);

                        Man.MDY = (from d in context.tblManDayDetails
                                   where d.ManDayId == Mandayid && d.Status == "Active"
                                   select new
                                   {
                                       d.AccountNo,
                                       d.AmountPerDay,
                                       d.BankName,
                                       d.Branch,
                                       d.IFSC,
                                       d.ModeOfPayment,
                                       d.Department,
                                       d.ManDayId,
                                       d.MonthYear,
                                       d.NoofDays,
                                       // d.ProjectId,
                                       // d.ProjectNumber,
                                       d.StaffId,
                                       d.StaffName,
                                       d.TotalAmount
                                   })
                                       .AsEnumerable()
                                 .Select((x) => new ManDayListmodel()
                                 {
                                     AccountNo = x.AccountNo,
                                     AmountPerDay = Convert.ToDecimal(x.AmountPerDay),
                                     BankName = x.BankName,
                                     Branch = x.Branch,
                                     DeptCode = x.Department,
                                     Department = Common.getdepname(x.Department),
                                     IFSC = x.IFSC,
                                     PaymentMode = Convert.ToInt32(x.ModeOfPayment),
                                     NoOfDays = x.NoofDays,
                                     // ProjectId = Convert.ToInt32(x.ProjectId),
                                     //ProjectNumber = x.ProjectNumber,
                                     StaffId = Convert.ToString(x.StaffId),
                                     StaffName = x.StaffName,
                                     Amount = Convert.ToDecimal(x.TotalAmount),

                                 }).ToList();

                        Man.CommitmentDetail = (from c in context.tblManDayCommitmentDetail
                                                join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                                                join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                                                join p in context.tblProject on com.ProjectId equals p.ProjectId
                                                join head in context.tblBudgetHead on det.AllocationHeadId equals head.BudgetHeadId
                                                orderby det.ComitmentDetailId descending
                                                where c.ManDayId == Mandayid && c.Status == "Active"
                                                select new BillCommitmentDetailModel()
                                                {
                                                    CommitmentDetailId = c.CommitmentDetailId,
                                                    CommitmentNumber = com.CommitmentNumber,
                                                    ProjectNumber = p.ProjectNumber,
                                                    ProjectId = com.ProjectId,
                                                    HeadName = head.HeadName,
                                                    AvailableAmount = det.BalanceAmount ?? 0,
                                                    PaymentAmount = c.Amount,
                                                    BillCommitmentDetailId = c.ManDayCommitmentDetailId,

                                                }).ToList();

                        Man.ExpenseDetail = (from e in context.tblManDayExpenseDetail
                                             where e.ManDayId == Mandayid && e.Status == "Active"
                                             select new
                                             {
                                                 e.AccountHeadId,
                                                 e.Amount,
                                                 e.AccountGroupId,
                                                 e.ManDayExpenseDetailId,
                                                 e.TransactionType,
                                                 e.IsJV_f

                                             })
                                             .AsEnumerable()
                                             .Select((x) => new BillExpenseDetailModel()
                                             {
                                                 AccountHeadId = x.AccountHeadId,
                                                 TransactionType = x.TransactionType,
                                                 Amount = x.Amount,
                                                 AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                 AccountGroupId = x.AccountGroupId,
                                                 AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                 BillExpenseDetailId = x.ManDayExpenseDetailId,
                                                 IsJV = x.IsJV_f ?? false

                                             }).ToList();
                        Man.DeductionDetail = (from d in context.tblManDayDeductionDetail
                                               join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                               join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                               join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                               where d.ManDayId == Mandayid && d.Status == "Active"
                                               select new BillDeductionDetailModel()
                                               {
                                                   AccountGroupId = d.AccountGroupId,
                                                   BillDeductionDetailId = d.ManDayDeductionDetailId,
                                                   Amount = d.Amount,
                                                   DeductionHeadId = d.DeductionHeadId,
                                                   AccountGroup = g.AccountGroup,
                                                   DeductionHead = hd.AccountHead
                                               }).ToList();
                        Man.CheckListDetail = (from ck in context.tblManDayCheckDetail
                                               join chkf in context.tblFunctionCheckList on ck.FunctionCheckListId equals chkf.FunctionCheckListId
                                               where ck.ManDayId == Mandayid && ck.Status == "Active"
                                               select new CheckListModel()
                                               {
                                                   CheckList = chkf.CheckList,
                                                   FunctionCheckListId = ck.FunctionCheckListId,
                                                   IsChecked = true
                                               }).ToList();
                        Man.DocumentDetail = (from d in context.tblManDayDocumentDetail
                                              where d.ManDayId == Mandayid && d.Status == "Active"
                                              select new AttachmentDetailModel()
                                              {
                                                  DocumentActualName = d.DocumentActualName,
                                                  DocumentDetailId = d.ManDayDocumentDetailId,
                                                  DocumentName = d.DocumentName,
                                                  DocumentPath = "~/Content/OtherDocuments",
                                                  DocumentType = d.DocumentType,
                                                  Remarks = d.Remarks
                                              }).ToList();


                    }

                }
                return Man;
            }
            catch (Exception ex)
            {
                return new ManDayModel();
            }
        }
        public bool ManDayCommitmentBalanceUpdate(Int32 billId, bool revoke, bool isReversed, int userId, string tcode)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    txList = (from c in context.tblManDayCommitmentDetail
                              join det in context.tblCommitmentDetails on c.CommitmentDetailId equals det.ComitmentDetailId
                              join com in context.tblCommitment on det.CommitmentId equals com.CommitmentId
                              where c.ManDayId == billId && c.Status == "Active"
                              select new BillCommitmentDetailModel()
                              {
                                  CommitmentDetailId = c.CommitmentDetailId,
                                  PaymentAmount = c.Amount,
                                  CommitmentId = com.CommitmentId
                              }).ToList();
                    return UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static List<ManDayModel> SearchManDayList(ManDaySearchFieldModel model)
        {
            List<ManDayModel> honor = new List<ManDayModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblManDay>();
                    if (!string.IsNullOrEmpty(model.ManDayNumber))
                        predicate = predicate.And(d => d.ManDayNumber == model.ManDayNumber);

                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status == model.Status);
                    if (model.FromDate != null && model.ToDate != null)
                    {
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                        predicate = predicate.And(d => d.CRTD_TS >= model.FromDate && d.CRTD_TS <= model.ToDate);
                    }
                    var query = context.tblManDay.Where(predicate).OrderByDescending(m => m.ManDayId).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            honor.Add(new ManDayModel()
                            {
                                SlNo = i + 1,
                                ManDayId = query[i].ManDayId,
                                ManDayNumber = query[i].ManDayNumber,
                                ReDate = String.Format("{0:dd-MMMM-yyyy}", query[i].ReqDate),
                                Date = String.Format("{0:dd-MMMM-yyyy}", query[i].CRTD_TS),
                                Amount = query[i].Amount,
                                Status = query[i].Status,
                                MonYear = String.Format("{0:MMM yyyy}", query[i].MonthYear),
                            });
                        }
                    }
                    return honor;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool ManDayBillApproved(int paymentId, int logged_in_user)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblManDay.FirstOrDefault(m => m.ManDayId == paymentId);
                    var querydetails = (from c in context.tblManDayDetails
                                        where c.ManDayId == paymentId && c.ModeOfPayment == 3
                                        select c).ToList();
                    if (query != null)
                    {
                        //if (!getDistributionBOAmodeldetails(paymentId))
                        //    return false;
                        query.Status = "Approved";
                        query.UPDT_By = logged_in_user;
                        query.UPDT_TS = DateTime.Now;
                        context.SaveChanges();
                        if (querydetails.Count() > 0)
                        {
                            for (int i = 0; i < querydetails.Count; i++)
                            {
                                tblEmpOtherAllowance emp = new tblEmpOtherAllowance();
                                emp.EmployeeId = querydetails[i].StaffId;
                                emp.EmployeeIdStr = Common.getEmployeeid(querydetails[i].StaffId ?? 0, "Staff");
                                emp.ComponentName = "Mandays";
                                emp.Amount = querydetails[i].TotalAmount;
                                emp.AddedDate = query.CRTD_TS;
                                emp.Description = query.Remark;
                                emp.deduction = false;
                                emp.IsPaid = false;
                                emp.CreatedAt = DateTime.Now;
                                emp.CreatedBy = logged_in_user;
                                emp.Status = "Open";
                                context.tblEmpOtherAllowance.Add(emp);
                                context.SaveChanges();
                            }
                        }
                        return true;
                    }


                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #endregion
        #region TDS Payment
        public static List<TDSPaymentListModel> GetTDSIncomeTaxList(DateTime fromdate, DateTime todate, int headid)
        {
            List<TDSPaymentListModel> model = new List<TDSPaymentListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var query = (//from T in context.tblBOATransaction
                                 //join B in context.tblBOA on T.BOAId equals B.BOAId
                                from vw in context.vw_TDSDetails
                                    // join H in context.tblAccountHead on vw.AccountHeadId equals H.AccountHeadId
                                    //  join vw in context.vw_SubLedger on T.BOATransactionId equals vw.BOATransactionId
                                where ((!context.tblTDSIncomeTaxDetails.Any(m => m.BOATransationId == vw.BOATransactionId)) && (vw.PostedDate >= fromdate && vw.PostedDate <= todate) && (vw.AccountHeadId == headid) && vw.TransactionType == "Credit")
                                orderby vw.BOATransactionId descending
                                select new
                                {
                                    vw.BOATransactionId,
                                    vw.Name,
                                    vw.PAN,
                                    //vw.Type,
                                    //vw.TypeName,
                                    vw.PostedDate,
                                    vw.Amount,
                                    vw.TransactionType,
                                    //B.TransactionTypeCode,
                                    vw.RefNumber
                                }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {

                            model.Add(new TDSPaymentListModel()
                            {
                                SlNo = i,
                                Party = query[i].Name == null ? "" : query[i].Name,
                                PAN = query[i].PAN == null ? "" : query[i].PAN,
                                //TypeName = Common.gettransactioncode(query[i].TransactionTypeCode),
                                //Type = query[i].Type,
                                TDSAmount = query[i].Amount,
                                DateOfTransaction = String.Format("{0:dd-MMMM-yyyy}", query[i].PostedDate),
                                BoaTransId = query[i].BOATransactionId,
                                ReferenceNo = query[i].RefNumber == null ? "" : query[i].RefNumber,
                            });

                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<TDSGSTListModel> GetTDSGSTList(DateTime fromdate, DateTime todate)
        {
            List<TDSGSTListModel> model = new List<TDSGSTListModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int[] id = { 44, 45, 46 };
                    var query = (//from T in context.tblBOATransaction
                                 // join B in context.tblBOA on T.BOAId equals B.BOAId
                                from vw in context.vw_TDSDetails
                                join H in context.tblAccountHead on vw.AccountHeadId equals H.AccountHeadId
                                // join vw in context.vw_SubLedger on T.BOATransactionId equals vw.BOATransactionId
                                where ((!context.tblTDSGSTDetails.Any(m => m.BOATransationId == vw.BOATransactionId)) && (vw.PostedDate >= fromdate && vw.PostedDate <= todate) && (id.Contains(vw.AccountHeadId ?? 0)) && (vw.Amount > 0) && (vw.TransactionType == "Credit"))
                                orderby vw.BOATransactionId descending
                                select new
                                {
                                    vw.BOATransactionId,
                                    vw.Name,
                                    //vw.Type,
                                    vw.PostedDate,
                                    vw.Amount,
                                    vw.TransactionType,
                                    vw.RefNumber,
                                    //  vw.TransactionTypeCode,
                                    H.AccountHead,
                                    H.AccountHeadId
                                }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {

                            model.Add(new TDSGSTListModel()
                            {
                                SlNo = i,
                                Party = query[i].Name == null ? "" : query[i].Name,
                                //TypeName = Common.gettransactioncode(query[i].TransactionTypeCode),
                                GSTHead = query[i].AccountHead,
                                GSTAmount = query[i].Amount,
                                DateOfTransaction = String.Format("{0:dd-MMMM-yyyy}", query[i].PostedDate),
                                BoaTransId = query[i].BOATransactionId,
                                ReferenceNo = query[i].RefNumber == null ? "" : query[i].RefNumber,
                                GSTHeadId = query[i].AccountHeadId
                            });

                        }
                    }
                }
                return model;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int CreateTDSPayment(TDSPaymentModel model, int LoggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.TDSPaymentId > 0)
                        {
                            if (model.TotalGST != null)
                            {
                                if (!(model.TotalGST == (model.TotalCGST + model.TotalIGST + model.TotalSGST)))
                                {

                                    return -2;
                                }
                            }
                            int TDSid = model.TDSPaymentId;
                            var query = context.tblTDSPayment.Where(m => m.tblTDSPaymentId == TDSid).FirstOrDefault();
                            if (query != null)
                            {
                                if (model.FinalPayment != 1)
                                {
                                    query.Category = Convert.ToInt32(model.Category);
                                    query.BankId = model.BankId;
                                    query.UPDT_By = LoggedInUser;
                                    query.UPDT_TS = DateTime.Now;
                                    query.Section = Convert.ToInt32(model.Section);
                                    query.IGST = model.IGSTTrans;
                                    query.SGST = model.SGSTTrans;
                                    query.CGST = model.CGSTTrans;
                                    query.TotalTDSGST = model.TotalGST;
                                    query.TotalTDSIncomeTax = model.TotalTDS;
                                    query.BankTransForGST = model.BankGST;
                                    query.BankTransForIncometax = model.BankTransaction;
                                    query.TDStrans = model.TDSTransaction;
                                    query.TotalTDSGST = model.TotalGST;
                                    query.TotalTDSIncomeTax = model.TotalTDS;
                                    query.FromDate = Convert.ToDateTime(model.FromDate);
                                    query.ToDate = Convert.ToDateTime(model.ToDate);
                                }
                                if (model.FinalPayment == 1)
                                {
                                    query.Status = "Completed";
                                    query.BankReferenceNo = model.BankRefNo;
                                    query.DateOfPayment = Convert.ToDateTime(model.DateOfPayment);
                                    query.ChellanNo = model.ChallanNo;
                                }
                                if (model.FinalPayment == 1)
                                {
                                    string actName = System.IO.Path.GetFileName(model.AttachmentFile.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.AttachmentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    query.AttachmentActualName = actName;
                                    query.AttachmentName = docName;
                                }
                                context.SaveChanges();
                                if (model.FinalPayment == 1)
                                {
                                    var boapay = context.tblBOAPaymentDetail.Where(m => m.ReferenceNumber == model.TDSPaymentNumber).FirstOrDefault();
                                    boapay.ChallanNo = model.ChallanNo;
                                    boapay.BankTransactionDate = Convert.ToDateTime(model.DateOfPayment);
                                    boapay.BankTransactionnumber = model.BankRefNo;
                                    context.SaveChanges();
                                }

                                if (model.FinalPayment != 1)
                                {
                                    context.tblTDSIncomeTaxDetails.RemoveRange(context.tblTDSIncomeTaxDetails.Where(m => m.tblTDSPaymentId == TDSid));
                                    context.SaveChanges();
                                    if (model.TDSIncomeTax != null)
                                    {
                                        foreach (var item in model.TDSIncomeTax)
                                        {
                                            tblTDSIncomeTaxDetails Inc = new tblTDSIncomeTaxDetails();
                                            if (item.TDSCheckbox == true)
                                            {
                                                Inc.tblTDSPaymentId = TDSid;
                                                Inc.Amount = item.TDSAmount;
                                                Inc.BOATransationId = item.BoaTransId;
                                                Inc.UPDT_By = LoggedInUser;
                                                Inc.UPDT_TS = DateTime.Now;
                                                Inc.DateOfTransaction = Convert.ToDateTime(item.DateOfTransaction);
                                                Inc.PAN = item.PAN;
                                                Inc.Party = item.Party;
                                                Inc.ReferenceNo = item.ReferenceNo;
                                                Inc.Status = "Active";
                                                // Inc.SubLedgerId = item.Type;
                                                context.tblTDSIncomeTaxDetails.Add(Inc);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    context.tblTDSGSTDetails.RemoveRange(context.tblTDSGSTDetails.Where(m => m.tblTDSPaymentId == TDSid));
                                    context.SaveChanges();
                                    if (model.TDSGST != null)
                                    {
                                        foreach (var item in model.TDSGST)
                                        {
                                            tblTDSGSTDetails GST = new tblTDSGSTDetails();
                                            if (item.TDSCheckbox == true)
                                            {
                                                GST.tblTDSPaymentId = TDSid;
                                                GST.AccoundheadId = item.GSTHeadId;
                                                GST.Amount = item.GSTAmount;
                                                GST.BOATransationId = item.BoaTransId;
                                                GST.UPDT_By = LoggedInUser;
                                                GST.UPDT_TS = DateTime.Now;
                                                GST.DateOfTransaction = Convert.ToDateTime(item.DateOfTransaction);
                                                GST.Party = item.Party;
                                                GST.ReferenceNo = item.ReferenceNo;
                                                GST.Status = "Active";
                                                // GST.SubLedgerId = item.Type;
                                                context.tblTDSGSTDetails.Add(GST);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                transaction.Commit();
                                return model.TDSPaymentId;
                            }
                            else
                            {
                                return -2;
                            }
                        }
                        else
                        {
                            if (model.TotalGST != null)
                            {
                                if (!(model.TotalGST == (model.TotalCGST + model.TotalIGST + model.TotalSGST)))
                                {

                                    return -2;
                                }
                            }
                            tblTDSPayment TDS = new tblTDSPayment();
                            TDS.Category = Convert.ToInt32(model.Category);
                            TDS.CRTD_By = LoggedInUser;
                            TDS.CRTD_TS = DateTime.Now;
                            TDS.Section = Convert.ToInt32(model.Section);
                            TDS.BankId = model.BankId;
                            TDS.Status = "Open";
                            TDS.SubCode = Convert.ToInt32(model.Category) == 2 ? 2 : 1;
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getTDSPaymentid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.TDSPaymentNumber = "TXP" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.TDSPaymentNumber = "TXP" + "/" + FinYear + "/" + "000001";
                            }

                            TDS.TDSPaymentNumber = model.TDSPaymentNumber;
                            TDS.TotalTDSGST = model.TotalGST;
                            TDS.TotalTDSIncomeTax = model.TotalTDS;
                            TDS.FromDate = Convert.ToDateTime(model.FromDate);
                            TDS.ToDate = Convert.ToDateTime(model.ToDate);
                            TDS.BankReferenceNo = model.BankRefNo;
                            TDS.BankTransForGST = model.BankGST;
                            TDS.BankTransForIncometax = model.BankTransaction;
                            TDS.CGST = model.CGSTTrans;
                            TDS.ChellanNo = model.ChallanNo;
                            TDS.IGST = model.IGSTTrans;
                            TDS.Remark = model.Remark;
                            TDS.SGST = model.SGSTTrans;
                            TDS.TDStrans = model.TDSTransaction;
                            context.tblTDSPayment.Add(TDS);
                            context.SaveChanges();
                            int TDSid = TDS.tblTDSPaymentId;

                            if (TDSid > 0)
                            {
                                tblBOAPaymentDetail BOA = new tblBOAPaymentDetail();
                                if (model.Category == 1)
                                {
                                    BOA.Amount = model.BankTransaction;
                                }
                                else if (model.Category == 2)
                                {
                                    BOA.Amount = model.BankGST;
                                }
                                BOA.ReferenceNumber = model.TDSPaymentNumber;
                                context.tblBOAPaymentDetail.Add(BOA);
                                context.SaveChanges();

                                if (model.TDSIncomeTax != null)
                                {
                                    foreach (var item in model.TDSIncomeTax)
                                    {
                                        tblTDSIncomeTaxDetails Inc = new tblTDSIncomeTaxDetails();
                                        if (item.TDSCheckbox == true)
                                        {
                                            Inc.tblTDSPaymentId = TDSid;
                                            Inc.Amount = item.TDSAmount;
                                            Inc.BOATransationId = item.BoaTransId;
                                            Inc.CRTD_By = LoggedInUser;
                                            Inc.CRTD_TS = DateTime.Now;
                                            Inc.DateOfTransaction = Convert.ToDateTime(item.DateOfTransaction);
                                            Inc.PAN = item.PAN;
                                            Inc.Party = item.Party;
                                            Inc.ReferenceNo = item.ReferenceNo;
                                            Inc.Status = "Active";
                                            //Inc.SubLedgerId = item.Type;
                                            context.tblTDSIncomeTaxDetails.Add(Inc);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                if (model.TDSGST != null)
                                {
                                    foreach (var item in model.TDSGST)
                                    {
                                        tblTDSGSTDetails GST = new tblTDSGSTDetails();
                                        if (item.TDSCheckbox == true)
                                        {
                                            GST.tblTDSPaymentId = TDSid;
                                            GST.AccoundheadId = item.GSTHeadId;
                                            GST.Amount = item.GSTAmount;
                                            GST.BOATransationId = item.BoaTransId;
                                            GST.CRTD_By = LoggedInUser;
                                            GST.CRTD_TS = DateTime.Now;
                                            GST.DateOfTransaction = Convert.ToDateTime(item.DateOfTransaction);
                                            GST.Party = item.Party;
                                            GST.ReferenceNo = item.ReferenceNo;
                                            GST.Status = "Active";
                                            //GST.SubLedgerId = item.Type;
                                            context.tblTDSGSTDetails.Add(GST);
                                            context.SaveChanges();
                                        }
                                    }
                                }
                                transaction.Commit();
                                return TDSid;
                            }
                            return TDSid;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }

            }
        }
        public List<TDSPaymentModel> GetTDSPaymentList()
        {
            try
            {
                List<TDSPaymentModel> list = new List<TDSPaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblTDSPayment
                            orderby d.tblTDSPaymentId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.tblTDSPaymentId,
                                d.TDSPaymentNumber,
                                d.CRTD_TS,
                                d.Section,
                                d.Category,
                                d.TotalTDSGST,
                                d.TotalTDSIncomeTax,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new TDSPaymentModel()
                                 {
                                     SlNo = index + 1,
                                     TotalTDS = x.TotalTDSIncomeTax,
                                     TotalGST = x.TotalTDSGST,
                                     CategoryName = Common.getcategory(Convert.ToInt32(x.Category)),
                                     SectionName = Common.getsection(Convert.ToInt32(x.Section)),
                                     TDSPaymentDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     TDSPaymentNumber = x.TDSPaymentNumber,
                                     Status = x.Status,
                                     TDSPaymentId = x.tblTDSPaymentId
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<TDSPaymentModel>();
            }
        }
        public TDSPaymentModel GetTDSPaymentDetails(int TDSPaymentId, bool payment = false)
        {
            try
            {
                TDSPaymentModel TDS = new TDSPaymentModel();
                List<TDSPaymentModel> TDSid = new List<TDSPaymentModel>();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == TDSPaymentId);
                    if (query != null)
                    {
                        TDS.FromDate = query.FromDate;
                        TDS.FinalPayment = payment == true ? 1 : 0;
                        TDS.Remark = query.Remark;
                        TDS.ToDate = query.ToDate;
                        TDS.BankGST = query.BankTransForGST;
                        TDS.BankRefNo = query.BankReferenceNo;
                        TDS.DateOfPayment = query.DateOfPayment;
                        TDS.Remark = query.Remark;
                        TDS.Category = Convert.ToInt32(query.Category);
                        TDS.BankId = Convert.ToInt32(query.BankId);
                        TDS.CGSTTrans = query.CGST;
                        TDS.TotalCGST = query.CGST;
                        TDS.ChallanNo = query.ChellanNo;
                        TDS.IGSTTrans = query.IGST;
                        TDS.TotalIGST = query.IGST;
                        TDS.Section = Convert.ToInt32(query.Section);
                        TDS.SGSTTrans = query.SGST;
                        TDS.TotalSGST = query.SGST;
                        TDS.TDSPaymentId = query.tblTDSPaymentId;
                        TDS.TDSPaymentNumber = query.TDSPaymentNumber;
                        TDS.TotalGST = query.TotalTDSGST;
                        TDS.AttachmentActualName = query.AttachmentActualName;
                        TDS.AttachmentName = query.AttachmentName;
                        TDS.AttachmentPath = "~/Content/OtherDocuments";
                        if (query.Category == 1)
                        {
                            TDS.BankTransaction = query.BankTransForIncometax;
                            TDS.TotalTDS = query.TotalTDSIncomeTax;
                            TDS.TDSTransaction = query.TDStrans;
                        }
                        var IDarrList = context.tblTDSIncomeTaxDetails.Where(m => m.tblTDSPaymentId != TDSPaymentId).Select(m => m.BOATransationId).ToArray();
                        var IDarr = context.tblTDSGSTDetails.Where(m => m.tblTDSPaymentId != TDSPaymentId).Select(m => m.BOATransationId).ToArray();
                        var TDSarrList = context.tblTDSIncomeTaxDetails.Where(m => m.tblTDSPaymentId == TDSPaymentId).Select(m => m.BOATransationId).ToArray();
                        var GSTarrList = context.tblTDSGSTDetails.Where(m => m.tblTDSPaymentId == TDSPaymentId).Select(m => m.BOATransationId).ToArray();
                        int[] id = { 44, 45, 46 };
                        if (query.Category == 1)
                        {
                            TDS.TDSIncomeTax = (//from T in context.tblBOATransaction
                                                from vw in context.vw_TDSDetails
                                                where !IDarrList.Contains(vw.BOATransactionId)
                                                // join B in context.tblBOA on T.BOAId equals B.BOAId
                                                // join H in context.tblAccountHead on T.AccountHeadId equals H.AccountHeadId
                                                //join vw in context.vw_SubLedger on T.BOATransactionId equals vw.BOATransactionId
                                                where ((vw.PostedDate >= query.FromDate && vw.PostedDate <= query.ToDate) && (vw.AccountHeadId == query.Section) && (vw.Amount > 0) && (vw.TransactionType == "Credit"))
                                                orderby vw.BOATransactionId descending
                                                select new
                                                {
                                                    vw.BOATransactionId,
                                                    vw.Name,
                                                    vw.PAN,
                                                    //vw.Type,
                                                    //vw.TypeName,
                                                    vw.PostedDate,
                                                    vw.Amount,
                                                    //B.TransactionTypeCode,
                                                    vw.TransactionType,
                                                    vw.RefNumber
                                                })
                                         .AsEnumerable()
                                               .Select((x, index) => new TDSPaymentListModel()
                                               {

                                                   SlNo = index,
                                                   Party = x.Name,
                                                   PAN = x.PAN == null ? "" : x.PAN,
                                                   //TypeName = Common.gettransactioncode(x.TransactionTypeCode),
                                                   // Type = x.Type,
                                                   TDSAmount = x.Amount,
                                                   DateOfTransaction = String.Format("{0:dd-MMMM-yyyy}", x.PostedDate),
                                                   BoaTransId = x.BOATransactionId,
                                                   ReferenceNo = x.RefNumber == null ? "" : x.RefNumber,
                                                   TDSCheckbox = TDSarrList.Contains(x.BOATransactionId) == true,
                                               }).ToList();
                        }
                        if (query.Category == 2)
                        {
                            TDS.TDSGST = (//from T in context.tblBOATransaction
                                           from vw in context.vw_TDSDetails
                                           where !IDarr.Contains(vw.BOATransactionId)
                                           //join B in context.tblBOA on T.BOAId equals B.BOAId
                                           join H in context.tblAccountHead on vw.AccountHeadId equals H.AccountHeadId
                                           // join vw in context.vw_SubLedger on T.BOATransactionId equals vw.BOATransactionId
                                           where ((vw.PostedDate >= query.FromDate && vw.PostedDate <= query.ToDate) && (id.Contains(vw.AccountHeadId ?? 0)) && (vw.Amount > 0) && (vw.TransactionType == "Credit"))
                                           orderby vw.BOATransactionId descending
                                           select new
                                           {
                                               vw.BOATransactionId,
                                               vw.Name,
                                               //  vw.Type,
                                               vw.PostedDate,
                                               vw.Amount,
                                               vw.TransactionType,
                                               vw.RefNumber,
                                               // vw.TransactionTypeCode,
                                               H.AccountHead,
                                               H.AccountHeadId
                                           })
                                         .AsEnumerable()
                                               .Select((x, index) => new TDSGSTListModel()
                                               {
                                                   SlNo = index,
                                                   Party = x.Name,
                                                   // TypeName = Common.gettransactioncode(x.TransactionTypeCode),
                                                   GSTHead = x.AccountHead,
                                                   GSTAmount = x.Amount,
                                                   DateOfTransaction = String.Format("{0:dd-MMMM-yyyy}", x.PostedDate),
                                                   BoaTransId = x.BOATransactionId,
                                                   ReferenceNo = x.RefNumber == null ? "" : x.RefNumber,
                                                   GSTHeadId = x.AccountHeadId,
                                                   TDSCheckbox = GSTarrList.Contains(x.BOATransactionId) == true,
                                               }).ToList();
                        }
                    }
                }
                return TDS;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static List<TDSPaymentModel> SearchTDSPaymentList(TDSPaymentSearchFieldModel model)
        {
            List<TDSPaymentModel> honor = new List<TDSPaymentModel>();
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var predicate = PredicateBuilder.BaseAnd<tblTDSPayment>();
                    if (!string.IsNullOrEmpty(model.TDSPaymentNumber))
                        predicate = predicate.And(d => d.TDSPaymentNumber == model.TDSPaymentNumber);

                    if (!string.IsNullOrEmpty(model.Status))
                        predicate = predicate.And(d => d.Status == model.Status);
                    if (model.FromDate != null && model.ToDate != null)
                    {
                        model.ToDate = model.ToDate.Value.Date.AddDays(1).AddTicks(-1);
                        predicate = predicate.And(d => d.CRTD_TS >= model.FromDate && d.CRTD_TS <= model.ToDate);
                    }
                    var query = context.tblTDSPayment.Where(predicate).OrderByDescending(m => m.tblTDSPaymentId).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            honor.Add(new TDSPaymentModel()
                            {
                                SlNo = i,
                                TotalTDS = query[i].TotalTDSIncomeTax,
                                TotalGST = query[i].TotalTDSGST,
                                CategoryName = Common.getcategory(Convert.ToInt32(query[i].Category)),
                                SectionName = Common.getsection(Convert.ToInt32(query[i].Section)),
                                TDSPaymentDate = String.Format("{0:dd-MMMM-yyyy}", query[i].CRTD_TS),
                                TDSPaymentNumber = query[i].TDSPaymentNumber,
                                Status = query[i].Status,
                                TDSPaymentId = query[i].tblTDSPaymentId
                            });
                        }
                    }
                    return honor;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public bool TDSPaymentBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblTDSPayment.FirstOrDefault(m => m.tblTDSPaymentId == id);
                    if (billQuery != null)
                    {
                        decimal netAmt = 0;
                        if (billQuery.TotalTDSIncomeTax != null)
                        {
                            netAmt = billQuery.TotalTDSIncomeTax ?? 0;
                        }
                        else
                        {
                            netAmt = billQuery.TotalTDSGST ?? 0;
                        }
                        model.TempVoucherNumber = billQuery.TDSPaymentNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = Common.GetNewVoucherNo("Payment");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "TXP";
                        model.RefNumber = billQuery.TDSPaymentNumber;
                        model.RefTransactionCode = "TXP";
                        if (billQuery.Category == 2)
                        {
                            txList.Add(new BOATransactionModel()
                            {
                                AccountHeadId = billQuery.Section,
                                Amount = billQuery.TotalTDSIncomeTax,
                                TransactionType = "Debit",
                            });
                        }
                        else if (billQuery.Category == 1)
                        {
                            if (billQuery.Category == 1 && billQuery.IGST > 0)
                            {
                                txList.Add(new BOATransactionModel()
                                {
                                    AccountHeadId = 46,
                                    Amount = billQuery.IGST,
                                    TransactionType = "Debit"
                                });
                            }
                            if (billQuery.Category == 1 && billQuery.SGST > 0)
                            {
                                txList.Add(new BOATransactionModel()
                                {
                                    AccountHeadId = 45,
                                    Amount = billQuery.IGST,
                                    TransactionType = "Debit"
                                });
                            }
                            if (billQuery.Category == 1 && billQuery.CGST > 0)
                            {
                                txList.Add(new BOATransactionModel()
                                {
                                    AccountHeadId = 44,
                                    Amount = billQuery.CGST,
                                    TransactionType = "Debit"
                                });
                            }
                        }
                        txList.Add(new BOATransactionModel()
                        {
                            AccountHeadId = billQuery.BankId,
                            Amount = netAmt,
                            TransactionType = "Credit",
                        });
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Overheads Posting
        public List<OverheadsPostingModel> GetOverheadsPostingList()
        {
            try
            {

                List<OverheadsPostingModel> list = new List<OverheadsPostingModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from op in context.tblOverheadsPosting
                                //join opd in context.tblOverheadsPostingDetails on op.OverheadsPostingId equals opd.OverheadsPostingId
                                //join rcv in context.tblReceipt on opd.ReceiptId equals rcv.ReceiptId
                            orderby op.OverheadsPostingId descending
                            where op.Status != "InActive"
                            select new
                            {
                                op.OverheadsPostingId,
                                op.OverheadsPostingNumber,
                                op.TotalAmount,
                                op.CRTD_TS,
                                op.Status,
                                // rcv.ReceiptNumber
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new OverheadsPostingModel()
                                 {
                                     SlNo = index + 1,
                                     OverheadsPostingId = x.OverheadsPostingId,
                                     OverheadsPostingNumber = x.OverheadsPostingNumber,
                                     PostedDate = String.Format("{0:ddd dd-MMM-yyyy}", x.CRTD_TS),
                                     TotalAmount = x.TotalAmount,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<OverheadsPostingModel>();
            }
        }
        public OverheadsPostingModel GetOverheadsDetails(int projecttype)
        {
            try
            {
                OverheadsPostingModel model = new OverheadsPostingModel();
                List<OverheadsDetailModel> details = new List<OverheadsDetailModel>();
                List<OverheadsPIShareDetailModel> pipcfshare = new List<OverheadsPIShareDetailModel>();
                List<OverheadsPIShareDetailModel> pirmfshare = new List<OverheadsPIShareDetailModel>();
                List<OverheadsPCFCreditsModel> pcfcreditdetails = new List<OverheadsPCFCreditsModel>();
                List<OverheadsRMFCreditsModel> rmfcreditdetails = new List<OverheadsRMFCreditsModel>();
                List<OverheadsCorpusCreditsModel> corpuscreditdetails = new List<OverheadsCorpusCreditsModel>();
                List<OverheadsICSROHCreditsModel> ICSROHcreditdetails = new List<OverheadsICSROHCreditsModel>();
                List<OverheadsDDFCreditsModel> DDFcreditdetails = new List<OverheadsDDFCreditsModel>();
                List<OverheadsStaffwelfareCreditsModel> StaffWelfarecreditdetails = new List<OverheadsStaffwelfareCreditsModel>();
                using (var context = new IOASDBEntities())
                {
                    int projectid = 0;
                    int? pjctpiid = 0;
                    int? rcvid = 0;
                    var pjctquery = (from pjct in context.tblProject
                                     where pjct.ProjectType == projecttype
                                     select pjct).ToList();
                    for (int i = 0; i < pjctquery.Count(); i++)
                    {
                        projectid = pjctquery[i].ProjectId;
                        pjctpiid = pjctquery[i].PIName;
                        var receiptquery = (from rcv in context.tblReceipt
                                            where (rcv.ProjectId == projectid && rcv.Status == "Completed")
                                            select rcv).ToList();
                        for (int a = 0; a < receiptquery.Count(); a++)
                        {
                            rcvid = receiptquery[a].ReceiptId;
                            var rcvquery = (from rcv in context.tblReceipt
                                            join oh in context.tblReceiptOverheadBreakup on rcv.ReceiptId equals oh.ReceiptId
                                            join ohp in context.tblOverheadsPercentage on oh.ReceiptOverheadTypeId equals ohp.OverheadsTypeId
                                            join pjct in context.tblProject on rcv.ProjectId equals pjct.ProjectId
                                            where rcv.ReceiptId == rcvid && (oh.IsPosted_f == false || oh.IsPosted_f == null)
                                            select new { rcv, oh, ohp, pjct }).ToList();
                            var prjctenhancealloc = (from R in context.tblProjectEnhancementAllocation
                                                     where R.ProjectId == projectid && R.AllocationHead == 6
                                                     select R).ToList();

                            var prjctopenalloc = (from R in context.tblProjectAllocation
                                                  where R.ProjectId == projectid && R.AllocationHead == 6
                                                  select R).ToList();
                            var projct = (from R in context.tblProject
                                          where R.ProjectId == projectid
                                          select R).FirstOrDefault();
                            var enhance = (from e in context.tblProjectEnhancement
                                           where e.ProjectId == projectid
                                           select e).ToList();
                            decimal? pjctopenallocval = 0;
                            decimal? pjctenhancallocval = 0;
                            if (prjctopenalloc != null)
                            {
                                pjctopenallocval = prjctopenalloc.Select(m => m.AllocationValue).Sum() ?? 0;
                            }
                            if (prjctenhancealloc != null)
                            {
                                pjctenhancallocval = prjctenhancealloc.Select(m => m.EnhancedValue).Sum() ?? 0;
                            }
                            decimal? totaloverheadalloc = pjctopenallocval + pjctenhancallocval;
                            decimal? receiptamt = receiptquery[a].ReceiptAmount;
                            decimal? enhanceamt = enhance.Select(m => m.EnhancedSanctionValue).Sum() ?? 0;
                            decimal? projectsanctionvalue = projct.SanctionValue + enhanceamt;
                            double rcvoh = Convert.ToDouble((receiptamt / projectsanctionvalue) * totaloverheadalloc);
                            decimal? receiptoverheads = Convert.ToDecimal(Math.Round(rcvoh, 0));
                            decimal? prevreceiptoverheads = rcvquery.Where(m => m.pjct.ProjectId == projectid).Select(m => m.rcv.ReceiptOverheadValue).Sum() ?? 0;

                            if (rcvquery.Count() > 0)
                            {
                                decimal? corpousamt = 0;
                                decimal? corpouspercent = 0;
                                decimal? ddfamt = 0;
                                decimal? ddfpercent = 0;
                                decimal? icsrohamt = 0;
                                decimal? icsrohpercent = 0;
                                decimal? rmfamt = 0;
                                decimal? rmfpercent = 0;
                                decimal? pcfamt = 0;
                                decimal? pcfpercent = 0;
                                decimal? staffwelfareamt = 0;
                                decimal? staffwelfarepercent = 0;
                                int receiptid = 0;
                                int? overheadtypeid = 0;
                                string rcvdate = "";
                                string rcvnum = "";
                                string pjctnum = "";
                                var pjctid = 0;
                                int? piid = 0;
                                string piname = "";
                                string pidepartment = "";
                                List<MasterlistviewModel> pipcfprojectnumb = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> pirmfprojectnumb = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> piICSROHprojectnumb = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> piDDFprojectnumb = new List<MasterlistviewModel>();

                                List<MasterlistviewModel> piStaffWelfareprojectnumb = new List<MasterlistviewModel>();
                                //   List<MasterlistviewModel> picorpusprojectnumb = new List<MasterlistviewModel>();

                                List<MasterlistviewModel> pipcfbank = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> pirmfbank = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> piICSROHbank = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> piDDFbank = new List<MasterlistviewModel>();

                                List<MasterlistviewModel> piStaffWelfarebank = new List<MasterlistviewModel>();
                                List<MasterlistviewModel> picorpusbank = new List<MasterlistviewModel>();
                                for (int j = 0; j < rcvquery.Count(); j++)
                                {
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 1)
                                    {
                                        corpousamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        corpouspercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 2)
                                    {
                                        rmfamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        rmfpercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 3)
                                    {
                                        icsrohamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        icsrohpercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 4)
                                    {
                                        ddfamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        ddfpercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 5)
                                    {
                                        staffwelfareamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        staffwelfarepercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }
                                    if (rcvquery[j].oh.ReceiptOverheadTypeId == 6)
                                    {
                                        pcfamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                        overheadtypeid = rcvquery[j].oh.ReceiptOverheadTypeId;
                                        pcfpercent = rcvquery[j].ohp.Percentage;
                                        receiptid = rcvquery[j].rcv.ReceiptId;
                                        rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                        rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                        pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    }

                                    //if (rcvquery[j].oh.ReceiptOverheadType.Contains("ICSROH"))
                                    //{
                                    //    icsrohamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                    //    icsrohpercent = rcvquery[j].ohp.Percentage;
                                    //    receiptid = rcvquery[j].rcv.ReceiptId;
                                    //    rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                    //    rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                    //    pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    //}
                                    //if (rcvquery[j].oh.ReceiptOverheadType.Contains("Corpus"))
                                    //{
                                    //    corpousamt = rcvquery[j].oh.ReceiptOverheadAmount;
                                    //    corpouspercent = rcvquery[j].ohp.Percentage;
                                    //    receiptid = rcvquery[j].rcv.ReceiptId;
                                    //    rcvdate = String.Format("{0:ddd dd-MMM-yyyy}", rcvquery[j].rcv.ReceiptDate);
                                    //    rcvnum = rcvquery[j].rcv.ReceiptNumber;
                                    //    pjctnum = rcvquery[j].pjct.ProjectNumber;
                                    //}

                                    pjctid = rcvquery[j].pjct.ProjectId;
                                    piid = rcvquery[j].pjct.PIName;

                                }
                                var user = (from u in context.vwFacultyStaffDetails
                                            where u.UserId == pjctpiid
                                            select u).FirstOrDefault();
                                var copi = (from u in context.tblProjectCoPI
                                            where u.ProjectId == pjctid
                                            select u).ToList();

                                piname = user.FirstName;
                                pidepartment = user.DepartmentName;

                                piICSROHprojectnumb = Common.GetProjectNumberList(piid, 4);
                                piDDFprojectnumb = Common.GetDDFProjectNumberList(pidepartment);

                                piStaffWelfareprojectnumb = Common.GetProjectNumberList(piid, 6);
                                // picorpusprojectnumb = Common.GetProjectNumberList(piid, 11);

                                pipcfbank = Common.GetBankList(2);
                                pirmfbank = Common.GetBankList(3);
                                piICSROHbank = Common.GetBankList(4);
                                piDDFbank = Common.GetBankList(5);
                                piStaffWelfarebank = Common.GetBankList(6);
                                picorpusbank = Common.GetBankList(11);
                                var pcfdetails = GetPIPCFShareDetails(pjctid, Convert.ToDecimal(rmfamt));
                                foreach (var item in pcfdetails.PIShareDetails)
                                {
                                    pipcfprojectnumb = Common.GetProjectNumberList(item.PIId, 2);
                                    pcfcreditdetails.Add(new OverheadsPCFCreditsModel()
                                    {
                                        ReceiptId = receiptid,
                                        OverheadsTypeId = overheadtypeid,
                                        ProjectId = projectid,
                                        PIId = item.PIId,
                                        ReceiptNumber = rcvnum,
                                        ProjectNumber = pipcfprojectnumb,
                                        Bank = pipcfbank,
                                        NameofPI = item.NameofPI,
                                        Amount = item.PCFAmount,
                                        Percent = item.PCFPercent
                                    });
                                    pipcfshare.Add(new OverheadsPIShareDetailModel()
                                    {
                                        ReceiptId = receiptid,
                                        ProjectId = projectid,
                                        PIId = item.PIId,
                                        NameofPI = item.NameofPI,
                                        PCFAmount = item.PCFAmount,
                                        PCFPercent = item.PCFPercent
                                    });
                                }
                                var rmfdetails = GetPIRMFShareDetails(pjctid, Convert.ToDecimal(rmfamt));
                                foreach (var item in rmfdetails.PIShareDetails)
                                {
                                    pirmfprojectnumb = Common.GetProjectNumberList(item.PIId, 3);
                                    rmfcreditdetails.Add(new OverheadsRMFCreditsModel()
                                    {
                                        ReceiptId = receiptid,
                                        ProjectId = projectid,
                                        OverheadsTypeId = overheadtypeid,
                                        PIId = item.PIId,
                                        ReceiptNumber = rcvnum,
                                        ProjectNumber = pirmfprojectnumb,
                                        Bank = pirmfbank,
                                        NameofPI = item.NameofPI,
                                        Amount = item.RMFAmount,
                                        Percent = item.RMFPercent,
                                    });
                                    pirmfshare.Add(new OverheadsPIShareDetailModel()
                                    {
                                        ReceiptId = receiptid,
                                        ProjectId = projectid,
                                        PIId = item.PIId,
                                        NameofPI = item.NameofPI,
                                        RMFAmount = item.RMFAmount,
                                        RMFPercent = item.RMFPercent
                                    });
                                }
                                corpuscreditdetails.Add(new OverheadsCorpusCreditsModel()
                                {
                                    ReceiptId = receiptid,
                                    ProjectId = projectid,
                                    OverheadsTypeId = overheadtypeid,
                                    ReceiptNumber = rcvnum,
                                    //  ProjectNumber = picorpusprojectnumb,
                                    Bank = picorpusbank,
                                    Amount = corpousamt,
                                });
                                ICSROHcreditdetails.Add(new OverheadsICSROHCreditsModel()
                                {
                                    ReceiptId = receiptid,
                                    ProjectId = projectid,
                                    OverheadsTypeId = overheadtypeid,
                                    ReceiptNumber = rcvnum,
                                    ProjectNumber = piICSROHprojectnumb,
                                    Bank = piICSROHbank,
                                    Amount = icsrohamt,
                                });
                                DDFcreditdetails.Add(new OverheadsDDFCreditsModel()
                                {
                                    ReceiptId = receiptid,
                                    ProjectId = projectid,
                                    OverheadsTypeId = overheadtypeid,
                                    ReceiptNumber = rcvnum,
                                    DepartmentName = pidepartment,
                                    ProjectNumber = piDDFprojectnumb,
                                    Bank = piDDFbank,
                                    Amount = ddfamt,
                                });
                                StaffWelfarecreditdetails.Add(new OverheadsStaffwelfareCreditsModel()
                                {
                                    ReceiptId = receiptid,
                                    ProjectId = projectid,
                                    OverheadsTypeId = overheadtypeid,
                                    ReceiptNumber = rcvnum,
                                    ProjectNumber = piStaffWelfareprojectnumb,
                                    Bank = piStaffWelfarebank,
                                    Amount = staffwelfareamt,
                                });
                                details.Add(new OverheadsDetailModel()
                                {
                                    ReceiptId = receiptid,
                                    ProjectId = projectid,
                                    OverheadsTypeId = overheadtypeid,
                                    ReceiptDate = rcvdate,
                                    ReceiptNumber = rcvnum,
                                    ProjectNumber = pjctnum,
                                    CorpusAmount = corpousamt,
                                    CorpusPercent = corpouspercent,
                                    ICSROHAmount = icsrohamt,
                                    ICSROHPercent = icsrohpercent,
                                    RMFAmount = rmfamt,
                                    RMFPercent = rmfpercent,
                                    StaffWelfareAmount = staffwelfareamt,
                                    StaffWelfarePercent = staffwelfarepercent,
                                    DDFAmount = ddfamt,
                                    DDFPercent = ddfpercent,
                                    PCFAmount = pcfamt,
                                    PCFPercent = pcfpercent,
                                    TotalOverheadsValue = corpousamt + icsrohamt + rmfamt + staffwelfareamt + ddfamt + pcfamt,
                                    ProjectTotalOverheadsvalue = totaloverheadalloc,
                                    CurrentReceiptOverheads = receiptoverheads,
                                    PrevReceiptsOverheads = prevreceiptoverheads,
                                    ProjectTotalValue = projectsanctionvalue,
                                });
                            }
                        }
                    }

                }
                model.OverheadsDetails = details;
                model.PCFCreditDetails = pcfcreditdetails;
                model.RMFCreditDetails = rmfcreditdetails;
                model.CorpusCreditDetails = corpuscreditdetails;
                model.ICSRCreditDetails = ICSROHcreditdetails;
                model.DDFCreditDetails = DDFcreditdetails;
                model.StaffWelfareCreditDetails = StaffWelfarecreditdetails;
                model.PIPCFShareDetails = pipcfshare;
                model.PIRMFShareDetails = pirmfshare;

                model.TotalAmount = model.OverheadsDetails.Select(m => m.TotalOverheadsValue).Sum() ?? 0;
                model.TotalCorpusAmount = model.CorpusCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                model.TotalICSROHAmount = model.ICSRCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                model.TotalPCFAmount = model.PCFCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                model.TotalRMFAmount = model.RMFCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                model.TotalStaffWelfareAmount = model.StaffWelfareCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                model.TotalDDFAmount = model.DDFCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                return model;
            }
            catch (Exception ex)
            {
                return new OverheadsPostingModel();
            }
        }
        public int OverheadsPostingIU(OverheadsPostingModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.OverheadsPostingId == null)
                        {
                            tblOverheadsPosting bill = new tblOverheadsPosting();
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            bill.Source = model.Source;
                            if (model.Source == 1 || model.Source == 3)
                            {
                                bill.SourceReferenceNumber = model.SourceReferenceNumber;
                            }
                            if (model.Source == 2)
                            {
                                bill.SourceEmailDate = model.SourceEmailDate;
                            }
                            bill.Status = "Open";
                            bill.TransactionTypeCode = "OHP";
                            bill.OverheadsPostingNumber = Common.GetNewOHPNo();
                            bill.TotalAmount = model.OverheadsDetails.Select(m => m.TotalOverheadsValue).Sum() ?? 0;
                            bill.CRTD_By = logged_in_user;
                            bill.CRTD_TS = DateTime.Now;
                            context.tblOverheadsPosting.Add(bill);
                            context.SaveChanges();
                            if (bill.OverheadsPostingId > 0)
                            {
                                foreach (var item in model.OverheadsDetails)
                                {
                                    tblOverheadsPostingDetails exp = new tblOverheadsPostingDetails();
                                    exp.OverheadsPostingId = bill.OverheadsPostingId;
                                    exp.ProjectId = item.ProjectId;
                                    exp.PIId = item.PIId;
                                    exp.ReceiptId = item.ReceiptId;
                                    // exp.ReceiptOverheadTypeId = item.OverheadsTypeId;
                                    exp.TotalOverheadsAmount = item.TotalOverheadsValue;
                                    exp.CorpusPercent = item.CorpusPercent;
                                    exp.CorpousAmount = item.CorpusAmount;
                                    exp.PCFPercent = item.PCFPercent;
                                    exp.PCFAmount = item.PCFAmount;
                                    exp.RMFPercent = item.RMFPercent;
                                    exp.RMFAmount = item.RMFAmount;
                                    exp.ICSROHPercent = item.ICSROHPercent;
                                    exp.ICSROHAmount = item.ICSROHAmount;
                                    exp.DDFPercent = item.DDFPercent;
                                    exp.DDFAmount = item.DDFAmount;
                                    exp.StaffWelfarePercent = item.StaffWelfarePercent;
                                    exp.StaffWelfareAmount = item.StaffWelfareAmount;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblOverheadsPostingDetails.Add(exp);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.ExpenseDetail)
                                {

                                    tblOverheadsPostingExpenseDetail exp = new tblOverheadsPostingExpenseDetail();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.AccountHeadId = item.AccountHeadId;
                                    exp.Amount = item.Amount;
                                    exp.IsJV_f = item.IsJV;
                                    exp.OverheadsPostingId = bill.OverheadsPostingId;
                                    exp.TransactionType = item.TransactionType;
                                    exp.CRTD_By = logged_in_user;
                                    exp.CRTD_TS = DateTime.Now;
                                    exp.Status = "Active";
                                    context.tblOverheadsPostingExpenseDetail.Add(exp);
                                    context.SaveChanges();
                                }

                                if (model.DeductionDetail != null)
                                {
                                    foreach (var item in model.DeductionDetail)
                                    {
                                        if (item.Amount != null)
                                        {
                                            tblOverheadsPostingDeductionDetail deduction = new tblOverheadsPostingDeductionDetail();
                                            deduction.AccountGroupId = item.AccountGroupId;
                                            deduction.Amount = item.Amount;
                                            deduction.OverheadsPostingId = bill.OverheadsPostingId;
                                            deduction.CRTD_By = logged_in_user;
                                            deduction.CRTD_TS = DateTime.Now;
                                            deduction.DeductionHeadId = item.DeductionHeadId;
                                            deduction.Status = "Active";
                                            context.tblOverheadsPostingDeductionDetail.Add(deduction);
                                            context.SaveChanges();
                                        }
                                    }
                                }

                                foreach (var item in model.PCFCreditDetails)
                                {
                                    tblOverheadsPostingPCFDetails pcf = new tblOverheadsPostingPCFDetails();
                                    pcf.ReceiptId = item.ReceiptId;
                                    pcf.OverheadsPostingId = bill.OverheadsPostingId;
                                    pcf.ReceiptNumber = item.ReceiptNumber;
                                    pcf.PIId = item.PIId;
                                    pcf.PCFAmount = item.Amount;
                                    pcf.PCFProjectID = item.Id;
                                    pcf.PCFBankId = item.BankId;
                                    pcf.UPTD_By = logged_in_user;
                                    pcf.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingPCFDetails.Add(pcf);
                                    context.SaveChanges();

                                }

                                foreach (var item in model.RMFCreditDetails)
                                {
                                    tblOverheadsPostingRMFDetails rmf = new tblOverheadsPostingRMFDetails();
                                    rmf.ReceiptId = item.ReceiptId;
                                    rmf.OverheadsPostingId = bill.OverheadsPostingId;
                                    rmf.ReceiptNumber = item.ReceiptNumber;
                                    rmf.PIId = item.PIId;
                                    rmf.RMFAmount = item.Amount;
                                    rmf.RMFProjectID = item.Id;
                                    rmf.RMFBankId = item.BankId;
                                    rmf.UPTD_By = logged_in_user;
                                    rmf.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingRMFDetails.Add(rmf);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.CorpusCreditDetails)
                                {
                                    tblOverheadsPostingCorpusDetails corpus = new tblOverheadsPostingCorpusDetails();
                                    corpus.ReceiptId = item.ReceiptId;
                                    corpus.OverheadsPostingId = bill.OverheadsPostingId;
                                    corpus.ReceiptNumber = item.ReceiptNumber;
                                    corpus.CorpusAmount = item.Amount;
                                    //corpus.CorpusProjectID = item.Id;
                                    corpus.CorpusBankId = item.BankId;
                                    corpus.UPTD_By = logged_in_user;
                                    corpus.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingCorpusDetails.Add(corpus);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.ICSRCreditDetails)
                                {
                                    tblOverheadsPostingICSROHDetails icsroh = new tblOverheadsPostingICSROHDetails();
                                    icsroh.ReceiptId = item.ReceiptId;
                                    icsroh.OverheadsPostingId = bill.OverheadsPostingId;
                                    icsroh.ReceiptNumber = item.ReceiptNumber;
                                    icsroh.ICSROHAmount = item.Amount;
                                    icsroh.ICSROHProjectID = item.Id;
                                    icsroh.ICSROHBankId = item.BankId;
                                    icsroh.UPTD_By = logged_in_user;
                                    icsroh.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingICSROHDetails.Add(icsroh);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.DDFCreditDetails)
                                {
                                    tblOverheadsPostingDDFDetails ddf = new tblOverheadsPostingDDFDetails();
                                    ddf.ReceiptId = item.ReceiptId;
                                    ddf.OverheadsPostingId = bill.OverheadsPostingId;
                                    ddf.ReceiptNumber = item.ReceiptNumber;
                                    ddf.DDFAmount = item.Amount;
                                    ddf.DDFDepartment = item.DepartmentName;
                                    ddf.DDFProjectID = item.Id;
                                    ddf.DDFBankId = item.BankId;
                                    ddf.UPTD_By = logged_in_user;
                                    ddf.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingDDFDetails.Add(ddf);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.StaffWelfareCreditDetails)
                                {
                                    tblOverheadsPostingSWFDetails swf = new tblOverheadsPostingSWFDetails();
                                    swf.ReceiptId = item.ReceiptId;
                                    swf.OverheadsPostingId = bill.OverheadsPostingId;
                                    swf.ReceiptNumber = item.ReceiptNumber;
                                    swf.SWFAmount = item.Amount;
                                    swf.SWFProjectID = item.Id;
                                    swf.SWFBankId = item.BankId;
                                    swf.UPTD_By = logged_in_user;
                                    swf.UPTD_TS = DateTime.Now;
                                    context.tblOverheadsPostingSWFDetails.Add(swf);
                                    context.SaveChanges();
                                }
                                //foreach (var item in model.CrDetail)
                                //{
                                //    tblOverheadsPostingContraDetail crDet = new tblOverheadsPostingContraDetail();
                                //    crDet.OverheadsPostingId = bill.OverheadsPostingId;
                                //    crDet.Amount = item.Amount;
                                //    crDet.AccountGroupId = item.AccountGroupId;
                                //    crDet.AccountHeadId = item.AccountHeadId;
                                //    crDet.TransactionType = "Credit";
                                //    context.tblOverheadsPostingContraDetail.Add(crDet);
                                //    context.SaveChanges();
                                //}

                                //foreach (var item in model.DrDetail)
                                //{
                                //    tblOverheadsPostingContraDetail drDet = new tblOverheadsPostingContraDetail();
                                //    drDet.OverheadsPostingId = bill.OverheadsPostingId;
                                //    drDet.Amount = item.Amount;
                                //    drDet.AccountGroupId = item.AccountGroupId;
                                //    drDet.AccountHeadId = item.AccountHeadId;
                                //    drDet.TransactionType = "Debit";
                                //    context.tblOverheadsPostingContraDetail.Add(drDet);
                                //    context.SaveChanges();
                                //}
                            }
                            transaction.Commit();
                            return bill.OverheadsPostingId;
                        }

                        else
                            return -1;

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public bool OverheadsPostingBillApproved(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblOverheadsPosting.FirstOrDefault(m => m.OverheadsPostingId == id && m.Status == "Open" && m.TransactionTypeCode == "OHP");
                    if (billQuery != null)
                    {
                        if (!getOHPostingBOAmodeldetails(id))
                        {
                            return false;
                        }
                        else
                        {
                            if (!getOtherReceiptIUdetails(id, loggedInUser))
                            {
                                return false;
                            }
                            else
                            {

                                var ohdetails = (from o in context.tblOverheadsPostingDetails
                                                 where o.OverheadsPostingId == id
                                                 select o).ToList();
                                for (int i = 0; i < ohdetails.Count(); i++)
                                {
                                    var ohreceiptid = ohdetails[i].ReceiptId;
                                    decimal? ohvalue = ohdetails[i].TotalOverheadsAmount;
                                    var rcvohbreakquery = (from o in context.tblReceiptOverheadBreakup
                                                           where o.ReceiptId == ohreceiptid
                                                           select o).ToList();
                                    var receipt = (from o in context.tblReceipt
                                                   where o.ReceiptId == ohreceiptid
                                                   select o).FirstOrDefault();
                                    decimal? pcfamount = ohdetails[i].PCFAmount;
                                    decimal? rmfamount = ohdetails[i].RMFAmount;
                                    decimal? icsrohamount = ohdetails[i].ICSROHAmount;
                                    decimal? corpusamount = ohdetails[i].CorpousAmount;
                                    decimal? ddfamount = ohdetails[i].DDFAmount;
                                    decimal? staffwelfareamount = ohdetails[i].StaffWelfareAmount;

                                    for (int j = 0; j < rcvohbreakquery.Count(); j++)
                                    {
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 1)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = corpusamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 2)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = rmfamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 3)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = icsrohamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 4)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = ddfamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 5)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = staffwelfareamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        if (rcvohbreakquery[j].ReceiptId == ohreceiptid && rcvohbreakquery[j].ReceiptOverheadTypeId == 6)
                                        {
                                            rcvohbreakquery[j].ReceiptOverheadAmount = pcfamount;
                                            rcvohbreakquery[j].IsPosted_f = true;
                                            rcvohbreakquery[j].UpdtTS = DateTime.Now;
                                            rcvohbreakquery[j].UpdtUserId = loggedInUser;
                                            context.SaveChanges();
                                        }
                                        receipt.ReceiptOverheadValue = ohvalue;
                                    }
                                }
                                billQuery.Status = "Completed";
                                billQuery.UPTD_By = loggedInUser;
                                billQuery.UPTD_TS = DateTime.Now;
                                context.SaveChanges();
                                return true;
                            }
                        }
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getOHPostingBOAmodeldetails(int paymentId)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblOverheadsPosting.SingleOrDefault(m => m.OverheadsPostingId == paymentId);
                    var query = (from cn in context.tblOverheadsPosting
                                 join od in context.tblOverheadsPostingDetails on cn.OverheadsPostingId equals od.OverheadsPostingId
                                 where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                 select new { cn, od }).ToList();


                    if (billQuery != null)
                    {
                        // var pjctquery = context.tblProject.SingleOrDefault(m => m.ProjectId == billQuery.ProjectId);

                        decimal netAmt = (billQuery.TotalAmount ?? 0);
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 8;
                        model.VoucherNumber = Common.GetNewVoucherNo("TJV");
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.TempVoucherNumber = billQuery.OverheadsPostingNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.OverheadsPostingNumber;
                        txList = (from exp in context.tblOverheadsPostingExpenseDetail
                                  where exp.OverheadsPostingId == paymentId && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType
                                  })
                             .Concat(from d in context.tblOverheadsPostingDeductionDetail
                                     join ah in context.tblDeductionHead on d.DeductionHeadId equals ah.DeductionHeadId
                                     where d.OverheadsPostingId == paymentId && d.Status == "Active"
                                     select new BOATransactionModel()
                                     {
                                         AccountHeadId = ah.AccountHeadId,
                                         Amount = d.Amount,
                                         TransactionType = "Debit"
                                     }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = netAmt,
                            TransactionType = "Credit",
                            Creditor_f = true,
                        });

                        var payment = (from exp in context.tblOverheadsPostingExpenseDetail
                                       join hd in context.tblAccountHead on exp.AccountHeadId equals hd.AccountHeadId
                                       join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                       where exp.OverheadsPostingId == paymentId && exp.Status == "Active" && exp.AccountGroupId == 38
                                       select new
                                       {
                                           exp.TransactionType,
                                           exp.AccountHeadId,
                                           exp.Amount,
                                           exp.OverheadsPostingId,
                                           hd.AccountHead,
                                       }).ToList();
                        for (int i = 0; i < payment.Count(); i++)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = payment[i].TransactionType,
                                BankHeadID = payment[i].AccountHeadId,
                                Amount = payment[i].Amount,
                                ReferenceNumber = billQuery.OverheadsPostingNumber,
                                ReferenceDate = billQuery.CRTD_TS,
                                PayeeId = payment[i].OverheadsPostingId,
                                PayeeType = "Overheads",
                                PaymentMode = 2,
                                Remarks = model.Narration,
                                Reconciliation_f = false,

                            });
                        }

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getOtherReceiptIUdetails(int paymentId, int loggedInUser)
        {
            try
            {
                OtherReceiptModel model = new OtherReceiptModel();

                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblOverheadsPosting.SingleOrDefault(m => m.OverheadsPostingId == paymentId);
                    var query = (from od in context.tblOverheadsPostingDetails
                                 join cn in context.tblOverheadsPosting on od.OverheadsPostingId equals cn.OverheadsPostingId
                                 where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                 select new { cn, od }).ToList();

                    if (query.Count() > 0)
                    {
                        // var pjctquery = context.tblProject.SingleOrDefault(m => m.ProjectId == billQuery.ProjectId);
                        for (int i = 0; i < query.Count(); i++)
                        {
                            var receiptprojectid = Convert.ToInt32(query[i].od.ProjectId);
                            var pcfquery = (from pcf in context.tblOverheadsPostingPCFDetails
                                            join cn in context.tblOverheadsPosting on pcf.OverheadsPostingId equals cn.OverheadsPostingId
                                            where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                            select new { cn, pcf }).ToList();
                            for (int j = 0; j < pcfquery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 2;
                                model.Remarks = pcfquery[i].pcf.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                model.ProjectId = pcfquery[i].pcf.PCFProjectID;
                                model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(pcfquery[i].pcf.PCFBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = pcfquery[i].pcf.PCFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = pcfquery[i].pcf.PCFBankId,
                                    TransactionType = "Debit",
                                    Amount = pcfquery[i].pcf.PCFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                model.DeductionDetail = (from d in context.tblOverheadsPostingDeductionDetail
                                                         where d.OverheadsPostingId == paymentId && d.Status == "Active"
                                                         select new BillDeductionDetailModel()
                                                         {
                                                             AccountGroupId = d.AccountGroupId,
                                                             // BillDeductionDetailId = d.DistributionDeductionDetailId,
                                                             Amount = d.Amount,
                                                             DeductionHeadId = d.DeductionHeadId,
                                                             //  AccountGroup = g.AccountGroup,
                                                             //  DeductionHead = hd.AccountHead
                                                         }).ToList();

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                pcfquery[i].pcf.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {

                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }

                            var rmfquery = (from rmf in context.tblOverheadsPostingRMFDetails
                                            join cn in context.tblOverheadsPosting on rmf.OverheadsPostingId equals cn.OverheadsPostingId
                                            where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                            select new { cn, rmf }).ToList();

                            for (int j = 0; j < rmfquery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 3;
                                model.Remarks = rmfquery[i].rmf.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                model.ProjectId = rmfquery[i].rmf.RMFProjectID;
                                model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(rmfquery[i].rmf.RMFBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = rmfquery[i].rmf.RMFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = rmfquery[i].rmf.RMFBankId,
                                    TransactionType = "Debit",
                                    Amount = rmfquery[i].rmf.RMFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                rmfquery[i].rmf.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {

                                        context.SaveChanges();
                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }


                            var corpusquery = (from corpus in context.tblOverheadsPostingCorpusDetails
                                               join cn in context.tblOverheadsPosting on corpus.OverheadsPostingId equals cn.OverheadsPostingId
                                               where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                               select new { cn, corpus }).ToList();

                            for (int j = 0; j < corpusquery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 11;
                                model.Remarks = corpusquery[i].corpus.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                //model.ProjectId = corpusquery[i].corpus.CorpusBankId;
                                //model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(corpusquery[i].corpus.CorpusBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = corpusquery[i].corpus.CorpusAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = corpusquery[i].corpus.CorpusBankId,
                                    TransactionType = "Debit",
                                    Amount = corpusquery[i].corpus.CorpusAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                corpusquery[i].corpus.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {
                                        context.SaveChanges();
                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }

                            var icsrohquery = (from icsroh in context.tblOverheadsPostingICSROHDetails
                                               join cn in context.tblOverheadsPosting on icsroh.OverheadsPostingId equals cn.OverheadsPostingId
                                               where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                               select new { cn, icsroh }).ToList();

                            for (int j = 0; j < icsrohquery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 4;
                                model.Remarks = icsrohquery[i].icsroh.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                model.ProjectId = icsrohquery[i].icsroh.ICSROHProjectID;
                                model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(icsrohquery[i].icsroh.ICSROHBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = icsrohquery[i].icsroh.ICSROHAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = icsrohquery[i].icsroh.ICSROHBankId,
                                    TransactionType = "Debit",
                                    Amount = icsrohquery[i].icsroh.ICSROHAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                corpusquery[i].corpus.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {
                                        context.SaveChanges();
                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }

                            var ddfquery = (from ddf in context.tblOverheadsPostingDDFDetails
                                            join cn in context.tblOverheadsPosting on ddf.OverheadsPostingId equals cn.OverheadsPostingId
                                            where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                            select new { cn, ddf }).ToList();

                            for (int j = 0; j < ddfquery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 5;
                                model.Remarks = ddfquery[i].ddf.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                model.ProjectId = ddfquery[i].ddf.DDFProjectID;
                                model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(ddfquery[i].ddf.DDFBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = ddfquery[i].ddf.DDFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = ddfquery[i].ddf.DDFBankId,
                                    TransactionType = "Debit",
                                    Amount = ddfquery[i].ddf.DDFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                ddfquery[i].ddf.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {
                                        context.SaveChanges();
                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }

                            var staffwelfarequery = (from swf in context.tblOverheadsPostingSWFDetails
                                                     join cn in context.tblOverheadsPosting on swf.OverheadsPostingId equals cn.OverheadsPostingId
                                                     where cn.OverheadsPostingId == paymentId && cn.Status == "Open"
                                                     select new { cn, swf }).ToList();

                            for (int j = 0; j < staffwelfarequery.Count(); j++)
                            {
                                model.ClassificationOfReceipt = 6;
                                model.Remarks = staffwelfarequery[i].swf.ReceiptNumber;
                                model.ModeOfReceipt = 2;
                                model.ProjectId = staffwelfarequery[i].swf.SWFProjectID;
                                model.IsProject = true;
                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(staffwelfarequery[i].swf.SWFBankId));
                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = 136,
                                    TransactionType = "Credit",
                                    Amount = staffwelfarequery[i].swf.SWFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = 21,
                                });
                                expense.Add(new BillExpenseDetailModel()
                                {
                                    AccountHeadId = staffwelfarequery[i].swf.SWFBankId,
                                    TransactionType = "Debit",
                                    Amount = staffwelfarequery[i].swf.SWFAmount,
                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                    AccountGroupId = accountgroupid,
                                });
                                model.ExpenseDetail = expense;

                                var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                                staffwelfarequery[i].swf.ReturnReceiptId = returnReceiptId;
                                context.SaveChanges();
                                if (returnReceiptId > 0)
                                {
                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                    if (!getOHOtherReceiptBOAmodeldetails(returnReceiptId, receiptprojectid))
                                    {
                                        otherreceiptquery.Status = "InActive";
                                        context.SaveChanges();
                                        return false;
                                    }
                                    else
                                    {
                                        context.SaveChanges();
                                        otherreceiptquery.Status = "Completed";
                                        context.SaveChanges();
                                    }
                                }
                            }
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }

                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getOHOtherReceiptBOAmodeldetails(int paymentId, int receiptprojectid)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == paymentId);

                    if (billQuery != null)
                    {
                        var project = context.tblProject.SingleOrDefault(m => m.ProjectId == receiptprojectid);
                        var agency = context.tblAgencyMaster.SingleOrDefault(m => m.AgencyId == project.SponsoringAgency);
                        model.TempVoucherNumber = billQuery.ReceiptNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 4;
                        model.VoucherNumber = billQuery.ReceiptNumber;
                        model.BOAValue = billQuery.NetTransactionValue;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.ReceiptNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblReceiptRecivables
                                  where exp.ReceiptId == paymentId
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.ReceivablesHeadId,
                                      Amount = exp.ReceivabesAmount,
                                      TransactionType = exp.TransactionType
                                  }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = billQuery.ReceivedAmount,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = 2,
                            SubLedgerId = agency.AgencyId,
                        });
                        var payment = (from exp in context.tblReceiptRecivables
                                       join hd in context.tblAccountHead on exp.ReceivablesHeadId equals hd.AccountHeadId
                                       join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                       where exp.ReceiptId == paymentId && (g.AccountGroupId == 38 || g.AccountGroupId == 19)
                                       select new
                                       {
                                           exp.TransactionType,
                                           exp.ReceivablesHeadId,
                                           exp.ReceivabesAmount,
                                           hd.AccountHead,
                                       }).FirstOrDefault();
                        if (payment != null)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = payment.TransactionType,
                                BankHeadID = payment.ReceivablesHeadId,
                                Amount = payment.ReceivabesAmount,
                                ReferenceNumber = billQuery.ReceiptNumber,
                                ReferenceDate = billQuery.CrtdTS,
                                PayeeType = "Project",
                                PayeeId = billQuery.ProjectId,
                                PaymentMode = 2,
                                Remarks = model.Narration,
                                Reconciliation_f = false,

                            });
                        }

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public OverheadsPostingModel GetPIRMFShareDetails(int projectid, decimal RMFValue)
        {
            try
            {
                OverheadsPostingModel model = new OverheadsPostingModel();
                List<OverheadsPIShareDetailModel> details = new List<OverheadsPIShareDetailModel>();

                using (var context = new IOASDBEntities())
                {
                    var project = (from en in context.tblProject
                                   where (en.ProjectId == projectid)
                                   select en).FirstOrDefault();
                    var copi = (from en in context.tblProjectCoPI
                                where (en.ProjectId == projectid)
                                select en).ToList();
                    var user = (from en in context.vwFacultyStaffDetails
                                where (en.UserId == project.PIName)
                                select en).FirstOrDefault();
                    var pirmfpercent = Math.Round(project.RMF ?? 0, 2);
                    var copirmfsharettl = copi.Select(m => m.RMF).Sum();
                    var totalrmfshare = pirmfpercent + copirmfsharettl;
                    //var pirmfshare = RMFValue * (pirmfpercent / 100);
                    decimal? pirmfshare = 0;
                    double pishare = 0;
                    if (totalrmfshare > 0)
                    {
                        pishare = Convert.ToDouble((pirmfpercent / totalrmfshare) * RMFValue);
                        pirmfshare = Convert.ToDecimal(Math.Round(pishare, 2));
                    }
                    details.Add(new OverheadsPIShareDetailModel()
                    {
                        NameofPI = user.FirstName,
                        RMFAmount = pirmfshare,
                        RMFPercent = pirmfpercent,
                        OldRMFPercent = pirmfpercent,
                        TotalRMFAmount = RMFValue,
                        ProjectId = projectid,
                        PIId = project.PIName,
                    });
                    decimal? copirmfpercent = 0;
                    double copishare = 0;
                    decimal? copirmfshare = 0;
                    for (int i = 0; i < copi.Count(); i++)
                    {
                        var copiid = copi[i].Name;
                        var copiquery = (from en in context.vwFacultyStaffDetails
                                         where (en.UserId == copiid)
                                         select en).FirstOrDefault();
                        copirmfpercent = Math.Round(copi[i].RMF ?? 0, 2);
                        if (totalrmfshare > 0)
                        {
                            copishare = Convert.ToDouble((copirmfpercent / totalrmfshare) * RMFValue);
                            copirmfshare = Convert.ToDecimal(Math.Round(copishare, 2));
                        }
                        details.Add(new OverheadsPIShareDetailModel()
                        {
                            NameofPI = copiquery.FirstName,
                            RMFAmount = copirmfshare,
                            RMFPercent = copirmfpercent,
                            OldRMFPercent = copirmfpercent,
                            TotalRMFAmount = RMFValue,
                            ProjectId = projectid,
                            PIId = copiid,
                        });
                    }
                }
                model.PIShareDetails = details;
                return model;
            }
            catch (Exception ex)
            {
                return new OverheadsPostingModel();
            }
        }
        public OverheadsPostingModel GetPIPCFShareDetails(int projectid, decimal PCFValue)
        {
            try
            {
                OverheadsPostingModel model = new OverheadsPostingModel();
                List<OverheadsPIShareDetailModel> details = new List<OverheadsPIShareDetailModel>();

                using (var context = new IOASDBEntities())
                {
                    var project = (from en in context.tblProject
                                   where (en.ProjectId == projectid)
                                   select en).FirstOrDefault();
                    var copi = (from en in context.tblProjectCoPI
                                where (en.ProjectId == projectid)
                                select en).ToList();
                    var user = (from en in context.vwFacultyStaffDetails
                                where (en.UserId == project.PIName)
                                select en).FirstOrDefault();
                    var pipcfpercent = Math.Round(project.PCF ?? 0, 2);
                    var copipcfsharettl = copi.Select(m => m.PCF).Sum();
                    var totalpcfshare = pipcfpercent + copipcfsharettl;
                    //var pirmfshare = RMFValue * (pirmfpercent / 100);
                    decimal? pipcfshare = 0;
                    double pishare = 0;
                    if (totalpcfshare > 0)
                    {
                        pishare = Convert.ToDouble((pipcfpercent / totalpcfshare) * PCFValue);
                        pipcfshare = Convert.ToDecimal(Math.Round(pishare, 2));
                    }
                    details.Add(new OverheadsPIShareDetailModel()
                    {
                        NameofPI = user.FirstName,
                        PCFAmount = pipcfshare,
                        PCFPercent = pipcfpercent,
                        OldPCFPercent = pipcfpercent,
                        TotalPCFAmount = PCFValue,
                        ProjectId = projectid,
                        PIId = project.PIName,
                    });
                    decimal? copipcfpercent = 0;
                    double copishare = 0;
                    decimal? copipcfshare = 0;
                    for (int i = 0; i < copi.Count(); i++)
                    {
                        var copiid = copi[i].Name;
                        var copiquery = (from en in context.vwFacultyStaffDetails
                                         where (en.UserId == copiid)
                                         select en).FirstOrDefault();
                        copipcfpercent = Math.Round(copi[i].PCF ?? 0, 2);
                        if (totalpcfshare > 0)
                        {
                            copishare = Convert.ToDouble((copipcfpercent / totalpcfshare) * PCFValue);
                            copipcfshare = Convert.ToDecimal(Math.Round(copishare, 2));
                        }
                        details.Add(new OverheadsPIShareDetailModel()
                        {
                            NameofPI = copiquery.FirstName,
                            PCFAmount = copipcfshare,
                            PCFPercent = copipcfpercent,
                            OldPCFPercent = copipcfpercent,
                            TotalPCFAmount = PCFValue,
                            ProjectId = projectid,
                            PIId = copiid,
                        });
                    }
                }
                model.PIShareDetails = details;
                return model;
            }
            catch (Exception ex)
            {
                return new OverheadsPostingModel();
            }
        }
        public OverheadsPostingModel SavePIPCFShare(OverheadsPostingModel model, int UserId, bool isActive = false)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    if (model.PIShareDetails.Count() > 0)
                    {

                        for (int i = 0; i < model.PIShareDetails.Count(); i++)
                        {
                            var piid = model.PIShareDetails[i].PIId;
                            var projectid = model.PIShareDetails[i].ProjectId;
                            var piquery = (from en in context.tblProject
                                           where (en.ProjectId == projectid)
                                           select en).FirstOrDefault();
                            var copi = (from en in context.tblProjectCoPI
                                        where (en.Name == piid && en.ProjectId == projectid)
                                        select en).FirstOrDefault();
                            var user = (from en in context.vwFacultyStaffDetails
                                        where (en.UserId == piquery.PIName)
                                        select en).FirstOrDefault();
                            if (piquery != null && piquery.PIName == piid)
                            {
                                piquery.PCF = model.PIShareDetails[i].PCFPercent;
                                context.SaveChanges();
                            }
                            if (copi != null)
                            {
                                copi.PCF = model.PIShareDetails[i].PCFPercent;
                                context.SaveChanges();
                            }
                            tblPCFRMFShareLog share = new tblPCFRMFShareLog();
                            share.PIId = model.PIShareDetails[i].PIId;
                            share.ProjectId = model.PIShareDetails[i].ProjectId;
                            share.OldPercent = model.PIShareDetails[i].OldPCFPercent;
                            share.NewPercent = model.PIShareDetails[i].PCFPercent;
                            share.Type = "PCF";
                            share.UpdatedFrom = "OHP";
                            share.UPTD_By = UserId;
                            share.UPTD_TS = DateTime.Now;
                        }

                        return model;
                    }
                    else
                        return model;

                }

            }
            catch (Exception ex)
            {
                return model;
            }
        }
        public int SavePIRMFShare(OverheadsPostingModel model, int UserId, bool isActive = false)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {

                    if (model.PIShareDetails.Count() > 0)
                    {

                        for (int i = 0; i < model.PIShareDetails.Count(); i++)
                        {
                            var piid = model.PIShareDetails[i].PIId;
                            var projectid = model.PIShareDetails[i].ProjectId;
                            var piquery = (from en in context.tblProject
                                           where (en.ProjectId == projectid)
                                           select en).FirstOrDefault();
                            var copi = (from en in context.tblProjectCoPI
                                        where (en.Name == piid && en.ProjectId == projectid)
                                        select en).FirstOrDefault();
                            var user = (from en in context.vwFacultyStaffDetails
                                        where (en.UserId == piquery.PIName)
                                        select en).FirstOrDefault();
                            if (piquery != null && piquery.PIName == piid)
                            {
                                piquery.RMF = model.PIShareDetails[i].RMFPercent;
                                context.SaveChanges();
                            }
                            if (copi != null)
                            {
                                copi.RMF = model.PIShareDetails[i].RMFPercent;
                                context.SaveChanges();
                            }
                            tblPCFRMFShareLog share = new tblPCFRMFShareLog();
                            share.PIId = model.PIShareDetails[i].PIId;
                            share.ProjectId = model.PIShareDetails[i].ProjectId;
                            share.OldPercent = model.PIShareDetails[i].OldRMFPercent;
                            share.NewPercent = model.PIShareDetails[i].RMFPercent;
                            share.Type = "RMF";
                            share.UpdatedFrom = "OHP";
                            share.UPTD_By = UserId;
                            share.UPTD_TS = DateTime.Now;
                        }

                        return 1;
                    }
                    else
                        return -1;

                }

            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        #endregion

        #region Distribution Overheads Posting
        public SearchPCFDistributionOH GetDistributionOHPList(int page, int pageSize, SearchPCFDistributionOH model)
        {
            try
            {
                SearchPCFDistributionOH list = new SearchPCFDistributionOH();
                List<DistributionOHPostingModel> DOHP = new List<DistributionOHPostingModel>();
                using (var context = new IOASDBEntities())
                {
                    int skiprec = 0;
                    if (page == 1)
                    {
                        skiprec = 0;
                    }
                    else
                    {
                        skiprec = (page - 1) * pageSize;
                    }
                    var query = (from IP in context.tblPCFDistribution
                                 join cc in context.tblCodeControl on
                                 new { Category = IP.TypeofPayment ?? 0, codeName = "PCFDistributionPaymentType" } equals
                                 new { Category = cc.CodeValAbbr, codeName = cc.CodeName }
                                 // join IC in context.tblIMPUserDetails on IP.IMPUserDetailsId equals IC.IMPUserDetailsId
                                 // join P in context.tblProject on IP.PIId equals P.PIName
                                 //join user in context.vwFacultyStaffDetails on IP.PIUserId equals user.UserId
                                 orderby IP.Id descending
                                 where ((IP.Status != "Inactive" || IP.Status != "Rejected"))
                                 && (IP.ReferenceNumber.Contains(model.SearchEXDistributionOHNumber) || model.SearchEXDistributionOHNumber == null)
                                 && (cc.CodeValDetail.Contains(model.SearchEXPaymentType) || model.SearchEXPaymentType == null)
                                 && (IP.Status.Contains(model.SearchINStatus) || model.SearchINStatus == null)
                                 && ((IP.CRTD_TS >= model.FromDate && IP.CRTD_TS <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                                 select new { IP, cc }).Skip(skiprec).Take(pageSize).ToList();
                    list.TotalRecords = (from IP in context.tblPCFDistribution
                                         join cc in context.tblCodeControl on
                                         new { Category = IP.TypeofPayment ?? 0, codeName = "PCFDistributionPaymentType" } equals
                                         new { Category = cc.CodeValAbbr, codeName = cc.CodeName }
                                         // join IC in context.tblIMPUserDetails on IP.IMPUserDetailsId equals IC.IMPUserDetailsId
                                         // join P in context.tblProject on IP.PIId equals P.PIName
                                         //join user in context.vwFacultyStaffDetails on IP.PIUserId equals user.UserId
                                         orderby IP.Id descending
                                         where ((IP.Status != "Inactive" || IP.Status != "Rejected"))
                                         && (IP.ReferenceNumber.Contains(model.SearchEXDistributionOHNumber) || model.SearchEXDistributionOHNumber == null)
                                         && (cc.CodeValDetail.Contains(model.SearchEXPaymentType) || model.SearchEXPaymentType == null)
                                         && (IP.Status.Contains(model.SearchINStatus) || model.SearchINStatus == null)
                                         && ((IP.CRTD_TS >= model.FromDate && IP.CRTD_TS <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                                         select new { IP, cc }).Count();

                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            DOHP.Add(new DistributionOHPostingModel()
                            {
                                SlNo = i + 1,
                                OverheadsPostingId = query[i].IP.Id,
                                PaymentType = query[i].cc.CodeValDetail,
                                OverheadsPostingNumber = query[i].IP.ReferenceNumber,
                                PostedDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].IP.CRTD_TS),
                                Status = query[i].IP.Status

                                // IsRecoupmentpending = query[i].IP.Is_Recoupmentpending
                            });
                        }
                    }

                }
                list.DOHPList = DOHP;
                return list;
            }
            catch (Exception ex)
            {
                return new SearchPCFDistributionOH();
            }
        }
        public int DistributionOHPostingIU(DistributionOHPostingModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.OverheadsPostingId == null)
                        {
                            tblPCFDistribution bill = new tblPCFDistribution();
                            if (model.PaymentTypeId == 1)
                            {
                                var disquery = context.tblDistribution.SingleOrDefault(m => m.DistributionId == model.PaymentNumberId);

                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                //bill.Source = model.Source;
                                //if (model.Source == 1 || model.Source == 3)
                                //{
                                //    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                //}
                                //if (model.Source == 2)
                                //{
                                //    bill.SourceEmailDate = model.SourceEmailDate;
                                //}
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "DOP";
                                bill.ProjectNumber = model.ProjectNumber;
                                bill.TypeofPayment = model.PaymentTypeId;
                                bill.PaymentId = model.PaymentNumberId;
                                bill.ReferenceNumber = Common.GetNewDOPNo();
                                // bill.TotalAmount = model.OverheadsDetails.Select(m => m.TotalOverheadsValue).Sum() ?? 0;
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                context.tblPCFDistribution.Add(bill);
                                context.SaveChanges();
                                if (bill.Id > 0)
                                {

                                    if (model.OverheadsDetails.Count() > 0)
                                    {
                                        foreach (var item in model.OverheadsDetails)
                                        {
                                            tblDistributionOHPDetails exp = new tblDistributionOHPDetails();
                                            exp.DistributionId = model.PaymentNumberId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PaymentType = model.PaymentTypeId;
                                            exp.OverheadType = item.OverheadsType;
                                            exp.OverheadTypeId = item.OverheadsTypeId;
                                            exp.OverheadProjectId = item.Id;
                                            exp.OverheadAmount = item.OverheadsAmount;
                                            exp.OverheadBankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblDistributionOHPDetails.Add(exp);
                                            context.SaveChanges();

                                        }
                                    }
                                    if (model.PCFCreditDetails != null)
                                    {
                                        foreach (var item in model.PCFCreditDetails)
                                        {
                                            tblPCFDistributionPCFDetails exp = new tblPCFDistributionPCFDetails();
                                            exp.PaymentId = model.PaymentNumberId;
                                            exp.PaymentType = model.PaymentTypeId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PIId = item.PIId;
                                            exp.Amount = item.Amount;
                                            exp.PIName = item.NameofPI;
                                            exp.PCFProjectId = item.Id;
                                            exp.PCFBankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblPCFDistributionPCFDetails.Add(exp);
                                            context.SaveChanges();
                                        }

                                    }
                                    if (model.OtherShareDetails != null)
                                    {
                                        foreach (var item in model.OtherShareDetails)
                                        {

                                            tblPCFDistributionOtherPosting exp = new tblPCFDistributionOtherPosting();
                                            exp.PaymentId = model.PaymentNumberId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PIId = item.PIId;
                                            exp.Amount = item.Amount;
                                            exp.PIName = item.NameofPI;
                                            exp.ProjectId = item.Id;
                                            exp.BankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblPCFDistributionOtherPosting.Add(exp);
                                            context.SaveChanges();

                                        }
                                    }
                                    foreach (var itm in model.ExpenseDetail)
                                    {
                                        tblDistributionOHPExpenseDetail expe = new tblDistributionOHPExpenseDetail();
                                        expe.AccountGroupId = itm.AccountGroupId;
                                        expe.AccountHeadId = itm.AccountHeadId;
                                        expe.Amount = itm.Amount;
                                        expe.IsJV_f = itm.IsJV;
                                        expe.DistributionOHId = bill.Id;
                                        expe.PaymentId = model.PaymentNumberId;
                                        expe.PaymentType = model.PaymentTypeId;
                                        expe.TransactionType = itm.TransactionType;
                                        expe.CRTD_By = logged_in_user;
                                        expe.CRTD_TS = DateTime.Now;
                                        expe.Status = "Active";
                                        context.tblDistributionOHPExpenseDetail.Add(expe);
                                        context.SaveChanges();
                                    }

                                    if (model.DeductionDetail != null)
                                    {
                                        foreach (var itm in model.DeductionDetail)
                                        {
                                            if (itm.Amount != null)
                                            {
                                                tblDistributionOHPDeductionDetail deduction = new tblDistributionOHPDeductionDetail();
                                                deduction.AccountGroupId = itm.AccountGroupId;
                                                deduction.Amount = itm.Amount;
                                                deduction.PaymentId = model.PaymentNumberId;
                                                deduction.PaymentType = model.PaymentTypeId;
                                                deduction.DistributionOHId = bill.Id;
                                                deduction.CRTD_By = logged_in_user;
                                                deduction.CRTD_TS = DateTime.Now;
                                                deduction.DeductionHeadId = itm.DeductionHeadId;
                                                deduction.Status = "Active";
                                                context.tblDistributionOHPDeductionDetail.Add(deduction);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    var billid = bill.Id;
                                    var billnumber = bill.ReferenceNumber;
                                    if (!DOHPostingBOAmodeldetails(model, billid, billnumber))
                                    {
                                        return -1;
                                    }
                                    else
                                    {
                                        transaction.Commit();
                                        var billquery = context.tblPCFDistribution.SingleOrDefault(m => m.Id == billid);
                                        var overheads = (from c in context.tblDistributionOHPDetails
                                                         where c.DistributionOHId == billid
                                                         select c).ToList();
                                        var pcf = (from c in context.tblPCFDistributionPCFDetails
                                                   where c.DistributionOHId == billid
                                                   select c).ToList();
                                        var otherposting = (from c in context.tblPCFDistributionOtherPosting
                                                            where c.DistributionOHId == billid
                                                            select c).ToList();
                                        //tblPCFDistributionOtherPosting
                                        if (overheads.Count() > 0)
                                        {
                                            foreach (var item in overheads)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = disquery.DistributionNumber;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.OverheadProjectId;
                                                //if(item.OverheadTypeId == 1)
                                                //{
                                                //    otherreceipt.ProjectId = item.OverheadBankId;
                                                //}
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.OverheadBankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.OverheadBankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = disquery.DistributionId;
                                                    var paymenttype = "Distribution";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        disquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        otherreceiptquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        disquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        item.Pmt_f = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                        if (pcf.Count() > 0)
                                        {
                                            foreach (var item in pcf)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = disquery.DistributionNumber;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.PCFProjectId;
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.PCFBankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.PCFBankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = disquery.DistributionId;
                                                    var paymenttype = "Distribution";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        disquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        disquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                        if (otherposting != null)
                                        {
                                            foreach (var item in otherposting)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = disquery.DistributionNumber;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.ProjectId;
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.BankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.BankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                otherreceipt.DeductionDetail = (from d in context.tblDistributionDeductionDetail
                                                                                where d.DistributionId == model.PaymentNumberId && d.Status == "Active"
                                                                                select new BillDeductionDetailModel()
                                                                                {
                                                                                    AccountGroupId = d.AccountGroupId,
                                                                                    // BillDeductionDetailId = d.DistributionDeductionDetailId,
                                                                                    Amount = d.Amount,
                                                                                    DeductionHeadId = d.DeductionHeadId,
                                                                                    //  AccountGroup = g.AccountGroup,
                                                                                    //  DeductionHead = hd.AccountHead
                                                                                }).ToList();
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = disquery.DistributionId;
                                                    var paymenttype = "Distribution";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        disquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        disquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (model.PaymentTypeId == 2)
                            {
                                var honquery = context.tblHonororium.SingleOrDefault(m => m.HonororiumId == model.PaymentNumberId);

                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                //bill.Source = model.Source;
                                //if (model.Source == 1 || model.Source == 3)
                                //{
                                //    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                //}
                                //if (model.Source == 2)
                                //{
                                //    bill.SourceEmailDate = model.SourceEmailDate;
                                //}
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "DOP";
                                bill.ProjectNumber = model.ProjectNumber;
                                bill.TypeofPayment = model.PaymentTypeId;
                                bill.PaymentId = model.PaymentNumberId;
                                bill.ReferenceNumber = Common.GetNewDOPNo();
                                // bill.TotalAmount = model.OverheadsDetails.Select(m => m.TotalOverheadsValue).Sum() ?? 0;
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                context.tblPCFDistribution.Add(bill);
                                context.SaveChanges();
                                if (bill.Id > 0)
                                {
                                    if (model.OverheadsDetails.Count() > 0)
                                    {
                                        foreach (var item in model.OverheadsDetails)
                                        {
                                            tblDistributionOHPDetails exp = new tblDistributionOHPDetails();
                                            exp.DistributionId = model.PaymentNumberId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PaymentType = model.PaymentTypeId;
                                            exp.OverheadType = item.OverheadsType;
                                            exp.OverheadTypeId = item.OverheadsTypeId;
                                            exp.OverheadProjectId = item.Id;
                                            exp.OverheadAmount = item.OverheadsAmount;
                                            exp.OverheadBankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblDistributionOHPDetails.Add(exp);
                                            context.SaveChanges();
                                        }
                                    }
                                    if (model.PCFCreditDetails.Count() > 0)
                                    {
                                        foreach (var item in model.PCFCreditDetails)
                                        {
                                            tblPCFDistributionPCFDetails exp = new tblPCFDistributionPCFDetails();
                                            exp.PaymentId = model.PaymentNumberId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PIId = item.PIId;
                                            exp.Amount = item.Amount;
                                            exp.PIName = item.NameofPI;
                                            exp.PCFProjectId = item.Id;
                                            exp.PCFBankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblPCFDistributionPCFDetails.Add(exp);
                                            context.SaveChanges();
                                        }
                                    }
                                    foreach (var itm in model.ExpenseDetail)
                                    {
                                        tblDistributionOHPExpenseDetail expe = new tblDistributionOHPExpenseDetail();
                                        expe.AccountGroupId = itm.AccountGroupId;
                                        expe.AccountHeadId = itm.AccountHeadId;
                                        expe.Amount = itm.Amount;
                                        expe.IsJV_f = itm.IsJV;
                                        expe.DistributionOHId = bill.Id;
                                        expe.PaymentId = model.PaymentNumberId;
                                        expe.PaymentType = model.PaymentTypeId;
                                        expe.TransactionType = itm.TransactionType;
                                        expe.CRTD_By = logged_in_user;
                                        expe.CRTD_TS = DateTime.Now;
                                        expe.Status = "Active";
                                        context.tblDistributionOHPExpenseDetail.Add(expe);
                                        context.SaveChanges();
                                    }

                                    if (model.DeductionDetail != null)
                                    {
                                        foreach (var itm in model.DeductionDetail)
                                        {
                                            if (itm.Amount != null)
                                            {
                                                tblDistributionOHPDeductionDetail deduction = new tblDistributionOHPDeductionDetail();
                                                deduction.AccountGroupId = itm.AccountGroupId;
                                                deduction.Amount = itm.Amount;
                                                deduction.PaymentId = model.PaymentNumberId;
                                                deduction.PaymentType = model.PaymentTypeId;
                                                deduction.DistributionOHId = bill.Id;
                                                deduction.CRTD_By = logged_in_user;
                                                deduction.CRTD_TS = DateTime.Now;
                                                deduction.DeductionHeadId = itm.DeductionHeadId;
                                                deduction.Status = "Active";
                                                context.tblDistributionOHPDeductionDetail.Add(deduction);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    var billid = bill.Id;
                                    var billnumber = bill.ReferenceNumber;
                                    if (!DOHPostingBOAmodeldetails(model, billid, billnumber))
                                    {
                                        return -1;
                                    }
                                    else
                                    {
                                        transaction.Commit();
                                        var billquery = context.tblPCFDistribution.SingleOrDefault(m => m.Id == billid);
                                        var overheads = (from c in context.tblDistributionOHPDetails
                                                         where c.DistributionOHId == billid
                                                         select c).ToList();
                                        var pcf = (from c in context.tblPCFDistributionPCFDetails
                                                   where c.DistributionOHId == billid
                                                   select c).ToList();

                                        //tblPCFDistributionOtherPosting
                                        if (overheads.Count() > 0)
                                        {
                                            foreach (var item in overheads)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = honquery.HonororiumNo;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.OverheadProjectId;
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.OverheadBankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.OverheadBankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = honquery.HonororiumId;
                                                    var paymenttype = "Honororium";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        honquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        otherreceiptquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        honquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        item.Pmt_f = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                        if (pcf.Count() > 0)
                                        {
                                            foreach (var item in pcf)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = honquery.HonororiumNo;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.PCFProjectId;
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.PCFBankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.PCFBankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.Amount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = honquery.HonororiumId;
                                                    var paymenttype = "Honororium";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        honquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        honquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                            if (model.PaymentTypeId == 3)
                            {
                                var rcvquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == model.PaymentNumberId);
                                var pjct = context.tblProject.SingleOrDefault(m => m.ProjectId == rcvquery.ProjectId);
                                var agency = context.tblAgencyMaster.SingleOrDefault(m => m.AgencyId == pjct.SponsoringAgency);
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                //bill.Source = model.Source;
                                //if (model.Source == 1 || model.Source == 3)
                                //{
                                //    bill.SourceReferenceNumber = model.SourceReferenceNumber;
                                //}
                                //if (model.Source == 2)
                                //{
                                //    bill.SourceEmailDate = model.SourceEmailDate;
                                //}
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "DOP";
                                bill.ProjectNumber = model.ProjectNumber;
                                bill.TypeofPayment = model.PaymentTypeId;
                                bill.PaymentId = model.PaymentNumberId;
                                bill.ReferenceNumber = Common.GetNewDOPNo();
                                // bill.TotalAmount = model.OverheadsDetails.Select(m => m.TotalOverheadsValue).Sum() ?? 0;
                                bill.CRTD_By = logged_in_user;
                                bill.CRTD_TS = DateTime.Now;
                                context.tblPCFDistribution.Add(bill);
                                context.SaveChanges();
                                if (bill.Id > 0)
                                {
                                    if (model.OverheadsDetails.Count() > 0)
                                    {
                                        foreach (var item in model.OverheadsDetails)
                                        {
                                            tblDistributionOHPDetails exp = new tblDistributionOHPDetails();
                                            exp.DistributionId = model.PaymentNumberId;
                                            exp.DistributionOHId = bill.Id;
                                            exp.PaymentType = model.PaymentTypeId;
                                            exp.OverheadType = item.OverheadsType;
                                            exp.OverheadTypeId = item.OverheadsTypeId;
                                            exp.OverheadProjectId = item.Id;
                                            exp.OverheadAmount = item.OverheadsAmount;
                                            exp.OverheadBankId = item.BankId;
                                            exp.CRTD_By = logged_in_user;
                                            exp.CRTD_TS = DateTime.Now;
                                            exp.Status = "Active";
                                            context.tblDistributionOHPDetails.Add(exp);
                                            context.SaveChanges();
                                        }
                                    }
                                    foreach (var itm in model.ExpenseDetail)
                                    {
                                        tblDistributionOHPExpenseDetail expe = new tblDistributionOHPExpenseDetail();
                                        expe.AccountGroupId = itm.AccountGroupId;
                                        expe.AccountHeadId = itm.AccountHeadId;
                                        expe.Amount = itm.Amount;
                                        expe.IsJV_f = itm.IsJV;
                                        expe.DistributionOHId = bill.Id;
                                        expe.PaymentId = model.PaymentNumberId;
                                        expe.PaymentType = model.PaymentTypeId;
                                        expe.TransactionType = itm.TransactionType;
                                        expe.CRTD_By = logged_in_user;
                                        expe.CRTD_TS = DateTime.Now;
                                        expe.Status = "Active";
                                        context.tblDistributionOHPExpenseDetail.Add(expe);
                                        context.SaveChanges();
                                    }

                                    if (model.DeductionDetail != null)
                                    {
                                        foreach (var itm in model.DeductionDetail)
                                        {
                                            if (itm.Amount != null)
                                            {
                                                tblDistributionOHPDeductionDetail deduction = new tblDistributionOHPDeductionDetail();
                                                deduction.AccountGroupId = itm.AccountGroupId;
                                                deduction.Amount = itm.Amount;
                                                deduction.PaymentId = model.PaymentNumberId;
                                                deduction.PaymentType = model.PaymentTypeId;
                                                deduction.DistributionOHId = bill.Id;
                                                deduction.CRTD_By = logged_in_user;
                                                deduction.CRTD_TS = DateTime.Now;
                                                deduction.DeductionHeadId = itm.DeductionHeadId;
                                                deduction.Status = "Active";
                                                context.tblDistributionOHPDeductionDetail.Add(deduction);
                                                context.SaveChanges();
                                            }
                                        }
                                    }
                                    var billid = bill.Id;
                                    var billnumber = bill.ReferenceNumber;
                                    if (!DOHPostingBOAmodeldetails(model, billid, billnumber))
                                    {
                                        return -1;
                                    }
                                    else
                                    {
                                        transaction.Commit();
                                        var billquery = context.tblPCFDistribution.SingleOrDefault(m => m.Id == billid);
                                        var overheads = (from c in context.tblDistributionOHPDetails
                                                         where c.DistributionOHId == billid
                                                         select c).ToList();
                                        //var pcf = (from c in context.tblPCFDistributionPCFDetails
                                        //           where c.DistributionOHId == billid
                                        //           select c).ToList();

                                        //tblPCFDistributionOtherPosting
                                        if (overheads.Count() > 0)
                                        {
                                            foreach (var item in overheads)
                                            {
                                                OtherReceiptModel otherreceipt = new OtherReceiptModel();
                                                otherreceipt.ClassificationOfReceipt = 2;
                                                otherreceipt.Remarks = rcvquery.ReceiptNumber;
                                                otherreceipt.ModeOfReceipt = 2;
                                                otherreceipt.ProjectId = item.OverheadProjectId;
                                                otherreceipt.IsProject = true;
                                                var accountgroupid = Common.GetAccountGroupIdbyAcId(Convert.ToInt32(item.OverheadBankId));
                                                List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = 136,
                                                    TransactionType = "Credit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = 21,
                                                });
                                                expense.Add(new BillExpenseDetailModel()
                                                {
                                                    AccountHeadId = item.OverheadBankId,
                                                    TransactionType = "Debit",
                                                    Amount = item.OverheadAmount,
                                                    //AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                    AccountGroupId = accountgroupid,
                                                });
                                                otherreceipt.ExpenseDetail = expense;
                                                var returnReceiptId = OtherReceiptIU(otherreceipt, logged_in_user);
                                                item.ReturnReceiptId = returnReceiptId;
                                                context.SaveChanges();
                                                if (returnReceiptId > 0)
                                                {
                                                    var otherreceiptquery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == returnReceiptId);
                                                    var piid = agency.AgencyId;
                                                    var paymenttype = "Receipt";
                                                    if (!getPCFDOHReceiptBOAmodeldetails(returnReceiptId, piid, paymenttype))
                                                    {
                                                        otherreceiptquery.Status = "InActive";
                                                        context.SaveChanges();
                                                        rcvquery.OHP_F = false;
                                                        context.SaveChanges();
                                                        billquery.Status = "Open";
                                                        context.SaveChanges();
                                                        return -1;
                                                    }
                                                    else
                                                    {
                                                        otherreceiptquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        rcvquery.OHP_F = true;
                                                        context.SaveChanges();
                                                        billquery.Status = "Completed";
                                                        context.SaveChanges();
                                                        item.Pmt_f = true;
                                                        context.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            return bill.Id;
                        }

                        else
                            return -1;

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }

        //public bool getOtherReceiptIUdetails(int paymentId, int loggedInUser)
        //{
        //    try
        //    {
        //        OtherReceiptModel model = new OtherReceiptModel();

        //       using (var context = new IOASDBEntities())
        //        {
        //            using (var transaction = context.Database.BeginTransaction())
        //            {
        //                try
        //                {
        //                    var billQuery = context.tblOverheadsPosting.SingleOrDefault(m => m.OverheadsPostingId == paymentId);
        //                }
        //                catch (Exception ex)
        //                {
        //                    return false;
        //                }
        //            }

        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        return false;
        //    }
        //}

        public bool DOHPostingBOAmodeldetails(DistributionOHPostingModel model, int billid, string billnumber)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {

                    BOAModel boamodel = new BOAModel();
                    List<BOATransactionModel> txList = new List<BOATransactionModel>();
                    List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                    decimal ohamt = 0;
                    decimal pcfamt = 0;
                    decimal otheramt = 0;
                    ohamt = model.OverheadsDetails.Select(m => m.OverheadsAmount).Sum() ?? 0;
                    if (model.PCFCreditDetails != null)
                    {
                        pcfamt = model.PCFCreditDetails.Select(m => m.Amount).Sum() ?? 0;
                    }
                    if (model.OtherShareDetails != null)
                    {
                        otheramt = model.OtherShareDetails.Select(m => m.Amount).Sum() ?? 0;
                    }
                    decimal netAmt = (ohamt + pcfamt + otheramt);
                    boamodel.PostedDate = DateTime.Now;
                    boamodel.VoucherType = 8;
                    boamodel.VoucherNumber = Common.GetNewVoucherNo("TJV");
                    boamodel.BOAValue = netAmt;
                    boamodel.TransactionTypeCode = "DOP";
                    boamodel.TempVoucherNumber = billnumber;
                    boamodel.RefTransactionCode = "DOP";
                    boamodel.RefNumber = billnumber;
                    foreach (var itm in model.ExpenseDetail)
                    {
                        txList.Add(new BOATransactionModel()
                        {
                            AccountHeadId = itm.AccountHeadId,
                            Amount = itm.Amount,
                            TransactionType = itm.TransactionType,
                        });
                        if (itm.AccountGroupId == 38)
                        {
                            if (model.PaymentTypeId == 1)
                            {
                                BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                                {
                                    TransactionType = itm.TransactionType,
                                    BankHeadID = itm.AccountHeadId,
                                    Amount = itm.Amount,
                                    ReferenceNumber = billnumber,
                                    ReferenceDate = DateTime.Now,
                                    PayeeId = billid,
                                    PayeeType = "Distribution",
                                    PaymentMode = 2,
                                    Reconciliation_f = false,

                                });
                            }
                            if (model.PaymentTypeId == 2)
                            {
                                BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                                {
                                    TransactionType = itm.TransactionType,
                                    BankHeadID = itm.AccountHeadId,
                                    Amount = itm.Amount,
                                    ReferenceNumber = billnumber,
                                    ReferenceDate = DateTime.Now,
                                    PayeeId = billid,
                                    PayeeType = "Honororium",
                                    PaymentMode = 2,
                                    Reconciliation_f = false,

                                });
                            }
                            if (model.PaymentTypeId == 3)
                            {
                                BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                                {
                                    TransactionType = itm.TransactionType,
                                    BankHeadID = itm.AccountHeadId,
                                    Amount = itm.Amount,
                                    ReferenceNumber = billnumber,
                                    ReferenceDate = DateTime.Now,
                                    PayeeId = billid,
                                    PayeeType = "Consultancy Receipt",
                                    PaymentMode = 2,
                                    Reconciliation_f = false,

                                });
                            }
                        }
                    }
                    foreach (var itm in model.DeductionDetail)
                    {
                        if (itm.DeductionHeadId != null)
                        {
                            txList.Add(new BOATransactionModel()
                            {
                                AccountHeadId = itm.DeductionHeadId,
                                Amount = itm.Amount,
                                TransactionType = itm.DeductionType,
                            });
                        }
                    }
                    txList.Add(new BOATransactionModel()
                    {
                        Amount = netAmt,
                        TransactionType = "Credit",
                        Creditor_f = true,
                    });

                    boamodel.BOATransaction = txList;
                    boamodel.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(boamodel);

                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public DistributionOHPostingModel GetPCFDOHPaymentDetails(int paytype, int paynumber)
        {
            try
            {
                DistributionOHPostingModel model = new DistributionOHPostingModel();
                List<DistributionOHDetailModel> overheads = new List<DistributionOHDetailModel>();
                List<DistributionOHPCFCreditsModel> pcf = new List<DistributionOHPCFCreditsModel>();
                List<DistributionOtherShareDetailModel> OtherShareDetails = new List<DistributionOtherShareDetailModel>();

                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {
                    if (paytype == 1)
                    {
                        var disquery = (from c in context.tblDistribution
                                        join pjct in context.tblProject on c.ProjectId equals pjct.ProjectId
                                        join user in context.vwFacultyStaffDetails on pjct.PIName equals user.UserId
                                        where c.DistributionId == paynumber && (c.OHP_F == false || c.OHP_F == null)
                                        select new { c, pjct, user }).FirstOrDefault();
                        var ohdetails = (from c in context.tblDistributeInstituteOHBreakup
                                         join d in context.tblDistribution on c.DistributionId equals d.DistributionId
                                         where c.DistributionId == paynumber
                                         && (c.Pmt_f == false || c.Pmt_f == null)
                                         select new { c, d }).ToList();
                        model.ProjectNumber = disquery.pjct.ProjectNumber;
                        model.TotalDistributionAmount = disquery.c.DistributionAmount;
                        if (disquery.c.EUCOAmount > 0)
                        {
                            List<MasterlistviewModel> EUCObank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> EUCOprojectnumb = new List<MasterlistviewModel>();
                            var piid = disquery.c.PIId;
                            var piname = disquery.user.FirstName;
                            EUCObank = Common.GetBankList(7);
                            EUCOprojectnumb = Common.GetProjectNumberList(piid, 7);
                            OtherShareDetails.Add(new DistributionOtherShareDetailModel()
                            {
                                Head = "EUCO",
                                PIId = piid,
                                NameofPI = piname,
                                Amount = disquery.c.EUCOAmount,
                                ProjectNumber = EUCOprojectnumb,
                                PaymentType = paytype,
                                Bank = EUCObank,
                            });
                        }
                        //if(disquery.c.AmountToIITAccount > 0)
                        //{
                        //    List<MasterlistviewModel> powerandwaterbank = new List<MasterlistviewModel>();
                        //    //List<MasterlistviewModel> powerandwaterprojectnumb = new List<MasterlistviewModel>();\
                        //    var piid = disquery.c.PIId;
                        //    powerandwaterbank = Common.GetBankList(14);
                        //   // EUCOprojectnumb = Common.GetProjectNumberList(piid, 7);
                        //    OtherShareDetails.Add(new DistributionOtherShareDetailModel()
                        //    {
                        //        PaymentId = disquery.c.DistributionId,
                        //        Head = "EUCO",
                        //        Amount = disquery.c.EUCOAmount,
                        //        //ProjectNumber = EUCOprojectnumb,
                        //        Bank = powerandwaterbank,
                        //    });
                        //}

                        for (int i = 0; i < ohdetails.Count(); i++)
                        {
                            var piid = ohdetails[i].d.PIId;
                            List<MasterlistviewModel> pioverheadbank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> piohprojectnumb = new List<MasterlistviewModel>();

                            var classificationcode = 0;
                            if (ohdetails[i].c.InstituteOverheadTypeId == 1)
                            {
                                classificationcode = 11;
                            }
                            if (ohdetails[i].c.InstituteOverheadTypeId == 2)
                            {
                                classificationcode = 5;
                            }
                            if (ohdetails[i].c.InstituteOverheadTypeId == 3)
                            {
                                classificationcode = 4;
                            }
                            if (ohdetails[i].c.InstituteOverheadTypeId == 4)
                            {
                                classificationcode = 12;
                            }
                            if (ohdetails[i].c.InstituteOverheadTypeId == 5)
                            {
                                classificationcode = 6;
                            }
                            pioverheadbank = Common.GetBankList(classificationcode);
                            if (ohdetails[i].c.InstituteOverheadTypeId == 2)
                            {
                                var department = disquery.user.DepartmentName;
                                piohprojectnumb = Common.GetDDFProjectNumberList(department);
                            }
                            else
                            {
                                piohprojectnumb = Common.GetProjectNumberList(piid, classificationcode);
                            }

                            overheads.Add(new DistributionOHDetailModel()
                            {
                                OverheadsType = ohdetails[i].c.InstituteOverheadType,
                                OverheadsTypeId = ohdetails[i].c.InstituteOverheadTypeId,
                                OverheadsAmount = ohdetails[i].c.InstituteOverheadAmount,
                                OverheadsPercent = ohdetails[i].c.InstituteOverheadPercentage,
                                Bank = pioverheadbank,
                                ProjectNumber = piohprojectnumb,
                            });
                        }

                        var pcfdetails = (from c in context.tblDistributionPCFDetails
                                          join d in context.tblDistribution on c.DistributionId equals d.DistributionId
                                          where c.DistributionId == paynumber
                                          && (c.Pmt_f == false || c.Pmt_f == null)
                                          select new { c, d }).ToList();
                        for (int i = 0; i < pcfdetails.Count(); i++)
                        {
                            List<MasterlistviewModel> pipcfbank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> pipcfprojectnumb = new List<MasterlistviewModel>();
                            var piid = Convert.ToInt32(pcfdetails[i].c.PCFPIUserId);
                            pipcfbank = Common.GetBankList(2);
                            pipcfprojectnumb = Common.GetProjectNumberList(piid, 2);
                            pcf.Add(new DistributionOHPCFCreditsModel()
                            {
                                NameofPI = pcfdetails[i].c.PCFPIName,
                                PIId = piid,
                                Bank = pipcfbank,
                                ProjectNumber = pipcfprojectnumb,
                                Amount = pcfdetails[i].c.PCFAmount,
                            });
                        }
                    }
                    if (paytype == 2)
                    {

                        var pcfdetails = (from c in context.tblHonororiumPCFDetail
                                          join d in context.tblHonororium on c.HonororiumId equals d.HonororiumId
                                          where c.HonororiumId == paynumber
                                          && (c.Pmt_f == false || c.Pmt_f == null)
                                          select new { c, d }).ToList();
                        for (int i = 0; i < pcfdetails.Count(); i++)
                        {
                            List<MasterlistviewModel> pipcfbank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> pipcfprojectnumb = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> pioverheadbank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> piohprojectnumb = new List<MasterlistviewModel>();

                            var piid = pcfdetails[i].c.PayeeID;
                            var classificationcode = 4;
                            pipcfbank = Common.GetBankList(2);
                            pipcfprojectnumb = Common.GetProjectNumberList(piid, 2);
                            piohprojectnumb = Common.GetProjectNumberList(piid, classificationcode);
                            pioverheadbank = Common.GetBankList(classificationcode);
                            pcf.Add(new DistributionOHPCFCreditsModel()
                            {
                                NameofPI = pcfdetails[i].c.PayeeName,
                                PIId = pcfdetails[i].c.PayeeID,
                                Bank = pipcfbank,
                                ProjectNumber = pipcfprojectnumb,
                                Amount = pcfdetails[i].c.PayableToPCF,
                            });
                            overheads.Add(new DistributionOHDetailModel()
                            {
                                OverheadsType = "ICSR OH",
                                OverheadsTypeId = 3,
                                OverheadsAmount = pcfdetails[i].c.PayableToOH,
                                OverheadsPercent = 5,
                                Bank = pioverheadbank,
                                ProjectNumber = piohprojectnumb,
                            });
                        }
                    }
                    if (paytype == 3)
                    {
                        var rcvquery = (from c in context.tblReceipt
                                        join pjct in context.tblProject on c.ProjectId equals pjct.ProjectId
                                        join user in context.vwFacultyStaffDetails on pjct.PIName equals user.UserId
                                        where c.ReceiptId == paynumber && (c.OHP_F == false || c.OHP_F == null)
                                        select new { c, pjct, user }).FirstOrDefault();
                        var ohdetails = (from c in context.tblReceiptOverheadBreakup
                                         join d in context.tblReceipt on c.ReceiptId equals d.ReceiptId
                                         join o in context.tblOverheadsPercentage on c.ReceiptOverheadTypeId equals o.OverheadsTypeId
                                         where c.ReceiptId == paynumber
                                         && (c.IsPosted_f == false || c.IsPosted_f == null)
                                         select new { c, d, o }).ToList();
                        //model.ProjectNumber = rcvquery.pjct.ProjectNumber;
                        //model.TotalDistributionAmount = disquery.c.DistributionAmount;

                        for (int i = 0; i < ohdetails.Count(); i++)
                        {
                            var piid = rcvquery.pjct.PIName;
                            List<MasterlistviewModel> pioverheadbank = new List<MasterlistviewModel>();
                            List<MasterlistviewModel> piohprojectnumb = new List<MasterlistviewModel>();

                            var classificationcode = 0;
                            if (ohdetails[i].c.ReceiptOverheadType.Contains("Corpus"))
                            {
                                classificationcode = 11;
                            }
                            if (ohdetails[i].c.ReceiptOverheadType.Contains("ICSROH"))
                            {
                                classificationcode = 4;
                            }

                            pioverheadbank = Common.GetBankList(classificationcode);
                            piohprojectnumb = Common.GetProjectNumberList(piid, classificationcode);

                            overheads.Add(new DistributionOHDetailModel()
                            {
                                OverheadsType = ohdetails[i].c.ReceiptOverheadType,
                                OverheadsTypeId = ohdetails[i].c.ReceiptOverheadTypeId,
                                OverheadsAmount = ohdetails[i].c.ReceiptOverheadAmount,
                                OverheadsPercent = ohdetails[i].o.Percentage,
                                Bank = pioverheadbank,
                                ProjectNumber = piohprojectnumb,
                            });
                        }
                    }

                }
                model.PCFCreditDetails = pcf;
                model.OverheadsDetails = overheads;
                model.OtherShareDetails = OtherShareDetails;
                return model;
            }
            catch (Exception ex)
            {
                return new DistributionOHPostingModel();
            }
        }
        public bool getPCFDOHReceiptBOAmodeldetails(int paymentId, int id, string paymenttype)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == paymentId);
                    var subledger = 0;
                    if (paymenttype == "Receipt")
                    {
                        subledger = 2;
                    }
                    if (paymenttype == "Distribution")
                    {
                        subledger = 3;
                    }

                    if (billQuery != null)
                    {

                        model.TempVoucherNumber = billQuery.ReceiptNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 4;
                        model.VoucherNumber = billQuery.ReceiptNumber;
                        model.BOAValue = billQuery.NetTransactionValue;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.ReceiptNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblReceiptRecivables
                                  where exp.ReceiptId == paymentId
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.ReceivablesHeadId,
                                      Amount = exp.ReceivabesAmount,
                                      TransactionType = exp.TransactionType
                                  }).ToList();
                        txList.Add(new BOATransactionModel()
                        {
                            Amount = billQuery.ReceivedAmount,
                            TransactionType = "Credit",
                            Creditor_f = true,
                            SubLedgerType = subledger,
                            SubLedgerId = id,
                        });
                        var payment = (from exp in context.tblReceiptRecivables
                                       join hd in context.tblAccountHead on exp.ReceivablesHeadId equals hd.AccountHeadId
                                       join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                       where exp.ReceiptId == paymentId && (g.AccountGroupId == 38 || g.AccountGroupId == 19 || g.AccountGroupId == 18)
                                       select new
                                       {
                                           exp.TransactionType,
                                           exp.ReceivablesHeadId,
                                           exp.ReceivabesAmount,
                                           hd.AccountHead,
                                       }).FirstOrDefault();
                        if (payment != null)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = payment.TransactionType,
                                BankHeadID = payment.ReceivablesHeadId,
                                Amount = payment.ReceivabesAmount,
                                ReferenceNumber = billQuery.ReceiptNumber,
                                ReferenceDate = billQuery.CrtdTS,
                                PayeeType = paymenttype,
                                PayeeId = id,
                                PaymentMode = 2,
                                Remarks = model.Narration,
                                Reconciliation_f = false,

                            });
                        }

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public DistributionOHPostingModel GetPCFDOHViewDetails(int OverheadsPostingId)
        {
            try
            {
                DistributionOHPostingModel model = new DistributionOHPostingModel();
                List<DistributionOHDetailModel> overheads = new List<DistributionOHDetailModel>();
                List<DistributionOHPCFCreditsModel> pcf = new List<DistributionOHPCFCreditsModel>();
                List<DistributionOtherShareDetailModel> OtherShareDetails = new List<DistributionOtherShareDetailModel>();

                //bool interstate_f = stateCode == "33" ? false : true;
                using (var context = new IOASDBEntities())
                {
                    if (OverheadsPostingId > 0)
                    {
                        var query = context.tblPCFDistribution.FirstOrDefault(m => m.Id == OverheadsPostingId && m.TransactionTypeCode == "DOP");
                        model.OverheadsPostingNumber = query.ReferenceNumber;
                        model.PaymentTypeId = query.TypeofPayment;
                        model.PaymentNumberId = query.PaymentId;
                        if (query != null)
                        {
                            if (query.TypeofPayment == 1)
                            {

                                var disquery = (from c in context.tblDistribution
                                                join pjct in context.tblProject on c.ProjectId equals pjct.ProjectId
                                                join user in context.vwFacultyStaffDetails on pjct.PIName equals user.UserId
                                                where c.DistributionId == query.PaymentId
                                                select new { c, pjct, user }).FirstOrDefault();

                                var pcfquery = (from c in context.tblPCFDistributionPCFDetails
                                                join d in context.tblDistribution on c.PaymentId equals d.DistributionId
                                                where c.DistributionOHId == OverheadsPostingId
                                                select new { c, d }).ToList();
                                var ohquery = (from c in context.tblDistributionOHPDetails
                                               join d in context.tblDistribution on c.DistributionId equals d.DistributionId
                                               where c.DistributionOHId == OverheadsPostingId
                                               select new { c, d }).ToList();
                                var otherdetails = (from c in context.tblPCFDistributionOtherPosting
                                                    join d in context.tblDistribution on c.PaymentId equals d.DistributionId
                                                    where c.DistributionOHId == OverheadsPostingId
                                                    select new { c, d }).ToList();
                                model.ProjectNumber = disquery.pjct.ProjectNumber;
                                model.TotalDistributionAmount = disquery.c.DistributionAmount;
                                if (otherdetails.Count() > 0)
                                {
                                    for (int i = 0; i < otherdetails.Count(); i++)
                                    {
                                        List<MasterlistviewModel> EUCObank = new List<MasterlistviewModel>();
                                        List<MasterlistviewModel> EUCOprojectnumb = new List<MasterlistviewModel>();
                                        var piid = otherdetails[i].c.PIId;
                                        var piname = otherdetails[i].c.PIName;
                                        EUCObank = Common.GetBankList(7);
                                        EUCOprojectnumb = Common.GetProjectNumberList(piid, 7);
                                        OtherShareDetails.Add(new DistributionOtherShareDetailModel()
                                        {
                                            Head = "EUCO",
                                            PIId = piid,
                                            NameofPI = piname,
                                            Amount = otherdetails[i].c.Amount,
                                            Id = otherdetails[i].c.ProjectId,
                                            BankId = otherdetails[i].c.BankId,
                                            Bank = EUCObank,
                                            ProjectNumber = EUCOprojectnumb,
                                        });
                                    }
                                }
                                if (ohquery.Count() > 0)
                                {
                                    for (int i = 0; i < ohquery.Count(); i++)
                                    {
                                        List<MasterlistviewModel> ohbank = new List<MasterlistviewModel>();
                                        List<MasterlistviewModel> ohprojectnumb = new List<MasterlistviewModel>();
                                        ohbank = Common.GetAllBankList();
                                        var dept = disquery.user.DepartmentName;
                                        if (ohquery[i].c.OverheadTypeId == 2)
                                        {
                                            ohprojectnumb = Common.GetDDFProjectNumberList(dept);
                                        }
                                        else
                                        {
                                            ohprojectnumb = Common.GetProjectNumbers();
                                        }
                                        overheads.Add(new DistributionOHDetailModel()
                                        {
                                            OverheadsType = ohquery[i].c.OverheadType,
                                            OverheadsTypeId = ohquery[i].c.OverheadTypeId,
                                            OverheadsAmount = ohquery[i].c.OverheadAmount,
                                            // OverheadsPercent = ohquery[i].c.InstituteOverheadPercentage,
                                            BankId = ohquery[i].c.OverheadBankId,
                                            Id = ohquery[i].c.OverheadProjectId,
                                            Bank = ohbank,
                                            ProjectNumber = ohprojectnumb,
                                        });
                                    }
                                }
                                if (pcfquery.Count() > 0)
                                {
                                    for (int i = 0; i < pcfquery.Count(); i++)
                                    {
                                        List<MasterlistviewModel> PCFbank = new List<MasterlistviewModel>();
                                        List<MasterlistviewModel> PCFprojectnumb = new List<MasterlistviewModel>();
                                        var piid = pcfquery[i].d.PIId;
                                        PCFbank = Common.GetAllBankList();
                                        PCFprojectnumb = Common.GetProjectNumberList(piid, 2);
                                        pcf.Add(new DistributionOHPCFCreditsModel()
                                        {
                                            NameofPI = pcfquery[i].c.PIName,
                                            PIId = pcfquery[i].d.PIId,
                                            BankId = pcfquery[i].c.PCFBankId,
                                            Id = pcfquery[i].c.PCFProjectId,
                                            Amount = pcfquery[i].c.Amount,
                                            Bank = PCFbank,
                                            ProjectNumber = PCFprojectnumb
                                        });
                                    }
                                }
                                model.ExpenseDetail = (from e in context.tblDistributionOHPExpenseDetail
                                                       where e.PaymentType == 1 && e.PaymentId == model.PaymentNumberId && e.DistributionOHId == OverheadsPostingId && e.Status == "Active"
                                                       select new
                                                       {
                                                           e.AccountHeadId,
                                                           e.Amount,
                                                           e.AccountGroupId,
                                                           e.DistributionOHPExpenseDetailId,
                                                           e.TransactionType,
                                                           e.IsJV_f
                                                       })
                                                   .AsEnumerable()
                                                   .Select((x) => new BillExpenseDetailModel()
                                                   {
                                                       AccountHeadId = x.AccountHeadId,
                                                       TransactionType = x.TransactionType,
                                                       Amount = x.Amount,
                                                       AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                       AccountGroupId = x.AccountGroupId,
                                                       AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                       BillExpenseDetailId = x.DistributionOHPExpenseDetailId,
                                                       IsJV = x.IsJV_f ?? false
                                                   }).ToList();

                                model.DeductionDetail = (from d in context.tblDistributionOHPDeductionDetail
                                                         join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                         join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                         join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                         where d.PaymentType == 1 && d.PaymentId == model.PaymentNumberId && d.DistributionOHId == OverheadsPostingId && d.Status == "Active"
                                                         select new BillDeductionDetailModel()
                                                         {
                                                             AccountGroupId = d.AccountGroupId,
                                                             BillDeductionDetailId = d.DistributionOHPDeductionDetailId,
                                                             Amount = d.Amount,
                                                             DeductionHeadId = d.DeductionHeadId,
                                                             AccountGroup = g.AccountGroup,
                                                             DeductionHead = hd.AccountHead
                                                         }).ToList();
                            }

                            if (query.TypeofPayment == 2)
                            {
                                var disquery = (from c in context.tblHonororium
                                                where c.HonororiumId == query.PaymentId
                                                select c).FirstOrDefault();

                                var pcfquery = (from c in context.tblPCFDistributionPCFDetails
                                                join d in context.tblHonororium on c.PaymentId equals d.HonororiumId
                                                where c.DistributionOHId == OverheadsPostingId
                                                select new { c, d }).ToList();
                                for (int i = 0; i < pcfquery.Count(); i++)
                                {
                                    var piid = pcfquery[i].c.PIId;
                                    List<MasterlistviewModel> PCFbank = new List<MasterlistviewModel>();
                                    List<MasterlistviewModel> PCFprojectnumb = new List<MasterlistviewModel>();
                                    PCFbank = Common.GetAllBankList();
                                    PCFprojectnumb = Common.GetProjectNumberList(piid, 2);
                                    pcf.Add(new DistributionOHPCFCreditsModel()
                                    {
                                        NameofPI = pcfquery[i].c.PIName,
                                        PIId = pcfquery[i].c.PIId,
                                        BankId = pcfquery[i].c.PCFBankId,
                                        ProjectId = pcfquery[i].c.PCFProjectId,
                                        Amount = pcfquery[i].c.Amount,
                                        Bank = PCFbank,
                                        ProjectNumber = PCFprojectnumb
                                    });
                                }
                                var ohquery = (from c in context.tblDistributionOHPDetails
                                               join d in context.tblHonororium on c.DistributionId equals d.HonororiumId
                                               where c.DistributionOHId == OverheadsPostingId
                                               select new { c, d }).ToList();

                                if (ohquery.Count() > 0)
                                {
                                    for (int i = 0; i < ohquery.Count(); i++)
                                    {
                                        List<MasterlistviewModel> ohbank = new List<MasterlistviewModel>();
                                        List<MasterlistviewModel> ohprojectnumb = new List<MasterlistviewModel>();
                                        ohbank = Common.GetAllBankList();
                                        ohprojectnumb = Common.GetProjectNumbers();

                                        overheads.Add(new DistributionOHDetailModel()
                                        {
                                            OverheadsType = ohquery[i].c.OverheadType,
                                            OverheadsTypeId = ohquery[i].c.OverheadTypeId,
                                            OverheadsAmount = ohquery[i].c.OverheadAmount,
                                            // OverheadsPercent = ohquery[i].c.InstituteOverheadPercentage,
                                            BankId = ohquery[i].c.OverheadBankId,
                                            Id = ohquery[i].c.OverheadProjectId,
                                            Bank = ohbank,
                                            ProjectNumber = ohprojectnumb,
                                        });
                                    }
                                }
                                model.ExpenseDetail = (from e in context.tblDistributionOHPExpenseDetail
                                                       where e.PaymentType == 2 && e.PaymentId == model.PaymentNumberId && e.DistributionOHId == OverheadsPostingId && e.Status == "Active"
                                                       select new
                                                       {
                                                           e.AccountHeadId,
                                                           e.Amount,
                                                           e.AccountGroupId,
                                                           e.DistributionOHPExpenseDetailId,
                                                           e.TransactionType,
                                                           e.IsJV_f
                                                       })
                                                   .AsEnumerable()
                                                   .Select((x) => new BillExpenseDetailModel()
                                                   {
                                                       AccountHeadId = x.AccountHeadId,
                                                       TransactionType = x.TransactionType,
                                                       Amount = x.Amount,
                                                       AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                       AccountGroupId = x.AccountGroupId,
                                                       AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                       BillExpenseDetailId = x.DistributionOHPExpenseDetailId,
                                                       IsJV = x.IsJV_f ?? false
                                                   }).ToList();

                                model.DeductionDetail = (from d in context.tblDistributionOHPDeductionDetail
                                                         join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                         join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                         join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                         where d.PaymentType == 2 && d.PaymentId == model.PaymentNumberId && d.DistributionOHId == OverheadsPostingId && d.Status == "Active"
                                                         select new BillDeductionDetailModel()
                                                         {
                                                             AccountGroupId = d.AccountGroupId,
                                                             BillDeductionDetailId = d.DistributionOHPDeductionDetailId,
                                                             Amount = d.Amount,
                                                             DeductionHeadId = d.DeductionHeadId,
                                                             AccountGroup = g.AccountGroup,
                                                             DeductionHead = hd.AccountHead
                                                         }).ToList();
                            }

                            if (query.TypeofPayment == 3)
                            {

                                var rcvquery = (from c in context.tblReceipt
                                                join pjct in context.tblProject on c.ProjectId equals pjct.ProjectId
                                                join user in context.vwFacultyStaffDetails on pjct.PIName equals user.UserId
                                                where c.ReceiptId == query.PaymentId
                                                select new { c, pjct, user }).FirstOrDefault();

                                var ohquery = (from c in context.tblDistributionOHPDetails
                                               join d in context.tblReceipt on c.DistributionId equals d.ReceiptId
                                               where c.DistributionOHId == OverheadsPostingId
                                               select new { c, d }).ToList();

                                if (ohquery.Count() > 0)
                                {
                                    for (int i = 0; i < ohquery.Count(); i++)
                                    {
                                        List<MasterlistviewModel> ohbank = new List<MasterlistviewModel>();
                                        List<MasterlistviewModel> ohprojectnumb = new List<MasterlistviewModel>();
                                        ohbank = Common.GetAllBankList();
                                        var dept = rcvquery.user.DepartmentName;
                                        if (ohquery[i].c.OverheadTypeId == 2)
                                        {
                                            ohprojectnumb = Common.GetDDFProjectNumberList(dept);
                                        }
                                        else
                                        {
                                            ohprojectnumb = Common.GetProjectNumbers();
                                        }
                                        overheads.Add(new DistributionOHDetailModel()
                                        {
                                            OverheadsType = ohquery[i].c.OverheadType,
                                            OverheadsTypeId = ohquery[i].c.OverheadTypeId,
                                            OverheadsAmount = ohquery[i].c.OverheadAmount,
                                            // OverheadsPercent = ohquery[i].c.InstituteOverheadPercentage,
                                            BankId = ohquery[i].c.OverheadBankId,
                                            Id = ohquery[i].c.OverheadProjectId,
                                            Bank = ohbank,
                                            ProjectNumber = ohprojectnumb,
                                        });
                                    }
                                }
                                model.ExpenseDetail = (from e in context.tblDistributionOHPExpenseDetail
                                                       where e.PaymentType == 3 && e.PaymentId == model.PaymentNumberId && e.DistributionOHId == OverheadsPostingId && e.Status == "Active"
                                                       select new
                                                       {
                                                           e.AccountHeadId,
                                                           e.Amount,
                                                           e.AccountGroupId,
                                                           e.DistributionOHPExpenseDetailId,
                                                           e.TransactionType,
                                                           e.IsJV_f
                                                       })
                                                   .AsEnumerable()
                                                   .Select((x) => new BillExpenseDetailModel()
                                                   {
                                                       AccountHeadId = x.AccountHeadId,
                                                       TransactionType = x.TransactionType,
                                                       Amount = x.Amount,
                                                       AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                       AccountGroupId = x.AccountGroupId,
                                                       AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                       BillExpenseDetailId = x.DistributionOHPExpenseDetailId,
                                                       IsJV = x.IsJV_f ?? false
                                                   }).ToList();

                                model.DeductionDetail = (from d in context.tblDistributionOHPDeductionDetail
                                                         join dh in context.tblDeductionHead on d.DeductionHeadId equals dh.DeductionHeadId
                                                         join hd in context.tblAccountHead on dh.AccountHeadId equals hd.AccountHeadId
                                                         join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                         where d.PaymentType == 3 && d.PaymentId == model.PaymentNumberId && d.DistributionOHId == OverheadsPostingId && d.Status == "Active"
                                                         select new BillDeductionDetailModel()
                                                         {
                                                             AccountGroupId = d.AccountGroupId,
                                                             BillDeductionDetailId = d.DistributionOHPDeductionDetailId,
                                                             Amount = d.Amount,
                                                             DeductionHeadId = d.DeductionHeadId,
                                                             AccountGroup = g.AccountGroup,
                                                             DeductionHead = hd.AccountHead
                                                         }).ToList();
                            }
                        }
                    }

                }
                model.PCFCreditDetails = pcf;
                model.OverheadsDetails = overheads;
                model.OtherShareDetails = OtherShareDetails;
                return model;
            }
            catch (Exception ex)
            {
                return new DistributionOHPostingModel();
            }
        }
        public List<MasterlistviewModel> GetPaymentNumberList(int paymenttype)
        {
            try
            {

                List<MasterlistviewModel> Numberlist = new List<MasterlistviewModel>();
                Numberlist.Add(new MasterlistviewModel()
                {
                    id = null,
                    name = "Select Any"
                });
                using (var context = new IOASDBEntities())
                {
                    if (paymenttype == 1)
                    {
                        var query = (from C in context.tblDistribution
                                     where ((C.OHP_F == false || C.OHP_F == null) && C.Status == "Completed")
                                     select C).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].DistributionId,
                                name = query[i].DistributionNumber,
                            });
                        }
                    }
                    if (paymenttype == 2)
                    {
                        var query = (from C in context.tblHonororium
                                     join D in context.tblHonororiumPCFDetail on C.HonororiumId equals D.HonororiumId
                                     where ((C.OHP_F == false || C.OHP_F == null) && C.Status == "Approved" && D.PayeeID > 0)
                                     select new { C, D }).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].C.HonororiumId,
                                name = query[i].C.HonororiumNo,
                            });
                        }
                    }
                    if (paymenttype == 3)
                    {
                        var query = (from C in context.tblReceipt
                                     join p in context.tblProject on C.ProjectId equals p.ProjectId
                                     where ((C.OHP_F == false || C.OHP_F == null) && C.Status == "Completed") && p.ProjectType == 2 && C.ReceiptNumber.Contains("RCV")
                                     select C).ToList();
                        for (int i = 0; i < query.Count(); i++)
                        {
                            Numberlist.Add(new MasterlistviewModel()
                            {
                                id = query[i].ReceiptId,
                                name = query[i].ReceiptNumber,
                            });
                        }
                    }
                }

                return Numberlist;
            }
            catch (Exception ex)
            {
                return null;
            }

        }
        #endregion


        #region Institute Claims
        public int CreateInstitueClaims(InstituteClaims model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        if (model.InstituteClaimId > 0)
                        {
                            var query = context.tblInstituteClaims.Where(m => m.InstituteClaimsId == model.InstituteClaimId).FirstOrDefault();
                            if (query != null)
                            {
                                //  query.BudgetHead = model.BudgetHead;
                                query.BudgetHeadId = model.BudegetHeadId;
                                query.ExpenseTypeId = model.ExpenseId;
                                query.ClaimAmount = model.ClaimAmount;
                                query.ClaimDate = model.ClaimDate;
                                query.SpendAmount = model.AvailableBalance;
                                query.CommitmentId = model.CommitmentId;
                                // query.ClaimType = model.ClaimType;
                                query.ClaimTypeId = model.ClaimTypeId;
                                query.Description = model.Description;
                                query.FacilityUsed = model.FacilityUsed;
                                // query.FacilityUsedId = model.FacilityUsedId;
                                query.Others = model.Others;
                                query.ProjectFundReversal_f = Convert.ToBoolean(model.PublicFundR == "1" ? true : false);
                                query.ProjectId = model.Projectid;
                                //query.ProjectNo = model.Projectno;
                                query.PurchaseNo = model.PurchaseNo;
                                query.TravelBillNo = model.TravelBillNo;
                                query.UPDT_By = LoggedInUser;
                                query.UPDT_TS = DateTime.Now;
                                string actName = System.IO.Path.GetFileName(model.AttachmentFile.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                model.AttachmentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                query.AttachmentActualName = actName;
                                query.AttachmentName = docName;
                                context.SaveChanges();
                                context.tblInstituteClaimsExpenseDetail.RemoveRange(context.tblInstituteClaimsExpenseDetail.Where(m => m.InstituteClaimsId == model.InstituteClaimId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblInstituteClaimsExpenseDetail HonExp = new tblInstituteClaimsExpenseDetail();
                                    HonExp.InstituteClaimsId = model.InstituteClaimId;
                                    HonExp.AccountGroupId = item.AccountGroupId;
                                    HonExp.AccountHeadId = item.AccountHeadId;
                                    HonExp.Amount = item.Amount;
                                    HonExp.TransactionType = item.TransactionType;
                                    HonExp.CRTD_By = LoggedInUser;
                                    HonExp.IsJV_f = item.IsJV;
                                    HonExp.CRTD_TS = DateTime.Now;
                                    HonExp.Status = "Active";
                                    context.tblInstituteClaimsExpenseDetail.Add(HonExp);
                                    context.SaveChanges();
                                }
                                transaction.Commit();
                                return model.InstituteClaimId;
                            }
                            else
                            {
                                return -2;
                            }

                        }
                        else
                        {

                            tblInstituteClaims Ins = new tblInstituteClaims();
                            //Ins.BudgetHead = model.BudgetHead;
                            Ins.BudgetHeadId = model.BudegetHeadId;
                            Ins.ExpenseTypeId = model.ExpenseId;
                            Ins.ClaimAmount = model.ClaimAmount;
                            Ins.ClaimDate = model.ClaimDate;
                            Ins.SpendAmount = model.AvailableBalance;
                            Ins.CommitmentId = model.CommitmentId;
                            // Ins.ClaimType = model.ClaimType;
                            Ins.ClaimTypeId = model.ClaimTypeId;
                            Ins.CRTD_By = LoggedInUser;
                            Ins.CRTD_TS = DateTime.Now;
                            Ins.Description = model.Description;
                            Ins.FacilityUsed = model.FacilityUsed;
                            //Ins.FacilityUsedId = model.FacilityUsedId;
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;
                            var Sequencenumber = Common.getinstituteclaimsid();
                            if (Sequencenumber != null && Sequencenumber != "")
                            {
                                model.InstituteClaimNumber = "RIC" + "/" + FinYear + "/" + Sequencenumber;
                            }
                            else
                            {
                                model.InstituteClaimNumber = "RIC" + "/" + FinYear + "/" + "000001";
                            }
                            Ins.InstituteClaimsNumber = model.InstituteClaimNumber;
                            Ins.ProjectFundReversal_f = model.PublicFundReversal;
                            Ins.ProjectId = model.Projectid;
                            Ins.PurchaseNo = model.PurchaseNo;
                            Ins.TravelBillNo = model.TravelBillNo;
                            Ins.Others = model.Others;
                            Ins.Status = "Open";
                            string actName = System.IO.Path.GetFileName(model.AttachmentFile.FileName);
                            var guid = Guid.NewGuid().ToString();
                            var docName = guid + "_" + actName;
                            model.AttachmentFile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                            Ins.AttachmentActualName = actName;
                            Ins.AttachmentName = docName;
                            context.tblInstituteClaims.Add(Ins);
                            context.SaveChanges();
                            var insid = Ins.InstituteClaimsId;
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblInstituteClaimsExpenseDetail HonExp = new tblInstituteClaimsExpenseDetail();
                                HonExp.InstituteClaimsId = insid;
                                HonExp.AccountGroupId = item.AccountGroupId;
                                HonExp.AccountHeadId = item.AccountHeadId;
                                HonExp.Amount = item.Amount;
                                HonExp.TransactionType = item.TransactionType;
                                HonExp.CRTD_By = LoggedInUser;
                                HonExp.IsJV_f = item.IsJV;
                                HonExp.CRTD_TS = DateTime.Now;
                                HonExp.Status = "Active";
                                context.tblInstituteClaimsExpenseDetail.Add(HonExp);
                                context.SaveChanges();
                            }
                            transaction.Commit();
                            return insid;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }


        }
        public bool CreateReceiptInstitueClaims(InstituteClaims model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        var query = context.tblInstituteClaims.Where(m => m.InstituteClaimsId == model.InstituteClaimId).FirstOrDefault();
                        query.Status = "Completed";
                        context.SaveChanges();
                        var recid = model.InstituteClaimId;
                        tblReceiptClaim Ins = new tblReceiptClaim();
                        Ins.ReceiptDate = model.ReceiptDate;
                        Ins.InstituteClaimsId = model.InstituteClaimId;
                        Ins.ReceiptValue = model.ReceiptValue;
                        Ins.CRTD_By = LoggedInUser;
                        Ins.CRTD_TS = DateTime.Now;
                        Ins.Comments = model.Comments;
                        var financialyear = Common.GetCurrentFinYear();
                        var FinYear = financialyear;
                        var Sequencenumber = Common.getreceiptinstituteclaimsid();
                        if (Sequencenumber != null && Sequencenumber != "")
                        {
                            model.ReceiptNumber = "CRE" + "/" + FinYear + "/" + Sequencenumber;
                        }
                        else
                        {
                            model.ReceiptNumber = "CRE" + "/" + FinYear + "/" + "000001";
                        }
                        Ins.ReceiptClaimsNumber = model.ReceiptNumber;
                        Ins.Status = "Open";
                        string actName = System.IO.Path.GetFileName(model.AttachmentFil.FileName);
                        var guid = Guid.NewGuid().ToString();
                        var docName = guid + "_" + actName;
                        model.AttachmentFil.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                        Ins.AttachmentActualName = actName;
                        Ins.AttachmentName = docName;
                        Ins.BankHeadId = model.BankHeadId;
                        context.tblReceiptClaim.Add(Ins);
                        context.SaveChanges();
                        var reid = Ins.ReceiptClaimsId;

                        tblReceiptClaimsdetail rec = new tblReceiptClaimsdetail();
                        rec.BankDate = model.ModeOfReceipt == 2 ? model.TransDate : null;
                        rec.BankRefNo = model.BankRefNo;
                        rec.BankValue = model.ModeOfReceipt == 2 ? model.RecAmount : 0;
                        rec.ChequeDate = model.ModeOfReceipt == 1 ? model.TransDate : null;
                        rec.ChequeNo = model.ChequeNo;
                        rec.ChequeValue = model.ModeOfReceipt == 1 ? model.RecAmount : 0;
                        rec.CRTD_By = LoggedInUser;
                        rec.CRTD_TS = DateTime.Now;
                        rec.ModeOfReceipt = model.ModeOfReceipt;
                        rec.ReceiptClaimsId = reid;
                        context.tblReceiptClaimsdetail.Add(rec);
                        context.SaveChanges();

                        foreach (var item in model.ExpenseDetai)
                        {
                            tblReceiptClaimsExpenseDetail HonExp = new tblReceiptClaimsExpenseDetail();
                            HonExp.InstituteClaimsId = recid;
                            HonExp.AccountGroupId = item.AccountGroupI;
                            HonExp.AccountHeadId = item.AccountHeadI;
                            HonExp.Amount = item.Amoun;
                            HonExp.TransactionType = item.TransactionTyp;
                            HonExp.CRTD_By = LoggedInUser;
                            HonExp.IsJV_f = item.IsJ;
                            HonExp.CRTD_TS = DateTime.Now;
                            HonExp.Status = "Active";
                            context.tblReceiptClaimsExpenseDetail.Add(HonExp);
                            context.SaveChanges();
                        }

                        BOAModel modl = new BOAModel();
                        List<BOATransactionModel> txLit = new List<BOATransactionModel>();

                        //var billQuery = context.tblReceiptClaim.Where(m => m.InstituteClaimsId == model.InstituteClaimId).FirstOrDefault();

                        decimal netAmt = Ins.ReceiptValue ?? 0;
                        modl.TempVoucherNumber = Ins.ReceiptClaimsNumber;
                        modl.PostedDate = DateTime.Now;
                        modl.VoucherType = 1;
                        modl.VoucherNumber = Ins.ReceiptClaimsNumber;
                        modl.BOAValue = netAmt;
                        modl.TransactionTypeCode = "CRE";
                        modl.RefNumber = Ins.ReceiptClaimsNumber;
                        modl.RefTransactionCode = "CRE";

                        txLit = (from exp in model.ExpenseDetai
                                 select new BOATransactionModel()
                                 {
                                     AccountHeadId = exp.AccountHeadI,
                                     Amount = exp.Amoun,
                                     TransactionType = exp.TransactionTyp
                                 }).ToList();
                        modl.BOATransaction = txLit;
                        bool isvalid = BOATransaction(modl);
                        if (!isvalid)
                            return isvalid;
                        //OtherReceiptModel mol = new OtherReceiptModel();                                               
                        //    mol.ClassificationOfReceipt = 2;
                        //    mol.Remarks = query.InstituteClaimsNumber;
                        //    mol.ModeOfReceipt = Convert.ToInt32(model.ModeOfReceipt);
                        //    mol.ProjectId = Convert.ToInt32(query.ProjectId);
                        //    mol.IsProject = true;

                        //List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();

                        //    expense = (from exp in model.ExpenseDetai
                        //              select new BillExpenseDetailModel()
                        //              {
                        //                  AccountHeadId = exp.AccountHeadI,
                        //                  Amount = exp.Amoun,
                        //                  TransactionType = exp.TransactionTyp
                        //              }).ToList();
                        //mol.ExpenseDetail = expense;                       
                        //tblReceiptClaimsdetail reci = new tblReceiptClaimsdetail();
                        //var returnReceiptId = OtherReceiptIU(mol, LoggedInUser);
                        //reci.ReturnReceiptId = returnReceiptId;
                        BOAModel mdl = new BOAModel();
                        List<BillCommitmentDetailModel> txList = new List<BillCommitmentDetailModel>();
                        var comdet = context.tblCommitmentDetails.Where(m => m.CommitmentId == query.CommitmentId).FirstOrDefault();
                        txList.Add(new BillCommitmentDetailModel()
                        {

                            CommitmentDetailId = comdet.ComitmentDetailId,
                            PaymentAmount = query.ClaimAmount,
                            CommitmentId = query.CommitmentId
                        });
                        Int32 billId = query.InstituteClaimsId;
                        bool revoke = false;
                        bool isReversed = true;
                        int userId = LoggedInUser;
                        string tcode = "RIC";
                        bool isValid = UpdateCommitmentBalance(txList, revoke, isReversed, userId, billId, tcode);
                        if (!isValid)
                            return isValid;
                        transaction.Commit();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }


        }
        public InstituteClaims GetInstitueClaimsDetails(int claimid, bool receipt = false)
        {
            try
            {
                InstituteClaims Inc = new InstituteClaims();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblInstituteClaims.Where(m => m.InstituteClaimsId == claimid).FirstOrDefault();
                    if (query != null)
                    {
                        // Inc.BudgetHead = query.BudgetHead;
                        Inc.InstituteClaimNumber = query.InstituteClaimsNumber;
                        Inc.ExpenseId = Convert.ToInt32(query.ExpenseTypeId);
                        Inc.ReceiptId = receipt == true ? 1 : 0;
                        Inc.InstituteClaimId = query.InstituteClaimsId;
                        Inc.BudegetHeadId = Convert.ToInt32(query.BudgetHeadId);
                        Inc.ClaimAmount = Convert.ToDecimal(query.ClaimAmount);
                        Inc.ClaimDate = query.ClaimDate;
                        Inc.AvailableBalance = Convert.ToDecimal(query.SpendAmount);
                        Inc.CommitmentId = Convert.ToInt32(query.CommitmentId);
                        //Inc.ClaimType = query.ClaimType;
                        Inc.ClaimTypeId = Convert.ToInt32(query.ClaimTypeId);
                        Inc.Description = query.Description;
                        Inc.FacilityUsed = query.FacilityUsed;
                        //Inc.FacilityUsedId = Convert.ToInt32(query.FacilityUsedId);
                        Inc.Others = query.Others;
                        Inc.PublicFundR = Convert.ToString(query.ProjectFundReversal_f == true ? "1" : "2");
                        Inc.Projectid = Convert.ToInt32(query.ProjectId);
                        Inc.Projectno = Common.GetProjectNumber(Convert.ToInt32(query.ProjectId));
                        Inc.PurchaseNo = query.PurchaseNo;
                        Inc.TravelBillNo = query.TravelBillNo;
                        Inc.AttachmentActualName = query.AttachmentActualName;
                        Inc.AttachmentName = query.AttachmentName;
                        Inc.AttachmentPath = "~/Content/OtherDocuments";

                        var qry = context.tblReceiptClaim.Where(m => m.InstituteClaimsId == claimid).FirstOrDefault();
                        if (qry != null)
                        {
                            Inc.ReceiptDate = qry.ReceiptDate;
                            Inc.ReceiptRefNumber = qry.ReceiptClaimsNumber;
                            Inc.ReceiptValue = Convert.ToDecimal(qry.ReceiptValue);
                            Inc.ReceiptTotalAmount = Convert.ToDecimal(qry.ReceiptValue);
                            Inc.AttachmentActualNam = qry.AttachmentActualName;
                            Inc.AttachmentNam = qry.AttachmentName;
                            Inc.AttachmentPat = "~/Content/OtherDocuments";
                            var REC = (from d in context.tblReceiptClaimsdetail
                                       where d.ReceiptClaimsId == qry.ReceiptClaimsId
                                       select new { d }).FirstOrDefault();
                            Inc.ChequeNo = REC.d.ChequeNo;
                            Inc.BankRefNo = REC.d.BankRefNo;
                            Inc.TransDate = REC.d.ModeOfReceipt == 1 ? REC.d.ChequeDate : REC.d.BankDate;
                            Inc.RecAmount = Convert.ToDecimal(REC.d.ModeOfReceipt == 1 ? REC.d.ChequeValue : REC.d.BankValue);
                            Inc.ModeOfReceipt = Convert.ToInt32(REC.d.ModeOfReceipt);

                        }
                        Inc.ExpenseDetail = (from e in context.tblInstituteClaimsExpenseDetail
                                             where e.InstituteClaimsId == query.InstituteClaimsId && e.Status == "Active"
                                             select new
                                             {
                                                 e.AccountHeadId,
                                                 e.Amount,
                                                 e.AccountGroupId,
                                                 e.InstituteClaimsExpenseDetailId,
                                                 e.TransactionType,
                                                 e.IsJV_f

                                             })
                                          .AsEnumerable()
                                          .Select((x) => new BillExpenseDetailModel()
                                          {
                                              AccountHeadId = x.AccountHeadId,
                                              TransactionType = x.TransactionType,
                                              Amount = x.Amount,
                                              AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                              AccountGroupId = x.AccountGroupId,
                                              AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                              BillExpenseDetailId = x.InstituteClaimsExpenseDetailId,
                                              IsJV = x.IsJV_f ?? false

                                          }).ToList();
                        if (qry != null)
                        {
                            Inc.ExpenseDetai = (from e in context.tblReceiptClaimsExpenseDetail
                                                where e.InstituteClaimsId == query.InstituteClaimsId && e.Status == "Active"
                                                select new
                                                {
                                                    e.AccountHeadId,
                                                    e.Amount,
                                                    e.AccountGroupId,
                                                    e.ReceiptClaimsExpenseDetailId,
                                                    e.TransactionType,
                                                    e.IsJV_f

                                                })
                                         .AsEnumerable()
                                         .Select((x) => new ClaimsExpenseDetailModel()
                                         {
                                             AccountHeadI = x.AccountHeadId,
                                             TransactionTyp = x.TransactionType,
                                             Amoun = x.Amount,
                                             AccountGroupLis = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                             AccountGroupI = x.AccountGroupId,
                                             AccountHeadLis = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                             BillExpenseDetailI = x.ReceiptClaimsExpenseDetailId,
                                             IsJ = x.IsJV_f ?? false

                                         }).ToList();
                        }
                    }
                    return Inc;
                }
            }
            catch (Exception ex)
            {
                return new InstituteClaims();
            }
        }
        public List<InstituteClaims> GetInstitueClaimsList()
        {
            try
            {
                List<InstituteClaims> list = new List<InstituteClaims>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblInstituteClaims
                            orderby d.InstituteClaimsId descending
                            where d.Status != "InActive"
                            select new
                            {
                                d.InstituteClaimsId,
                                d.InstituteClaimsNumber,
                                d.CRTD_TS,
                                d.ClaimAmount,
                                d.ClaimTypeId,
                                d.Status
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new InstituteClaims()
                                 {
                                     SlNo = index + 1,
                                     InstituteClaimId = x.InstituteClaimsId,
                                     InstituteClaimNumber = x.InstituteClaimsNumber,
                                     ClaimType = Common.GetClaimType(Convert.ToInt32(x.ClaimTypeId)),
                                     InstituteClaimDate = String.Format("{0:dd-MMMM-yyyy}", x.CRTD_TS),
                                     ClaimAmount = Convert.ToDecimal(x.ClaimAmount),
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<InstituteClaims>();
            }
        }
        public bool InstitueClaimsBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblInstituteClaims.FirstOrDefault(m => m.InstituteClaimsId == id);
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.ClaimAmount ?? 0;
                        model.TempVoucherNumber = billQuery.InstituteClaimsNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = billQuery.InstituteClaimsNumber;
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "RIC";
                        model.RefNumber = billQuery.InstituteClaimsNumber;
                        model.RefTransactionCode = "RIC";
                        txList = (from exp in context.tblInstituteClaimsExpenseDetail
                                  where exp.InstituteClaimsId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType

                                  })
                             .ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool InstitueClaimsReceiptBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblReceiptClaim.Where(m => m.InstituteClaimsId == id).FirstOrDefault();
                    if (billQuery != null)
                    {
                        decimal netAmt = billQuery.ReceiptValue ?? 0;
                        model.TempVoucherNumber = billQuery.ReceiptClaimsNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 1;
                        model.VoucherNumber = billQuery.ReceiptClaimsNumber;
                        model.BOAValue = netAmt;
                        model.TransactionTypeCode = "CRE";
                        model.RefNumber = billQuery.ReceiptClaimsNumber;
                        model.RefTransactionCode = "CRE";
                        txList = (from exp in context.tblReceiptClaimsExpenseDetail
                                  where exp.InstituteClaimsId == id && exp.Status == "Active"
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.AccountHeadId,
                                      Amount = exp.Amount,
                                      TransactionType = exp.TransactionType
                                  })
                             .ToList();
                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool getInstitueClaimsReceiptdetails(int paymentId, int loggedInUser)
        {
            try
            {
                OtherReceiptModel model = new OtherReceiptModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblInstituteClaims.Where(m => m.InstituteClaimsId == paymentId).FirstOrDefault();
                    var rec = context.tblReceiptClaim.Where(m => m.InstituteClaimsId == paymentId).FirstOrDefault();
                    if (query != null)
                    {
                        var qry = (from C in context.tblInstituteClaims
                                   join R in context.tblReceiptClaimsdetail on C.InstituteClaimsId equals R.InstituteClaimsId
                                   where C.InstituteClaimsId == paymentId
                                   select new { R }).ToList();
                        var exp = (from C in context.tblInstituteClaims
                                   join R in context.tblReceiptClaimsExpenseDetail on C.InstituteClaimsId equals R.InstituteClaimsId
                                   where C.InstituteClaimsId == paymentId
                                   select new { R }).ToList();
                        for (int i = 0; i < qry.Count(); i++)
                        {
                            model.ClassificationOfReceipt = 2;
                            model.Remarks = query.InstituteClaimsNumber;
                            model.ModeOfReceipt = Convert.ToInt32(qry[i].R.ModeOfReceipt);
                            model.ProjectId = Convert.ToInt32(query.ProjectId);
                            model.IsProject = true;
                            List<BillExpenseDetailModel> expense = new List<BillExpenseDetailModel>();
                            expense.Add(new BillExpenseDetailModel()
                            {
                                AccountHeadId = rec.BankHeadId,
                                TransactionType = "Debit",
                                Amount = exp[i].R.Amount,
                                AccountGroupId = 38,
                            });
                            expense.Add(new BillExpenseDetailModel()
                            {
                                AccountHeadId = 304,
                                TransactionType = "Credit",
                                Amount = exp[i].R.Amount,
                                AccountGroupId = 19,
                            });
                            model.ExpenseDetail = expense;
                            var returnReceiptId = OtherReceiptIU(model, loggedInUser);
                            qry[i].R.ReturnReceiptId = returnReceiptId;
                            context.SaveChanges();
                        }
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }

        }
        #endregion
        #endregion
        #region Receipt
        public int CreateReceipt(CreateReceiptModel model, int LoggedInUser, HttpPostedFileBase tdsfile)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int ReceiptId = 0;
                        if (model.ReceiptID > 0)
                        {
                            var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == model.ReceiptID);
                            if (query != null)
                            {
                                var currentreceiptvalue = query.ReceiptAmount;
                                if (model.ReceiptAmount > (model.InvoiceValue - (model.PreviousReceiptTotal - query.ReceiptAmount)))
                                {
                                    return -7;
                                }
                                query.UpdtUserId = LoggedInUser;
                                query.UpdtTS = DateTime.Now;
                                query.ReceiptDate = DateTime.Parse(model.ReceiptDateString);
                                query.ReceiptAmount = model.ReceiptAmount;
                                query.Description = model.Narration;
                                query.PaymentMode = model.ModeofReceipt;
                                query.ReceivedFrom = model.ReceivedFromCr;
                                query.ReceivedAmount = model.ReceivedAmountCr;
                                query.BankAccountHeadDr = model.BankACHeadDr;
                                query.BankAmountDr = model.BankAmountDr;
                                query.ReceivablesTotal = model.ReceivablesTotal;
                                query.ReceiptNumber = model.ReceiptNumber;
                                query.ReceiptOverheadValue = model.CurrentReceiptOverheads;
                                query.RMForCMF = model.RMForCMF;
                                query.CGST = model.ReceiptCGST;
                                query.SGST = model.ReceiptSGST;
                                query.IGST = model.ReceiptIGST;
                                if (model.ModeofReceipt == 1)
                                {
                                    query.NetTransactionValue = model.TotalChequeValue;
                                }
                                if (model.ModeofReceipt == 2)
                                {
                                    query.NetTransactionValue = model.TotalDDValue;
                                }
                                if (model.ModeofReceipt == 3)
                                {
                                    query.NetTransactionValue = model.TotalBankTransactionAmount;
                                }
                                if (model.ModeofReceipt == 4)
                                {
                                    query.NetTransactionValue = model.Foreignremittotalamount;
                                }
                                if (model.ModeofReceipt == 5)
                                {
                                    query.NetTransactionValue = 0;
                                }
                                if (query.BankAmountDr != query.NetTransactionValue)
                                {
                                    return -6;
                                }
                                query.Status = "Approval Pending";
                                context.SaveChanges();
                                var rcv = (from R in context.tblReceipt
                                           where R.InvoiceId == model.InvoiceId
                                           select R).ToList();
                                var rcvcrnote = (from R in context.tblCreditNote
                                                 where R.InvoiceId == model.InvoiceId && R.Status == "Completed"
                                                 select R).ToList();
                                var crnoteamt = rcvcrnote.Select(m => m.TotalCreditAmount).Sum() ?? 0;
                                var rcvamt = rcv.Select(m => m.ReceiptAmount).Sum();
                                var rcvbal = (model.InvoiceValue - crnoteamt) - rcvamt;
                                if (rcvbal <= 0)
                                {
                                    var invquery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                                    invquery.Status = "Completed";
                                    context.SaveChanges();
                                }
                                if (rcvbal > 0)
                                {
                                    var invquery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                                    if (invquery.Status == "Completed")
                                    {
                                        invquery.Status = "Active";
                                        context.SaveChanges();
                                    }
                                }

                                //var rcvalloc = (from R in context.tblReceiptAllocation
                                //                where R.ReceiptId == model.ReceiptID 
                                //                select R).ToList();

                                //int allocdelCount = rcvalloc.Count();
                                //if (allocdelCount > 0)
                                //{
                                //    for (int i = 0; i < allocdelCount; i++)
                                //    {
                                //        context.Entry(rcvalloc[i]).State = System.Data.Entity.EntityState.Deleted;
                                //        context.SaveChanges();                                    
                                //    }

                                //    for (int i = 0; i < model.BudgetHead.Count(); i++)
                                //    {
                                //        tblReceiptAllocation ReceiptAllocation = new tblReceiptAllocation();
                                //        ReceiptAllocation.ReceiptId = model.ReceiptID;
                                //        ReceiptAllocation.ProjectId = model.ProjectID;
                                //        ReceiptAllocation.InvoiceId = model.InvoiceId;
                                //        ReceiptAllocation.BudgetHead = model.BudgetHead[i];
                                //        ReceiptAllocation.Amount = model.Allocationvalue[i];
                                //        ReceiptAllocation.CrtdTS = DateTime.Now;
                                //        ReceiptAllocation.CrtdUserId = LoggedInUser;
                                //        context.tblReceiptAllocation.Add(ReceiptAllocation);
                                //        context.SaveChanges();
                                //    }
                                //}
                                var rcvagncyshare = (from R in context.tblReceiptAgencyShareDetails
                                                     where R.ReceiptId == model.ReceiptID
                                                     select R).ToList();
                                int rcvagncysharedelCount = rcvagncyshare.Count();
                                if (rcvagncysharedelCount > 0)
                                {
                                    for (int i = 0; i < rcvagncysharedelCount; i++)
                                    {
                                        context.Entry(rcvagncyshare[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }

                                    for (int i = 0; i < model.AgencyId.Count(); i++)
                                    {
                                        tblReceiptAgencyShareDetails Agency = new tblReceiptAgencyShareDetails();
                                        Agency.ReceiptId = model.ReceiptID;
                                        Agency.ReceiptAgencyHeadId = model.AgencyId[i];
                                        Agency.ReceiptAgencyName = model.Agencyname[i];
                                        Agency.ReceiptAgencyAmount = model.AgencyShareAmount[i];
                                        Agency.CRTD_By = LoggedInUser;
                                        Agency.CRTD_TS = DateTime.Now;
                                        Agency.Status = "Active";
                                        context.tblReceiptAgencyShareDetails.Add(Agency);
                                        context.SaveChanges();
                                    }
                                }

                                var rcvreceiv = (from R in context.tblReceiptRecivables
                                                 where R.ReceiptId == model.ReceiptID
                                                 select R).ToList();
                                int receivdelCount = rcvreceiv.Count();
                                if (receivdelCount > 0)
                                {
                                    for (int i = 0; i < receivdelCount; i++)
                                    {
                                        context.Entry(rcvreceiv[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }

                                    for (int i = 0; i < model.ReceivablesHeadId.Count(); i++)
                                    {
                                        tblReceiptRecivables Receivables = new tblReceiptRecivables();
                                        Receivables.ReceiptId = model.ReceiptID;
                                        Receivables.ReceivablesHeadId = model.ReceivablesHeadId[i];
                                        Receivables.ReceivablesHeadName = model.Receivablesheadname[i];
                                        Receivables.ReceivabesAmount = model.ReceivablesAmount[i];
                                        Receivables.CrtdUserId = LoggedInUser;
                                        Receivables.CrtdTS = DateTime.Now;
                                        context.tblReceiptRecivables.Add(Receivables);
                                        context.SaveChanges();

                                    }
                                }
                                var rcvtrans = (from R in context.tblReceiptTransactionDetails
                                                where R.ReceiptId == model.ReceiptID
                                                select R).ToList();
                                int transdelCount = rcvtrans.Count();
                                if (transdelCount > 0)
                                {
                                    for (int i = 0; i < transdelCount; i++)
                                    {
                                        context.Entry(rcvtrans[i]).State = System.Data.Entity.EntityState.Deleted;
                                        context.SaveChanges();
                                    }
                                }

                                var transactioncount = 0;
                                if (model.ModeofReceipt == 1)
                                {
                                    transactioncount = model.ChequeNumber.Count();
                                }
                                if (model.ModeofReceipt == 2)
                                {
                                    transactioncount = model.DDNumber.Count();
                                }
                                if (model.ModeofReceipt == 3)
                                {
                                    transactioncount = model.BankTransactionrefno.Count();
                                }
                                if (model.ModeofReceipt == 4)
                                {
                                    transactioncount = model.Foreignremittransrefno.Count();
                                }
                                if (model.ModeofReceipt == 5)
                                {
                                    transactioncount = model.TDSCertificateNumber.Count();
                                }
                                CultureInfo MyCultureInfo = new CultureInfo("en-US");
                                for (int i = 0; i < transactioncount; i++)
                                {
                                    var tdsdocname = "";
                                    if (tdsfile != null)
                                    {
                                        string tdsfilepath = " ";
                                        tdsfilepath = System.IO.Path.GetFileName(tdsfile.FileName);
                                        var tdsdocfileId = Guid.NewGuid().ToString();
                                        tdsdocname = tdsdocfileId + "_" + tdsfilepath;
                                        /*Saving the file in server folder*/
                                        tdsfile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + tdsdocname));
                                    }
                                    tblReceiptTransactionDetails Transaction = new tblReceiptTransactionDetails();
                                    Transaction.ReceiptId = model.ReceiptID;
                                    Transaction.ModeofPayment = model.ModeofReceipt;
                                    if (model.ModeofReceipt == 1)
                                    {

                                        Transaction.TransactionNumber = Convert.ToString(model.ChequeNumber[i]);
                                        // string date = model.Chqdate[i].Replace("-", " ");
                                        Transaction.TransactionDate = DateTime.Parse(model.Chqdate[i]);
                                        Transaction.TransactionBankName = model.ChequeBankName[i];
                                        if (model.Chqclrdate[i] != "")
                                        {
                                            Transaction.TransactionClearanceDate = DateTime.Parse(model.Chqclrdate[i]);
                                        }
                                        Transaction.TransactionBankBranch = model.ChequeBankBranch[i];
                                        Transaction.TransactionAmount = model.ChequeValue[i];
                                    }
                                    if (model.ModeofReceipt == 2)
                                    {
                                        Transaction.TransactionNumber = Convert.ToString(model.DDNumber[i]);
                                        Transaction.TransactionDate = DateTime.Parse(model.Dddte[i]);
                                        Transaction.TransactionBankName = model.DDBankName[i];
                                        Transaction.TransactionBankBranch = model.DDBankBranch[i];
                                        Transaction.TransactionAmount = model.DDValue[i];
                                    }
                                    if (model.ModeofReceipt == 3)
                                    {
                                        Transaction.TransactionNumber = model.BankTransactionrefno[i];
                                        Transaction.TransactionDate = DateTime.Parse(model.Banktransdate[i]);
                                        Transaction.TransactionBankName = model.BankTransferBankName[i];
                                        Transaction.TransactionBankBranch = model.BankTransferBankBranch[i];
                                        Transaction.TransactionType = model.BankTransactiontype[i];
                                        Transaction.TransactionAmount = model.BankTransferAmount[i];
                                    }
                                    if (model.ModeofReceipt == 4)
                                    {
                                        Transaction.TransactionNumber = model.Foreignremittransrefno[i];
                                        Transaction.TransactionDate = DateTime.Parse(model.Forgnremitdate[i]);
                                        Transaction.ForeignRemitCountry = model.Foreigntransfercountry[i];
                                        Transaction.ForeignRemitCurrency = model.Foreigntransfercurrency[i];

                                        Transaction.ForeignCurrencyAmount = model.Foreigncurrencyamount[i];
                                        Transaction.TransactionBankName = model.Foreignremitbankname[i];
                                        Transaction.TransactionBankBranch = model.Foreignremitbankbranch[i];
                                        Transaction.ConversionRate = model.Conversionrate[i];
                                        Transaction.TransactionAmount = model.INRValue[i];
                                    }
                                    if (model.ModeofReceipt == 5)
                                    {
                                        Transaction.TransactionNumber = model.TDSCertificateNumber[i];
                                        if (tdsfile != null)
                                        {
                                            Transaction.DocPath = tdsdocname;
                                            Transaction.DocName = tdsfile.FileName;
                                        }
                                    }

                                    Transaction.CrtdUserId = LoggedInUser;
                                    Transaction.CrtdTS = DateTime.Now;
                                    context.tblReceiptTransactionDetails.Add(Transaction);
                                    context.SaveChanges();
                                }
                                if (model.ReceiptOverheads != null)
                                {
                                    context.tblReceiptOverheadBreakup.RemoveRange(context.tblReceiptOverheadBreakup.Where(m => m.ReceiptId == model.ReceiptID));
                                    context.SaveChanges();
                                    foreach (var item in model.ReceiptOverheads)
                                    {

                                        tblReceiptOverheadBreakup breakup = new tblReceiptOverheadBreakup();
                                        breakup.ReceiptId = model.ReceiptID;
                                        breakup.ReceiptOverheadTypeId = item.OverheadtypeId;
                                        breakup.ReceiptOverheadType = item.Overheadtypename;
                                        if (item.OverheadtypeId == 2 && item.Overheadtypename.Contains("Expenses Payable RMF"))
                                        {
                                            breakup.IsRMF_f = true;
                                        }
                                        if (item.OverheadtypeId == 2 && item.Overheadtypename.Contains("Expenses Payable CMF"))
                                        {
                                            breakup.ISCMF_f = true;
                                        }
                                        breakup.ReceiptOverheadAmount = item.OverheadAmount;
                                        breakup.CrtdUserId = LoggedInUser;
                                        breakup.CrtdTS = DateTime.Now;
                                        breakup.Status = "Active";
                                        context.tblReceiptOverheadBreakup.Add(breakup);
                                        context.SaveChanges();
                                    }
                                }
                                ReceiptId = -5;
                            }
                            else
                            {
                                ReceiptId = -2;
                            }
                        }
                        else
                        {
                            tblReceipt Receipt = new tblReceipt();
                            Receipt.CrtdUserId = LoggedInUser;
                            Receipt.CrtdTS = DateTime.Now;
                            Receipt.ProjectId = model.ProjectID;
                            Receipt.InvoiceId = model.InvoiceId;
                            Receipt.ReceiptDate = DateTime.Parse(model.ReceiptDateString);
                            Receipt.ReceiptAmount = model.ReceiptAmount;
                            Receipt.Description = model.Narration;
                            Receipt.PaymentMode = model.ModeofReceipt;
                            Receipt.ReceivedFrom = model.ReceivedFromCr;
                            Receipt.ReceivedAmount = model.ReceivedAmountCr;
                            Receipt.BankAccountHeadDr = model.BankACHeadDr;
                            Receipt.BankAmountDr = model.BankAmountDr;
                            Receipt.ReceivablesTotal = model.ReceivablesTotal;
                            Receipt.ReceiptOverheadValue = model.CurrentReceiptOverheads;
                            Receipt.RMForCMF = model.RMForCMF;
                            Receipt.CGST = model.ReceiptCGST;
                            Receipt.SGST = model.ReceiptSGST;
                            Receipt.IGST = model.ReceiptIGST;
                            if (model.ModeofReceipt == 1)
                            {
                                Receipt.NetTransactionValue = model.TotalChequeValue;
                            }
                            if (model.ModeofReceipt == 2)
                            {
                                Receipt.NetTransactionValue = model.TotalDDValue;
                            }
                            if (model.ModeofReceipt == 3)
                            {
                                Receipt.NetTransactionValue = model.TotalBankTransactionAmount;
                            }
                            if (model.ModeofReceipt == 4)
                            {
                                Receipt.NetTransactionValue = model.Foreignremittotalamount;
                            }
                            if (model.ModeofReceipt == 5)
                            {
                                Receipt.NetTransactionValue = 0;
                            }
                            if (Receipt.BankAmountDr != Receipt.NetTransactionValue)
                            {
                                return -6;
                            }
                            Receipt.Status = "Approval Pending";
                            var financialyear = Common.GetCurrentFinYear();
                            var FinYear = financialyear;

                            //var Sequencenumber = Common.getReceiptId();
                            //if (Sequencenumber != null && Sequencenumber != "")
                            //{
                            //    model.ReceiptNumber = "RCV/" + FinYear + "/" + Sequencenumber;
                            //}
                            //else
                            //{
                            //    model.ReceiptNumber = "RCV/" + FinYear + "/000001";
                            //}
                            Receipt.ReceiptNumber = Common.GetNewReceiptNumber();
                            context.tblReceipt.Add(Receipt);
                            context.SaveChanges();
                            ReceiptId = Receipt.ReceiptId;
                            var rcv = (from R in context.tblReceipt
                                       where R.InvoiceId == model.InvoiceId
                                       select R).ToList();
                            var rcvcrnote = (from R in context.tblCreditNote
                                             where R.InvoiceId == model.InvoiceId && R.Status == "Completed"
                                             select R).ToList();
                            var crnoteamt = rcvcrnote.Select(m => m.TotalCreditAmount).Sum() ?? 0;
                            var rcvamt = rcv.Select(m => m.ReceiptAmount).Sum();
                            var rcvbal = (model.InvoiceValue - crnoteamt) - rcvamt;
                            if (rcvbal <= 0)
                            {
                                var invquery = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                                invquery.Status = "Completed";
                                context.SaveChanges();
                            }
                            if (ReceiptId > 0)
                            {
                                //for (int i = 0; i < model.BudgetHead.Count(); i++)
                                //{
                                //    tblReceiptAllocation ReceiptAllocation = new tblReceiptAllocation();
                                //    ReceiptAllocation.ReceiptId = ReceiptId;
                                //    ReceiptAllocation.ProjectId = model.ProjectID;
                                //    ReceiptAllocation.InvoiceId = model.InvoiceId;
                                //    ReceiptAllocation.BudgetHead = model.BudgetHead[i];
                                //    ReceiptAllocation.Amount = model.Allocationvalue[i];
                                //    ReceiptAllocation.CrtdTS = DateTime.Now;
                                //    ReceiptAllocation.CrtdUserId = LoggedInUser;
                                //    context.tblReceiptAllocation.Add(ReceiptAllocation);
                                //    context.SaveChanges();
                                //}

                                for (int i = 0; i < model.ReceivablesHeadId.Count(); i++)
                                {
                                    tblReceiptRecivables Receivables = new tblReceiptRecivables();
                                    Receivables.ReceiptId = ReceiptId;
                                    Receivables.ReceivablesHeadId = model.ReceivablesHeadId[i];
                                    Receivables.ReceivablesHeadName = model.Receivablesheadname[i];
                                    Receivables.ReceivabesAmount = model.ReceivablesAmount[i];
                                    Receivables.CrtdUserId = LoggedInUser;
                                    Receivables.CrtdTS = DateTime.Now;
                                    context.tblReceiptRecivables.Add(Receivables);
                                    context.SaveChanges();
                                }
                                var transactioncount = 0;
                                if (model.ModeofReceipt == 1)
                                {
                                    transactioncount = model.ChequeNumber.Count();
                                }
                                if (model.ModeofReceipt == 2)
                                {
                                    transactioncount = model.DDNumber.Count();
                                }
                                if (model.ModeofReceipt == 3)
                                {
                                    transactioncount = model.BankTransactionrefno.Count();
                                }
                                if (model.ModeofReceipt == 4)
                                {
                                    transactioncount = model.Foreignremittransrefno.Count();
                                }
                                if (model.ModeofReceipt == 5)
                                {
                                    transactioncount = model.TDSCertificateNumber.Count();
                                }
                                for (int i = 0; i < transactioncount; i++)
                                {
                                    var tdsdocname = "";
                                    if (tdsfile != null)
                                    {
                                        string tdsfilepath = " ";
                                        tdsfilepath = System.IO.Path.GetFileName(tdsfile.FileName);
                                        var tdsdocfileId = Guid.NewGuid().ToString();
                                        tdsdocname = tdsdocfileId + "_" + tdsfilepath;
                                        /*Saving the file in server folder*/
                                        tdsfile.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + tdsdocname));
                                    }
                                    tblReceiptTransactionDetails Transaction = new tblReceiptTransactionDetails();
                                    Transaction.ReceiptId = ReceiptId;
                                    Transaction.ModeofPayment = model.ModeofReceipt;
                                    if (model.ModeofReceipt == 1)
                                    {
                                        Transaction.TransactionNumber = Convert.ToString(model.ChequeNumber[i]);
                                        Transaction.TransactionDate = DateTime.Parse(model.Chqdate[i]);
                                        Transaction.TransactionBankName = model.ChequeBankName[i];
                                        if (model.Chqclrdate[i] != "")
                                        {
                                            Transaction.TransactionClearanceDate = DateTime.Parse(model.Chqclrdate[i]);
                                        }
                                        Transaction.TransactionBankBranch = model.ChequeBankBranch[i];
                                        Transaction.TransactionAmount = model.ChequeValue[i];
                                    }
                                    if (model.ModeofReceipt == 2)
                                    {
                                        Transaction.TransactionNumber = Convert.ToString(model.DDNumber[i]);
                                        Transaction.TransactionDate = DateTime.Parse(model.Dddte[i]);
                                        Transaction.TransactionBankName = model.DDBankName[i];
                                        Transaction.TransactionBankBranch = model.DDBankBranch[i];
                                        Transaction.TransactionAmount = model.DDValue[i];
                                    }
                                    if (model.ModeofReceipt == 3)
                                    {
                                        Transaction.TransactionNumber = model.BankTransactionrefno[i];
                                        Transaction.TransactionDate = DateTime.Parse(model.Banktransdate[i]);
                                        Transaction.TransactionBankName = model.BankTransferBankName[i];
                                        Transaction.TransactionBankBranch = model.BankTransferBankBranch[i];
                                        Transaction.TransactionType = model.BankTransactiontype[i];
                                        Transaction.TransactionAmount = model.BankTransferAmount[i];
                                    }
                                    if (model.ModeofReceipt == 4)
                                    {
                                        Transaction.TransactionNumber = model.Foreignremittransrefno[i];
                                        Transaction.TransactionDate = DateTime.Parse(model.Forgnremitdate[i]);
                                        Transaction.ForeignRemitCountry = model.Foreigntransfercountry[i];
                                        Transaction.ForeignRemitCurrency = model.Foreigntransfercurrency[i];
                                        Transaction.TransactionBankName = model.Foreignremitbankname[i];
                                        Transaction.TransactionBankBranch = model.Foreignremitbankbranch[i];

                                        Transaction.ForeignCurrencyAmount = model.Foreigncurrencyamount[i];
                                        Transaction.ConversionRate = model.Conversionrate[i];
                                        Transaction.TransactionAmount = model.INRValue[i];
                                    }
                                    if (model.ModeofReceipt == 5)
                                    {
                                        Transaction.TransactionNumber = model.TDSCertificateNumber[i];
                                        Transaction.DocPath = tdsdocname;
                                        Transaction.DocName = tdsfile.FileName;
                                    }
                                    Transaction.CrtdUserId = LoggedInUser;
                                    Transaction.CrtdTS = DateTime.Now;
                                    context.tblReceiptTransactionDetails.Add(Transaction);
                                    context.SaveChanges();
                                }
                                if (model.AgencyId != null)
                                {
                                    for (int i = 0; i < model.AgencyId.Count(); i++)
                                    {
                                        tblReceiptAgencyShareDetails Agency = new tblReceiptAgencyShareDetails();
                                        Agency.ReceiptId = ReceiptId;
                                        Agency.ReceiptAgencyHeadId = model.AgencyId[i];
                                        Agency.ReceiptAgencyName = model.Agencyname[i];
                                        Agency.ReceiptAgencyAmount = model.AgencyShareAmount[i];
                                        Agency.CRTD_By = LoggedInUser;
                                        Agency.CRTD_TS = DateTime.Now;
                                        Agency.Status = "Active";
                                        context.tblReceiptAgencyShareDetails.Add(Agency);
                                        context.SaveChanges();

                                    }
                                }
                                if (model.ReceiptOverheads != null)
                                {
                                    foreach (var item in model.ReceiptOverheads)
                                    {

                                        tblReceiptOverheadBreakup breakup = new tblReceiptOverheadBreakup();
                                        breakup.ReceiptId = ReceiptId;
                                        breakup.ReceiptOverheadTypeId = item.OverheadtypeId;
                                        breakup.ReceiptOverheadType = item.Overheadtypename;
                                        if (item.OverheadtypeId == 2 && item.Overheadtypename.Contains("Expenses Payable RMF"))
                                        {
                                            breakup.IsRMF_f = true;
                                        }
                                        if (item.OverheadtypeId == 2 && item.Overheadtypename.Contains("Expenses Payable CMF"))
                                        {
                                            breakup.ISCMF_f = true;
                                        }
                                        breakup.ReceiptOverheadAmount = item.OverheadAmount;
                                        breakup.CrtdUserId = LoggedInUser;
                                        breakup.CrtdTS = DateTime.Now;
                                        breakup.Status = "Active";
                                        context.tblReceiptOverheadBreakup.Add(breakup);
                                        context.SaveChanges();
                                    }
                                }
                            }
                        }
                        transaction.Commit();
                        return ReceiptId;

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }


        public BOAModel getBOAmodeldetails(CreateReceiptModel model)
        {
            try
            {
                BOAModel BOA = new BOAModel();
                List<BOATransactionModel> BOATrans = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                List<BOADetailModel> BOADetail = new List<BOADetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var agency = (from a in context.tblAgencyMaster
                                  where a.AgencyId == model.ReceivedFromCr
                                  select a).FirstOrDefault();
                    BOA.PostedDate = DateTime.Parse(model.ReceiptDateString);
                    BOA.VoucherType = 4;
                    BOA.VoucherNumber = model.ReceiptNumber;
                    BOA.TempVoucherNumber = model.ReceiptNumber;
                    BOA.RefNumber = model.ReceiptNumber;
                    BOA.TransactionTypeCode = "RCV";
                    BOA.RefTransactionCode = "RCV";
                    BOA.Narration = model.Narration;
                    BOA.PaymentMode = model.ModeofReceipt;
                    BOA.Status = "Posted";
                    BOA.BOAValue = model.ReceiptAmount;
                    if (model.ReceivedFromCr != null)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = 10,
                            Amount = model.ReceivedAmountCr,
                            TransactionType = "Credit",
                            Remarks = model.Narration,
                            //  Creditor_f = true,
                            SubLedgerType = 2,
                            SubLedgerId = model.ReceivedFromCr
                        });
                    }

                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 136,
                        Amount = model.ReceivedAmountCr,
                        TransactionType = "Debit",
                        Remarks = model.Narration,

                    });
                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 54,
                        Amount = model.ReceivedAmountCr,
                        TransactionType = "Credit",
                        Remarks = model.Narration,
                        // Creditor_f = true,                    
                    });

                    if (model.BankACHeadDr != null)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = model.BankACHeadDr,
                            Amount = model.BankAmountDr,
                            TransactionType = "Debit",
                            Remarks = model.Narration,
                        });
                    }

                    for (int i = 0; i < model.ReceivablesHeadId.Count(); i++)
                    {
                        BOATrans.Add(new BOATransactionModel()
                        {
                            AccountHeadId = model.ReceivablesHeadId[i],
                            Amount = model.ReceivablesAmount[i],
                            TransactionType = "Debit",
                            Remarks = model.Narration,
                        });
                    }

                    if (model.ModeofReceipt == 1)
                    {
                        for (int i = 0; i < model.ChequeNumber.Count(); i++)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = "Debit",
                                ReferenceNumber = model.ReceiptNumber,
                                ReferenceDate = DateTime.Parse(model.ReceiptDateString),
                                ChequeNumber = model.ChequeNumber[i],
                                PayeeId = model.ReceivedFromCr,
                                PayeeName = agency.AgencyName,
                                PayeeType = "Agency",
                                PaymentMode = 1,
                                Amount = model.ChequeValue[i],
                                BankHeadID = model.BankACHeadDr,
                                Remarks = model.Narration
                            });
                        }
                    }
                    if (model.ModeofReceipt == 2)
                    {
                        for (int i = 0; i < model.DDNumber.Count(); i++)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = "Debit",
                                ReferenceNumber = model.ReceiptNumber,
                                ReferenceDate = DateTime.Parse(model.ReceiptDateString),
                                ChequeNumber = model.DDNumber[i],
                                PayeeId = model.ReceivedFromCr,
                                PayeeName = agency.AgencyName,
                                PayeeType = "Agency",
                                PaymentMode = 2,
                                Amount = model.DDValue[i],
                                BankHeadID = model.BankACHeadDr,
                                Remarks = model.Narration
                            });
                        }
                    }
                    if (model.ModeofReceipt == 3)
                    {
                        for (int i = 0; i < model.BankTransactionrefno.Count(); i++)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = "Debit",
                                ReferenceNumber = model.ReceiptNumber,
                                ReferenceDate = DateTime.Parse(model.ReceiptDateString),
                                // BankTransactionNumber = model.BankTransactionrefno[i],
                                PayeeId = model.ReceivedFromCr,
                                PayeeName = agency.AgencyName,
                                PayeeType = "Agency",
                                PaymentMode = 3,
                                PayeeBank = model.BankTransferBankName[i],
                                Amount = model.BankTransferAmount[i],
                                BankHeadID = model.BankACHeadDr,
                                Remarks = model.Narration
                            });
                        }
                    }
                    if (model.ModeofReceipt == 4)
                    {
                        for (int i = 0; i < model.Foreignremittransrefno.Count(); i++)
                        {
                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                TransactionType = "Debit",
                                ReferenceNumber = model.ReceiptNumber,
                                ReferenceDate = DateTime.Parse(model.ReceiptDateString),
                                // BankTransactionNumber = model.Foreignremittransrefno[i],
                                PayeeId = model.ReceivedFromCr,
                                PayeeName = agency.AgencyName,
                                PayeeType = "Agency",
                                PaymentMode = 2,
                                PayeeBank = model.Foreignremitbankname[i],
                                Amount = model.INRValue[i],
                                BankHeadID = model.BankACHeadDr,
                                Remarks = model.Narration
                            });
                        }
                    }
                    BOA.BOAPaymentDetail = BOAPaymentDetail;
                    BOA.BOATransaction = BOATrans;
                    return BOA;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public CreateReceiptModel GetReceiptDetails(int ProjectID, int InvoiceId)
        {
            try
            {
                CreateReceiptModel model = new CreateReceiptModel();
                List<ReceiptOverheadListModel> ReceiptOverheads = new List<ReceiptOverheadListModel>();
                using (var context = new IOASDBEntities())
                {

                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == ProjectID
                                 select new { P, user, agency }).FirstOrDefault();
                    var prjcttypequery = (from C in context.tblCodeControl
                                          where (C.CodeName == "Projecttype" && C.CodeValAbbr == query.P.ProjectType)
                                          select C).FirstOrDefault();
                    var finyear = (from year in context.tblFinYear
                                   where year.CurrentYearFlag == true
                                   select year).FirstOrDefault();
                    var prjctenhancealloc = (from R in context.tblProjectEnhancementAllocation
                                             where R.ProjectId == ProjectID && R.AllocationHead == 6
                                             select R).ToList();
                    var projectid = query.P.ProjectId;
                    decimal? projectsanctionvalue = query.P.SanctionValue;
                    var consfundcategory = query.P.ConsultancyFundingCategory;
                    decimal? prevreceiptoverheads = 0;
                    var currentfinyear = finyear.Year;
                    var invoicequery = (from I in context.tblProjectInvoice
                                        where I.InvoiceId == InvoiceId
                                        select I).FirstOrDefault();
                    var Taxrate = (from tax in context.tblTaxMaster
                                   where tax.TaxMasterId == invoicequery.ServiceType
                                   select tax).FirstOrDefault();
                    var rcvquery = (from R in context.tblReceipt
                                    where R.InvoiceId == InvoiceId
                                    select R).ToList();
                    var pjctrcvquery = (from R in context.tblReceipt
                                        where R.ProjectId == projectid
                                        select R).ToList();
                    var rcvcrnotequery = (from R in context.tblCreditNote
                                          where R.InvoiceId == InvoiceId && R.Status == "Completed"
                                          select R).ToList();
                    //var prjctopenalloc = (from R in context.tblProjectAllocation
                    //                      where R.ProjectId == ProjectID && R.AllocationHead == 6
                    //                      select R).ToList();
                    if (query != null)
                    {
                        var totalpjctRCVcgst = pjctrcvquery.Select(m => m.CGST).Sum();
                        var totalpjctRCVsgst = pjctrcvquery.Select(m => m.SGST).Sum();
                        var totalpjctRCVigst = pjctrcvquery.Select(m => m.IGST).Sum();
                        var totalpjctRCVgst = totalpjctRCVcgst + totalpjctRCVsgst + totalpjctRCVigst;
                        var totalpjctrcv = pjctrcvquery.Select(m => m.ReceiptAmount).Sum();
                        var totalCreditnoteamt = rcvcrnotequery.Select(m => m.TotalCreditAmount).Sum() ?? 0;
                        model.ProjectID = projectid;
                        model.ProjectType = query.P.ProjectType;
                        model.TotalCreditNoteAmount = totalCreditnoteamt;
                        if (query.P.ProjectType == 1)
                        {
                            var pjctcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            if (pjctcategory > 0)
                            {
                                var categoryquery = (from C in context.tblCodeControl
                                                     where (C.CodeName == "SponProjectCategory" && C.CodeValAbbr == pjctcategory)
                                                     select C).FirstOrDefault();
                                var pjctcategoryname = categoryquery.CodeValDetail;
                                model.ProjectCategory = pjctcategoryname;
                            }
                        }
                        if (query.P.ProjectType == 2)
                        {
                            model.ProjectCategory = "Consultancy";
                        }
                        if (rcvquery.Count() == 0)
                        {
                            model.ReceiptAmount = invoicequery.TotalInvoiceValue - totalCreditnoteamt;
                            model.TotalPrevReceiptVal = 0;
                        }
                        else if (rcvquery.Count() != 0)
                        {
                            var invoiceamount = invoicequery.TotalInvoiceValue;
                            Nullable<Decimal>[] _receiptvalue = new Nullable<Decimal>[rcvquery.Count];
                            Nullable<Decimal> totalvalue = 0;
                            for (int i = 0; i < rcvquery.Count(); i++)
                            {
                                _receiptvalue[i] = Convert.ToDecimal(rcvquery[i].ReceiptAmount);
                                totalvalue += _receiptvalue[i];
                            }
                            var balanceinvoicevalue = invoiceamount - (totalvalue + totalCreditnoteamt);
                            model.ReceiptAmount = balanceinvoicevalue;
                            model.TotalPrevReceiptVal = totalvalue;
                            if (model.ReceiptAmount == 0)
                            {
                                return model;
                            }
                        }
                        prevreceiptoverheads = pjctrcvquery.Select(m => m.ReceiptOverheadValue).Sum();
                        decimal? pjctopenallocval = 0;
                        decimal? pjctenhancallocval = 0;
                        if (query.P.IsYearWiseAllocation == true)
                        {
                            DateTime startdate = DateTime.Now;
                            // DateTime enddate = DateTime.Now;
                            DateTime today = DateTime.Now;

                            startdate = (DateTime)query.P.TentativeStartDate;
                            // enddate = (DateTime)query.P.ActuaClosingDate;
                            TimeSpan diff_date = today - startdate;
                            int noofdays = diff_date.Days;
                            int years = noofdays / 365;
                            int currentprojectyear = 0;
                            if (years == 0)
                            {
                                currentprojectyear = 1;
                            }
                            if (years > 0)
                            {
                                currentprojectyear = years;
                            }
                            var prjctopenalloc = (from R in context.tblProjectAllocation
                                                  where R.ProjectId == ProjectID && R.AllocationHead == 6 && R.Year == currentprojectyear
                                                  select R).ToList();
                            if (prjctopenalloc != null)
                            {
                                pjctopenallocval = prjctopenalloc.Select(m => m.AllocationValue).Sum();
                            }
                            if (prjctenhancealloc != null)
                            {
                                pjctenhancallocval = prjctenhancealloc.Select(m => m.EnhancedValue).Sum();
                            }
                        }
                        if (query.P.IsYearWiseAllocation != true)
                        {
                            var prjctopenalloc = (from R in context.tblProjectAllocation
                                                  where R.ProjectId == ProjectID && R.AllocationHead == 6
                                                  select R).ToList();
                            if (prjctopenalloc != null)
                            {
                                pjctopenallocval = prjctopenalloc.Select(m => m.AllocationValue).Sum();
                            }
                            if (prjctenhancealloc != null)
                            {
                                pjctenhancallocval = prjctenhancealloc.Select(m => m.EnhancedValue).Sum();
                            }
                        }
                        //if (prjctopenalloc != null)
                        //{
                        //    pjctopenallocval = prjctopenalloc.Select(m => m.AllocationValue).Sum();
                        //}
                        //if (prjctenhancealloc != null)
                        //{
                        //    pjctenhancallocval = prjctenhancealloc.Select(m => m.EnhancedValue).Sum();
                        //}
                        decimal? totaloverheadalloc = pjctopenallocval + pjctenhancallocval;
                        double rcvoh = Convert.ToDouble((model.ReceiptAmount / projectsanctionvalue) * totaloverheadalloc);
                        decimal? receiptoverheads = Convert.ToDecimal(Math.Round(rcvoh, 0));
                        model.ProjectTotalOverheadsvalue = totaloverheadalloc;
                        model.CurrentReceiptOverheads = receiptoverheads;
                        model.PrevReceiptsOverheads = prevreceiptoverheads;
                        model.ProjectTotalValue = projectsanctionvalue;
                        int? pjcttype = query.P.ProjectType;
                        if (pjcttype == 1)
                        {
                            var percent = (from R in context.tblOverheadsPercentage
                                           where R.ProjectType == 1
                                           select R).ToList();
                            decimal? totalpercent = percent.Select(m => m.Percentage).Sum() ?? 0;
                            double ohamount = 0;
                            decimal? ohamt = 0;
                            decimal? Ovrhedamt = 0;
                            for (int i = 0; i < percent.Count(); i++)
                            {
                                ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                Ovrhedamt += ohamt;
                            }

                            if (Ovrhedamt >= receiptoverheads)
                            {
                                decimal? diff = Ovrhedamt - receiptoverheads;
                                if (diff >= 0 && diff < 5)
                                {
                                    for (int i = 0; i < percent.Count(); i++)
                                    {
                                        ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                        ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                        if (percent[i].OverheadsTypeId == 5)
                                        {
                                            ohamt = ohamt - diff;
                                        }
                                        ReceiptOverheads.Add(new ReceiptOverheadListModel()
                                        {
                                            OverheadtypeId = percent[i].OverheadsTypeId,
                                            Overheadtypename = percent[i].Overheads + " (" + percent[i].Percentage + " %)",
                                            OverheadPercentage = percent[i].Percentage,
                                            OverheadAmount = ohamt,
                                        });

                                    }
                                }
                            }
                            else if (Ovrhedamt < receiptoverheads)
                            {
                                decimal? diff = receiptoverheads - Ovrhedamt;
                                if (diff >= 0 && diff < 5)
                                {
                                    for (int i = 0; i < percent.Count(); i++)
                                    {
                                        ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                        ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                        if (percent[i].OverheadsTypeId == 5)
                                        {
                                            ohamt = ohamt + diff;
                                        }
                                        ReceiptOverheads.Add(new ReceiptOverheadListModel()
                                        {
                                            OverheadtypeId = percent[i].OverheadsTypeId,
                                            Overheadtypename = percent[i].Overheads + " (" + percent[i].Percentage + " %)",
                                            OverheadPercentage = percent[i].Percentage,
                                            OverheadAmount = ohamt,
                                        });

                                    }
                                }
                            }
                            model.TotalOverheadPercentage = totalpercent;
                            model.CGSTAmount = "NA";
                            model.SGSTAmount = "NA";
                            model.IGSTAmount = "NA";
                            model.TotalTaxAmount = 0;

                            model.ReceiptCGST = 0;
                            model.ReceiptSGST = 0;
                            model.ReceiptIGST = 0;
                            model.CGSTPercentage = 0;
                            model.SGSTPercentage = 0;
                            model.IGSTPercentage = 0;
                            List<MasterlistviewModel> pjctfundbody = new List<MasterlistviewModel>();
                            if (query.P.InternalSchemeFundingAgency != null)
                            {
                                var agencyname = (from m in context.tblAgencyMaster
                                                  where m.AgencyId == query.P.InternalSchemeFundingAgency
                                                  select m).FirstOrDefault();
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = query.P.InternalSchemeFundingAgency,
                                    name = agencyname.AgencyName,
                                });
                            }
                            if (query.P.FundingGovtAgencyDept != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 1,
                                    name = query.P.FundingGovtAgencyDept,
                                });
                            }
                            if (query.P.FundingGovtMinistry != null)
                            {
                                var ministry = (from m in context.tblMinistryMaster
                                                where m.MinistryId == query.P.FundingGovtMinistry
                                                select m).FirstOrDefault();
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 2,
                                    name = ministry.MinistryName,
                                });
                            }
                            if (query.P.FundingGovtUniv != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 3,
                                    name = query.P.FundingGovtUniv,
                                });
                            }

                            if (query.P.FundingNonGovtAgencyIndustry != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 1,
                                    name = query.P.FundingNonGovtAgencyIndustry,
                                });
                            }
                            if (query.P.FundingNonGovtUniv != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 2,
                                    name = query.P.FundingNonGovtUniv,
                                });
                            }
                            if (query.P.FundingNonGovtOthers != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 3,
                                    name = query.P.FundingNonGovtOthers,
                                });
                            }


                            if (query.P.ForgnGovtAgencyDepartment != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 1,
                                    name = query.P.ForgnGovtAgencyDepartment,
                                });
                            }
                            if (query.P.ForgnGovtUniversity != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 2,
                                    name = query.P.ForgnGovtUniversity,
                                });
                            }
                            if (query.P.ForgnGovtOthers != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 3,
                                    name = query.P.ForgnGovtOthers,
                                });
                            }

                            if (query.P.ForgnNonGovtAgencyDepartment != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 1,
                                    name = query.P.ForgnNonGovtAgencyDepartment,
                                });
                            }
                            if (query.P.ForgnNonGovtAgencyUniversity != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 2,
                                    name = query.P.ForgnNonGovtAgencyUniversity,
                                });
                            }
                            if (query.P.ForgnNonGovtOthers != null)
                            {
                                pjctfundbody.Add(new MasterlistviewModel()
                                {
                                    id = 3,
                                    name = query.P.ForgnNonGovtOthers,
                                });
                            }
                            if (pjctfundbody.Count() > 0)
                            {
                                Nullable<int>[] _agencyid = new Nullable<int>[pjctfundbody.Count];
                                string[] _agencyname = new string[pjctfundbody.Count];

                                for (int i = 0; i < pjctfundbody.Count(); i++)
                                {
                                    _agencyid[i] = pjctfundbody[i].id;
                                    _agencyname[i] = pjctfundbody[i].name;
                                }
                                model.AgencyId = _agencyid;
                                model.Agencyname = _agencyname;
                            }
                        }
                        if (pjcttype == 2)
                        {

                            var taxstatus = query.P.TaxStatus;
                            var statecode = Convert.ToInt32(query.agency.StateCode);
                            var invoicevalue = invoicequery.TaxableValue;
                            Nullable<Decimal> totaltax = 0;
                            Nullable<Decimal> sgstamount = 0;
                            Nullable<Decimal> cgstamount = 0;
                            Nullable<Decimal> igstamount = 0;
                            Nullable<Decimal> receipttax = 0;
                            if (statecode == 33 && taxstatus == 1)
                            {
                                totaltax = (Taxrate.TaxRate / 100) * invoicevalue;
                                sgstamount = totaltax / 2;
                                cgstamount = totaltax / 2;
                                igstamount = 0;
                                receipttax = (Taxrate.TaxRate / 100) * model.ReceiptAmount;
                                model.ReceiptCGST = receipttax / 2;
                                model.ReceiptSGST = receipttax / 2;
                                model.ReceiptIGST = 0;
                                model.CGSTPercentage = Taxrate.TaxRate / 2;
                                model.SGSTPercentage = Taxrate.TaxRate / 2;
                                model.IGSTPercentage = 0;
                            }
                            if (statecode != 33 && taxstatus == 1)
                            {
                                totaltax = (Taxrate.TaxRate / 100) * invoicevalue;
                                igstamount = totaltax;
                                sgstamount = 0;
                                cgstamount = 0;
                                receipttax = (Taxrate.TaxRate / 100) * model.ReceiptAmount;
                                model.ReceiptCGST = 0;
                                model.ReceiptSGST = 0;
                                model.ReceiptIGST = receipttax;
                                model.CGSTPercentage = 0;
                                model.SGSTPercentage = 0;
                                model.IGSTPercentage = Taxrate.TaxRate;
                            }
                            if (igstamount == 0)
                            {
                                model.CGSTAmount = Convert.ToString(cgstamount);
                                model.SGSTAmount = Convert.ToString(sgstamount);
                                model.IGSTAmount = "NA";
                            }
                            if (igstamount > 0)
                            {
                                model.CGSTAmount = "NA";
                                model.SGSTAmount = "NA";
                                model.IGSTAmount = Convert.ToString(igstamount);
                            }
                            model.TotalTaxAmount = totaltax;
                            if (taxstatus == 2 || taxstatus == 3 || taxstatus == 4)
                            {
                                model.CGSTAmount = "NA";
                                model.SGSTAmount = "NA";
                                model.IGSTAmount = "NA";
                                model.ReceiptCGST = 0;
                                model.ReceiptSGST = 0;
                                model.ReceiptIGST = 0;
                                model.CGSTPercentage = 0;
                                model.SGSTPercentage = 0;
                                model.IGSTPercentage = 0;
                            }

                            decimal? consreceiptamt = (model.ReceiptAmount - receipttax);
                            double consrcvoh = Convert.ToDouble((consreceiptamt / projectsanctionvalue) * totaloverheadalloc);
                            decimal? consreceiptoverheads = Convert.ToDecimal(Math.Round(consrcvoh, 0));
                            model.CurrentReceiptOverheads = consreceiptoverheads;
                            receiptoverheads = consreceiptoverheads;
                            var percent = (from R in context.tblOverheadsPercentage
                                           where R.ProjectType == 2 && R.ProjectCategory == consfundcategory
                                           select R).ToList();
                            decimal? totalpercent = percent.Select(m => m.Percentage).Sum() ?? 0;
                            double ohamount = 0;
                            decimal? ohamt = 0;
                            decimal? Ovrhedamt = 0;
                            for (int i = 0; i < percent.Count(); i++)
                            {
                                if (totalpercent > 0)
                                {
                                    ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                }
                                else
                                {
                                    ohamount = 0;
                                }
                                ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                Ovrhedamt += ohamt;
                            }

                            if (Ovrhedamt >= receiptoverheads)
                            {
                                decimal? diff = Ovrhedamt - receiptoverheads;
                                if (diff >= 0 && diff < 5)
                                {
                                    for (int i = 0; i < percent.Count(); i++)
                                    {
                                        if (totalpercent > 0)
                                        {
                                            ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                        }
                                        else
                                        {
                                            ohamount = 0;
                                        }
                                        ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                        if (percent[i].Overheads == "Expenses Payable ICSROH")
                                        {
                                            ohamt = ohamt - diff;
                                        }
                                        ReceiptOverheads.Add(new ReceiptOverheadListModel()
                                        {
                                            OverheadtypeId = percent[i].OverheadsTypeId,
                                            Overheadtypename = percent[i].Overheads + " (" + percent[i].Percentage + " %)",
                                            OverheadPercentage = percent[i].Percentage,
                                            OverheadAmount = ohamt,
                                        });

                                    }
                                }
                            }
                            else if (Ovrhedamt < receiptoverheads)
                            {
                                decimal? diff = receiptoverheads - Ovrhedamt;
                                if (diff >= 0 && diff < 5)
                                {
                                    for (int i = 0; i < percent.Count(); i++)
                                    {
                                        if (totalpercent > 0)
                                        {
                                            ohamount = Convert.ToDouble((percent[i].Percentage / totalpercent) * receiptoverheads);
                                        }
                                        else
                                        {
                                            ohamount = 0;
                                        }
                                        ohamt = Convert.ToDecimal(Math.Round(ohamount, 0));
                                        if (percent[i].Overheads == "Expenses Payable ICSROH")
                                        {
                                            ohamt = ohamt + diff;
                                        }
                                        ReceiptOverheads.Add(new ReceiptOverheadListModel()
                                        {
                                            OverheadtypeId = percent[i].OverheadsTypeId,
                                            Overheadtypename = percent[i].Overheads + " (" + percent[i].Percentage + " %)",
                                            OverheadPercentage = percent[i].Percentage,
                                            OverheadAmount = ohamt,
                                        });

                                    }
                                }
                            }
                            model.TotalOverheadPercentage = totalpercent;
                        }
                        //model.InvoiceDate = DateTime.Now;
                        //model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);
                        model.ReceiptOverheads = ReceiptOverheads;
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.Projecttitle = query.P.ProjectTitle;
                        model.ProjectTypeName = prjcttypequery.CodeValDetail;
                        model.ReceiptDate = DateTime.Now;
                        model.ReceiptDateString = String.Format("{0:ddd dd-MMM-yyyy}", DateTime.Now);


                        model.ReceivedFromCr = query.P.SponsoringAgency;
                        model.ReceivedFromAgencyName = query.agency.AgencyName;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        //model.SanctionOrderNumber = query.P.SanctionOrderNumber;
                        model.SanctionedValue = query.P.SanctionValue;
                        model.TotalReceivedValue = totalpjctrcv - totalpjctRCVgst;
                        model.InvoiceNumber = invoicequery.InvoiceNumber;
                        model.InvoiceId = invoicequery.InvoiceId;
                        model.InvoiceDetails = invoicequery.DescriptionofServices;
                        model.InvoiceValue = invoicequery.TotalInvoiceValue;
                        model.InvoiceValueWithoutTax = invoicequery.TaxableValue;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery.InvoiceDate);


                        Nullable<Decimal> totalreceiptvalue = 0;
                        var receiptquery = (from I in context.tblReceipt
                                            where I.ProjectId == ProjectID && I.InvoiceId == model.InvoiceId
                                            select I).ToList();
                        if (receiptquery.Count() > 0)
                        {
                            Nullable<int>[] _receiptid = new Nullable<int>[receiptquery.Count];
                            string[] _receiptnumber = new string[receiptquery.Count];
                            Nullable<Decimal>[] _receiptvalue = new Nullable<Decimal>[receiptquery.Count];
                            string[] _receiptdate = new string[receiptquery.Count];

                            for (int i = 0; i < receiptquery.Count(); i++)
                            {
                                _receiptid[i] = receiptquery[i].ReceiptId;
                                _receiptnumber[i] = receiptquery[i].ReceiptNumber;
                                _receiptvalue[i] = Convert.ToDecimal(receiptquery[i].ReceiptAmount);
                                _receiptdate[i] = String.Format("{0:ddd dd-MMM-yyyy}", receiptquery[i].ReceiptDate);
                                totalreceiptvalue += _receiptvalue[i];
                            }
                            model.PreviousReceiptDate = _receiptdate;
                            model.PreviousReceiptId = _receiptid;
                            model.PreviousReceiptNumber = _receiptnumber;
                            model.PreviousReceiptvalue = _receiptvalue;
                            model.PreviousReceiptTotal = totalreceiptvalue;
                            model.AvailableBalance = model.SanctionedValue - totalreceiptvalue;
                        }
                        model.BalanceinCurrentInvoice = invoicequery.TotalInvoiceValue - totalreceiptvalue;
                        var allocquery = (from A in context.tblProjectAllocation
                                          join B in context.tblBudgetHead on A.AllocationHead equals B.BudgetHeadId
                                          where A.ProjectId == ProjectID
                                          select new { A, B }).ToList();

                        if (allocquery.Count() > 0)
                        {
                            Nullable<int>[] _allocationid = new Nullable<int>[allocquery.Count];
                            Nullable<int>[] _allocationhead = new Nullable<int>[allocquery.Count];
                            string[] _allocationheadname = new string[allocquery.Count];
                            Nullable<Decimal>[] _allocationvalue = new Nullable<Decimal>[allocquery.Count];

                            for (int i = 0; i < allocquery.Count(); i++)
                            {
                                _allocationid[i] = allocquery[i].A.AllocationId;
                                _allocationhead[i] = allocquery[i].A.AllocationHead;
                                _allocationheadname[i] = allocquery[i].B.HeadName;
                                _allocationvalue[i] = Convert.ToDecimal(allocquery[i].A.AllocationValue);
                            }
                            model.AllocationId = _allocationid;
                            model.AllocationHead = _allocationhead;
                            model.Allocationheadname = _allocationheadname;
                            model.Allocationvalue = _allocationvalue;
                        }

                        var receivables = (from rec in context.tblTransactionDefinition
                                           join ac in context.tblAccountHead on rec.AccountHeadId equals ac.AccountHeadId
                                           where rec.TransactionTypeCode == "RCV" && rec.TransactionType == "Debit" && rec.AccountHeadId != null
                                           select new { rec, ac }).ToList();
                        if (receivables.Count() > 0)
                        {
                            Nullable<int>[] _accountheadid = new Nullable<int>[receivables.Count];
                            string[] _accountheadname = new string[receivables.Count];
                            string[] _accountheadcode = new string[receivables.Count];


                            for (int i = 0; i < receivables.Count(); i++)
                            {
                                _accountheadid[i] = receivables[i].rec.AccountHeadId;
                                _accountheadname[i] = receivables[i].ac.AccountHead;
                                _accountheadcode[i] = receivables[i].ac.AccountHeadCode;
                            }
                            model.ReceivablesHeadId = _accountheadid;
                            model.Receivablesheadname = _accountheadname;
                            model.Receivablesheadcode = _accountheadcode;

                        }

                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public CreateReceiptModel GetReceiptDetailsbyId(int ProjectID, int ReceiptId)
        {
            try
            {
                CreateReceiptModel model = new CreateReceiptModel();
                List<ReceiptOverheadListModel> ReceiptOverheads = new List<ReceiptOverheadListModel>();
                using (var context = new IOASDBEntities())
                {

                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == ProjectID
                                 select new { P, user, agency }).FirstOrDefault();
                    var prjcttypequery = (from C in context.tblCodeControl
                                          where (C.CodeName == "Projecttype" && C.CodeValAbbr == query.P.ProjectType)
                                          select C).FirstOrDefault();
                    var finyear = (from year in context.tblFinYear
                                   where year.CurrentYearFlag == true
                                   select year).FirstOrDefault();
                    var receiptquery = (from R in context.tblReceipt
                                        where R.ReceiptId == ReceiptId
                                        select R).FirstOrDefault();
                    var projectid = query.P.ProjectId;
                    var currentfinyear = finyear.Year;
                    var invoicequery = (from I in context.tblProjectInvoice
                                        where I.InvoiceId == receiptquery.InvoiceId
                                        select I).FirstOrDefault();
                    var Taxrate = (from tax in context.tblTaxMaster
                                   where tax.TaxMasterId == invoicequery.ServiceType
                                   select tax).FirstOrDefault();
                    var Taxdetails = (from tax in context.tblInvoiceTaxDetails
                                      where tax.InvoiceId == invoicequery.InvoiceId
                                      select tax).FirstOrDefault();
                    var prjctopenalloc = (from R in context.tblProjectAllocation
                                          where R.ProjectId == ProjectID && R.AllocationHead == 6
                                          select R).ToList();
                    var prjctenhancealloc = (from R in context.tblProjectEnhancementAllocation
                                             where R.ProjectId == ProjectID && R.AllocationHead == 6 && R.IsCurrentVersion == true
                                             select R).ToList();
                    decimal? projectsanctionvalue = query.P.SanctionValue;
                    var consfundcategory = query.P.ConsultancyFundingCategory;
                    decimal? prevreceiptoverheads = 0;
                    if (query != null)
                    {
                        var pjctrcv = (from R in context.tblReceipt
                                       where R.ProjectId == projectid
                                       select R).ToList();
                        var totalpjctRCVcgst = pjctrcv.Select(m => m.CGST).Sum();
                        var totalpjctRCVsgst = pjctrcv.Select(m => m.SGST).Sum();
                        var totalpjctRCVigst = pjctrcv.Select(m => m.IGST).Sum();
                        var totalpjctRCVgst = totalpjctRCVcgst + totalpjctRCVsgst + totalpjctRCVigst;
                        var totalpjctrcv = pjctrcv.Select(m => m.ReceiptAmount).Sum();

                        model.TotalReceivedValue = totalpjctrcv - totalpjctRCVgst;
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.Projecttitle = query.P.ProjectTitle;
                        model.ProjectID = projectid;
                        model.ProjectType = query.P.ProjectType;
                        model.ProjectTypeName = prjcttypequery.CodeValDetail;
                        model.ReceiptDate = receiptquery.ReceiptDate;
                        model.ReceiptDateString = String.Format("{0:ddd dd-MMM-yyyy}", receiptquery.ReceiptDate);
                        model.ReceiptAmount = receiptquery.ReceiptAmount;
                        model.ReceivedFromCr = receiptquery.ReceivedFrom;
                        model.ReceivedFromAgencyName = query.agency.AgencyName;
                        model.ReceivedAmountCr = receiptquery.ReceivedAmount;
                        model.Narration = receiptquery.Description;

                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;

                        model.SanctionedValue = query.P.SanctionValue;
                        model.InvoiceNumber = invoicequery.InvoiceNumber;
                        model.InvoiceId = invoicequery.InvoiceId;
                        model.InvoiceDetails = invoicequery.DescriptionofServices;
                        model.InvoiceValue = invoicequery.TotalInvoiceValue;
                        model.InvoiceValueWithoutTax = invoicequery.TaxableValue;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery.InvoiceDate);
                        model.ModeofReceipt = receiptquery.PaymentMode;
                        model.ReceivedFromCr = receiptquery.ReceivedFrom;
                        model.ReceivedAmountCr = receiptquery.ReceivedAmount;
                        model.BankACHeadDr = receiptquery.BankAccountHeadDr;
                        model.BankAmountDr = receiptquery.BankAmountDr;
                        model.ReceivablesTotal = receiptquery.ReceivablesTotal;
                        model.ReceiptNumber = receiptquery.ReceiptNumber;
                        model.ReceiptID = receiptquery.ReceiptId;
                        model.ReceiptStatus = receiptquery.Status;
                        model.RMForCMF = receiptquery.RMForCMF;
                        model.ReceiptCGST = receiptquery.CGST;
                        model.ReceiptSGST = receiptquery.SGST;
                        model.ReceiptIGST = receiptquery.IGST;

                        var statecode = Convert.ToInt32(query.agency.StateCode);
                        var invoicevalue = invoicequery.TotalInvoiceValue;
                        var taxstatus = query.P.TaxStatus;
                        Nullable<Decimal> totaltax = 0;
                        Nullable<Decimal> sgstamount = 0;
                        Nullable<Decimal> cgstamount = 0;
                        Nullable<Decimal> igstamount = 0;

                        if (query.P.ProjectType == 1)
                        {
                            model.CGSTAmount = "NA";
                            model.SGSTAmount = "NA";
                            model.IGSTAmount = "NA";
                            model.TotalTaxAmount = 0;
                            model.CGSTPercentage = 0;
                            model.SGSTPercentage = 0;
                            model.IGSTPercentage = 0;
                            var pjctcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            if (pjctcategory > 0)
                            {
                                var categoryquery = (from C in context.tblCodeControl
                                                     where (C.CodeName == "SponProjectCategory" && C.CodeValAbbr == pjctcategory)
                                                     select C).FirstOrDefault();
                                var pjctcategoryname = categoryquery.CodeValDetail;
                                model.ProjectCategory = pjctcategoryname;
                            }
                        }

                        if (query.P.ProjectType == 2)
                        {
                            model.ProjectCategory = "Consultancy";
                            if (statecode == 33 && taxstatus == 1)
                            {
                                sgstamount = ((Taxrate.TaxRate / 100) * invoicevalue) / 2;
                                cgstamount = ((Taxrate.TaxRate / 100) * invoicevalue) / 2;
                                totaltax = sgstamount + cgstamount;
                                igstamount = 0;
                                model.CGSTPercentage = Taxrate.TaxRate / 2;
                                model.SGSTPercentage = Taxrate.TaxRate / 2;
                                model.IGSTPercentage = 0;
                            }
                            if (statecode != 33 && taxstatus == 1)
                            {
                                igstamount = (Taxrate.TaxRate / 100) * invoicevalue;
                                sgstamount = 0;
                                cgstamount = 0;
                                totaltax = (Taxrate.TaxRate / 100) * invoicevalue;
                                model.CGSTPercentage = 0;
                                model.SGSTPercentage = 0;
                                model.IGSTPercentage = Taxrate.TaxRate;
                            }
                            if (igstamount == 0)
                            {
                                model.CGSTAmount = Convert.ToString(cgstamount);
                                model.SGSTAmount = Convert.ToString(sgstamount);
                                model.IGSTAmount = "NA";
                            }
                            if (igstamount > 0)
                            {
                                model.CGSTAmount = "NA";
                                model.SGSTAmount = "NA";
                                model.IGSTAmount = Convert.ToString(igstamount);
                            }
                            model.TotalTaxAmount = totaltax;
                            if ((statecode != 33 || statecode == 33) && (taxstatus == 2 || taxstatus == 3 || taxstatus == 4))
                            {
                                model.CGSTAmount = "NA";
                                model.SGSTAmount = "NA";
                                model.IGSTAmount = "NA";
                                model.TotalTaxAmount = 0;
                                model.CGSTPercentage = 0;
                                model.SGSTPercentage = 0;
                                model.IGSTPercentage = 0;
                            }
                        }
                        Nullable<Decimal> totalreceiptvalue = 0;
                        var receiptdetailsquery = (from I in context.tblReceipt
                                                   where I.ProjectId == ProjectID && I.InvoiceId == invoicequery.InvoiceId
                                                   select I).ToList();
                        if (receiptdetailsquery.Count() > 0)
                        {
                            Nullable<int>[] _receiptid = new Nullable<int>[receiptdetailsquery.Count];
                            string[] _receiptnumber = new string[receiptdetailsquery.Count];
                            Nullable<Decimal>[] _receiptvalue = new Nullable<Decimal>[receiptdetailsquery.Count];
                            string[] _receiptdate = new string[receiptdetailsquery.Count];

                            for (int i = 0; i < receiptdetailsquery.Count(); i++)
                            {
                                _receiptid[i] = receiptdetailsquery[i].ReceiptId;
                                _receiptnumber[i] = receiptdetailsquery[i].ReceiptNumber;
                                _receiptvalue[i] = Convert.ToDecimal(receiptdetailsquery[i].ReceiptAmount);
                                _receiptdate[i] = String.Format("{0:ddd dd-MMM-yyyy}", receiptdetailsquery[i].ReceiptDate);
                                totalreceiptvalue += _receiptvalue[i];
                            }
                            model.PreviousReceiptDate = _receiptdate;
                            model.PreviousReceiptId = _receiptid;
                            model.PreviousReceiptNumber = _receiptnumber;
                            model.PreviousReceiptvalue = _receiptvalue;
                            model.AvailableBalance = model.SanctionedValue - totalreceiptvalue;
                            model.PreviousReceiptTotal = totalreceiptvalue;
                            model.TotalPrevReceiptVal = totalreceiptvalue;
                        }
                        model.BalanceinCurrentInvoice = invoicequery.TotalInvoiceValue - totalreceiptvalue;
                        var pjctrcvquery = (from R in context.tblReceipt
                                            where R.ProjectId == projectid
                                            select R).ToList();
                        prevreceiptoverheads = pjctrcvquery.Select(m => m.ReceiptOverheadValue).Sum();
                        decimal? pjctopenallocval = 0;
                        decimal? pjctenhancallocval = 0;
                        if (prjctopenalloc != null)
                        {
                            pjctopenallocval = prjctopenalloc.Select(m => m.AllocationValue).Sum();
                        }
                        if (prjctenhancealloc != null)
                        {
                            pjctenhancallocval = prjctenhancealloc.Select(m => m.TotalValue).Sum();
                        }
                        decimal? totaloverheadalloc = pjctopenallocval + pjctenhancallocval;
                        model.ProjectTotalOverheadsvalue = totaloverheadalloc;
                        model.PrevReceiptsOverheads = prevreceiptoverheads;
                        model.ProjectTotalValue = projectsanctionvalue;
                        //var allocquery = (from A in context.tblReceiptAllocation
                        //                  join B in context.tblBudgetHead on A.BudgetHead equals B.BudgetHeadId
                        //                  where A.ReceiptId == ReceiptId
                        //                  select new { A, B }).ToList();

                        //if (allocquery.Count() > 0)
                        //{
                        //    Nullable<int>[] _allocationid = new Nullable<int>[allocquery.Count];
                        //    Nullable<int>[] _allocationhead = new Nullable<int>[allocquery.Count];
                        //    string[] _allocationheadname = new string[allocquery.Count];
                        //    Nullable<Decimal>[] _allocationvalue = new Nullable<Decimal>[allocquery.Count];

                        //    for (int i = 0; i < allocquery.Count(); i++)
                        //    {
                        //        _allocationid[i] = allocquery[i].A.ReceiptAllocationId;
                        //        _allocationhead[i] = allocquery[i].A.BudgetHead;
                        //        _allocationheadname[i] = allocquery[i].B.HeadName;
                        //        _allocationvalue[i] = Convert.ToDecimal(allocquery[i].A.Amount);
                        //    }
                        //    model.AllocationId = _allocationid;
                        //    model.BudgetHead = _allocationhead;
                        //    model.Allocationheadname = _allocationheadname;
                        //    model.Allocationvalue = _allocationvalue;
                        //}
                        var pjctfundbody = (from rec in context.tblReceiptAgencyShareDetails
                                            where rec.ReceiptId == ReceiptId
                                            select rec).ToList();
                        if (pjctfundbody.Count() > 0)
                        {
                            Nullable<int>[] _agencyid = new Nullable<int>[pjctfundbody.Count];
                            Nullable<int>[] _agencyheadid = new Nullable<int>[pjctfundbody.Count];
                            string[] _agencyname = new string[pjctfundbody.Count];
                            Nullable<decimal>[] _agencyshare = new Nullable<decimal>[pjctfundbody.Count];

                            for (int i = 0; i < pjctfundbody.Count(); i++)
                            {
                                _agencyid[i] = pjctfundbody[i].ReceiptAgencyId;
                                _agencyheadid[i] = pjctfundbody[i].ReceiptAgencyHeadId;
                                _agencyname[i] = pjctfundbody[i].ReceiptAgencyName;
                                _agencyshare[i] = pjctfundbody[i].ReceiptAgencyAmount;
                            }
                            model.AgencysharedetailsId = _agencyid;
                            model.AgencyId = _agencyheadid;
                            model.Agencyname = _agencyname;
                            model.AgencyShareAmount = _agencyshare;
                        }
                        model.CurrentReceiptOverheads = receiptquery.ReceiptOverheadValue;
                        var receiptOH = (from R in context.tblReceiptOverheadBreakup
                                         join P in context.tblOverheadsPercentage on R.ReceiptOverheadTypeId equals P.OverheadsTypeId
                                         where R.ReceiptId == ReceiptId
                                         select new { R, P }).ToList();
                        decimal? totalpercent = receiptOH.Select(m => m.P.Percentage).Sum() ?? 0;
                        if (receiptOH.Count() > 0)
                        {
                            for (int i = 0; i < receiptOH.Count(); i++)
                            {
                                ReceiptOverheads.Add(new ReceiptOverheadListModel()
                                {
                                    OverheadtypeId = receiptOH[i].R.ReceiptOverheadTypeId,
                                    Overheadtypename = receiptOH[i].R.ReceiptOverheadType,
                                    OverheadPercentage = receiptOH[i].P.Percentage,
                                    OverheadAmount = receiptOH[i].R.ReceiptOverheadAmount,
                                });
                            }
                        }
                        model.ReceiptOverheads = ReceiptOverheads;
                        model.TotalOverheadPercentage = totalpercent;
                        var receivables = (from rec in context.tblReceiptRecivables
                                           join ac in context.tblAccountHead on rec.ReceivablesHeadId equals ac.AccountHeadId
                                           where rec.ReceiptId == ReceiptId
                                           select new { rec, ac }).ToList();
                        if (receivables.Count() > 0)
                        {
                            Nullable<int>[] _accountheadid = new Nullable<int>[receivables.Count];
                            string[] _accountheadname = new string[receivables.Count];
                            string[] _accountheadcode = new string[receivables.Count];
                            Nullable<Decimal>[] _amount = new Nullable<Decimal>[receivables.Count];

                            for (int i = 0; i < receivables.Count(); i++)
                            {
                                _accountheadid[i] = receivables[i].rec.ReceivablesHeadId;
                                _amount[i] = receivables[i].rec.ReceivabesAmount;
                                _accountheadname[i] = receivables[i].ac.AccountHead;
                                _accountheadcode[i] = receivables[i].ac.AccountHeadCode;
                            }
                            model.ReceivablesHeadId = _accountheadid;
                            model.Receivablesheadname = _accountheadname;
                            model.Receivablesheadcode = _accountheadcode;
                            model.ReceivablesAmount = _amount;
                        }
                        var transact = (from tran in context.tblReceiptTransactionDetails
                                        where tran.ReceiptId == ReceiptId
                                        select tran).ToList();
                        if (transact.Count() > 0)
                        {
                            Nullable<int>[] _transactid = new Nullable<int>[transact.Count];
                            Nullable<int>[] _transacttype = new Nullable<int>[transact.Count];
                            string[] _transactnumber = new string[transact.Count];
                            Nullable<DateTime>[] _transactdate = new Nullable<DateTime>[transact.Count];
                            Nullable<DateTime>[] _transactclearancedate = new Nullable<DateTime>[transact.Count];
                            string[] _transdte = new string[transact.Count];
                            string[] _transclrdte = new string[transact.Count];
                            string[] _transactbank = new string[transact.Count];
                            string[] _transactbankbranch = new string[transact.Count];
                            string[] _transdocpath = new string[transact.Count];
                            string[] _transdocname = new string[transact.Count];
                            Nullable<Decimal>[] _transactamount = new Nullable<Decimal>[transact.Count];
                            Nullable<int>[] _transactforgncountry = new Nullable<int>[transact.Count];
                            Nullable<int>[] _transactforgncurrency = new Nullable<int>[transact.Count];
                            Nullable<Decimal>[] _transactforgncurrencyamt = new Nullable<Decimal>[transact.Count];
                            Nullable<Decimal>[] _transactconversionrate = new Nullable<Decimal>[transact.Count];

                            for (int i = 0; i < transact.Count(); i++)
                            {
                                _transactid[i] = transact[i].PaymentModeId;
                                _transacttype[i] = transact[i].TransactionType;
                                _transactnumber[i] = transact[i].TransactionNumber;
                                _transactamount[i] = transact[i].TransactionAmount;
                                _transactdate[i] = transact[i].TransactionDate;
                                _transactclearancedate[i] = transact[i].TransactionClearanceDate;
                                if (transact[i].TransactionDate != null)
                                {
                                    _transdte[i] = String.Format("{0:dd}", (DateTime)transact[i].TransactionDate) + "-" + String.Format("{0:MMMM}", (DateTime)transact[i].TransactionDate) + "-" + String.Format("{0:yyyy}", (DateTime)transact[i].TransactionDate);
                                }
                                if (transact[i].TransactionClearanceDate != null)
                                {
                                    _transclrdte[i] = String.Format("{0:dd}", (DateTime)transact[i].TransactionClearanceDate) + "-" + String.Format("{0:MMMM}", (DateTime)transact[i].TransactionClearanceDate) + "-" + String.Format("{0:yyyy}", (DateTime)transact[i].TransactionClearanceDate);
                                }
                                _transactbank[i] = transact[i].TransactionBankName;
                                _transactbankbranch[i] = transact[i].TransactionBankName;
                                _transactforgncountry[i] = transact[i].ForeignRemitCountry;
                                _transactforgncurrency[i] = transact[i].ForeignRemitCurrency;
                                _transactforgncurrencyamt[i] = transact[i].ForeignCurrencyAmount;
                                _transactconversionrate[i] = transact[i].ConversionRate;
                                _transdocpath[i] = transact[i].DocPath;
                                _transdocname[i] = transact[i].DocName;
                            }

                            if (model.ModeofReceipt == 1)
                            {

                                model.ChequeNumber = _transactnumber;
                                model.ChequeDate = _transactdate;
                                model.Chqdate = _transdte;
                                model.ChequeBankName = _transactbank;
                                model.ChequeBankBranch = _transactbankbranch;
                                model.ChequeValue = _transactamount;
                                model.ChequeClearanceDate = _transactclearancedate;
                                model.Chqclrdate = _transclrdte;
                                model.TotalChequeValue = receiptquery.NetTransactionValue;
                            }

                            if (model.ModeofReceipt == 2)
                            {
                                model.DDNumber = _transactnumber;
                                model.DDDate = _transactdate;
                                model.Dddte = _transdte;
                                model.DDBankName = _transactbank;
                                model.DDBankBranch = _transactbankbranch;
                                model.DDValue = _transactamount;
                                model.TotalDDValue = receiptquery.NetTransactionValue;
                            }
                            if (model.ModeofReceipt == 3)
                            {
                                model.BankTransactionrefno = _transactnumber;
                                model.BankTransactiontype = _transacttype;
                                model.BankTransactionDate = _transactdate;
                                model.Banktransdate = _transdte;
                                model.BankTransferBankName = _transactbank;
                                model.BankTransferBankBranch = _transactbankbranch;
                                model.BankTransferAmount = _transactamount;
                                model.TotalBankTransactionAmount = receiptquery.NetTransactionValue;
                            }
                            if (model.ModeofReceipt == 4)
                            {
                                model.Foreignremittransrefno = _transactnumber;
                                model.ForeignremittransDate = _transactdate;
                                model.Forgnremitdate = _transdte;
                                model.Foreigntransfercountry = _transactforgncountry;
                                model.Foreigntransfercurrency = _transactforgncurrency;
                                model.Foreignremitbankname = _transactbank;
                                model.Foreignremitbankbranch = _transactbankbranch;

                                model.Foreigncurrencyamount = _transactforgncurrencyamt;
                                model.Conversionrate = _transactconversionrate;
                                model.INRValue = _transactamount;
                                model.Foreignremittotalamount = receiptquery.NetTransactionValue;
                            }
                            if (model.ModeofReceipt == 5)
                            {
                                model.TDSCertificateNumber = _transactnumber;
                                model.TDSDocName = _transdocname;
                                model.TDSDocPath = _transdocpath;
                            }
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public PagedData<ReceiptSearchResultModel> GetReceiptList(ReceiptSearchFieldModel model, int page, int pageSize)
        {
            try
            {
                List<ReceiptSearchResultModel> list = new List<ReceiptSearchResultModel>();
                var searchData = new PagedData<ReceiptSearchResultModel>();
                int skiprec = 0;
                if (page == 1)
                {
                    skiprec = 0;
                }
                else
                {
                    skiprec = (page - 1) * pageSize;
                }
                using (var context = new IOASDBEntities())
                {
                    var query = (from R in context.tblReceipt
                                 join pjct in context.tblProject on R.ProjectId equals pjct.ProjectId
                                 join I in context.tblProjectInvoice on R.InvoiceId equals I.InvoiceId
                                 join cc in context.tblCodeControl on
                                 new { Category = R.Status ?? null, codeName = "ReceiptStatus" } equals
                                 new { Category = cc.CodeValDetail, codeName = cc.CodeName }
                                 where ((pjct.ProjectType == model.ProjectType) || (model.ProjectType == null))
                                 && ((pjct.PIName == model.PIId) || (model.PIId == null))
                                 && (pjct.ProjectNumber.Contains(model.ProjectNumber) || string.IsNullOrEmpty(model.ProjectNumber))
                                 && (R.ReceiptNumber.Contains(model.ReceiptNumber) || string.IsNullOrEmpty(model.ReceiptNumber))
                                 && ((cc.CodeValAbbr == model.ReceiptStatus) || model.ReceiptStatus == null)
                                 && ((R.ReceiptDate >= model.FromDate && R.ReceiptDate <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                                 && R.Adhoc_f != true
                                 && R.BackEnd_f != true
                                 orderby R.ReceiptId descending
                                 select new { R, pjct, I }).Skip(skiprec).Take(pageSize).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            var projectid = query[i].R.ProjectId;
                            var projectquery = (from pjct in context.tblProject
                                                where pjct.ProjectId == projectid && pjct.ProjectType == model.ProjectType
                                                select pjct).FirstOrDefault();
                            //var doc = query[i].PODocs.Split(new char[] { '_' }, 2);
                            list.Add(new ReceiptSearchResultModel()
                            {
                                ProjectNumber = projectquery.ProjectNumber,
                                ReceiptNumber = query[i].R.ReceiptNumber,
                                ProjectId = projectid,
                                ProjectType = projectquery.ProjectType,
                                ReceiptDate = String.Format("{0:ddd dd-MMM-yyyy}", query[i].R.ReceiptDate),
                                PIId = projectquery.PIName,
                                ReceiptId = query[i].R.ReceiptId,
                                TotalReceiptValue = query[i].R.ReceiptAmount,
                                InvoiceValue = query[i].I.TotalInvoiceValue,
                                ProjectTitle = projectquery.ProjectTitle,
                                ReceiptStatus = query[i].R.Status
                            });

                        }
                    }
                    var records = (from R in context.tblReceipt
                                   join pjct in context.tblProject on R.ProjectId equals pjct.ProjectId
                                   join cc in context.tblCodeControl on
                                   new { Category = R.Status ?? null, codeName = "ReceiptStatus" } equals
                                   new { Category = cc.CodeValDetail, codeName = cc.CodeName }
                                   where ((pjct.ProjectType == model.ProjectType) || (model.ProjectType == null))
                                   && ((pjct.PIName == model.PIId) || (model.PIId == null))
                                   && (pjct.ProjectNumber.Contains(model.ProjectNumber) || string.IsNullOrEmpty(model.ProjectNumber))
                                   && (R.ReceiptNumber.Contains(model.ReceiptNumber) || string.IsNullOrEmpty(model.ReceiptNumber))
                                   && ((cc.CodeValAbbr == model.ReceiptStatus) || model.ReceiptStatus == null)
                                   && ((R.ReceiptDate >= model.FromDate && R.ReceiptDate <= model.ToDate) || (model.FromDate == null || model.ToDate == null))
                                   && R.Adhoc_f != true
                                   && R.BackEnd_f != true
                                   orderby R.ReceiptId descending
                                   select new { R, pjct }).Count();
                    searchData.TotalPages = Convert.ToInt32(Math.Ceiling((double)records / pageSize));
                    searchData.Data = list;
                    searchData.pageSize = pageSize;
                    searchData.visiblePages = 10;
                    searchData.CurrentPage = page;
                }

                return searchData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ReceiptListModel GetInvoiceList(ReceiptListModel model)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = (from I in context.tblProjectInvoice
                                 join prj in context.tblProject on I.ProjectId equals prj.ProjectId
                                 join user in context.vwFacultyStaffDetails on prj.PIName equals user.UserId
                                 where prj.ProjectType == model.ProjectType && I.InvoiceDate >= model.InvoiceFromDate && I.InvoiceDate <= model.InvoiceToDate
                                 && I.Status == "Active"
                                 orderby I.InvoiceId descending
                                 select new { I, prj, user }).ToList();
                    if (query.Count > 0)
                    {
                        Nullable<int>[] _invoiceid = new Nullable<int>[query.Count];
                        string[] _invoicenumber = new string[query.Count];
                        Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[query.Count];
                        string[] _invoicedate = new string[query.Count];
                        Nullable<int>[] _PIId = new Nullable<int>[query.Count];
                        string[] _PIName = new string[query.Count];
                        Nullable<int>[] _ProjectId = new Nullable<int>[query.Count];
                        string[] _ProjectNumber = new string[query.Count];
                        for (int i = 0; i < query.Count(); i++)
                        {
                            var projectid = query[i].prj.ProjectId;

                            _invoiceid[i] = query[i].I.InvoiceId;
                            _invoicenumber[i] = query[i].I.InvoiceNumber;
                            _invoicevalue[i] = Convert.ToDecimal(query[i].I.TotalInvoiceValue);
                            _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", query[i].I.InvoiceDate);
                            _PIId[i] = query[i].prj.PIName;
                            _PIName[i] = query[i].user.FirstName;
                            _ProjectId[i] = query[i].prj.ProjectId;
                            _ProjectNumber[i] = query[i].prj.ProjectNumber;

                        }
                        model.InvoiceId = _invoiceid;
                        model.InvoiceDatestr = _invoicedate;
                        model.InvoiceNumber = _invoicenumber;
                        model.InvoiceValue = _invoicevalue;
                        model.ProjectId = _ProjectId;
                        model.PIName = _PIName;
                        model.PIId = _PIId;
                        model.ProjectNumber = _ProjectNumber;
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ReceiptListModel GetSearchInvoiceList(ReceiptListModel model, int page, int pageSize)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    var query = (from I in context.tblProjectInvoice
                                 join prj in context.tblProject on I.ProjectId equals prj.ProjectId
                                 join user in context.vwFacultyStaffDetails on prj.PIName equals user.UserId
                                 where prj.ProjectType == model.ProjectType &&
                                 (prj.ProjectNumber.Contains(model.PrjctNumber) || string.IsNullOrEmpty(model.PrjctNumber))
                                 && (user.FirstName.Contains(model.NameofPI) || string.IsNullOrEmpty(model.NameofPI))
                                 && ((I.InvoiceDate >= model.InvoiceFromDate && I.InvoiceDate <= model.InvoiceToDate) || (model.InvoiceFromDate == null && model.InvoiceToDate == null))
                                 && (I.InvoiceNumber.Contains(model.InvNumber) || string.IsNullOrEmpty(model.InvNumber))
                                 && I.Status == "Active"
                                 orderby I.InvoiceId descending
                                 select new { I, prj, user }).ToList();
                    if (query.Count > 0)
                    {
                        Nullable<int>[] _invoiceid = new Nullable<int>[query.Count];
                        string[] _invoicenumber = new string[query.Count];
                        Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[query.Count];
                        string[] _invoicedate = new string[query.Count];
                        Nullable<int>[] _PIId = new Nullable<int>[query.Count];
                        string[] _PIName = new string[query.Count];
                        Nullable<int>[] _ProjectId = new Nullable<int>[query.Count];
                        string[] _ProjectNumber = new string[query.Count];
                        for (int i = 0; i < query.Count(); i++)
                        {
                            var projectid = query[i].prj.ProjectId;
                            _invoiceid[i] = query[i].I.InvoiceId;
                            _invoicenumber[i] = query[i].I.InvoiceNumber;
                            _invoicevalue[i] = Convert.ToDecimal(query[i].I.TotalInvoiceValue);
                            _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", query[i].I.InvoiceDate);
                            _PIId[i] = query[i].prj.PIName;
                            _PIName[i] = query[i].user.FirstName;
                            _ProjectId[i] = query[i].prj.ProjectId;
                            _ProjectNumber[i] = query[i].prj.ProjectNumber;

                        }
                        model.InvoiceId = _invoiceid;
                        model.InvoiceDatestr = _invoicedate;
                        model.InvoiceNumber = _invoicenumber;
                        model.InvoiceValue = _invoicevalue;
                        model.ProjectId = _ProjectId;
                        model.PIName = _PIName;
                        model.PIId = _PIId;
                        model.ProjectNumber = _ProjectNumber;
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public ExchangeRateModel LoadExchangerate(int CurrencyId)
        {
            try
            {
                ExchangeRateModel model = new ExchangeRateModel();

                using (var context = new IOASDBEntities())
                {

                    var query = (from currency in context.tblCurrency
                                 where currency.CurrencyID == CurrencyId
                                 select currency).FirstOrDefault();

                    if (query != null)
                    {
                        model.id = query.CurrencyID;
                        model.name = query.ISOCode;
                    }

                    var fromCurrency = model.name;
                    string toCurrency = "INR";
                    decimal exchangeRate = 0;
                    WebClient web = new WebClient();
                    var pair = fromCurrency.ToUpper() + "_" + toCurrency.ToUpper();
                    string url = string.Format("https://free.currencyconverterapi.com/api/v5/convert?q={0}&compact=y", pair);
                    var response = web.DownloadString(url);
                    var split = response.Split((new string[] { "\"val\":" }), StringSplitOptions.None);
                    var value = split[1].Split('}')[0];
                    exchangeRate = decimal.Parse(value, System.Globalization.CultureInfo.InvariantCulture);
                    model.value = exchangeRate;
                    return model;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<MasterlistviewModel> getCurrency(int CountryId)
        {
            try
            {

                List<MasterlistviewModel> Currency = new List<MasterlistviewModel>();

                using (var context = new IOASDBEntities())
                {
                    if (CountryId > 0)
                    {
                        var query = (from Curr in context.tblCurrency
                                     join C in context.tblCountries on Curr.ISOCode equals C.currencyCode
                                     where C.countryID == CountryId
                                     select new { C, Curr }).SingleOrDefault();

                        Currency.Add(new MasterlistviewModel()
                        {
                            id = query.Curr.CurrencyID,
                            name = query.Curr.ISOCode,
                        });
                    }
                }

                return Currency;
            }
            catch (Exception ex)
            {
                return null;
            }

        }


        public List<InvoiceModel> GetInvoiceProcessList()
        {
            List<InvoiceModel> project = new List<InvoiceModel>();
            using (var context = new IOASDBEntities())
            {
                var query = (from I in context.tblProjectInvoice
                             join P in context.tblProject on I.ProjectId equals P.ProjectId
                             join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                             join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId
                             orderby I.InvoiceId descending
                             where I.Status == "Approval Pending"
                             select new { I, P, user.FirstName, user.EmployeeId, agency.AgencyName }).ToList();
                if (query.Count > 0)
                {
                    for (int i = 0; i < query.Count; i++)
                    {
                        project.Add(new InvoiceModel()
                        {
                            Sno = i + 1,
                            ProjectID = query[i].P.ProjectId,
                            InvoiceId = query[i].I.InvoiceId,
                            InvoiceNumber = query[i].I.InvoiceNumber,
                            ProjectNumber = query[i].P.ProjectNumber,
                            NameofPI = query[i].FirstName,
                            TotalInvoiceValue = query[i].I.TotalInvoiceValue,
                            InvoiceStatus = query[i].I.Status,
                            InvoiceDate = query[i].I.InvoiceDate,
                            Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", query[i].I.InvoiceDate),
                        });
                    }
                }
            }
            return project;
        }

        public int InvoiceProcess(InvoiceModel model, int LoggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    int InvoiceId = 0;
                    if (model.InvoiceId > 0)
                    {

                        BOAModel BOAmodel = new BOAModel();
                        BOAmodel = getInvProcessBOAmodeldetails(model);
                        var BOA = BOATransaction(BOAmodel);
                        if (BOA == true)
                        {
                            var query = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                            query.UpdtTS = DateTime.Now;
                            query.UpdtUserId = LoggedInUser;
                            query.Status = "Active";
                            context.SaveChanges();
                            InvoiceId = query.InvoiceId;
                        }
                    }
                    return InvoiceId;
                }

            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public InvoiceModel GetInvoiceDetails(int InvoiceId)
        {
            try
            {
                InvoiceModel model = new InvoiceModel();

                using (var context = new IOASDBEntities())
                {
                    var invquery = (from inv in context.tblProjectInvoice
                                    where inv.InvoiceId == InvoiceId
                                    select inv).FirstOrDefault();
                    var projectid = invquery.ProjectId;
                    var query = (from P in context.tblProject
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                 from user in g.DefaultIfEmpty()
                                 from agency in i.DefaultIfEmpty()
                                 where P.ProjectId == projectid
                                 select new { P, user, agency }).FirstOrDefault();
                    int? finyearid = query.P.FinancialYear;
                    var finyear = (from yr in context.tblFinYear
                                   where yr.FinYearId == finyearid
                                   select yr).SingleOrDefault();
                    if (query != null)
                    {

                        model.InvoiceDate = invquery.InvoiceDate;
                        model.InvoiceId = InvoiceId;
                        model.InvoiceNumber = invquery.InvoiceNumber;
                        model.PONumber = invquery.PONumber;
                        model.DescriptionofServices = invquery.DescriptionofServices;
                        model.ServiceType = invquery.ServiceType;
                        model.SACNumber = invquery.TaxCode;
                        model.TaxableValue = invquery.TaxableValue;
                        model.TotalInvoiceValue = invquery.TotalInvoiceValue;
                        model.Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", invquery.InvoiceDate);
                        model.ProjectNumber = query.P.ProjectNumber;
                        model.ProjectID = query.P.ProjectId;
                        model.ProjectType = query.P.ProjectType;
                        model.Projecttitle = query.P.ProjectTitle;
                        //   model.Department = query.user.DepartmentCode;
                        model.PIDepartmentName = query.user.DepartmentName;
                        model.CurrentFinancialYear = finyear.Year;
                        model.PIId = query.P.PIName;
                        model.NameofPI = query.user.FirstName;
                        model.SanctionOrderNumber = query.P.SanctionOrderNumber;
                        model.Sanctionvalue = query.P.SanctionValue;
                        model.SponsoringAgency = query.P.SponsoringAgency;
                        model.SponsoringAgencyName = query.agency.AgencyName;
                        model.Agencyregaddress = query.agency.Address;
                        model.Agencydistrict = query.agency.District;
                        model.AgencyPincode = query.agency.PinCode;
                        model.Agencystate = query.agency.State;
                        model.Agencystatecode = Convert.ToInt32(query.agency.StateCode);
                        model.GSTNumber = query.agency.GSTIN;
                        model.PAN = query.agency.PAN;
                        model.TAN = query.agency.TAN;
                        model.Agencycontactperson = query.agency.ContactPerson;
                        model.AgencycontactpersonEmail = query.agency.ContactEmail;
                        model.Agencycontactpersonmobile = query.agency.ContactNumber;
                        model.CommunicationAddress = invquery.CommunicationAddress;
                        model.InvoiceType = query.agency.AgencyType;
                        model.TaxStatus = query.P.TaxStatus;
                        var ccinvquery = (from C in context.tblCodeControl
                                          where C.CodeName == "InvoiceType" && C.CodeValAbbr == model.InvoiceType
                                          select C).SingleOrDefault();
                        var servicequery = (from C in context.tblTaxMaster
                                            where C.TaxMasterId == model.ServiceType
                                            select C).SingleOrDefault();
                        model.InvoiceTypeName = ccinvquery.CodeValDetail;
                        model.ServiceTypeName = servicequery.ServiceType;
                        var taxquery = (from T in context.tblInvoiceTaxDetails
                                        where T.InvoiceId == InvoiceId
                                        select T).SingleOrDefault();
                        if (taxquery.IGSTRate == 0)
                        {
                            model.SGST = taxquery.SGSTAmount;
                            model.SGSTPercentage = Convert.ToString(taxquery.SGSTRate);
                            model.CGST = taxquery.CGSTAmount;
                            model.CGSTPercentage = Convert.ToString(taxquery.CGSTRate);
                            model.IGST = taxquery.IGSTAmount;
                            model.IGSTPercentage = "NA";
                            model.TotalTaxValue = taxquery.TotalTaxValue;
                            Decimal? totaltaxpercent = (taxquery.SGSTRate) + (taxquery.CGSTRate);
                            model.TotalTaxpercentage = Convert.ToString(totaltaxpercent);
                        }
                        if (taxquery.IGSTRate > 0)
                        {
                            model.SGST = taxquery.SGSTAmount;
                            model.SGSTPercentage = "NA";
                            model.CGST = taxquery.CGSTAmount;
                            model.CGSTPercentage = "NA";
                            model.IGST = taxquery.IGSTAmount;
                            model.IGSTPercentage = Convert.ToString(taxquery.IGSTRate);
                            model.TotalTaxValue = taxquery.TotalTaxValue;
                            model.TotalTaxpercentage = model.IGSTPercentage;
                        }


                        Nullable<Decimal> totalinvoicevalue = 0;
                        var invoicequery = (from I in context.tblProjectInvoice
                                            where I.ProjectId == projectid
                                            select I).ToList();
                        if (invoicequery.Count() > 0)
                        {
                            Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                            string[] _invoicenumber = new string[invoicequery.Count];
                            Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                            string[] _invoicedate = new string[invoicequery.Count];

                            for (int i = 0; i < invoicequery.Count(); i++)
                            {
                                _invoiceid[i] = invoicequery[i].InvoiceId;
                                _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                totalinvoicevalue += _invoicevalue[i];
                            }
                            model.PreviousInvoiceDate = _invoicedate;
                            model.PreviousInvoiceId = _invoiceid;
                            model.PreviousInvoiceNumber = _invoicenumber;
                            model.PreviousInvoicevalue = _invoicevalue;
                            model.AvailableBalance = model.Sanctionvalue - totalinvoicevalue;
                        }
                        if (query.P.ProjectType == 1)
                        {
                            var projectcategory = Convert.ToInt32(query.P.SponProjectCategory);
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "SponBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             where projectgroup.ProjectGroup == projectcategory
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                        if (query.P.ProjectType == 2)
                        {
                            var projectcategory = Convert.ToInt32(query.P.ConsProjectSubType);
                            var balanceinstvalue = query.P.SanctionValue - totalinvoicevalue;
                            model.Instalmentvalue = balanceinstvalue;
                            model.Instalmentnumber = 1;
                            model.Instlmntyr = 1;
                            if (query.P.IsYearWiseAllocation == true)
                            {
                                DateTime startdate = DateTime.Now;
                                DateTime enddate = DateTime.Now;
                                DateTime today = DateTime.Now;

                                if (query.P.ActualStartDate == null)
                                {
                                    startdate = (DateTime)query.P.TentativeStartDate;
                                    enddate = (DateTime)query.P.TentativeCloseDate;
                                    TimeSpan diff_date = today - startdate;
                                    int noofdays = diff_date.Days;
                                    int years = noofdays / 365;
                                    int currentprojectyear = 0;
                                    if (years == 0)
                                    {
                                        currentprojectyear = 1;
                                    }
                                    if (years > 0)
                                    {
                                        currentprojectyear = years;
                                    }
                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        var balanceinstalment = instalment.InstallmentValueForYear - totalinvoicevalue;
                                        model.Instalmentvalue = balanceinstalment;
                                        model.Instlmntyr = instalment.Year;
                                    }
                                }
                                if (query.P.ActualStartDate != null)
                                {
                                    startdate = (DateTime)query.P.ActualStartDate;
                                    enddate = (DateTime)query.P.ActuaClosingDate;
                                    TimeSpan diff_date = today - startdate;
                                    int noofdays = diff_date.Days;
                                    int years = noofdays / 365;
                                    int currentprojectyear = 0;
                                    if (years == 0)
                                    {
                                        currentprojectyear = 1;
                                    }
                                    if (years > 0)
                                    {
                                        currentprojectyear = years;
                                    }

                                    var instalment = (from ins in context.tblInstallment
                                                      where (ins.ProjectId == projectid && ins.Year == currentprojectyear)
                                                      select ins).FirstOrDefault();
                                    if (instalment != null)
                                    {
                                        model.Instalmentnumber = instalment.InstallmentNo;
                                        var balanceinstalment = instalment.InstallmentValueForYear - totalinvoicevalue;
                                        model.Instalmentvalue = balanceinstalment;
                                        model.Instlmntyr = instalment.Year;
                                    }
                                }
                            }
                            if (query.P.IsYearWiseAllocation != true)
                            {
                                var instalment = (from ins in context.tblInstallment
                                                  where (ins.ProjectId == projectid)
                                                  select ins).FirstOrDefault();
                                if (instalment != null)
                                {
                                    var balanceinstalment = instalment.InstallmentValue - totalinvoicevalue;
                                    model.Instalmentvalue = balanceinstalment;
                                    model.Instalmentnumber = 1;
                                    model.Instlmntyr = 1;
                                }
                            }
                            var bankquery = (from Bank in context.tblIITMBankMaster
                                             join account in context.tblBankAccountMaster on Bank.BankId equals account.BankId
                                             join projectgroup in context.tblBankProjectGroup on account.BankAccountId equals projectgroup.BankAccountId
                                             join cc in context.tblCodeControl on
                                             new { pjctgroup = projectcategory, codeName = "ConsBankProjectGroup" } equals
                                             new { pjctgroup = cc.CodeValAbbr, codeName = cc.CodeName }
                                             select new { Bank, account, projectgroup, cc }).FirstOrDefault();
                            if (bankquery != null)
                            {
                                model.Bank = bankquery.Bank.BankId;
                                model.BankName = bankquery.Bank.BankName;
                                model.BankAccountNumber = bankquery.account.AccountNumber;
                                model.BankAccountId = bankquery.account.BankAccountId;
                            }
                        }
                    }
                }

                return model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public BOAModel getInvProcessBOAmodeldetails(InvoiceModel model)
        {
            try
            {
                BOAModel BOA = new BOAModel();
                List<BOATransactionModel> BOATrans = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                List<BOADetailModel> BOADetail = new List<BOADetailModel>();
                BOA.PostedDate = DateTime.Parse(model.Invoicedatestrng);
                BOA.VoucherType = 3;
                BOA.VoucherNumber = model.InvoiceNumber;
                BOA.TransactionTypeCode = "INV";
                BOA.Narration = model.DescriptionofServices;
                BOA.TempVoucherNumber = model.InvoiceNumber;
                BOA.RefNumber = model.InvoiceNumber;
                BOA.RefTransactionCode = "INV";
                // BOA.PaymentMode = model.ModeofReceipt;
                BOA.Status = "Posted";
                BOA.BOAValue = model.TotalInvoiceValue;

                BOATrans.Add(new BOATransactionModel()
                {
                    AccountHeadId = 10,
                    Amount = model.TotalInvoiceValue,
                    TransactionType = "Debit",
                    Remarks = model.DescriptionofServices,
                    SubLedgerType = 2,
                    SubLedgerId = model.SponsoringAgency,
                });

                BOATrans.Add(new BOATransactionModel()
                {
                    AccountHeadId = 136,
                    Amount = model.TaxableValue,
                    TransactionType = "Credit",
                    Remarks = model.DescriptionofServices,

                });

                if (model.CGST != 0)
                {
                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 36,
                        Amount = model.CGST,
                        TransactionType = "Credit",
                        Remarks = model.DescriptionofServices,
                    });
                }
                if (model.SGST != 0)
                {
                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 37,
                        Amount = model.SGST,
                        TransactionType = "Credit",
                        Remarks = model.DescriptionofServices,
                    });
                }
                if (model.IGST != 0)
                {
                    BOATrans.Add(new BOATransactionModel()
                    {
                        AccountHeadId = 38,
                        Amount = model.IGST,
                        TransactionType = "Credit",
                        Remarks = model.DescriptionofServices,
                    });
                }

                BOA.BOAPaymentDetail = BOAPaymentDetail;
                BOA.BOATransaction = BOATrans;
                return BOA;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<InvoiceSearchResultModel> SearchInvoiceListForApproval(InvoiceSearchFieldModel model)
        {
            try
            {
                List<InvoiceSearchResultModel> Invoice = new List<InvoiceSearchResultModel>();
                using (var context = new IOASDBEntities())
                {

                    var query = (from inv in context.tblProjectInvoice
                                 join P in context.tblProject on inv.ProjectId equals P.ProjectId
                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId
                                 where ((String.IsNullOrEmpty(model.ProjectNumber) || P.ProjectNumber.Contains(model.ProjectNumber))
                                 && (P.ProjectType == model.ProjectType || model.ProjectType == 0)
                                 && (String.IsNullOrEmpty(model.InvoiceNumber) || inv.InvoiceNumber.Contains(model.InvoiceNumber))
                                 && (String.IsNullOrEmpty(model.PIName) || user.FirstName.Contains(model.PIName))
                                 && (String.IsNullOrEmpty(model.ProjectTitle) || P.ProjectTitle.Contains(model.ProjectTitle))
                                 && (((inv.InvoiceDate >= model.InvoiceFromDate) && (inv.InvoiceDate <= model.InvoiceToDate)) ||
                                 (model.InvoiceFromDate == null && model.InvoiceToDate == null))) && inv.Status == "Approval Pending"
                                 orderby inv.InvoiceId descending
                                 select new { P, inv, user.FirstName, user.EmployeeId }).ToList();
                    if (query.Count > 0)
                    {
                        for (int i = 0; i < query.Count; i++)
                        {
                            var pi = query[i].FirstName;

                            Invoice.Add(new InvoiceSearchResultModel()
                            {
                                Sno = i + 1,
                                ProjectId = query[i].P.ProjectId,
                                InvoiceId = query[i].inv.InvoiceId,
                                ProjectNumber = query[i].P.ProjectNumber,
                                InvoiceNumber = query[i].inv.InvoiceNumber,
                                TotalInvoiceValue = query[i].inv.TotalInvoiceValue,
                                InvoiceStatus = query[i].inv.Status,
                                NameofPI = pi,
                                Invoicedatestrng = String.Format("{0:ddd dd-MMM-yyyy}", query[i].inv.InvoiceDate)
                            });
                        }
                    }
                }
                return Invoice;
            }
            catch (Exception ex)
            {
                return new List<InvoiceSearchResultModel>();
            }
        }

        public int CreateInvoice(InvoiceModel model, int LoggedInUser)
        {

            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        int InvoiceId = 0;
                        // Edit Invoice function start
                        if (model.InvoiceId > 0)
                        {
                            var query = context.tblProjectInvoice.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);
                            var taxquery = context.tblInvoiceTaxDetails.FirstOrDefault(m => m.InvoiceId == model.InvoiceId);

                            // Validation for EditInvoice details
                            if (query != null)
                            {
                                var ProjectId = model.ProjectID;
                                var Pjctquery = (from P in context.tblProject
                                                 join user in context.vwFacultyStaffDetails on P.PIName equals user.UserId into g
                                                 join agency in context.tblAgencyMaster on P.SponsoringAgency equals agency.AgencyId into i
                                                 from user in g.DefaultIfEmpty()
                                                 from agency in i.DefaultIfEmpty()
                                                 where P.ProjectId == ProjectId
                                                 select new { P, user, agency }).FirstOrDefault();

                                var invoicequery = (from I in context.tblProjectInvoice
                                                    where I.ProjectId == ProjectId && I.InvoiceId != model.InvoiceId
                                                    select I).ToList();
                                Nullable<Decimal> totalprevinvoicevalue = 0;
                                var AvailableBalance = Pjctquery.P.SanctionValue;
                                Nullable<Decimal> TaxableValue = 0;
                                if (invoicequery.Count() > 0)
                                {
                                    Nullable<int>[] _invoiceid = new Nullable<int>[invoicequery.Count];
                                    string[] _invoicenumber = new string[invoicequery.Count];
                                    Nullable<Decimal>[] _invoicevalue = new Nullable<Decimal>[invoicequery.Count];
                                    string[] _invoicedate = new string[invoicequery.Count];

                                    for (int i = 0; i < invoicequery.Count(); i++)
                                    {
                                        _invoiceid[i] = invoicequery[i].InvoiceId;
                                        _invoicenumber[i] = invoicequery[i].InvoiceNumber;
                                        _invoicevalue[i] = Convert.ToDecimal(invoicequery[i].TotalInvoiceValue);
                                        _invoicedate[i] = String.Format("{0:ddd dd-MMM-yyyy}", invoicequery[i].InvoiceDate);
                                        totalprevinvoicevalue += _invoicevalue[i];
                                    }

                                    AvailableBalance = model.Sanctionvalue - totalprevinvoicevalue;
                                }

                                var instalmentquery = (from I in context.tblInstallment
                                                       where I.ProjectId == ProjectId
                                                       select I).ToList();

                                if (Pjctquery.P.IsYearWiseAllocation == true)
                                {
                                    DateTime startdate = DateTime.Now;
                                    DateTime enddate = DateTime.Now;
                                    DateTime today = DateTime.Now;

                                    startdate = (DateTime)Pjctquery.P.TentativeStartDate;
                                    enddate = (DateTime)Pjctquery.P.TentativeCloseDate;
                                    TimeSpan diff_date = today - startdate;
                                    int noofdays = diff_date.Days;
                                    int years = noofdays / 365;
                                    int currentprojectyear = 0;
                                    if (years == 0)
                                    {
                                        currentprojectyear = 1;
                                    }
                                    if (years > 0)
                                    {
                                        currentprojectyear = years;
                                    }
                                    if (instalmentquery.Count() > 0)
                                    {
                                        var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                         where ins.ProjectId == ProjectId && ins.InvoiceId == model.InvoiceId
                                                                         // orderby ins.InvoiceId descending
                                                                         select ins).SingleOrDefault();
                                        int lastinvoicedinstalment = 1;
                                        if (previousinstalmentinvoice != null)
                                        {
                                            lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                        }
                                        //  int currentinstalment = lastinvoicedinstalment + 1;
                                        var instalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == ProjectId && ins.Year == currentprojectyear && ins.InstallmentNo == lastinvoicedinstalment)
                                                          select ins).FirstOrDefault();
                                        if (instalment != null)
                                        {
                                            TaxableValue = instalment.InstallmentValue;
                                        }
                                        else if (instalment == null)
                                        {
                                            TaxableValue = AvailableBalance;
                                        }
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }

                                    }
                                    else if (instalmentquery.Count() == 0)
                                    {
                                        TaxableValue = AvailableBalance;
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                }

                                if (Pjctquery.P.IsYearWiseAllocation != true)
                                {
                                    if (instalmentquery.Count() > 0)
                                    {
                                        var previousinstalmentinvoice = (from ins in context.tblProjectInvoice
                                                                         where ins.ProjectId == ProjectId && ins.InvoiceId == model.InvoiceId
                                                                         //orderby ins.InvoiceId descending
                                                                         select ins).SingleOrDefault();
                                        int lastinvoicedinstalment = 1;
                                        if (previousinstalmentinvoice != null)
                                        {
                                            lastinvoicedinstalment = previousinstalmentinvoice.InstalmentNumber ?? 0;
                                        }
                                        // int currentinstalment = lastinvoicedinstalment + 1;
                                        var instalment = (from ins in context.tblInstallment
                                                          where (ins.ProjectId == ProjectId && ins.InstallmentNo == lastinvoicedinstalment)
                                                          select ins).FirstOrDefault();
                                        if (instalment != null)
                                        {
                                            TaxableValue = instalment.InstallmentValue;
                                        }
                                        else if (instalment == null)
                                        {
                                            TaxableValue = AvailableBalance;
                                        }
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                    else if (instalmentquery.Count() == 0)
                                    {
                                        TaxableValue = AvailableBalance;
                                        if (model.TaxableValue > TaxableValue)
                                        {
                                            return -4;
                                        }
                                    }
                                }
                                // Validation ends and save edit in table                
                                query.UpdtUserId = LoggedInUser;
                                query.UpdtTS = DateTime.Now;
                                query.PONumber = model.PONumber;
                                query.InvoiceNumber = model.InvoiceNumber;
                                query.InvoiceType = model.InvoiceType;
                                query.ProjectId = model.ProjectID;
                                query.PIId = model.PIId;
                                query.TaxCode = model.SACNumber;
                                query.AgencyId = model.SponsoringAgency;
                                query.ServiceType = model.ServiceType;
                                query.DescriptionofServices = model.DescriptionofServices;
                                query.CommunicationAddress = model.CommunicationAddress;
                                query.TaxableValue = model.TaxableValue;
                                query.CurrencyCode = model.CurrencyCode;
                                query.InstalmentNumber = model.Instalmentnumber;
                                query.InstalmentYear = model.Instlmntyr;
                                query.TotalInvoiceValue = model.TotalInvoiceValue;
                                query.TotalInvoiceValueinWords = model.TotalInvoiceValueinwords;
                                //query.Bank = model.Bank;
                                //query.BankAccountNumber = model.BankAccountNumber;
                                query.Status = "Approval Pending";
                                context.SaveChanges();
                                if (taxquery != null)
                                {
                                    context.Entry(taxquery).State = System.Data.Entity.EntityState.Deleted;
                                    context.SaveChanges();
                                }
                                InvoiceId = query.InvoiceId;
                                tblInvoiceTaxDetails tax = new tblInvoiceTaxDetails();
                                if (model.IGSTPercentage == "NA")
                                {
                                    tax.InvoiceId = InvoiceId;
                                    // Regex regexObj = new Regex(@"[^\d]");
                                    //var cgstpercent = regexObj.Replace(model.CGSTPercentage, ""); 
                                    var cgstpercent = model.CGSTPercentage.Substring(0, (model.CGSTPercentage.Length - 1));
                                    tax.CGSTRate = Convert.ToDecimal(cgstpercent);
                                    tax.CGSTAmount = model.CGST;
                                    var sgstpercent = model.SGSTPercentage.Substring(0, (model.SGSTPercentage.Length - 1));
                                    tax.SGSTRate = Convert.ToDecimal(sgstpercent);
                                    tax.SGSTAmount = model.SGST;
                                    tax.IGSTRate = 0;
                                    tax.IGSTAmount = 0;
                                    tax.CrtdTS = DateTime.Now;
                                    tax.CrtdUserId = LoggedInUser;
                                    tax.TotalTaxValue = model.TotalTaxValue;
                                }
                                if (model.IGSTPercentage != "NA")
                                {
                                    //Regex regexObj = new Regex(@"[^\d]");
                                    tax.InvoiceId = InvoiceId;
                                    tax.CGSTRate = 0;
                                    tax.CGSTAmount = 0;
                                    tax.SGSTRate = 0;
                                    tax.SGSTAmount = 0;
                                    var igstrate = model.IGSTPercentage.Substring(0, (model.IGSTPercentage.Length - 1));
                                    tax.IGSTRate = Convert.ToDecimal(igstrate);
                                    tax.IGSTAmount = model.IGST;
                                    tax.CrtdTS = DateTime.Now;
                                    tax.CrtdUserId = LoggedInUser;
                                    tax.TotalTaxValue = model.TotalTaxValue;
                                }
                                context.tblInvoiceTaxDetails.Add(tax);
                                context.SaveChanges();
                                transaction.Commit();
                                return -2;
                            }
                            else
                            {
                                return -3;
                            }
                        }
                        // Edit Invoice function ends
                        transaction.Commit();
                        return InvoiceId;
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }

            }
        }
        #endregion
        #region Other Receipt
        public OtherReceiptModel GetOtherReceiptDetails(int id)
        {
            try
            {
                OtherReceiptModel bill = new OtherReceiptModel();
                using (var context = new IOASDBEntities())
                {
                    var query = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == id && m.Adhoc_f == true);
                    if (query != null)
                    {
                        bill.ReceiptNumber = query.ReceiptNumber;
                        bill.Remarks = query.Description;
                        bill.Bank = query.BankAccountHeadDr;
                        bill.BankAmount = query.BankAmountDr;
                        bill.Category = query.CategoryId;
                        bill.ReceiptId = id;
                        bill.IsProject = query.Project_f ?? false;
                        bill.ProjectId = query.ProjectId;
                        int pId = query.ProjectId ?? 0;
                        if (pId > 0)
                            bill.Project = Common.GetProjectNumber(pId, true);
                        bill.RefDate = query.ReferenceDate;
                        bill.RefNo = query.ReferenceNumber;
                        bill.DocumentActualName = query.DocumentActualName;
                        bill.DocumentName = query.DocumentName;
                        bill.DocumentPath = "~/Content/OtherDocuments";
                        bill.ModeOfReceipt = query.PaymentMode;

                        bill.ExpenseDetail = (from e in context.tblReceiptRecivables
                                              where e.ReceiptId == id && e.Tax_f != true
                                              select new
                                              {
                                                  e.ReceivablesHeadId,
                                                  e.ReceivabesAmount,
                                                  e.AccountGroupId,
                                                  e.ReceivablesId,
                                                  e.TransactionType
                                              })
                                              .AsEnumerable()
                                              .Select((x) => new BillExpenseDetailModel()
                                              {
                                                  AccountHeadId = x.ReceivablesHeadId,
                                                  Amount = x.ReceivabesAmount,
                                                  TransactionType = x.TransactionType,
                                                  AccountGroupList = Common.GetAccountGroup(x.AccountGroupId ?? 0),
                                                  AccountGroupId = x.AccountGroupId,
                                                  AccountHeadList = Common.GetAccountHeadList(x.AccountGroupId ?? 0),
                                                  BillExpenseDetailId = x.ReceivablesId
                                              }).ToList();

                        bill.DeductionDetail = (from d in context.tblReceiptRecivables
                                                join hd in context.tblAccountHead on d.ReceivablesHeadId equals hd.AccountHeadId
                                                join g in context.tblAccountGroup on hd.AccountGroupId equals g.AccountGroupId
                                                where d.ReceiptId == id && d.Tax_f == true
                                                select new BillDeductionDetailModel()
                                                {
                                                    AccountGroupId = d.AccountGroupId,
                                                    BillDeductionDetailId = d.ReceivablesId,
                                                    Amount = d.ReceivabesAmount,
                                                    DeductionHeadId = d.ReceivablesHeadId,
                                                    AccountGroup = g.AccountGroup,
                                                    DeductionHead = hd.AccountHead
                                                }).ToList();
                    }
                }
                return bill;
            }
            catch (Exception ex)
            {
                return new OtherReceiptModel();
            }
        }
        public int OtherReceiptIU(OtherReceiptModel model, int logged_in_user)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        decimal ttlAmt = model.ExpenseDetail.Where(m => m.TransactionType == "Debit").Select(m => m.Amount).Sum() ?? 0;
                        ttlAmt = ttlAmt + (model.BankAmount ?? 0);
                        if (model.ReceiptId == null)
                        {
                            int ReceiptId = 0;
                            tblReceipt bill = new tblReceipt();
                            bill.CrtdUserId = logged_in_user;
                            bill.CrtdTS = DateTime.Now;
                            if (model.ClassificationOfReceipt == 1)
                            {
                                bill.CategoryId = model.Category;
                                bill.Status = "Open";
                                bill.TransactionTypeCode = "RCV";
                                bill.Adhoc_f = true;
                                bill.ReceiptNumber = Common.GetNewReceiptNumber();
                            }
                            else if (model.ClassificationOfReceipt != null)
                            {
                                bill.Status = "Completed";
                                bill.TransactionTypeCode = "RBU";
                                bill.ReceiptNumber = Common.GetNewReceiptNumber("RBU");
                                bill.CategoryId = model.ClassificationOfReceipt;
                                bill.BackEnd_f = true;                               
                            }
                            else
                                return -1;

                            bill.BankAccountHeadDr = model.Bank;
                            bill.BankAmountDr = model.BankAmount;
                            bill.Description = model.Remarks;
                            bill.ReceivedAmount = ttlAmt;
                            bill.NetTransactionValue = ttlAmt;
                            bill.PaymentMode = model.ModeOfReceipt;
                            bill.ProjectId = model.ProjectId;
                            bill.Project_f = model.IsProject;
                            bill.ReferenceDate = model.RefDate;
                            bill.ReferenceNumber = model.RefNo;
                            bill.ReceiptDate = DateTime.Now;
                            if (model.file != null)
                            {
                                string actName = System.IO.Path.GetFileName(model.file.FileName);
                                var guid = Guid.NewGuid().ToString();
                                var docName = guid + "_" + actName;
                                model.file.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                bill.DocumentActualName = actName;
                                bill.DocumentName = docName;
                            }
                            context.tblReceipt.Add(bill);
                            context.SaveChanges();
                            ReceiptId = bill.ReceiptId;
                            if (model.ClassificationOfReceipt != 1 && model.ClassificationOfReceipt != null)
                            {
                                List<tblProjectTransactionlog> pLogList = new List<tblProjectTransactionlog>();
                                pLogList.Add(new tblProjectTransactionlog()
                                {
                                    Amount = model.BankAmount,
                                    CRTD_TS = DateTime.Now,
                                    ProjectId = model.Bank,
                                    RefId = ReceiptId,
                                    TranactionDate = DateTime.Now,
                                    TransactionTypeCode = "RBU",
                                    Type = "I"
                                });
                                bool updtTrans = UpdateProjectTransaction(pLogList);
                                if (!updtTrans)
                                    return -1;
                            }
                            foreach (var item in model.ExpenseDetail)
                            {
                                tblReceiptRecivables deduction = new tblReceiptRecivables();
                                deduction.AccountGroupId = item.AccountGroupId;
                                deduction.ReceivabesAmount = item.Amount ?? 0;
                                deduction.ReceiptId = ReceiptId;
                                deduction.TransactionType = item.TransactionType;
                                deduction.CrtdUserId = logged_in_user;
                                deduction.CrtdTS = DateTime.Now;
                                deduction.ReceivablesHeadId = item.AccountHeadId;
                                deduction.Tax_f = false;
                                context.tblReceiptRecivables.Add(deduction);
                                context.SaveChanges();
                            }
                            foreach (var item in model.DeductionDetail ?? new List<BillDeductionDetailModel>())
                            {
                                if (item.Amount != null && item.Amount != 0)
                                {
                                    if (item.AccountGroupId == null)
                                        return -1;
                                    tblReceiptRecivables exp = new tblReceiptRecivables();
                                    exp.AccountGroupId = item.AccountGroupId;
                                    exp.ReceivablesHeadId = item.DeductionHeadId;
                                    exp.TransactionType = "Credit";
                                    exp.ReceivabesAmount = item.Amount ?? 0;
                                    exp.Tax_f = true;
                                    exp.ReceiptId = ReceiptId;
                                    exp.CrtdUserId = logged_in_user;
                                    exp.CrtdTS = DateTime.Now;
                                    context.tblReceiptRecivables.Add(exp);
                                    context.SaveChanges();
                                }
                            }
                            transaction.Commit();
                            return ReceiptId;
                        }
                        else
                        {
                            int ReceiptId = model.ReceiptId ?? 0;
                            var bill = context.tblReceipt.FirstOrDefault(m => m.ReceiptId == ReceiptId && m.Adhoc_f == true);
                            if (bill != null)
                            {
                                bill.UpdtUserId = logged_in_user;
                                bill.UpdtTS = DateTime.Now;
                                bill.BankAccountHeadDr = model.Bank;
                                bill.BankAmountDr = model.BankAmount;
                                bill.CategoryId = model.Category;
                                bill.Description = model.Remarks;
                                bill.ReceivedAmount = ttlAmt;
                                bill.NetTransactionValue = ttlAmt;
                                bill.PaymentMode = model.ModeOfReceipt;
                                bill.ProjectId = model.ProjectId;
                                bill.Project_f = model.IsProject;
                                bill.ReferenceDate = model.RefDate;
                                bill.ReferenceNumber = model.RefNo;
                                if (model.file != null)
                                {
                                    string actName = System.IO.Path.GetFileName(model.file.FileName);
                                    var guid = Guid.NewGuid().ToString();
                                    var docName = guid + "_" + actName;
                                    model.file.SaveAs(HttpContext.Current.Server.MapPath("~/Content/OtherDocuments/" + docName));
                                    bill.DocumentActualName = actName;
                                    bill.DocumentName = docName;
                                }
                                context.SaveChanges();

                                context.tblReceiptRecivables.RemoveRange(context.tblReceiptRecivables.Where(m => m.ReceiptId == ReceiptId));
                                context.SaveChanges();
                                foreach (var item in model.ExpenseDetail)
                                {
                                    tblReceiptRecivables deduction = new tblReceiptRecivables();
                                    deduction.AccountGroupId = item.AccountGroupId;
                                    deduction.ReceivabesAmount = item.Amount ?? 0;
                                    deduction.ReceiptId = ReceiptId;
                                    deduction.TransactionType = item.TransactionType;
                                    deduction.CrtdUserId = logged_in_user;
                                    deduction.CrtdTS = DateTime.Now;
                                    deduction.ReceivablesHeadId = item.AccountHeadId;
                                    deduction.Tax_f = false;
                                    context.tblReceiptRecivables.Add(deduction);
                                    context.SaveChanges();
                                }
                                foreach (var item in model.DeductionDetail)
                                {
                                    if (item.Amount != null && item.Amount != 0)
                                    {
                                        if (item.AccountGroupId == null)
                                            return -1;
                                        tblReceiptRecivables exp = new tblReceiptRecivables();
                                        exp.AccountGroupId = item.AccountGroupId;
                                        exp.ReceivablesHeadId = item.DeductionHeadId;
                                        exp.TransactionType = "Credit";
                                        exp.ReceivabesAmount = item.Amount ?? 0;
                                        exp.Tax_f = true;
                                        exp.ReceiptId = ReceiptId;
                                        exp.CrtdUserId = logged_in_user;
                                        exp.CrtdTS = DateTime.Now;
                                        context.tblReceiptRecivables.Add(exp);
                                        context.SaveChanges();
                                    }
                                }
                                transaction.Commit();
                                return ReceiptId;
                            }
                            else
                                return -1;

                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return -1;
                    }
                }
            }
        }
        public List<OtherReceiptModel> GetOtherReceiptList()
        {
            try
            {

                List<OtherReceiptModel> list = new List<OtherReceiptModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from b in context.tblReceipt
                            join h in context.tblAccountHead on b.BankAccountHeadDr equals h.AccountHeadId
                            orderby b.ReceiptId descending
                            where b.Status != "InActive" && b.Adhoc_f == true
                            select new
                            {
                                b.ReceiptId,
                                b.ReceiptNumber,
                                b.NetTransactionValue,
                                b.CrtdTS,
                                b.Status,
                                h.AccountHead
                            })
                                 .AsEnumerable()
                                 .Select((x, index) => new OtherReceiptModel()
                                 {
                                     SlNo = index + 1,
                                     ReceiptId = x.ReceiptId,
                                     ReceiptNumber = x.ReceiptNumber,
                                     PostedDate = String.Format("{0:s}", x.CrtdTS),
                                     BankAmount = x.NetTransactionValue,
                                     Status = x.Status
                                 }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<OtherReceiptModel>();
            }
        }
        public bool ApproveOtherReceipt(Int32 id, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == id && m.Status == "Open");
                    if (billQuery != null && OtherReceiptBOATransaction(id))
                    {
                        billQuery.Status = "Completed";
                        billQuery.UpdtUserId = loggedInUser;
                        billQuery.UpdtTS = DateTime.Now;
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public bool OtherReceiptBOATransaction(Int32 id)
        {
            try
            {
                BOAModel model = new BOAModel();
                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                List<BOAPaymentDetailModel> BOAPaymentDetail = new List<BOAPaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    var billQuery = context.tblReceipt.SingleOrDefault(m => m.ReceiptId == id);
                    if (billQuery != null)
                    {
                        model.TempVoucherNumber = billQuery.ReceiptNumber;
                        model.PostedDate = DateTime.Now;
                        model.VoucherType = 4;
                        model.VoucherNumber = billQuery.ReceiptNumber;
                        model.BOAValue = billQuery.NetTransactionValue;
                        model.TransactionTypeCode = billQuery.TransactionTypeCode;
                        model.RefNumber = billQuery.ReceiptNumber;
                        model.RefTransactionCode = billQuery.TransactionTypeCode;
                        txList = (from exp in context.tblReceiptRecivables
                                  where exp.ReceiptId == id
                                  select new BOATransactionModel()
                                  {
                                      AccountHeadId = exp.ReceivablesHeadId,
                                      Amount = exp.ReceivabesAmount,
                                      TransactionType = exp.TransactionType

                                  }).ToList();
                        if (billQuery.BankAccountHeadDr > 0)
                        {
                            txList.Add(new BOATransactionModel()
                            {
                                Amount = billQuery.BankAmountDr,
                                TransactionType = "Debit",
                                AccountHeadId = billQuery.BankAccountHeadDr
                            });

                            BOAPaymentDetail.Add(new BOAPaymentDetailModel()
                            {
                                Amount = billQuery.BankAmountDr,
                                TransactionType = "Debit",
                                BankHeadID = billQuery.BankAccountHeadDr,
                                PayeeType = "Receipt",
                                PayeeId = id
                            });
                            List<tblProjectTransactionlog> pLogList = new List<tblProjectTransactionlog>();
                            pLogList.Add(new tblProjectTransactionlog()
                            {
                                Amount = billQuery.BankAmountDr,
                                CRTD_TS = DateTime.Now,
                                ProjectId = billQuery.BankAccountHeadDr,
                                RefId = id,
                                TranactionDate = DateTime.Now,
                                TransactionTypeCode = "RBU",
                                Type = "I"
                            });
                            bool updtTrans = UpdateProjectTransaction(pLogList);
                            if(!updtTrans)
                                return false;
                        }

                    }
                    else
                        return false;

                    model.BOATransaction = txList;
                    model.BOAPaymentDetail = BOAPaymentDetail;
                    return BOATransaction(model);
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Payment Process
        public List<PaymentProcessModel> GetPaymentProcessList(int? boaDraftId, bool isViewMode)
        {
            try
            {

                List<PaymentProcessModel> list = new List<PaymentProcessModel>();
                using (var context = new IOASDBEntities())
                {
                    if (boaDraftId == null)
                        list = (from payee in context.tblPaymentPayee
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join cc in context.tblCodeControl on new { codeName = "PaymentMode", codeAbbr = payee.PaymentMode ?? 0 }
                                equals new { codeName = cc.CodeName, codeAbbr = cc.CodeValAbbr } into g
                                from cc in g.DefaultIfEmpty()
                                where payee.Status == "Open" || payee.Status == "Verified"
                                select new
                                {
                                    payee.Status,
                                    payee.PayeeName,
                                    m.TransactionTypeCode,
                                    payee.PaymentMode,
                                    cc,
                                    payee.Amount,
                                    payee.PaymentPayeeId,
                                    m.ReferenceNumber
                                })
                                     .AsEnumerable()
                                     .Select((x, index) => new PaymentProcessModel()
                                     {
                                         SlNo = index + 1,
                                         Status = x.Status,
                                         PayeeName = x.PayeeName,
                                         PaymentType = x.TransactionTypeCode,
                                         PaymentPayeeId = x.PaymentPayeeId,
                                         SelModeOfPayment = x.PaymentMode,
                                         ModeOfPayment = x.cc == null ? null : x.cc.CodeValDetail,
                                         PayableAmount = x.Amount,
                                         ReferenceNumber = x.ReferenceNumber
                                     }).ToList();
                    else
                        list = (from payee in context.tblPaymentPayee
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join cc in context.tblCodeControl on new { codeName = "PaymentMode", codeAbbr = payee.PaymentMode ?? 0 }
                                equals new { codeName = cc.CodeName, codeAbbr = cc.CodeValAbbr } into g
                                from cc in g.DefaultIfEmpty()
                                where
                                context.tblBOADraftDetail.Any(m => m.BOADraftId == boaDraftId && m.PaymentPayeeId == payee.PaymentPayeeId)
                                || (!isViewMode && (payee.Status == "Open" || payee.Status == "Verified") && m.Status == "Open")
                                select new
                                {
                                    payee.Status,
                                    payee.PayeeName,
                                    m.TransactionTypeCode,
                                    payee.PaymentMode,
                                    cc,
                                    payee.Amount,
                                    payee.PaymentPayeeId,
                                    m.ReferenceNumber
                                })
                                     .AsEnumerable()
                                     .Select((x, index) => new PaymentProcessModel()
                                     {
                                         SlNo = index + 1,
                                         Status = x.Status,
                                         PayeeName = x.PayeeName,
                                         PaymentType = x.TransactionTypeCode,
                                         PaymentPayeeId = x.PaymentPayeeId,
                                         SelModeOfPayment = x.PaymentMode,
                                         ModeOfPayment = x.cc == null ? null : x.cc.CodeValDetail,
                                         PayableAmount = x.Amount,
                                         ReferenceNumber = x.ReferenceNumber
                                     }).ToList();

                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<PaymentProcessModel>();
            }
        }
        public PaymentProcessVoucherModel GetPaymentProcessVoucher(int boaDraftId)
        {
            try
            {

                PaymentProcessVoucherModel list = new PaymentProcessVoucherModel();
                using (var context = new IOASDBEntities())
                {
                    list = context.tblBOADraft.Where(m => m.BOADraftId == boaDraftId)
                         .AsEnumerable()
                         .Select((x) => new PaymentProcessVoucherModel()
                         {
                             VoucherNumber = x.TempVoucherNumber,
                             VoucherDate = String.Format("{0:ddd dd-MMM-yyyy}", x.CRTD_TS)
                         }).FirstOrDefault();
                }
                return list;
            }
            catch (Exception ex)
            {
                return new PaymentProcessVoucherModel();
            }
        }
        public List<PaymentProcessVoucherModel> PaymentProcessInitList()
        {
            try
            {

                List<PaymentProcessVoucherModel> list = new List<PaymentProcessVoucherModel>();
                using (var context = new IOASDBEntities())
                {
                    list = (from d in context.tblBOADraft
                            orderby d.BOADraftId descending
                            select new
                            {
                                d.Status,
                                d.BOADraftId,
                                d.BankTransferTotal,
                                d.ChequeTotal,
                                d.TotalAmount,
                                d.CRTD_TS,
                                d.TempVoucherNumber
                            })
                                      .AsEnumerable()
                                      .Select((x, index) => new PaymentProcessVoucherModel()
                                      {
                                          SlNo = index + 1,
                                          Status = x.Status,
                                          BankTransferTotal = x.BankTransferTotal,
                                          ChequeTotal = x.ChequeTotal,
                                          TotalAmount = x.TotalAmount,
                                          BOADraftId = x.BOADraftId,
                                          VoucherNumber = x.TempVoucherNumber,
                                          VoucherDate = String.Format("{0:s}", x.CRTD_TS)
                                      }).ToList();


                }
                return list;
            }
            catch (Exception ex)
            {
                return new List<PaymentProcessVoucherModel>();
            }
        }
        public VerifyPaymentProcessModel GetPaymentDetails(string viewType, int? boaDraftId, int? payeeId, bool isEditMode, int? modeOfPayment)
        {
            try
            {
                VerifyPaymentProcessModel model = new VerifyPaymentProcessModel();
                List<PaymentDetailModel> list = new List<PaymentDetailModel>();
                using (var context = new IOASDBEntities())
                {
                    int paymentMode = viewType == "Bank Transfer" ? 2 : 1;
                    if (viewType == "Single" || viewType == "Verify")
                    {
                        var payeeQuery = (from payee in context.tblPaymentPayee
                                          join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                          where payee.PaymentPayeeId == payeeId
                                          select new { payee, m.ReferenceNumber }).FirstOrDefault();
                        model.AccountNumber = payeeQuery.payee.AccountNumber;
                        model.IFSC = payeeQuery.payee.IFSC;
                        model.PayeeBank = payeeQuery.payee.PayeeBank;
                        model.ReferenceNumber = payeeQuery.ReferenceNumber;
                        model.PaymentMode = modeOfPayment;
                        model.PaymentPayeeId = payeeId;
                        model.DraftId = boaDraftId;
                        list = (from trans in context.tblPaymentTransaction
                                join payee in context.tblPaymentPayee on trans.PaymentId equals payee.PaymentId
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join ah in context.tblAccountHead on trans.AccountHeadId equals ah.AccountHeadId
                                join ag in context.tblAccountGroup on ah.AccountGroupId equals ag.AccountGroupId
                                where payee.PaymentPayeeId == payeeId
                                select new PaymentDetailModel()
                                {
                                    AccountGroup = ag.AccountGroup,
                                    AccountHead = ah.AccountHead,
                                    Amount = trans.Amount,
                                    TransactionType = trans.TransactionType,
                                    TransactionTypeCode = m.TransactionTypeCode
                                }).ToList();
                    }
                    else if (boaDraftId != null && !isEditMode)
                        list = (from trans in context.tblPaymentTransaction
                                from payee in context.tblPaymentPayee.Where(m => m.PaymentId == trans.PaymentId && m.PaymentMode == paymentMode).Take(1)
                                    //join payee in context.tblPaymentPayee on trans.PaymentId equals payee.PaymentId
                                join draft in context.tblBOADraftDetail on payee.PaymentPayeeId equals draft.PaymentPayeeId
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join ah in context.tblAccountHead on trans.AccountHeadId equals ah.AccountHeadId
                                join ag in context.tblAccountGroup on ah.AccountGroupId equals ag.AccountGroupId
                                where draft.BOADraftId == boaDraftId &&
                                //((viewType == "Bank Transfer" && payee.PaymentMode == 2) || (viewType == "Cheque Payment" && payee.PaymentMode == 1))
                                payee.PaymentMode == paymentMode
                                select new PaymentDetailModel()
                                {
                                    AccountGroup = ag.AccountGroup,
                                    AccountHead = ah.AccountHead,
                                    Amount = trans.Amount,
                                    TransactionType = trans.TransactionType,
                                    TransactionTypeCode = m.TransactionTypeCode,
                                    ReferenceNumber = m.ReferenceNumber
                                }).ToList();
                    else if (boaDraftId != null && isEditMode)
                        list = (from trans in context.tblPaymentTransaction
                                from payee in context.tblPaymentPayee.Where(m => m.PaymentId == trans.PaymentId && m.PaymentMode == paymentMode).Take(1)
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join ah in context.tblAccountHead on trans.AccountHeadId equals ah.AccountHeadId
                                join ag in context.tblAccountGroup on ah.AccountGroupId equals ag.AccountGroupId
                                where (payee.Status == "Verified" ||
                                context.tblBOADraftDetail.Any(m => m.PaymentPayeeId == payee.PaymentPayeeId && m.BOADraftId == boaDraftId))
                                && payee.PaymentMode == paymentMode //((viewType == "Bank Transfer" && payee.PaymentMode == 2) || (viewType == "Cheque Payment" && payee.PaymentMode == 1))
                                select new PaymentDetailModel()
                                {
                                    AccountGroup = ag.AccountGroup,
                                    AccountHead = ah.AccountHead,
                                    Amount = trans.Amount,
                                    TransactionType = trans.TransactionType,
                                    TransactionTypeCode = m.TransactionTypeCode,
                                    ReferenceNumber = m.ReferenceNumber
                                }).ToList();
                    else
                        list = (from trans in context.tblPaymentTransaction
                                from payee in context.tblPaymentPayee.Where(m => m.PaymentId == trans.PaymentId && m.PaymentMode == paymentMode).Take(1)
                                join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                join ah in context.tblAccountHead on trans.AccountHeadId equals ah.AccountHeadId
                                join ag in context.tblAccountGroup on ah.AccountGroupId equals ag.AccountGroupId
                                where //(viewType == "Bank Transfer" && payee.PaymentMode == 2 && payee.Status == "Verified") || (viewType == "Cheque Payment" && payee.PaymentMode == 1 && payee.Status == "Verified")
                                (payee.PaymentMode == paymentMode && payee.Status == "Verified") || (payee.PaymentMode == paymentMode && payee.Status == "Verified")
                                select new PaymentDetailModel()
                                {
                                    AccountGroup = ag.AccountGroup,
                                    AccountHead = ah.AccountHead,
                                    Amount = trans.Amount,
                                    TransactionType = trans.TransactionType,
                                    TransactionTypeCode = m.TransactionTypeCode,
                                    ReferenceNumber = m.ReferenceNumber
                                }).ToList();
                }
                model.transDetail = list;
                return model;
            }
            catch (Exception ex)
            {
                return new VerifyPaymentProcessModel();
            }
        }
        //public bool VerifyPaymentProcess(int paymentPayeeId, int modeOfPayment, int logged_in_user)
        //{
        //    using (var context = new IOASDBEntities())
        //    {
        //        using (var transaction = context.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                var query = context.tblPaymentPayee.FirstOrDefault(m => m.PaymentPayeeId == paymentPayeeId && m.Status == "Open");
        //                if (query != null)
        //                {

        //                    query.PaymentMode = modeOfPayment;
        //                    query.Status = "Verified";
        //                    query.UPTD_By = logged_in_user;
        //                    query.UPTD_TS = DateTime.Now;
        //                    context.SaveChanges();
        //                    int? paymentId = query.PaymentId;
        //                    var existQuery = context.tblPaymentPayee.Any(m => m.PaymentId == paymentId && m.Status == "Open");
        //                    if (!existQuery)
        //                    {
        //                        var masQuery = context.tblPayment.SingleOrDefault(m => m.PaymentId == paymentId);
        //                        masQuery.Status = "Verified";
        //                        masQuery.UPTD_By = logged_in_user;
        //                        masQuery.UPTD_TS = DateTime.Now;
        //                        context.SaveChanges();
        //                    }
        //                    transaction.Commit();
        //                    return true;
        //                }
        //                else
        //                {
        //                    return false;
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                transaction.Rollback();
        //                return false;
        //            }
        //        }
        //    }
        //}
        public bool VerifyPaymentProcess(VerifyPaymentProcessModel model, int loggedInUser)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {

                        var query = context.tblPaymentPayee.FirstOrDefault(m => m.PaymentPayeeId == model.PaymentPayeeId && m.Status == "Open");
                        if (query != null)
                        {

                            query.PaymentMode = model.PaymentMode;
                            query.Status = "Verified";
                            query.UPTD_By = loggedInUser;
                            query.UPTD_TS = DateTime.Now;
                            query.PayeeBank = model.PayeeBank;
                            query.IFSC = model.IFSC;
                            query.AccountNumber = model.AccountNumber;
                            context.SaveChanges();
                            //int? paymentId = query.PaymentId;
                            //var existQuery = context.tblPaymentPayee.Any(m => m.PaymentId == paymentId && m.Status == "Open");
                            //if (!existQuery)
                            //{
                            //    var masQuery = context.tblPayment.SingleOrDefault(m => m.PaymentId == paymentId);
                            //    masQuery.Status = "Verified";
                            //    masQuery.UPTD_By = loggedInUser;
                            //    masQuery.UPTD_TS = DateTime.Now;
                            //    context.SaveChanges();
                            //}
                            transaction.Commit();
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }
        }

        public bool ExecutePaymentSP(int loggedInUser)
        {
            try
            {

                using (var context = new IOASDBEntities())
                {
                    context.Database.ExecuteSqlCommand("UpdatePayment @p0", loggedInUser);
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public int BOADraftIU(PaymentProcessVoucherModel model, int loggedInUser)
        {
            {
                using (var context = new IOASDBEntities())
                {
                    lock (lockObj)
                    {
                        using (var transaction = context.Database.BeginTransaction())
                        {
                            try
                            {
                                //context.Database.ExecuteSqlCommand("SELECT * FROM tblPaymentPayee WITH (TABLOCKX, HOLDLOCK)");
                                if (model.BOADraftId == null)
                                {
                                    decimal btTtl = context.tblPaymentPayee.Where(m => m.PaymentMode == 2 && m.Status == "Verified").Select(m => m.Amount).Sum() ?? 0;
                                    decimal cqTtl = context.tblPaymentPayee.Where(m => m.PaymentMode == 1 && m.Status == "Verified").Select(m => m.Amount).Sum() ?? 0;
                                    decimal ttlAmt = btTtl + cqTtl;
                                    if (ttlAmt == 0)
                                    {
                                        return -2;
                                    }
                                    tblBOADraft draft = new tblBOADraft();
                                    draft.BankTransferTotal = btTtl;
                                    draft.ChequeTotal = cqTtl;
                                    draft.TotalAmount = ttlAmt;
                                    draft.CRTD_By = loggedInUser;
                                    draft.CRTD_TS = DateTime.Now;
                                    draft.Status = "Open";
                                    draft.TempVoucherNumber = Common.GetNewTempVoucherNo();
                                    context.tblBOADraft.Add(draft);
                                    context.SaveChanges();
                                    int boaDraftId = draft.BOADraftId;
                                    var payeeQuery = context.tblPaymentPayee.Where(m => m.Status == "Verified").ToList();
                                    foreach (var item in payeeQuery)
                                    {
                                        var fillyVerified = context.tblPaymentPayee.Any(m => m.PaymentId == item.PaymentId && m.Status == "Open");
                                        if (fillyVerified)
                                        {
                                            transaction.Rollback();
                                            return -3;
                                        }

                                        tblBOADraftDetail det = new tblBOADraftDetail();
                                        det.BOADraftId = boaDraftId;
                                        det.PaymentPayeeId = item.PaymentPayeeId;
                                        context.tblBOADraftDetail.Add(det);

                                        item.Status = "Process Initiated";
                                        item.UPTD_By = loggedInUser;
                                        item.UPTD_TS = DateTime.Now;
                                        context.SaveChanges();
                                    }
                                    transaction.Commit();
                                    return boaDraftId;
                                }
                                else
                                {
                                    int boaDraftId = model.BOADraftId ?? 0;
                                    decimal btTtl = (from payee in context.tblPaymentPayee
                                                     where payee.PaymentMode == 2 &&
                                                     (payee.Status == "Verified" ||
                                                     context.tblBOADraftDetail.Any(m => m.BOADraftId == boaDraftId && m.PaymentPayeeId == payee.PaymentPayeeId)
                                                     )
                                                     select payee.Amount).Sum() ?? 0;
                                    decimal cqTtl = (from payee in context.tblPaymentPayee
                                                     where payee.PaymentMode == 1 &&
                                                     (payee.Status == "Verified" ||
                                                     context.tblBOADraftDetail.Any(m => m.BOADraftId == boaDraftId && m.PaymentPayeeId == payee.PaymentPayeeId)
                                                     )
                                                     select payee.Amount).Sum() ?? 0;
                                    decimal ttlAmt = btTtl + cqTtl;
                                    if (ttlAmt == 0)
                                    {
                                        return -2;
                                    }
                                    var draft = context.tblBOADraft.FirstOrDefault(m => m.BOADraftId == boaDraftId && m.Status == "Open");
                                    draft.BankTransferTotal = btTtl;
                                    draft.ChequeTotal = cqTtl;
                                    draft.TotalAmount = ttlAmt;
                                    draft.UPTD_By = loggedInUser;
                                    draft.UPTD_TS = DateTime.Now;
                                    var payeeQuery = (from payee in context.tblPaymentPayee
                                                      where
                                                      (payee.Status == "Verified" ||
                                                      context.tblBOADraftDetail.Any(m => m.BOADraftId == boaDraftId && m.PaymentPayeeId == payee.PaymentPayeeId)
                                                      )
                                                      select payee).ToList();
                                    context.tblBOADraftDetail.RemoveRange(context.tblBOADraftDetail.Where(m => m.BOADraftId == boaDraftId));
                                    context.SaveChanges();
                                    foreach (var item in payeeQuery)
                                    {
                                        var fillyVerified = context.tblPaymentPayee.Any(m => m.PaymentId == item.PaymentId && m.Status == "Open");
                                        if (fillyVerified)
                                        {
                                            transaction.Rollback();
                                            return -3;
                                        }
                                        tblBOADraftDetail det = new tblBOADraftDetail();
                                        det.BOADraftId = boaDraftId;
                                        det.PaymentPayeeId = item.PaymentPayeeId;
                                        context.tblBOADraftDetail.Add(det);

                                        if (item.Status == "Verified")
                                        {
                                            item.Status = "Process Initiated";
                                            item.UPTD_By = loggedInUser;
                                            item.UPTD_TS = DateTime.Now;
                                        }
                                        context.SaveChanges();
                                    }
                                    transaction.Commit();
                                    return boaDraftId;
                                }
                            }
                            catch (Exception ex)
                            {
                                transaction.Rollback();
                                return -1;
                            }
                        }
                    }
                }
            }
        }
        public bool PaymentBOATransaction(Int32 boaDraftId, int loggedInUser)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    lock (lockObj)
                    {
                        var billQuery = context.tblBOADraft.SingleOrDefault(m => m.BOADraftId == boaDraftId && m.Status == "Open");
                        if (billQuery != null)
                        {
                            var tempVoucherNumber = billQuery.TempVoucherNumber;
                            var payments = (from d in context.tblBOADraftDetail
                                            join payee in context.tblPaymentPayee on d.PaymentPayeeId equals payee.PaymentPayeeId
                                            join m in context.tblPayment on payee.PaymentId equals m.PaymentId
                                            where m.Status == "Open"
                                            group m by m.PaymentId into g
                                            select new
                                            {
                                                paymentId = g.Key,
                                                transactionTypeCode = g.Select(m => m.TransactionTypeCode).FirstOrDefault(),
                                                amount = g.Select(m => m.Amount).FirstOrDefault(),
                                                refNo = g.Select(m => m.ReferenceNumber).FirstOrDefault()
                                            }).ToList();
                            foreach (var payment in payments)
                            {
                                string voucherNumber = Common.GetNewVoucherNo("Payment");
                                BOAModel model = new BOAModel();
                                List<BOATransactionModel> txList = new List<BOATransactionModel>();
                                List<BOAPaymentDetailModel> paymentList = new List<BOAPaymentDetailModel>();
                                model.TempVoucherNumber = tempVoucherNumber;
                                model.PostedDate = DateTime.Now;
                                model.VoucherType = 3;
                                model.VoucherNumber = voucherNumber;
                                model.BOAValue = payment.amount;
                                model.TransactionTypeCode = payment.transactionTypeCode;
                                model.RefNumber = payment.refNo;
                                model.RefTransactionCode = payment.transactionTypeCode;
                                txList = (from exp in context.tblPaymentTransaction
                                          where exp.PaymentId == payment.paymentId
                                          select new BOATransactionModel()
                                          {
                                              AccountHeadId = exp.AccountHeadId,
                                              Amount = exp.Amount,
                                              TransactionType = exp.TransactionType,
                                              Creditor_f = null,
                                              SubLedgerId = null,
                                              SubLedgerType = null,
                                              StudentRoll = null

                                          }).ToList()
                                       .Concat(from d in context.tblPaymentPayee
                                               where d.PaymentId == payment.paymentId
                                               select new BOATransactionModel()
                                               {
                                                   AccountHeadId = null,
                                                   Amount = d.Amount,
                                                   TransactionType = d.TransactionType,
                                                   Creditor_f = d.TransactionType == "Credit" ? true : false,
                                                   SubLedgerId = d.PayeeId,
                                                   SubLedgerType = d.PayeeTypeId,
                                                   StudentRoll = d.PayeeName
                                               }).ToList();
                                paymentList = (from d in context.tblPaymentPayee
                                               where d.PaymentId == payment.paymentId
                                               select new BOAPaymentDetailModel()
                                               {
                                                   Amount = d.Amount,
                                                   TransactionType = d.TransactionType,
                                                   BankHeadID = d.BankHeadID,
                                                   PayeeBank = d.PayeeBank,
                                                   PayeeId = d.PayeeId,
                                                   PayeeName = d.PayeeName,
                                                   PayeeType = d.PayeeType,
                                                   PaymentMode = d.PaymentMode,
                                                   StudentRoll = d.StudentRoll,
                                                   ReferenceNumber = payment.refNo
                                               }).ToList();
                                model.BOATransaction = txList;
                                model.BOAPaymentDetail = paymentList;
                                if (BOATransaction(model))
                                {
                                    var uptPStatusQuery = context.tblPayment.FirstOrDefault(m => m.PaymentId == payment.paymentId);
                                    uptPStatusQuery.Status = "Payment Processed";
                                    uptPStatusQuery.VoucherNumber = voucherNumber;
                                    uptPStatusQuery.UPTD_By = loggedInUser;
                                    uptPStatusQuery.UPTD_TS = DateTime.Now;
                                    context.tblPaymentPayee.Where(x => x.PaymentId == payment.paymentId)
                                    .ToList()
                                    .ForEach(m =>
                                    {
                                        m.Status = "Payment Processed";
                                        m.UPTD_By = loggedInUser;
                                        m.UPTD_TS = DateTime.Now;
                                    });
                                    context.SaveChanges();
                                }
                            }
                            billQuery.Status = "Completed";
                            billQuery.UPTD_By = loggedInUser;
                            billQuery.UPTD_TS = DateTime.Now;
                            context.SaveChanges();
                        }
                        else
                            return false;


                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        #endregion
        #region Common
        public bool UpdateProjectTransaction(List<tblProjectTransactionlog> model)
        {
            try
            {
                using (var context = new IOASDBEntities())
                {
                    if (model.Count > 0)
                    {
                        context.tblProjectTransactionlog.AddRange(model);
                        context.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool UpdateCommitmentBalance(List<BillCommitmentDetailModel> model, bool revoke, bool isReversed, int uId, int refId, string tCode, bool isClosed = false)
        {
            using (var context = new IOASDBEntities())
            {
                using (var transaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        List<tblProjectTransactionlog> pLogList = new List<tblProjectTransactionlog>();
                        foreach (var item in model)
                        {
                            var detQuery = context.tblCommitmentDetails.FirstOrDefault(m => m.ComitmentDetailId == item.CommitmentDetailId);
                            if (detQuery != null)
                            {
                                decimal? newBalAmt = 0;
                                string txType = "";
                                decimal txAmt = 0;
                                if (isReversed && revoke)
                                {
                                    txType = "I";
                                    txAmt = item.ReversedAmount ?? 0;
                                    newBalAmt = (detQuery.BalanceAmount ?? 0) - (item.ReversedAmount ?? 0);
                                    if (newBalAmt < 0)
                                        return false;
                                }
                                else if (isReversed || revoke)
                                {
                                    txType = "I";
                                    txAmt = item.ReversedAmount ?? 0;
                                    newBalAmt = (detQuery.BalanceAmount ?? 0) + (item.ReversedAmount ?? 0);
                                    if (detQuery.Amount < newBalAmt)
                                        return false;
                                }
                                else if (isClosed == true)
                                {
                                    txType = "I";
                                    txAmt = detQuery.BalanceAmount ?? 0;
                                    newBalAmt = 0;
                                }
                                else
                                {
                                    txType = "E";
                                    txAmt = item.PaymentAmount ?? 0;
                                    newBalAmt = (detQuery.BalanceAmount ?? 0) - (item.PaymentAmount ?? 0);
                                    if (newBalAmt < 0)
                                        return false;
                                }
                                tblCommitmentLog log = new tblCommitmentLog();
                                log.OldAmount = detQuery.BalanceAmount ?? 0;
                                log.NewAmount = newBalAmt;
                                log.Reject_f = revoke;
                                log.Reversed_f = isReversed;
                                log.TransactionTypeCode = tCode;
                                log.CommitmentDetailID = item.CommitmentDetailId;
                                log.CRTD_By = uId;
                                log.CRTD_TS = DateTime.Now;
                                log.RefId = refId;
                                log.IsClosed = isClosed;
                                context.tblCommitmentLog.Add(log);
                                if (isClosed)
                                    detQuery.ClosedAmount = detQuery.BalanceAmount ?? 0;
                                detQuery.BalanceAmount = newBalAmt;
                                context.SaveChanges();

                                int? projId = context.tblCommitment.FirstOrDefault(m => m.CommitmentId == item.CommitmentId).ProjectId;
                                pLogList.Add(new tblProjectTransactionlog()
                                {
                                    Amount = txAmt,
                                    BudgetHeadId = detQuery.AllocationHeadId,
                                    CRTD_By = uId,
                                    CRTD_TS = DateTime.Now,
                                    ProjectId = projId,
                                    RefId = refId,
                                    TranactionDate = DateTime.Now,
                                    TransactionTypeCode = tCode,
                                    Type = txType
                                });
                            }
                            else
                                throw new Exception();
                        }

                        context.tblProjectTransactionlog.AddRange(pLogList);
                        context.SaveChanges();
                        //var commitQuery = (from b in model
                        //                   group b by b.CommitmentId into g
                        //                   select new { ttlAllocatedAmt = g.Sum(v => v.PaymentAmount), commitmentId = g.Key }).ToList();
                        var commitQuery = model.GroupBy(m => m.CommitmentId)
                            .Select(g => new { ttlAllocatedAmt = g.Sum(v => v.PaymentAmount), commitmentId = g.Key, ttlReversedAmt = g.Sum(v => v.ReversedAmount) }).ToList();
                        if (commitQuery.Count > 0)
                        {
                            foreach (var item in commitQuery)
                            {
                                var Query = context.tblCommitment.FirstOrDefault(m => m.CommitmentId == item.commitmentId);
                                if (Query != null)
                                {
                                    if (isReversed || revoke)
                                    {

                                        decimal? newBalAmt = item.ttlReversedAmt + Query.CommitmentBalance;
                                        if (Query.CommitmentAmount < newBalAmt)
                                            return false;
                                        else
                                            Query.CommitmentBalance = newBalAmt;
                                    }
                                    else if (isClosed == true)
                                    {
                                        Query.CommitmentBalance = 0;
                                    }
                                    else
                                    {
                                        decimal? newBalAmt = Query.CommitmentBalance - item.ttlAllocatedAmt;
                                        if (newBalAmt < 0)
                                            return false;
                                        else
                                            Query.CommitmentBalance = newBalAmt;
                                    }

                                    context.SaveChanges();
                                }
                                else
                                    throw new Exception();
                            }
                        }
                        else
                            throw new Exception();

                        transaction.Commit();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }
        }
        #endregion
    }
}