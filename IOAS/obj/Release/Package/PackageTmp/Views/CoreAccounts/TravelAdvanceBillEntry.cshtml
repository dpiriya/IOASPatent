@model IOAS.Models.TravelAdvanceBillEntryModel
@{
    ViewBag.Title = "Travel Advance Bill Entry";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("TravelAdvanceBillEntry", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formADV", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Travel Advance Bill Entry</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.TravelBillId)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control", @readonly = "readonly" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "TAD")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>


            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Payment Break Up</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>Transactions</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>06</span>Documents</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-8">
                                    <div class="white-bg">

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">PI</label>
                                                    @*@Html.DropDownListFor(m => m.ProjectId, new SelectList(ViewBag.ProjectList, "id", "name"), new { @class = "form-control selectpicker", @disabled = "disabled" })
                                                    @Html.HiddenFor(m => m.ProjectId)
                                                    @Html.ValidationMessageFor(m => m.ProjectId)*@
                                                    @Html.TextBoxFor(m => m.PIName, new { @class = "form-control", @disabled = "disabled" })
                                                    @Html.TextBoxFor(m => m.PI, new { @class = "form-control dis-none" })
                                                    @Html.ValidationMessageFor(m => m.PI)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Country</label>
                                                    @Html.DropDownListFor(m => m.CountryId, new SelectList(ViewBag.CountryList, "CountryID", "CountryName"), new { @multiple = "multiple", @disabled = "disabled", @class = "form-control selectpicker", @title = "Select any" })
@for (int i = 0; i < Model.CountryId.Length; i++)
{
                                                 <input type="hidden" name="CountryId" value="@Model.CountryId[i]" />
}
                                                    @Html.ValidationMessageFor(m => m.CountryId)
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Duration</label>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            @Html.EditorFor(m => m.TravelFromDate, new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(m => m.TravelFromDate)
                                                            <label id="lblDuration"></label>
                                                        </div>
                                                        <div class="col-md-6">
                                                            @Html.EditorFor(m => m.TravelToDate, new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(m => m.TravelToDate)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Place</label>
                                                    @Html.TextBoxFor(m => m.Place, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.Place)
                                                </div>
                                            </div>


                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Purpose</label>
                                                    @Html.TextBoxFor(m => m.Purpose, new { @class = "form-control", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.Purpose)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>No. of Travelers</label>
                                                    @Html.TextBoxFor(m => m.NoOfTraveller, new { @value = "1", @class = "form-control", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.NoOfTraveller)
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Estimated Budget</label>
                                                    @Html.TextBoxFor(m => m.EstimatedValue, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.EstimatedValue)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Advance Requested</label>
                                                    @Html.TextBoxFor(m => m.AdvanceValue, new { @class = "form-control", @onkeypress = "return ValidateDecimalOnly(event)", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.AdvanceValue)
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    <label>Remarks</label>
                                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control", @rows = "3", @readonly = "readonly" })
                                                    @Html.ValidationMessageFor(m => m.Remarks)
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-group custom-form-group">
                                                    @Html.HiddenFor(m=>m.Adv100Pct_f)
                                                    @Html.HiddenFor(m=>m.ProformaInvoiceSubmit_f)
                                                    @Html.CheckBoxFor(m => m.Adv100Pct_f, new { @disabled = "disabled" })<label class="ml15">Approved for 100%</label> <br />
                                                    @Html.CheckBoxFor(m => m.ProformaInvoiceSubmit_f, new { @id ="proInv", @disabled = "disabled" })<label class="ml15">Proforma Invoice Attached</label>
                                                    @*<input type="checkbox" name="vehicle1" value="Bike"><label class="ml15">Proformula Invoice Submit</label>*@
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>
                            </div>


                            <div class="col-md-4 mt30">

                                <div class="bl-lg-panel-box">
                                    <div class="bl-lg-panel-box-hd mb-null">
                                        <div class="">
                                            <h3 class="fn-s-bold">Traveller Details</h3>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="">
                                                <table class="table table-bordered mb-null">
                                                    <thead>
                                                        <tr>
                                                            <th>Category</th>
                                                            <th>Name</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="tbodyTraveller">
                                                        <tr>
                                                            <td>
                                                                @Html.DropDownListFor(m => m.CategoryId, new SelectList(ViewBag.CategoryList, "id", "name"), "Select any", new { @class = "form-control required", @readonly = "readonly" })
                                                                @Html.ValidationMessageFor(m => m.CategoryId)
                                                            </td>
                                                            @*<td class="tdDDLTraveler">
                                                                @Html.DropDownListFor(m => m.TravellerId, new SelectList(ViewBag.TravellerList, "id", "name"), "Select any", new { @class = "form-control", @readonly = "readonly" })
                                                               
                                                                @Html.ValidationMessageFor(m => m.TravellerId)
                                                            </td>
                                                            <td class="tdTxtTraveler dis-none">
                                                                @Html.TextBoxFor(m => m.TravellerName, new { @class = "form-control", @readonly = "readonly" })
                                                                @Html.ValidationMessageFor(m => m.TravellerName)
                                                            </td>*@
                                                            <td class="tdDDLTraveler">
                                                                <input id="autoComplete" name="autoComplete" class="form-control" readonly />
                                                                @Html.ValidationMessage("autoComplete")
                                                                <input id="TravellerId" name="TravellerId" class="form-control dis-none" />
                                                                @Html.ValidationMessage("TravellerId")
                                                            </td>
                                                            <td class="tdTxtTraveler dis-none">
                                                                @Html.TextBox("TravellerName", "", new { @class = "form-control", @readonly = "readonly" })
                                                                @Html.ValidationMessage("TravellerName")
                                                            </td>
                                                            <td>
                                                                <a href="javascript:void(0)" class="btn-sm btn btn-danger removeTravellerDetail dis-none"><i class="ion-android-close"></i></a>
                                                            </td>

                                                        </tr>
                                                    </tbody>
                                                </table>
                                                <div class="row p-b-sm dis-none">
                                                    <div class="col-md-12 text-center mt-md">
                                                        <button type="button" id="btnAddTraveller" class="btn-primary btn">Add New</button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*<div class="row">
                                <div class="col-md-12 text-center mb-md mt-md">
                                    <input type="submit" class="btn btn-primary mr10" value="Submit" name="Button" id="btnSubmit" />
                                    <input type="button" onclick="window.location.href='@Url.Action("TravelAdvancePaymentList", "CoreAccounts")';" class="btn btn-default" value="Close" id="btnclose" />
                                </div>
                            </div>*@

                    </div>
                </div>

                <div class="tab">
                    @Html.Partial("_InvoiceBreakUp", Model.InvoiceBreakDetail)
                    @Html.Partial("_PaymentBreakUp", Model.PaymentBreakDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_ADVTransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>


                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("TravelAdvancePaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}

@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#TravelToDate, #TravelFromDate,#SourceEmailDate').datepicker({ minDate: -1, maxDate: -2, dateFormat: 'dd-MM-yy' }).attr('readonly', 'readonly');
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true,

        });

        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        applyAutoComplete($('#PIName'), $('#PI'), "@Url.Action("LoadPIList", "CoreAccounts")");

        var category = @Html.Raw(Json.Encode(Model.CategoryId));
        var tID = @Html.Raw(Json.Encode(Model.TravellerId));
        var tName = @Html.Raw(Json.Encode(Model.TravellerName));
        var countryies = @Html.Raw(Json.Encode(Model.CountryId));
        $('#CountryId').val(countryies)
        $('#CountryId').selectpicker('refresh');
        $.each(category, function (i, selVal) {
            var trEle;
            if (i == 0) {
                trEle = $('#tbodyTraveller tr:first');
                $('#tbodyTraveller tr').not(':first').remove();
            } else {
                trEle = $('#tbodyTraveller tr:first').clone().find("input,select").val("").end();
                //$(trEle).find('a.dis-none').removeClass('dis-none');
                $('#tbodyTraveller').append(trEle);
            }            
            $(trEle).find("select[name='CategoryId']").val(selVal);
            if (selVal == 1) {
                $(trEle).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
                $(trEle).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
                var ele = $(trEle).find("input[name='autoComplete']");
                var eleTId = $(trEle).find("input[name='TravellerId']");
                var eleTName = $(trEle).find("input[name='TravellerName']");
                $(eleTId).addClass('required');
                $(eleTName).removeClass('required');
                $(eleTName).val(tName[i]);
                $(ele).val(tName[i]);
                $(eleTId).val(tID[i]);
                setAutoComplete(ele, "@Url.Action("LoadPIList", "CoreAccounts")", true)
            } else if (selVal == 2) {
                $(trEle).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
                $(trEle).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
                var ele = $(trEle).find("input[name='autoComplete']");
                var eleTId = $(trEle).find("input[name='TravellerId']");
                var eleTName = $(trEle).find("input[name='TravellerName']");
                $(eleTId).addClass('required');
                $(eleTName).removeClass('required');
                $(eleTName).val(tName[i]);
                $(ele).val(tName[i]);
                $(eleTId).val(tID[i]);
                setAutoComplete(ele, "@Url.Action("LoadStudentList", "CoreAccounts")", false);
            } else if (selVal == 3) {
                $(trEle).closest('tr').find("td.tdDDLTraveler").addClass('dis-none');
                $(trEle).closest('tr').find("td.tdTxtTraveler").removeClass('dis-none');
                var ele = $(trEle).find("input[name='TravellerId']");
                $(ele).removeClass('required');
                var eleTName = $(trEle).find("input[name='TravellerName']");
                $(eleTName).addClass('required');
                $(eleTName).val(tName[i]);
            }
        });
        $('#lblVendorName').html('PI / Clearance Agent');
        CalculatePaymentBUTotal();
        CalculateDeductionTotal();
        CalculateNoOfTraveller();
        CalculatePaymentValue();
        calcDateDiff();
    });
    function setAutoComplete(ele,url,setId) {
        $(ele).autocomplete({
            select: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
                if (setId == true) {
                    $(ele).closest('tr').find("input[name='TravellerId']").val(ui.item.value);
                    $(ele).closest('tr').find("input[name='TravellerName']").val(ui.item.label);
                } else {
                    $(ele).closest('tr').find("input[name='TravellerId']").val(ui.item.label);
                    $(ele).closest('tr').find("input[name='TravellerName']").val(ui.item.label);
                }
            },
            focus: function (event, ui) {
                event.preventDefault();
                $(ele).val(ui.item.label);
            },
            source: function (request, response) {
                $.getJSON(url,{ term: request.term },
                 function (locationdata) {
                     response(locationdata);
                 });
            },
            minLength: 3
        });
    }
    $(document).on('change', 'select[name="CategoryId"]', function () {
        var selVal = $(this).val();
        $(this).closest('tr').find("input[name='TravellerId']").val('');
        $(this).closest('tr').find("input[name='autoComplete']").val('');
        $(this).closest('tr').find("input[name='TravellerName']").val('');
        if (selVal == 1) {
            $(this).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
            $(this).closest('tr').find("input[name='TravellerId']").addClass('required');
            var ele = $(this).closest('tr').find("input[name='autoComplete']");
            $(this).closest('tr').find("input[name='TravellerName']").removeClass('required');
            setAutoComplete(ele, "@Url.Action("LoadPIList", "CoreAccounts")", true)
        } else if (selVal == 2) {
            $(this).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
            $(this).closest('tr').find("input[name='TravellerId']").addClass('required');
            var ele = $(this).closest('tr').find("input[name='autoComplete']");
            $(this).closest('tr').find("input[name='TravellerName']").removeClass('required');
            setAutoComplete(ele, "@Url.Action("LoadStudentList", "CoreAccounts")", false);
        } else if (selVal == 3) {
            $(this).closest('tr').find("td.tdDDLTraveler").addClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").removeClass('dis-none');
            var ele = $(this).closest('tr').find("input[name='TravellerId']");
            $(ele).removeClass('required');
            $(this).closest('tr').find("input[name='TravellerName']").addClass('required');
        }
    });
    $('#PIName').keyup(function () {
        if ($(this).val() == "") {
            $('#PI').val('')
        }
    });
    $(document).on('click', 'a.removeTravellerDetail', function () {
        $(this).closest('tr').remove();
        CalculateNoOfTraveller();
    });
    $('#btnAddTraveller').click(function () {
        var cln = $('#tbodyTraveller tr:first').clone().find("input,select").val("").end();
        $(cln).find('a.dis-none').removeClass('dis-none');
        $(cln).find('td.tdDDLTraveler').removeClass('dis-none');
        $(cln).find('td.tdTxtTraveler').addClass('dis-none');
        $('#tbodyTraveller').append(cln);
        CalculateNoOfTraveller();
    });
    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
		$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
		if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function formSave(){
        var isValid = $('#formADV').valid();
        if (!isValid)
            return false;

        $('#formADV').submit();
    }
    $("#TravelToDate, #TravelFromDate").change(function () {
        calcDateDiff();
    });
    function calcDateDiff() {
        var strDate = $("#TravelFromDate").val();
        var clsDate = $("#TravelToDate").val();
        if (strDate != '' && clsDate != '') {
            var startDate = moment(parseDate(strDate));
            var closeDate = moment(parseDate(clsDate));

            var mins = closeDate.diff(startDate, 'minutes');
            if (mins <= 0) {
                $('#alert').html("To Date must be greater than from date.");
                $('#Validation').modal('toggle');
                return false;
            }
            var result = '';
            var years = closeDate.diff(startDate, 'year');
            startDate.add(years, 'years');

            var months = closeDate.diff(startDate, 'months');
            startDate.add(months, 'months');

            var days = closeDate.diff(startDate, 'days');
            if (years > 1) {
                result = years + ' years ';
            } else if (years == 1) {
                result = years + ' year ';
            }
            if (months > 1) {
                result = result + months + ' months ';
            } else if (months == 1) {
                result = result + months + ' month ';
            }
            if (days > 1) {
                result = result + days + ' days';
            } else if (days == 1) {
                result = result + days + ' day';
            }
            $('#lblDuration').html(result);
        }
    }
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    function CalculateNoOfTraveller() {
        var len = $('#tbodyTraveller tr').length;
        $('#NoOfTraveller').val(len);
    }
    $('#CommitmentAmount, #CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Amount"], #ttlCr, #ttlDr,#AdvanceValue, #AdvanceValue, #NoOfTraveller').on("copy cut paste drop", function () {
        return false;
    });
    $(document).on('change','select[name="CategoryId"]',function () {
        var selVal = $(this).val();
        if (selVal == 1) {
            $(this).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
            var ele = $(this).closest('tr').find("select[name='TravellerId']");
            $(ele).addClass('required');
            $(this).closest('tr').find("input[name='TravellerName']").removeClass('required');
            $.getJSON("@Url.Action("LoadPIList", "CoreAccounts")",
             function (locationdata) {
                 ele.empty();
                 fillAutoCompleteDropDown(ele, locationdata, true);
             });
        } else if (selVal == 2) {
            $(this).closest('tr').find("td.tdDDLTraveler").removeClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").addClass('dis-none');
            var ele = $(this).closest('tr').find("select[name='TravellerId']");
            $(ele).addClass('required');
            $(this).closest('tr').find("input[name='TravellerName']").removeClass('required');
            $.getJSON("@Url.Action("LoadStudentList", "CoreAccounts")",
             function (locationdata) {
                 ele.empty();
                 fillAutoCompleteDropDown(ele, locationdata, true,true);
             });
        } else if (selVal == 3) {
            $(this).closest('tr').find("td.tdDDLTraveler").addClass('dis-none');
            $(this).closest('tr').find("td.tdTxtTraveler").removeClass('dis-none');
            var ele = $(this).closest('tr').find("select[name='TravellerId']");
            $(ele).removeClass('required');
            $(this).closest('tr').find("input[name='TravellerName']").addClass('required');

        }
    });
    function fillMasterDropDown(ele, data, fillDafaultText,valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if(valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        }else{
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }

    function AddNewExpense(){
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "ADV","tSubCode" : "1"},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    function GetTransactionDetails() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "TAD","tSubCode" : "1"},
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        if(item.TDSPercentage == null){
                            amtEle.val('');
                        }else{
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }

                        amtEle.addClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                        amtEle.addClass('required');
                        if(item.TDSPercentage != null){
                            tds = ttlAdvTax * item.TDSPercentage / 100;
                            amtEle.val(tds);
                        }
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }



    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var netAdvAmt = parseFloat($('#AdvanceValue').val());
        var ttlGSTElg = parseFloat($('#GSTOffsetTotal').val()) || 0;
        netAdvAmt = netAdvAmt - ttlGSTElg;
        $("#tbodyCommitmentSelList tr").each(function(){
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });

        if (isNaN(netAdvAmt) || isNaN(commitmentAmt)) {
            msg = 'the requested advance value / allocated commitment value is not a valid entry.';
        } else if (netAdvAmt != commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var taxAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var netAdvAmt = parseFloat($('#AdvanceValue').val());

        var netDrAmt = ttldeductAmt - taxAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if(netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(netDrAmt) || isNaN(commitmentAmt)) {
            msg = 'The expense value / allocated commitment value is not a valid entry.';
        } else if (netDrAmt != commitmentAmt) {
            msg = 'There is a mismatch between the expense value and allocated commitment value. Please update the value to continue.';
        }


        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var strDate = $("#TravelFromDate").val();
            var clsDate = $("#TravelToDate").val();
            if (strDate != '' && clsDate != '') {
                var startDate = moment(parseDate(strDate));
                var closeDate = moment(parseDate(clsDate));

                var mins = closeDate.diff(startDate, 'minutes');
                if (mins <= 0) {
                    $('#alert').html("To Date must be greater than from date.");
                    $('#Validation').modal('toggle');
                    return false;
                }
            }
            var isChecked = $('#ProformaInvoiceSubmit_f').val();//.is(":checked");
            if (isChecked != "True") {
                $('#alert').html("Proforma Invoice Attached is not checked.");
                $('#Validation').modal('toggle');
                return false;
            }
        }else if (currentTab == 1) {
            var advTtl = parseFloat($('#AdvanceValue').val()) || 0;
            var payBUTtl = parseFloat($('#PaymentBUTotal').val()) || 0;
            //var invAmt = parseFloat($('#InvoiceBUTotal').val()) || 0;
            if (advTtl != payBUTtl) {
                $('#alert').html("Not a valid entry.The requested advance value and Payment Break Up Total value are not equal.");
                $('#Validation').modal('toggle');
                return false;
            }//else if (advTtl < invAmt) {
            //    $('#alert').html("There is a mismatch between the total invoice amount and payable value. Please update the value to continue.");
            //    $('#Validation').modal('toggle');
            //    return false;
            //}
        }else if (currentTab == 2) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if($('#NeedUpdateTransDetail').val().toLowerCase() == 'true'){
                    GetTransactionDetails();
                }

                $("#CreditorAmount").val($('#AdvanceValue').val());
                //$("#DeductionAmount, #ttlDr, #ExpenseAmount").val('');
            }
        } else if (currentTab == 3) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }else if (currentTab == 4) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }
        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
