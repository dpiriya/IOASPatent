 @model IOAS.Models.ForeignRemittanceModel
@{
    ViewBag.Title = "Foreign Remittance";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("ForeignRemittance", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formFRM", enctype = "multipart/form-data" }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Foreign Remitance</b> </h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control"})
                    @Html.ValidationMessageFor(m => m.Source)    
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)                
                    @Html.HiddenFor(m => m.ForeignRemittanceId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "FRM")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control"})
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            
            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.ForeignRemitNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Remittance Details</a></li>                    
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>   
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">

                        <div class="row">

                            <div class="col-md-6">
                                <div class="bl-lg-panel-box pb-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-12">

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Beneficiary</label>
                                                            @Html.DropDownListFor(m => m.Beneficiary, new SelectList(ViewBag.Supplier, "id", "name"), "Select any", new { @class = "form-control selectpicker", @required = "required", @id = "txtBeneficiary" })
                                                            @Html.ValidationMessageFor(m => m.Beneficiary)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Date</label>
                                                            @Html.TextBoxFor(m => m.RemitDate, new { @class = "form-control", @id = "txtRemittanceDate", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.RemitDate)
                                                        </div>
                                                    </div>

                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>PO Number</label>
                                                            @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control", @id = "txtPONumber" })
                                                            @Html.ValidationMessageFor(m => m.PONumber)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Type of Payment</label>
                                                            @Html.DropDownListFor(m => m.TypeofPayment, new SelectList(ViewBag.TypeofPayment, "id", "name"), "Select any", new { @class = "form-control", @required = "required", @id = "txtTypeofPayment" })
                                                            @Html.ValidationMessageFor(m => m.TypeofPayment)

                                                        </div>
                                                    </div>  
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Payment Bank</label>
                                                            @Html.DropDownListFor(m => m.PaymentBank, new SelectList(ViewBag.PaymentBank, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPaymentBank", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.PaymentBank)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Portfolio Name</label>
                                                            @Html.DropDownListFor(m => m.PortfolioName, new SelectList(ViewBag.PortfolioName, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPortfolioName", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.PortfolioName)
                                                        </div>
                                                    </div>
                                                </div>
                                              
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Foreign Currency Equivalent to INR </label>
                                                            @Html.DropDownListFor(m => m.ForgnCurrncyEqualtoINR, new SelectList(ViewBag.Currencyequalantstatus, "id", "name"), "Select any", new { @class = "form-control", @id = "txtForgnCurrencyequaltoinr", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.ForgnCurrncyEqualtoINR)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Amount</label>
                                                            @Html.TextBoxFor(m => m.ForeignRemittanceAmount, new { @class = "form-control", @id = "txtForeignRemitAmt", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.ForeignRemittanceAmount)
                                                        </div>
                                                    </div> 
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Amount in Words</label>
                                                            @Html.TextBoxFor(m => m.RemittanceAmountinWords, new { @class = "form-control", @id = "txtForeignRemitAmtinwords", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.RemittanceAmountinWords)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Remittance Currency</label>
                                                            @Html.DropDownListFor(m => m.RemittanceCurrency, new SelectList(ViewBag.Currency, "id", "name"), "Select any", new { @class = "form-control", @id = "txtRemittanceCurrency", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.RemittanceCurrency)

                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Invoice Number</label>
                                                            @Html.TextBoxFor(m => m.InvoiceNumber, new { @class = "form-control", @id = "txtInvoiceNumber", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.InvoiceNumber)
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Invoice Date</label>
                                                            @Html.TextBoxFor(m => m.InvDate, new { @class = "form-control", @id = "txtInvoiceDate", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.InvDate)
                                                        </div>
                                                    </div>
                                                </div>
                                               
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label class="required">Correspondent/Intermediary Bank Name</label>
                                                            @Html.TextBoxFor(m => m.IntermediaryBank, new { @class = "form-control", @id = "txtIntermediaryBank", @required = "required" })
                                                            @Html.ValidationMessageFor(m => m.IntermediaryBank)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group custom-form-group">
                                                            <label>Correspondent/Intermediary Bank Address</label>
                                                            @Html.TextBoxFor(m => m.IntermediaryBankAddress, new { @class = "form-control", @id = "txtIntermediaryBankaddress" })
                                                            @Html.ValidationMessageFor(m => m.IntermediaryBankAddress)
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="bl-lg-panel-box  pb-null">
                                    <div class="bl-lg-panel-box-hd mb-m-5 pd-null">
                                        <div class="cmn-panel-box">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Account to be Debited</label>
                                                        @Html.TextBoxFor(m => m.AccountNumber, new { @class = "form-control", @id = "txtAccountNumber", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.AccountNumber)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Account to be Debited for Charges</label>
                                                        @Html.TextBoxFor(m => m.AccountNumberDebitedforCharges, new { @class = "form-control", @id = "txtAccountNumberforCharges", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.AccountNumberDebitedforCharges)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Swift Code / ABA / Routing No / Sort Code</label>
                                                        @Html.TextBoxFor(m => m.IntermediaryBankCodeNumber, new { @class = "form-control", @id = "txtifsccode", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.IntermediaryBankCodeNumber)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Foreign Bank Charges Type</label>
                                                        @Html.DropDownListFor(m => m.ForeignBankChargesType, new SelectList(ViewBag.ForgnBankChargesType, "id", "name"), "Select any", new { @class = "form-control", @id = "txtRemittanceCurrency", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.ForeignBankChargesType)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Shipment Details</label>
                                                        @Html.TextBoxFor(m => m.ShipmentDetails, new { @class = "form-control", @id = "txtIntermediaryBank", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.ShipmentDetails)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Purpose of Remittance</label>
                                                        @Html.DropDownListFor(m => m.PurposeofRemittance, new SelectList(ViewBag.PurposeofRemit, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPurposeofRemittance", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.PurposeofRemittance)
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Goods Description</label>
                                                        @Html.TextBoxFor(m => m.GoodsDescription, new { @class = "form-control", @id = "txtGoodsDescription" })
                                                        @Html.ValidationMessageFor(m => m.GoodsDescription)
                                                    </div>
                                                </div>

                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>HS Classification Code</label>
                                                        @Html.TextBoxFor(m => m.HSClassificationCode, new { @class = "form-control", @id = "txtHSClassificationCode" })
                                                        @Html.ValidationMessageFor(m => m.HSClassificationCode)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Import License Details</label>
                                                        @Html.TextBoxFor(m => m.ImportLicenseDetails, new { @class = "form-control", @id = "txtImportLicenseDetails" })
                                                        @Html.ValidationMessageFor(m => m.ImportLicenseDetails)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Expenses Head</label>
                                                        @Html.DropDownListFor(m => m.ExpensesHead, new SelectList(ViewBag.ExpensesHead, "id", "name"), "Select any", new { @class = "form-control", @id = "txtExpensesHead", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.ExpensesHead)
                                                    </div>
                                                </div>
                                                
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Rate / contract booked with treasury (if any)</label>
                                                        @Html.TextBoxFor(m => m.RateorContractBookedDetails, new { @class = "form-control", @id = "txtRateorContractDetails" })
                                                        @Html.ValidationMessageFor(m => m.RateorContractBookedDetails)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Special Reference No. to be Mentioned in SWIFT</label>
                                                        @Html.TextBoxFor(m => m.SpecialReferenceNumber, new { @class = "form-control", @id = "txtIntermediaryBank", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.SpecialReferenceNumber)
                                                    </div>
                                                </div>
                                                
                                            </div>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label class="required">Payment Mode</label>
                                                        @Html.DropDownListFor(m => m.PaymentMode, new SelectList(ViewBag.PaymentMode, "id", "name"), "Select any", new { @class = "form-control", @id = "txtPurposeofRemittance", @required = "required" })
                                                        @Html.ValidationMessageFor(m => m.PaymentMode)
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-group custom-form-group">
                                                        <label>Comments to Bank</label>
                                                        @Html.TextBoxFor(m => m.CommentstoBank, new { @class = "form-control", @id = "txtHSClassificationCode" })
                                                        @Html.ValidationMessageFor(m => m.CommentstoBank)
                                                    </div>
                                                </div> 
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>                        
                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("ForeignRemittanceList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}
<div id="ValidationModal" class="modal fade modal-warning" role="dialog">
    <div class="modal-dialog modal-sm">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <i class="ion-android-warning"></i>
                <h3 class="modal-title">Warning</h3>
            </div>
            <div class="modal-body">

                <p id="MsgValidation"></p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
@Html.AntiForgeryToken()
<div id="popup"></div>
<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#TravelToDate, #TravelFromDate').datepicker({ minDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });

    $('#SourceEmailDate, #srchFromDate, #srchToDate, #txtInvoiceDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#txtRemittanceDate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
            CalculateDeductionTotal();
            GetTransactionDetails();
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        $('.selectpicker').selectpicker('refresh');
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }
        $('select[name="TypeofPayment"]').val(@Model.TypeofPayment);
        $('select[name="PaymentBank"]').val(@Model.PaymentBank);
        $('select[name="PortfolioName"]').val(@Model.PortfolioName);
        $('select[name="ExpensesHead"]').val(@Model.ExpensesHead);
        $('select[name="PaymentMode"]').val(@Model.PaymentMode);
        var ForgnAmt = $('#CommitmentAmount').val();
        $("#CreditorAmount").val(ForgnAmt);
        $('#lblVendorName').html($('#txtBeneficiary option:selected').text())
        CalculatePaymentValue();
        CalculateDeductionTotal();
        //$('#NeedUpdateTransDetail').val('false');
    });


    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
		$("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
		if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });

    function formSave() {
        var isValid = $('#formFRM').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }

        if (isValid)
            $('#formFRM').submit();
    }

    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }


    function inWords(num) {
        var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
        var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

        if ((num = num.toString()).length > 9) return 'overflow';
        n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
        if (!n) return; var str = '';
        str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
        str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
        str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
        str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';
        str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
        return str;
    }

    $('#txtForeignRemitAmt').change(function () {
        var num = parseFloat($('#txtForeignRemitAmt').val());
        $("#CreditorAmount").val(num);
        $('#lblVendorName').html($('#txtBeneficiary option:selected').text())

        var str = inWords(document.getElementById('txtForeignRemitAmt').value);

        $("#txtForeignRemitAmtinwords").val(str);
        //document.getElementById('txtForeignRemitAmtinwords').onkeyup = function () {

        //};
    });
    function AddNewExpense() {
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "FRM", "tSubCode": "1" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }
    function GetTransactionDetails() {

        var interstate_f = false;

        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "FRM", "tSubCode": "1", },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    //var amt = 0;
                    //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                    //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                    //    var parseVal = parseFloat($(elePayment).val());
                    //    if (!isNaN(parseVal))
                    //        amt = amt + parseVal;
                    //});
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });


                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
        //}
    }

    $('#CreditorAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    function fillMasterDropDown(ele, data, fillDafaultText, valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if (valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        } else {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }


    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        // var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
        var ttlAdvAmt = parseFloat($('#txtForeignRemitAmt').val());
        var advPct = parseInt($("#AdvancePercentage").val());
        var offsetValue = $("input[name='GST']:checked").val();
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(ttlAdvAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (ttlAdvAmt != commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#txtTotalStipendValue').val());
        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(ttlExpAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / Transaction value is not a valid entry.';
        } else if (ttlExpAmt != commitmentAmt) {
            msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        }

        //var groupNames = [];
        //$('#tbodyCommitmentSelList tr').find('input[name$=".HeadName"]').each(function () {
        //    var commitmentAmt = 0;
        //    var groupName = $(this).val();
        //    if(groupNames.indexOf(groupName) == -1){
        //        $("#tbodyCommitmentSelList [name$='.HeadName'][value='"+groupName+"']").each(function(){
        //            var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
        //            var parseVal = parseFloat($(elePayment).val());
        //            if (!isNaN(parseVal))
        //                commitmentAmt = commitmentAmt + parseVal;
        //        });
        //        var sumOfAmt = 0;
        //        if(!isNaN(commitmentAmt)){
        //            $('#tbodyExpenseList tr select[name$=".AccountGroupId"]').each(function () {
        //                if($(this).find("option:selected").text() == groupName){
        //                    var individualVal = $(this).closest('tr').find("input[name$='.Amount']").val();
        //                    individualVal = parseFloat(individualVal);
        //                    if(!isNaN(individualVal))
        //                        sumOfAmt = sumOfAmt + individualVal;
        //                }
        //            });
        //            if(commitmentAmt != sumOfAmt){
        //                msg = 'The amount enter for ' +groupName+ ' is not equal to commitment value.';
        //                return false;
        //            }
        //            groupNames.push(groupName)
        //        }else{
        //            msg = 'Commitment Payment Value is not valid.';
        //            return false;
        //        }
        //    }
        //});
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function validateForm(n) {
        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            $('#srchCommitmentType').val(5)
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment(undefined, 5)
            }
        }
        else if (currentTab == 1) {
            //var validationMsg = ValidateCommitment()
            //if (validationMsg != 'valid') {
            //    hadError = true;
            //    $("#alert").text(validationMsg);
            //    $('#Validation').modal('show');
            //} else {
                if ($('#NeedUpdateTransDetail').val() == 'True') {
                    GetTransactionDetails();
                }
                //if(parseInt($("#AdvancePercentage").val()) == 100){
                CalculateDeductionTotal();
                //$("#CreditorAmount, #ttlCr").val($('#lblAdvTtlAmt').text());
                //}else{
                //    $("#CreditorAmount, #ttlCr").val($('#lblAdvNetAmt').text());
                //}
            //}
                var ForgnAmt = $('#CommitmentAmount').val();
                $("#CreditorAmount").val(ForgnAmt);
        }
        else if (currentTab == 2) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 3) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }

        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
