@model IOAS.Models.SBIECardModel
@{
    ViewBag.Title = "SBICard View";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}


<div class="row">
    @using (Html.BeginForm("SBIECard", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formExCard", enctype = "multipart/form-data" }))
    {
        <div class="row">
            <div class="white-bg ad-navbar">
                @*<div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline "></i>
                    </div>
                    <div class="ds-tt">
                        <span>Card Valid Till</span>
                        <h4 id="VCardExpdate">@Html.DisplayFor(m => m.CardExpryDte, new { @class = "form-control", @disabled = "disabled" })</h4>
                        @Html.Hidden("CardExpiryDate")
                        @Html.Hidden("SBIEcardId")
                    </div>
                </div>*@
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-calendar-outline"></i>
                    </div>
                    <div class="ds-tt">
                        <span>Current Financial Year</span>
                        <h4 id="txtVcurrentfinyear">@Html.DisplayFor(m => m.CurrentFinancialYear, new { @class = "form-control", @readonly = true })</h4>
                        @Html.Hidden("ProjectID")
                    </div>
                </div>
                <div class="col-md-3 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-ios-list-outline"></i>
                    </div>
                    <div class="ds-tt">
                        <span>Department Name:</span>
                        <h4 id="txtVPIdepartment">@Html.DisplayFor(m => m.PIDepartmentName, new { @class = "form-control", @readonly = true }) </h4>
                    </div>
                </div>
                <div class="col-md-2 ds-spl-bg">
                    <div class="ds-icn">
                        <i class="ion-android-open"></i>
                    </div>
                    <div class="ds-tt">
                        <span>PI Name:</span>
                        <h4 id="txtVPIname">@Html.DisplayFor(m => m.NameofPI, new { @class = "form-control", @readonly = true })</h4>
                        @Html.Hidden("PIId")
                        @Html.Hidden("NameofPI")
                    </div>
                </div>

            </div>
        </div>

                                <div class="row">
                                    <div class="page-wrapper">
                                        <div class="col-md-12 mt30">
                                            <ul class="nav nav-pills custom-nav-pills">
                                                <li class="active"><a href="javascript:void(0)"><span>01</span>Card Details</a></li>
                                                @*<li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>*@
                                                <li><a href="javascript:void(0)"><span>02</span>Transaction Details</a></li>
                                                <li><a href="javascript:void(0)"><span>03</span>CheckList Details</a></li>
                                                <li><a href="javascript:void(0)"><span>04</span>Document Details</a></li>
                                            </ul>
                                            <div class="tab">
                                                <div class="col-md-12 col-sm-12 m-b-sm">
                                                    <div class="row mb20">
                                                        <div class="page-wrapper">
                                                            <div class="col-md-12">
                                                                <div class="white-bg">
                                                                    <div class="row">
                                                                        <div class="col-md-6">
                                                                            <h3>Card Details</h3>
                                                                            @*<div class="form-group custom-form-group">
                                                                                    <label>PI Name :</label>
                                                                                    @Html.DropDownListFor(m => m.PIId, new SelectList(ViewBag.PIName, "id", "name"), "Select PI", new { @id = "txtSelectPI", @class = "form-control selectpicker" })
                                                                                </div>
                                                                                <div class="form-group custom-form-group">
                                                                                    <label>Project :</label>
                                                                                   @Html.DropDownListFor(m => m.SelectProject, new SelectList(ViewBag.Project, "id", "name"), "Select Project", new { @id = "txtSelectProject", @class = "form-control selectpicker" })
                                                                                </div>*@
                                                                            <div class="form-group custom-form-group">
                                                                                <label>SBI Prepaid Card No. :</label>
                                                                                @Html.TextBoxFor(m => m.SBIEcardNumber, new { @class = "form-control", @required = "required", @id = "txtVprepaidcardnumber", @readonly = true })

                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Date of Birth : </label>
                                                                                @Html.TextBoxFor(m => m.DOB, new { @class = "form-control", @required = "required", @id = "txtVDateofbirth", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.DOB) </div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Gender :</label>
                                                                                @*@Html.TextBoxFor(m => m.PIGender, new { @class = "form-control", @rows = "3", @readonly = true, @required = "required", @id = "txtdescriptionofservice" })*@
                                                                                @Html.DropDownListFor(m => m.PIGender, new SelectList(ViewBag.Gender, "id", "name"), "Select Gender", new { @id = "txtVPIGender", @class = "form-control", @readonly = true })
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Mobile Number :</label>
                                                                                @Html.TextBoxFor(m => m.PIMobile, new { @class = "form-control", @id = "txtVPIMobile", @readonly = true })
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Mother's Maiden Name :</label>
                                                                                @Html.TextBoxFor(m => m.MothersMaiden, new { @class = "form-control", @id = "txtVPIMothermaidenname", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.MothersMaiden)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>District: </label>
                                                                                @Html.TextBoxFor(m => m.PIdistrict, new { @class = "form-control", @id = "txtVPIDistrict", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIdistrict)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>State Bank A/C Number :</label>
                                                                                @Html.TextBoxFor(m => m.StateBankACNumber, new { @class = "form-control", @id = "txtVStatebankac", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.StateBankACNumber)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Amount alloted from this project :</label>
                                                                                @Html.TextBoxFor(m => m.CurrentProjectAllotmentValue, new { @class = "form-control", @id = "txtVCurrentProjectcardvalue", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.CurrentProjectAllotmentValue)</div>
                                                                            </div>
                                                                            @*<a href="#" class="btn btn-primary">Generate Invoice</a>*@
                                                                        </div>
                                                                        <div class="col-md-6">

                                                                            <div class="form-group custom-form-group mt46">
                                                                                <label>Address Line 1: </label>
                                                                                @Html.TextBoxFor(m => m.PIAddressLine1, new { @class = "form-control", @id = "txtVPIAddressline1", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine1)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Address Line 2: </label>
                                                                                @Html.TextBoxFor(m => m.PIAddressLine2, new { @class = "form-control", @id = "txtVPIAddressline2", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine2)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Email: </label>
                                                                                @Html.TextBoxFor(m => m.PIEmail, new { @class = "form-control", @id = "txtEPIEmail", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIEmail)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>City: </label>
                                                                                @Html.TextBoxFor(m => m.PICity, new { @class = "form-control", @id = "txtVPICity", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIAddressLine1)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>State: </label>
                                                                                @Html.TextBoxFor(m => m.PIstate, new { @class = "form-control", @id = "txtVPIState", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIstate)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Pincode: </label>
                                                                                @Html.TextBoxFor(m => m.PIPincode, new { @class = "form-control", @id = "txtVPIPincode", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PIPincode)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>Father's Name: </label>
                                                                                @Html.TextBoxFor(m => m.FatherFirstName, new { @class = "form-control", @id = "txtVPIFathername", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.FatherFirstName)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label>PAN: </label>
                                                                                @Html.TextBoxFor(m => m.PAN, new { @class = "form-control", @id = "txtVPIPAN", @readonly = true })
                                                                                <div class="txt-error txt-red"> @Html.ValidationMessageFor(m => m.PAN)</div>
                                                                            </div>
                                                                            <div class="form-group custom-form-group">
                                                                                <label> <b>Total Card Value :</b></label>
                                                                                @Html.TextBoxFor(m => m.TotalValueofCard, new { @class = "form-control", @id = "txtVtotalcardvalue", @readonly = true })
                                                                            </div>                                            
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            @*<div class="tab">
                                                @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                                            </div>*@
                                            <div class="tab">
                                                @Html.Partial("_TransactionDetails", Model)
                                            </div>
                                            <div class="tab">
                                                <div class="col-md-12 col-sm-12 m-b-sm">
                                                    <div class="">
                                                        @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                                                    </div>
                                                    <div>
                                                        @Html.HiddenFor(m => m.CheckListVerified_By)
                                                        @Html.HiddenFor(m => m.CheckListVerifierName)
                                                        <div class="col-md-3 col-md-offset-9">
                                                            <div class="form-group custom-form-group">
                                                                <label>Verified by</label>
                                                                <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="tab">
                                                <div class="col-md-12 col-sm-12 m-b-sm">
                                                    <div class="">
                                                        @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="custom-nav-btn text-right">
                                                <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                                                <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                                                @*<input type="submit" class="btn btn-primary" value="Save" name="Button" id="btnExSave" />*@
                                                <a href="@Url.Action("SBIECardList", "CoreAccounts")" class="btn btn-primary text-center">Close</a>
                                            </div>
                                        </div>

                                    </div>
                                </div>

    }
</div>


<script>
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    var mode = '@TempData["viewMode"]';

    $(document).ready(function () {
        
        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        if (mode == "ViewOnly") {
            $('.form-control,input').prop('disabled', true);
            $('#ddlActionList,#txtProcessComment').prop('disabled', false);
            $('#btnAddAttachment, #btnbookcommitment, input[name="removeDocButton"], .btn-danger, .removeExpense').hide();
        }
        var selSource = $('#Source').val();
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }                

        var piname = $('input[name="NameofPI"]').val();
        $('#lblVendorName').html(piname);
        var advanceAmt = parseFloat($('#txtVCurrentProjectcardvalue').val());
        $("#CreditorAmount").val(advanceAmt);
       // CalculatePaymentValue();
        CalculateDeductionTotal();
        
        //calculatetotalamount();
    });
    function noEdit() {
        return false;
    }
    
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    
    function fillMasterDropDown(ele, data, fillDafaultText,valueAsName) {
        if (fillDafaultText !== undefined) {
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        if(valueAsName !== undefined) {
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.name,
                    text: itemData.name,
                }));
            });
        }else{
            $.each(data, function (index, itemData) {
                ele.append($('<option/>', {
                    value: itemData.id,
                    text: itemData.name,
                }));
            });
        }
    }
    function ValidateDecimalOnly(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        // var netAdvAmt = parseFloat($('#lblAdvNetAmt').html());
        var ttlAdvAmt = parseFloat($('#txtVCurrentProjectcardvalue').val());
        var advPct = parseInt($("#AdvancePercentage").val());
        // var offsetValue = $("input[name='GST']:checked").val();
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (isNaN(ttlAdvAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / allocated commitment value is not a valid entry.';
        } else if (ttlAdvAmt != commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#txtVCurrentProjectcardvalue').val());
        //var netDrAmt = ttlExpAmt + ttldeductAmt;
        //var offsetValue = $("input[name='GST']:checked").val();
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if (netCrAmt != ttlExpAmt || netCrAmt != ttldeductAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (isNaN(ttlExpAmt) || isNaN(commitmentAmt)) {
            msg = 'The requested advance value / Transaction value is not a valid entry.';
        } else if (ttlExpAmt != commitmentAmt) {
            msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        }

        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function GetTransactionDetails() {
        //var commitmentDetailIds = [];
        //var stateCode = $('#lblStateCode').html();
        //var BillType = $('#BillType').val();
        // var tdsDetailId = $('#VendorTDSDetailId').val() || null;
        var interstate_f = false;
        //if ($('#lblStateCode').html() == '33')
        //    interstate_f = true;
        //$('#tbodyCommitmentSelList input[name$=".CommitmentDetailId"]').each(function () {
        //    var cmtDetId = $(this).val();
        //    if (cmtDetId != '') { commitmentDetailIds.push(cmtDetId); }
        //});
        //if (commitmentDetailIds.length == 0) {
        //    $("#alert").text("Please select at least one commitment from the list.");
        //    $('#Validation').modal('show');
        //    return false;
        //} else {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetECardEntryTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "ECD","tSubCode" : "1", },
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                //var amt = 0;
                //$("#tbodyCommitmentSelList [name$='.HeadName'][value='"+item.BudgetHeadName+"']").each(function(){
                //    var elePayment = $(this).closest('td').find("input[name$='.PaymentAmount']");
                //    var parseVal = parseFloat($(elePayment).val());
                //    if (!isNaN(parseVal))
                //        amt = amt + parseVal;
                //});
                if (i == 0) {
                    var trEle = $('#tbodyExpenseList tr:first');
                    $(trEle).find('input[name$=".Amount"]').val('');
                    $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEle).find('#lblTransType').text(item.TransactionType);
                    $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                    var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                } else {
                    var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                    $(trEleNew).find('input[name$=".Amount"]').val('');
                    $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                    $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(trEleNew).find('#lblTransType').text(item.TransactionType);
                    $(trEleNew).find("input,Select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });

                    var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(trEleNew);
                }
            });
            $.each(result.DeductionDetail, function (i, item) {
                if (i == 0) {
                    var trEle = $('#tbodyDeductionList tr:first');
                    var amtEle = $(trEle).find('input[name$=".Amount"]');
                    if(item.TDSPercentage == null){
                        amtEle.val('');
                    }else{
                        tds = ttlAdvTax * item.TDSPercentage / 100;
                        amtEle.val(tds);
                    }

                    amtEle.addClass('required');
                    $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                } else {
                    var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                    //$(trEleNew).find("input[name='DeductionDetail.Index']").val(i);
                    $(trEleNew).find("input").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                    });
                    $(trEleNew).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                    });
                    var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                    amtEle.addClass('required');
                    if(item.TDSPercentage != null){
                        tds = ttlAdvTax * item.TDSPercentage / 100;
                        amtEle.val(tds);
                    }
                    $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                    $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                    $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                    $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                    $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                    $('#tbodyDeductionList').append(trEleNew);
                }
            });
            var AllocAmt = $('#txtVCurrentProjectcardvalue').val();
            $("#CreditorAmount").val(AllocAmt);
            $('#NeedUpdateTransDetail').val('false');
            CalculateDeductionTotal();
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    //}
    }
    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").style.display = "none";
        } else {
            document.getElementById("nextBtn").style.display = "inline";
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>



