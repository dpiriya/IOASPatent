@model IOAS.Models.ClearancePaymentEntryModel
@{
    ViewBag.Title = "Clearance Payment";
    ViewBag.DocmentTypeList = ViewBag.DocmentTypeList;
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
<style>
    /* Hide all steps by default: */
    .tab {
        display: none;
    }
</style>
@using (Html.BeginForm("ClearancePayment", "CoreAccounts", FormMethod.Post, new { @class = "", role = "form", @id = "formADV", enctype = "multipart/form-data", @parentAction = ViewContext.RouteData.Values["action"] }))
{
    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Clearance Payment</b> @*<em>(123asdf123123123)</em>*@</h4>
        </div>
    </div>
    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-list-outline "></i>
                </div>
                <div class="ds-tt">
                    <span class="required">Request Reference</span>
                    @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.SourceList, "codevalAbbr", "CodeValDetail"), "Select any",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Source)
                    @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    @Html.HiddenFor(m => m.BillId)
                </div>
            </div>
            <div class="col-md-3 ds-spl-bg">
                <div class="ds-icn">
                    <i class="ion-ios-calendar-outline"></i>
                </div>
                <div class="ds-tt" id="divRefNum">
                    <span class="required">Ref Number (WF / Tapal)</span>
                    @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                    @Html.TextBoxFor(m => m.SourceReferenceNumber, new { @class = "form-control dis-none" })
                    @Html.ValidationMessageFor(m => m.SourceReferenceNumber)
                    @Html.Hidden("SourceTapalOrWorkflow", "True")
                    @Html.HiddenFor(m => m.SubCode)
                    @Html.Hidden("TransactionTypeCode", "STM")
                    @Html.Hidden("BillType", "3")
                    @Html.Hidden("isHaveElgGST")
                </div>
                <div class="dis-none ds-tt" id="divRefEmailDate">
                    <span class="required">Email Date</span>
                    @Html.EditorFor(m => m.SourceEmailDate, new { @class = "form-control" })
                    <div class="txt-error txt-red">@Html.ValidationMessageFor(m => m.SourceEmailDate)</div>
                </div>
            </div>
            <div class="col-md-3 col-md-offset-3">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Number</label>
                        <h4>@Html.DisplayFor(m => m.BillNumber)</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Payment Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Payment Break Up</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                       

                        <div class="row">

                            <div class="col-md-12">
                                <div class="bl-lg-panel-box pb-null">
                                    <div class="cmn-panel-box">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Clearance Agent</label>
                                                    @Html.DropDownListFor(m => m.ClearanceAgentId, new SelectList(ViewBag.ClearanceAgentList, "id", "name"), "Select any", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.ClearanceAgentId)
                                                    @if (Model.ClearanceAgentId != null)
                                                    {
                                                        <a href="javascript:void(0)" id="lnkBillHistory">View previous bill history</a>
                                                    }
                                                    else
                                                    {
                                                        <a href="javascript:void(0)" id="lnkBillHistory" class="dis-none">View previous bill history</a>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Bank Head</label>
                                                    @Html.DropDownListFor(m => m.BankHeadId, new SelectList(ViewBag.BankList, "id", "name"), "Select any", new { @class = "form-control required" })                                                    
                                                    @Html.ValidationMessageFor(m => m.BankHeadId)
                                                </div>
                                            </div>
                                            <div id="divPOTxt" class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Reference PO Number</label>
                                                    @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PONumber)
                                                </div>

                                            </div>
                                            
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Reference PO Date</label>
                                                    @Html.EditorFor(m => m.PODate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.PODate)
                                                    @Html.HiddenFor(m => m.PODate, new { @id = "hiddenPODate" })
                                                </div>

                                            </div>
                                            
                                        </div>
                                        <div class="row">                                           
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Invoice Number</label>
                                                    @Html.TextBoxFor(m => m.InvoiceNumber, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.InvoiceNumber)
                                                </div>

                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label class="required">Invoice Date</label>
                                                    @Html.EditorFor(m => m.InvoiceDate, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(m => m.InvoiceDate)
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label>PAN</label>
                                                    <h4 id="lblAgentPAN"></h4>
                                                    <label id="lblStateCode" class="dis-none"></label>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="form-group custom-form-group">
                                                    <label>GSTIN</label>
                                                    <h4 id="lblAgentGSTIN"></h4>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group custom-form-group">
                                                    <label>Address</label>
                                                    <h4 id="lblAgentAddr"></h4>
                                                </div>
                                            </div>
                                        </div>
                                            <div class="row">
                                                <div id="divPreBill" class="dis-none col-md-3">
                                                    <div class="form-group custom-form-group">
                                                        <a href="javascript:void(0)" data-toggle="modal" data-target="#myModal">Previous Bills</a>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                </div>
                            </div>
                        </div>
                       
                        <div class="gray-bg br-rd">
                            <div class="row">
                                <div class="col-md-12">
                                   @Html.Partial("_PODetails", Model.PODetail)
                                    <div class="row">
                                       
                                        <div class="col-md-6">
                                            <div class="tb-bl-dts alter-bg">
                                                <h3>Total Value</h3>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>Total Value :</label>
                                                            <h4 id="lblAdvTtlAmt"></h4>
                                                            @Html.HiddenFor(m=>m.hiddenSettAmt)                                                            
                                                        </div>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <div class="form-group custom-form-group">
                                                            <label>Total TAX :</label>
                                                            <h4><span id="lblAdvTtlTaxAmt"></span> <i id="taxTT" class="ion-information-circled" data-toggle="tooltip" data-html="true" data-placement="top" title="<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br><span>IGST  :<b>0.00</b></span><br>"></i></h4>
                                                            @Html.HiddenFor(m => m.hiddenSettTaxAmt)
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group custom-form-group">
                                                            <label>Net Bill Total:</label>
                                                            <h4 id="lblAdvNetAmt"></h4>
                                                            @Html.HiddenFor(m => m.hiddenNetTotalAmt)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-group custom-form-group ">
                                                            <label>GST Eligible Value :</label>
                                                            <h4 id="lblTaxEligibleAmt"></h4>
                                                            @Html.HiddenFor(m => m.hiddenTaxEligibleAmt)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>

                    </div>
                </div>
                <div class="tab">
                    @Html.Partial("_InvoiceBreakUp", Model.InvoiceBreakDetail)
                    @Html.Partial("_PaymentBreakUp", Model.PaymentBreakDetail)
                </div>
                <div class="tab" id="PartialResultDivName">
                    @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                </div>

                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("ClearancePaymentList", "CoreAccounts")';">Close</button>
                </div>

            </div>

        </div>
    </div>
}

<div id="verifyModal" class="modal fade modal-pr-vw" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            @*<div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <div class="row hd-tt-bg">
                        <div class="col-md-12">
                            <h4><b>Verify :</b></h4>
                        </div>
                    </div>


                </div>*@
            <div class="modal-body">
                <div class="row">
                    <div class="page-wrapper">

                        <div class="col-md-12">
                            <div class="row">

                                <div class="col-md-12">
                                    <div>
                                        <div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group custom-form-group mb-null">

                                                        <div class="row">
                                                            @*<div class="col-md-6">
                                                                    <div class="form-group custom-form-group mb-null">
                                                                        <label class="required">Username</label>
                                                                        <input class="form-control required" name="VerifierUsername" type="text">
                                                                    </div>
                                                                </div>*@
                                                            <div class="col-md-12">
                                                                <div class="form-group custom-form-group mb-null">
                                                                    <label class="required">Password</label>
                                                                    <input class="form-control required" id="VerifierPassword" type="password">
                                                                    <span id="errorPass" class="field-validation-error"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            @*<div class="row">
                                                    <div class="form-group custom-form-group text-center">
                                                        <a id="btnVerify" href="javascript:void(0);" class="btn btn-primary mt-lg">Verify</a>
                                                    </div>
                                                </div>*@

                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="page-wrapper">
                    <div class="col-md-12">
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <a id="btnVerify" href="javascript:void(0);" class="btn btn-primary">Verify</a>
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
    </div>

</div>
@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    $('.selectpicker').selectpicker({
        liveSearch: true
    });
    var errMsg = '@TempData["errMsg"]';
    var succMsg = '@TempData["succMsg"]';
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);
    $(document).ready(function () {

        if (succMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        else if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        var selSource = $('#Source').val();
        var agentId = $('#ClearanceAgentId').val();
        if(agentId != ''){
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetClearanceAgentDetails", "CoreAccounts")",
                data: { "agentId": agentId },
                dataType: "json",
                success: function (result) {
                    $('#lblAgentPAN').text(result.PAN);
                    $('#lblAgentGSTIN').text(result.GSTIN);
                    $('#lblAgentAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    UpdateGSTSplitUp()
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }

        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
        } else {
            $("#divRefNum").removeClass('dis-none');
        }

        var offsetValue = $("input[name='GST']:checked").val();
        if (offsetValue == 'NotEligible') {
            $('#ExpenseRequired').val('False');
        }

        if($('#hiddenSettAmt').val() == '0'){
            //$('select[name="ExpenseDetail[0].AccountGroupId"],select[name="ExpenseDetail[0].AccountHeadId"],input[name="ExpenseDetail[0].Amount"]').removeClass('required');
            //$("input[name='ExpenseDetail.Index']").val('');
        }else{
            $('select[name="ExpenseDetail[0].AccountGroupId"],select[name="ExpenseDetail[0].AccountHeadId"],input[name="ExpenseDetail[0].Amount"]').addClass('required');
        }
        @*var bankheadid = @Model.BankHeadId;
        $('select[name="BankHeadId"]').val(bankheadid);*@
        $('#lblVendorName').html($('#ClearanceAgentId option:selected').text());
        CalculatePaymentValue();
        CalculateDeductionTotal();
        CalculatePOValue();
        CalculatePaymentBUTotal();
        $('#NeedUpdateTransDetail').val('false');
    });

    function fillMasterDropDown(ele,data,fillDafaultText){
        if(fillDafaultText !== undefined){
            ele.append($('<option/>', {
                value: '',
                text: 'Select any',
            }));
        }
        $.each(data, function (index, itemData) {
            ele.append($('<option/>', {
                value: itemData.id,
                text: itemData.name,
            }));
        });
    }
    $('#lnkBillHistory').click(function(){
        var agentId = $('#ClearanceAgentId').val();
        if (agentId != '') {
            var token = $("input[name=__RequestVerificationToken]").val();
            var searchData = { "__RequestVerificationToken": token, "agentId": agentId };
            $.ajax({
                url: "@Url.Action("_PreviousCLPBillHistory", "CoreAccounts")",
                type: "POST",
                data: searchData,
                contentType: "application/x-www-form-urlencoded",
                success: function (data) {
                    $("#popup").html(data);
                    $("#preBillHistoryModal").modal('toggle');
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }
    });

    $('#PODate').change(function(){
        $('#hiddenPODate').val($(this).val());
    });

    $('#Source').change(function () {
        var selSource = $(this).val();
        $("#SourceReferenceNumber,#ReferenceNumber").val('');
        $("#divRefNum, #divRefEmailDate").addClass('dis-none');
        $("#SourceTapalOrWorkflow").val('False');
        if (selSource == '1') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACWorkflowRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        } else if (selSource == '3') {
            applyAutoComplete($('#ReferenceNumber'), $('#SourceReferenceNumber'), "@Url.Action("GetACTapalRefNumber", "Proposal")");
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
        else if (selSource == '2') {
            $('#divRefEmailDate').removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('False');
        } else {
            $("#divRefNum").removeClass('dis-none');
            $("#SourceTapalOrWorkflow").val('True');
        }
    });
    function resetClearanceAgent() {
        $('#lblAgentPAN, #lblAgentGSTIN, #lblAgentAddr, #lblStateCode').text('');
        //$('#divPreBill').addClass('dis-none');
    }
    function resetPOMasterDetails() {
        $('#PONumber, #selPONumber, #PODate, #hiddenPODate, #InvoiceNumber, #InvoiceDate, #BillType, #hiddenBillType').val('');
        //$('#divPreBill').addClass('dis-none');
    }
    function parseDate(s) {
        var months = {
            january: 0, february: 1, march: 2, april: 3, may: 4, june: 5,
            july: 6, august: 7, september: 8, october: 9, november: 10, december: 11
        };
        var p = s.split('-');
        return new Date(p[2], months[p[1].toLowerCase()], p[0]);
    }

    $('#ClearanceAgentId').change(function () {
        resetClearanceAgent();
        var agentId = $(this).val();
        $('#NeedUpdateTransDetail').val('true');
        $('#lblVendorName').html($('#ClearanceAgentId option:selected').text());
        var selPO = $('#selPONumber');
        selPO.empty();
        if (agentId != '') {
            $('#lnkBillHistory').removeClass('dis-none');
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetClearanceAgentDetails", "CoreAccounts")",
                data: { "agentId": agentId, "poNumberRequired" : true },
                dataType: "json",
                success: function (result) {
                    $('#lblAgentPAN').text(result.PAN);
                    $('#lblAgentGSTIN').text(result.GSTIN);
                    $('#lblAgentAddr').text(result.Address);
                    $('#lblStateCode').text(result.StateCode);
                    fillMasterDropDown(selPO,result.PONumberList,true);
                    UpdateGSTSplitUp()
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
        }else{
            $('#lnkBillHistory').addClass('dis-none');
        }
    });

    $(document).on('click', 'a.removePOItem', function () {
        $(this).closest('tr').remove();
        CalculatePOValue();
    });

    function AddNewExpense(){
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "STM","tSubCode" : "1"},
        traditional: true,
        dataType: "json",
        success: function (result) {
            $.each(result.ExpenseDetail, function (i, item) {
                var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                $(cln).find('a.dis-none').removeClass('dis-none');
                var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                index = parseInt(index) + 1;
                $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                $(cln).find("input, select").each(function () {
                    $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                    $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                });
                $(cln).find("span[data-valmsg-for]").each(function () {
                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                });

                var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                selectGroup.empty();
                $.each(item.AccountGroupList, function (index, itemData) {
                    selectGroup.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });

                var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                selectHead.empty();
                $.each(item.AccountHeadList, function (index, itemData) {
                    selectHead.append($('<option/>', {
                        value: itemData.id,
                        text: itemData.name,
                    }));
                });
                $('#tbodyExpenseList').append(cln);
            });
        },
        error: function (err) {
            console.log("error : " + err);
        }
    });
    }
    function GetTransactionDetails() {
        var stateCode = $('#lblStateCode').html();
         EmptyExpenseDeductionDetails();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
                data: {"typeCode": "CLP", "tSubCode" : "1"},
                traditional: true,
                dataType: "json",
                success: function (result) {
                    $.each(result.ExpenseDetail, function (i, item) {
                        if (i == 0) {
                            var trEle = $('#tbodyExpenseList tr:first');
                            $(trEle).find('input[name$=".Amount"]').val('');
                            $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                            $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                            $(trEle).find('#lblTransType').text(item.TransactionType);
                            $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                            var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                            selectGroup.empty();
                            $.each(item.AccountGroupList, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                            selectHead.empty();
                            $.each(item.AccountHeadList, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                        } else {
                            var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                            $(trEleNew).find('input[name$=".Amount"]').val('');
                            $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                            $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                            $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                            $(trEleNew).find('#lblTransType').text(item.TransactionType);
                            $(trEleNew).find("input,Select").each(function () {
                                $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                            });
                            $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                            });

                            var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                            selectGroup.empty();
                            $.each(item.AccountGroupList, function (index, itemData) {
                                selectGroup.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });

                            var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                            selectHead.empty();
                            $.each(item.AccountHeadList, function (index, itemData) {
                                selectHead.append($('<option/>', {
                                    value: itemData.id,
                                    text: itemData.name,
                                }));
                            });
                            $('#tbodyExpenseList').append(trEleNew);
                        }
                    });
                    if ($('#isHaveElgGST').val().toLowerCase() == 'true') {
                        $.each(result.DeductionDetail, function (i, item) {
                            var expensRequired = $('#ExpenseRequired').val();
                            var ttlAdvTax = parseFloat($('#lblAdvTtlTaxAmt').html());
                            var splitAmt = (ttlAdvTax / 2).toFixed(2);
                            var stateCode = $('#lblStateCode').html();
                            if (i == 0) {
                                var trEle = $('#tbodyDeductionList tr:first');
                                $(trEle).find('input').val('');
                                var amtEle = $(trEle).find('input[name$=".Amount"]');
                                if (expensRequired == 'True') {
                                    amtEle.addClass('required');
                                    if (BillType != 3) {
                                        if (stateCode == "33" && (item.DeductionHead.includes("CGST") || item.DeductionHead.includes("SGST"))) {
                                            amtEle.val(splitAmt);
                                        } else if (item.DeductionHead.includes("IGST")) {
                                            amtEle.val(ttlAdvTax);
                                        }
                                    }
                                } else {
                                    amtEle.removeClass('required');
                                }
                                $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                                $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                                $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                                $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                                $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                                $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                            } else {
                                var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                                $(trEleNew).find("input").each(function () {
                                    $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                                    $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                                });
                                $(trEleNew).find("span[data-valmsg-for]").each(function () {
                                    $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                                });
                                var amtEle = $(trEleNew).find('input[name$=".Amount"]');
                                if (expensRequired == 'True') {
                                    amtEle.addClass('required');
                                    if (BillType != 3) {
                                        if (stateCode == "33" && (item.DeductionHead.includes("CGST") || item.DeductionHead.includes("SGST"))) {
                                            amtEle.val(splitAmt);
                                        } else if (item.DeductionHead.includes("IGST")) {
                                            amtEle.val(ttlAdvTax);
                                        }
                                    }
                                } else {
                                    amtEle.removeClass('required');
                                }
                                $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                                $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                                $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                                $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                                $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                                $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                                $('#tbodyDeductionList').append(trEleNew);
                            }
                        });
                    }
                    $('#NeedUpdateTransDetail').val('false');
                    CalculateDeductionTotal();
                },
                error: function (err) {
                    console.log("error : " + err);
                }
            });
    }

    function UpdateGSTSplitUp() {
        var ttlAdvTax = parseFloat($('#lblAdvTtlTaxAmt').html());
        var stateCode = $('#lblStateCode').html();
        if (stateCode == '33') {
            if (ttlAdvTax > 0) {
                var splitAmt = (ttlAdvTax / 2).toFixed(2);
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>' + splitAmt + '</b></span><br><span>SGST  :<b>' + splitAmt + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>CGST :<b>0.00</b></span><br><span>SGST  :<b>0.00</b></span><br>');
            }
        } else {
            if (ttlAdvTax > 0) {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>' + ttlAdvTax.toFixed(2) + '</b></span><br>')
            } else {
                $('#taxTT').attr('data-original-title', '<span>IGST :<b>0.00</b></span><br>')
            }
        }
    }
    function CalculatePOValue() {

        var advPct = 100;
        var ttlPOVal = 0, ttlPOTaxVal = 0, netPOVal = 0, ttlAdvVal = 0, ttlAdvTaxVal = 0, netAdvVal = 0;
        var elgF = false;
        var ttlGSTElgAmt = 0;
        $('#tbodyPO tr').not(':first').each(function (i, rowEle) {
            var amt = parseFloat($(rowEle).find('input[name$=".TotalAmount"]').val());
            var chckElg = $(rowEle).find('input[type="checkbox"][name$=".IsTaxEligible"]').prop('checked');
            if (chckElg)
                elgF = true;
            if (!isNaN(amt))
                ttlPOVal = ttlPOVal + amt;
            if (amt > 0) {
                var taxPct = parseFloat($(rowEle).find('select[name$=".TaxPct"]').val());
                if (isNaN(taxPct))
                    taxPct = 0;
                var advTaxVal = 0, advAmt = 0, netAdvAmt = 0;
                advAmt = amt * advPct / 100;
                ttlAdvVal = ttlAdvVal + advAmt;
                if (taxPct > 0) {
                    var taxAmt = amt * taxPct / 100;
                    ttlPOTaxVal = ttlPOTaxVal + taxAmt;

                    advTaxVal = advAmt * taxPct / 100;
                    ttlAdvTaxVal = ttlAdvTaxVal + advTaxVal;
                    if (chckElg)
                        ttlGSTElgAmt = ttlGSTElgAmt + advTaxVal;
                }
                netAdvAmt = advAmt + advTaxVal;
                $(rowEle).find('.tdAdvPct').html(advPct.toFixed(2));
                $(rowEle).find('.tdAdvAmt').html(advAmt.toFixed(2));
                $(rowEle).find('.tdTaxAmt').html(advTaxVal.toFixed(2));
                $(rowEle).find('.tdNetAmt').html(netAdvAmt.toFixed(2));
            }
        });
        if (elgF)
            $('#isHaveElgGST').val('true');
        else
            $('#isHaveElgGST').val('false');
        $('#lblAdvTtlAmt').text(ttlAdvVal.toFixed(2));
        $('#lblAdvTtlTaxAmt').text(ttlAdvTaxVal.toFixed(2));
        $('#hiddenTaxEligibleAmt').val(ttlGSTElgAmt);
        $('#lblTaxEligibleAmt').text(ttlGSTElgAmt.toFixed(2));
        netAdvVal = (ttlAdvVal + ttlAdvTaxVal).toFixed(2);
        $('#lblAdvNetAmt').text(netAdvVal);
        $('#hiddenNetTotalAmt').val(netAdvVal).trigger("change");
        UpdateGSTSplitUp();
    }
     $('#CommitmentAmount, #ExpenseAmount, #CreditorAmount, input[name $=".PaymentAmount"], input[name $=".Quantity"], input[name $=".TotalAmount"], input[name $=".Amount"], #ttlCr, #totlCr, #ttlDr').on("copy cut paste drop", function () {
        return false;
    });

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }
    function formSave() {
        var isValid = $('#formADV').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }
        if (isValid)
            $('#formADV').submit();
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#CommitmentAmount').val()) || 0;
        var ttlAdvAmt = parseFloat($('#hiddenNetTotalAmt').val()) || 0;
        var invGST = parseFloat($('#GSTOffsetTotal').val()) || 0;
        var voucherVal = (ttlAdvAmt - invGST).toFixed(2);
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (voucherVal != commitmentAmt) {
            msg = 'There is a mismatch between the bill value and allocated commitment value. Please update the value to continue.';
        }

        return msg;
    }
    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val());
        var commitmentAmt = parseFloat($('#CommitmentAmount').val());
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var ttlAdvAmt = parseFloat($('#hiddenNetTotalAmt').val());
        var ttlJVExpVal = parseFloat($('#ttlJVDr').val()) || 0;
        var ttlJVDrVal = parseFloat($('#ttlJVCr').val()) || 0;
        var payVal = parseFloat($('#PaymentBUTotal').val()) || 0;
        var TransAmt = ttlExpAmt - ttlJVExpVal;
        var netDrAmt = ttlExpAmt + ttldeductAmt;
        if (isNaN(netCrAmt)) {
            return 'The Credit value is not a valid entry.';
        }
        if(ttlJVExpVal != ttlJVDrVal) {
            msg = 'Not a valid entry. Credit and Debit value of JV are not equal.';
        }
        if(netDrAmt != crAmt || (netCrAmt + ttlJVExpVal ) != crAmt ) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        }
        if (netCrAmt != payVal) {
            msg = 'There is a mismatch between the credit value and payable value. Please update the value to continue.';
        }
        if (TransAmt != commitmentAmt) {
            msg = 'There is a mismatch between allocated commitment value and transaction value. Please update the value to continue.';
        }

        var hdList = [];
        var hdJVList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) {
            var jv = $(this).closest('tr').find("input[name$='.IsJV']").val();
            if (jv.toLowerCase()== "true")
                hdJVList.push($(val).val());
            else
                hdList.push($(val).val());
        });
        hdList.sort();
        hdJVList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidatePaymentBU() {
        var msg = 'valid';
        var actPayAmt = parseFloat($('#hiddenNetTotalAmt').val()) || 0;
        var payBUTtl = parseFloat($('#PaymentBUTotal').val()) || 0;
        var invGST = parseFloat($('#GSTOffsetTotal').val()) || 0;
        var poGST = parseFloat($('#lblTaxEligibleAmt').html()) || 0;
        if (actPayAmt != payBUTtl) {
            msg = "Not a valid entry.The Payable value and Payment Break Up Total value are not equal.";
        } else if (invGST != poGST) {
            msg = "Not a valid entry. The PO tax eligible value and invoice tax eligible value are not equal.";
        }
        return msg;
    }
    $('#hiddenNetTotalAmt').change(function () {
        amt = $(this).val();
        $('#CreditorAmount').val(amt);
    });
    function validateForm(n) {

        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment();
            }
        } if (currentTab == 1) {

            var validationMsg = ValidatePaymentBU()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        } else if (currentTab == 2) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if($('#NeedUpdateTransDetail').val() == 'true'){
                    GetTransactionDetails();
                }
                //if($("#AdvancePercentage").val() == 100){
                //    $("#CreditorAmount, #ttlCr").val($('#lblAdvTtlAmt').text());
                //}else{
                //$("#CreditorAmount").val($('#lblAdvTtlAmt').text());
                //}
                //$("#DeductionAmount, #ttlDr, #ExpenseAmount").val('');
            }
        } else if (currentTab == 3) {

            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }else if (currentTab == 4) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }
        $(stepElements).each(function (idx, ele) {
            if (!$(ele).is(':radio') && !$(ele).is(':checkbox')  && $(ele).is(':visible')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }

</script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
