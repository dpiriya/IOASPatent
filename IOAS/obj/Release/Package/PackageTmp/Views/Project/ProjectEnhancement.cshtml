@model IOAS.Models.ProjectEnhancementModel
@{
    ViewBag.Title = "Project Enhancement";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}
@Styles.Render("~/bundles/JSGridCss")
@Scripts.Render("~/bundles/JSGrid")
<script src="@Url.Content("~/Scripts/Project/ProjectEnhancement.js")"></script>
<style>
    .auto-com-z-index {
        z-index: 10000;
    }
</style>

<div class="row hd-tt-bg" id="addnewpage">
    <div class="col-md-4">

        <div class="search-btn">
            <input type="text" value="" placeholder="Search" class="form-control">
            <a href="#" id="btnsearch" class="btn"> <i class="ion-search"></i></a>
        </div>

    </div>
    <div class="col-md-8 flt-nav-links">

        @*<a href="#"> <i class="ion-android-funnel"></i>Filters</a>*@
        <a href="#" id="btnaddnew" data-toggle="modal" data-target="#AddNewEntryModel"> <i class="ion-plus"></i>Add New</a>

    </div>
</div>
<div class="row">
    @using (Html.BeginForm("ProjectEnhancement", "Project", FormMethod.Post, new { @class = "", role = "form", @id = "formPEH", enctype = "multipart/form-data" }))

    {
        <div class="col-md-12">

            <div class="page-wrapper" id="ProjectEnhancement">

                <div class="white-bg">
                    <div class="row">
                        <div class="col-md-12">
                            <h3 class="spl-title">
                                Enhancement &nbsp;&nbsp;
                                @Html.RadioButtonFor(m => m.Enhancement_Qust_1, "Yes", new { @id = "Enhancement_yes", @checked = "checked" })<span></span> &nbsp; Yes  &nbsp;&nbsp;
                                @Html.RadioButtonFor(m => m.Enhancement_Qust_1, "No", new { @id = "Enhancement_no" }) <span></span> &nbsp; No
                            </h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group custom-form-group ">
                                <label> Project Number </label>
                                @Html.TextBoxFor(m => m.ProjectNumber, new { @class = "form-control", @id = "projectnum",  @readonly = true })
                                @Html.ValidationMessageFor(m => m.ProjectNumber)
                                @Html.Hidden("ProjectID")
                                @Html.Hidden("ProjectEnhancementID")
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group custom-form-group">
                                <label>Project Title</label>
                                @Html.TextBoxFor(m => m.Projecttitle, new { @class = "form-control", @id = "projecttitle", @readonly = true })
                                @Html.ValidationMessageFor(m => m.Projecttitle)
                                <a href="javascript:void(0)" data-toggle="modal" id="btnViewEnhancements"> View Details</a>
                            </div>
                        </div>

                    </div>
                    <div class="pd-null" id="divEnhancement">


                        <div class="row">

                            <div class="col-md-4">
                                <div class="form-group custom-form-group ">
                                    <label> Present Sanction Value </label>
                                    @Html.TextBoxFor(m => m.OldSanctionValue, new { @class = "form-control", @id = "oldsanctndvalue",  @readonly = true })

                                    @Html.ValidationMessageFor(m => m.OldSanctionValue)

                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group custom-form-group ">
                                    <label class="required"> Enhanced sanction Value </label>
                                    @Html.TextBoxFor(m => m.EnhancedSanctionValue, new { @class = "form-control", @id = "enhancedsanctnvalue", @onkeypress = "return isNumberKey(event);" })
                                    @Html.ValidationMessageFor(m => m.EnhancedSanctionValue)

                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group custom-form-group ">
                                    <label> Enhancement Order Number </label>
                                    @Html.TextBoxFor(m => m.DocumentReferenceNumber, new { @class = "form-control", @id = "docrefnum" })

                                    @Html.ValidationMessageFor(m => m.DocumentReferenceNumber)

                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">

                                <div>
                                    <label class="fn-normal">Total Sanction Value</label>
                                </div>
                                <label id="lblSanctionTtl"></label>
                            </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <h3 class="spl-title">Allocation Details</h3>
                                </div>
                            </div>


                            <div class="row">
                                <div id="divAllocateContent">
                                    <div class="mt10 mb10">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label>Allocation Head</label>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                <label> Present Value </label>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                <label> Enhanced Value </label>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                <label> Total Allocation Value </label>
                                            </div>
                                        </div>

                                    </div>

                                    <div id="primaryAllocateDiv">
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">                                                
                                                @Html.DropDownList("Allocationhead", new SelectList(ViewBag.allocatehead, "id", "name"), "Select Allocation head",
                   new { @class = "form-control allochead", @id = "allocatehead", @disabled = true })
                                            </div>
                                            @Html.Hidden("AllocationId")
                                            @Html.Hidden("Allochead")
                                            
                                        </div>

                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                @Html.TextBox("OldAllocationvalue", "", new { @class = "form-control oldalloc", @id = "oldallocatevalue", @onchange = "totalSum();", @readonly = true, @onkeyup = "calculateallocationSum() ;" })
                                                
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group custom-form-group">
                                                @Html.TextBox("EnhancedAllocationvalue", "", new { @class = "form-control newalloc", @id = "enhancedallocatevalue", @onkeypress = "return isNumberKey(event);", @onkeyup = "calculateallocationSum();", @onchange = "totalSum();", @autocomplete = "off" })

                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group custom-form-group">
                                                @Html.TextBox("HeadwiseTotalAllocationvalue", "", new { @class = "form-control ", @id = "headtotalallocatevalue", @onkeypress = "return isNumberKey(event);", @readonly = "true", @onkeyup = "calculateallocationSum();" })

                                            </div>
                                        </div>

                                        <div class="col-md-1">
                                            <button class="dis-none" type="button" name="removeButton"><i class="ion-android-close"></i></button>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-1">
                                    <button type="button" id="btnAddAllocationhead" class="btn-sm"><i class="ion-android-add"></i></button>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">

                                </div>
                                <div class="col-md-2">
                                    <label class="required"> Total </label>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group custom-form-group ">

                                        @Html.TextBoxFor(m => m.TotalEnhancedAllocationvalue, new { @class = "form-control", @id = "totalenhanced", @change = "totalSum();", @readonly = true })

                                        @Html.ValidationMessageFor(m => m.TotalEnhancedAllocationvalue)

                                    </div>
                                </div>

                                <div class="col-md-2">
                                    <div class="form-group custom-form-group ">

                                        @Html.TextBoxFor(m => m.TotalAllocatedvalue, new { @class = "form-control", @id = "totalallocated", @readonly = true })

                                        @Html.ValidationMessageFor(m => m.TotalAllocatedvalue)

                                    </div>
                                </div>
                            </div>
                        </div>
                </div>


                <div class="white-bg">
                    <div class="row">
                        <div class="col-md-12">
                            <h3 class="spl-title">
                                Extension &nbsp;&nbsp;
                                @Html.RadioButtonFor(m => m.Extension_Qust_1, "Yes", new { @id = "Extension_yes" })<span></span> &nbsp; Yes  &nbsp;&nbsp;
                                @Html.RadioButtonFor(m => m.Extension_Qust_1, "No", new { @id = "Extension_no", @checked = "checked" }) <span></span> &nbsp; No
                            </h3>
                        </div>
                    </div>
                    <div class="row" id="extensiondetail">

                        <div class="col-md-4">
                            <div class="form-group custom-form-group">
                                <label>Present Due Date</label>
                                @Html.EditorFor(m => m.PresentDueDate, new { @class = "form-control", @id = "oldduedatepickerid", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.PresentDueDate)
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group custom-form-group">
                                <label>Extended Due Date</label>
                                @Html.EditorFor(m => m.ExtendedDueDate, new { @class = "form-control", @id = "extendduedatepickerid", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.ExtendedDueDate)
                            </div>
                        </div>

                    </div>
                </div>
                <div class="white-bg">
                    <div class="row">
                        <div class="col-md-12">
                            <h3 class="spl-title">Supporting Documents</h3>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group custom-form-group ">
                                <label> Document Name </label>
                                @Html.TextBoxFor(m => m.AttachmentName, new { @class = "form-control", @id = "docname" })

                                @Html.ValidationMessageFor(m => m.AttachmentName)

                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group custom-form-group mt5">
                                <label> Attach Approval document (".pdf", ".doc", ".docx") </label>
                                <input type="file" name="file" id="ApprovalDocument" />&nbsp;&nbsp;&nbsp;
                                @Html.ValidationMessageFor(m => m.AttachmentPath)
                            </div>
                        </div>
@*@if (Model.AttachmentName != null && Model.AttachmentName != "")
{
    <div class="col-md-4 doclink mt6" id="doclink">
        <div class="form-group custom-form-group mt10">
            <label> Attached Approval Document </label> <br />
            @*<a href="@Url.Action("ShowDocument", new { Controller = "Manage", file = Model.DocPath, filepath = "~/Content/ProposalDocuments/", link=Model.DocPath })"> </a>
            <a href="#" class="link1" target="_blank"></a>
        </div>
    </div>
}*@
           
                    </div>
                </div>
                <div class="row" id="saveproject">
                    <div class="col-md-12 text-center pd-tb-30">
                        <input type="submit" class="btn btn-primary mr10" value="Save" name="Button" id="btnSave" />
                        <input type="button" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';" class="btn btn-default" value="Close" id="btnclose" />
                    </div>
                </div>
                <div class="row" id="updateproject">
                    <div class="col-md-12 text-center pd-tb-30">
                        <input type="submit" class="btn btn-primary mr10" value="Update" name="Button" id="btnupdate" />
                        <input type="button" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';" class="btn btn-default" value="Close" id="btnclose" />
                    </div>
                </div>
            </div>



            <div class="row mt30" id="gridproject">
                <div id="AddNewEntryModel" class="modal fade" role="dialog">
                    <div class="modal-dialog wdth80">

                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';">&times;</button>
                                <h3 class="modal-title">Select Project</h3>
                            </div>
                            <div class="modal-body">

                                <!-- Modal content-->
                                <div class="col-md-12">
                                    <div class="col-md-4">
                                        <div class="form-group custom-form-group">
                                            <label class="required">Project Type</label>
                                            @Html.DropDownListFor(m => m.Projecttype, new SelectList(ViewBag.projecttype, "CodeValAbbr", "CodeValDetail"), "Select Project Type",
                                           new { @class = "form-control", @id = "selectProjecttype" })

                                            <div> @Html.ValidationMessageFor(m => m.Projecttype)</div>
                                        </div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="form-group custom-form-group">
                                            <label class="required"> Project  </label>
                                            @*@Html.DropDownListFor(m => m.SelectProject, new SelectList(ViewBag.Project, "id", "name"), "Select Project",
                                           new { @class = "form-control selectpicker", @id = "Projectlist" })*@
                                            @Html.TextBox("Project","", new {@id= "Project", @class = "form-control" })
                                            @Html.TextBoxFor(m => m.SelectProject, new { @class = "form-control dis-none" })
                                            @Html.ValidationMessageFor(m => m.SelectProject)
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div class="modal-footer">
                                @*<input type="submit" name="Button" value="ADD" class="btn btn-primary" id="btnSave" />&nbsp;&nbsp;*@
                                <button type="button" class="btn btn-primary mt10" data-dismiss="modal" id="btnselectproject">Ok</button>
                                @*<button type="button" class="btn btn-primary mt10" data-dismiss="modal" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';">Close</button>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt30" id="gridlist">

                <div class="col-md-12">
                    <div class="page-wrapper">
                        <div class="custom-jsgrid-normal">
                            <div id="gridProjectList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (ViewBag.succMsg != null)
{
    <div id="myModal" class="modal fade modal-success" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';">&times;</button>
                    <i class="ion-android-checkmark-circle"></i>
                    <h3 class="modal-title">Saved successfully</h3>
                </div>
                <div class="modal-body">

                    <p>@ViewBag.succMsg</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="window.location.href='@Url.Action("ProjectEnhancement", "Project")';">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal').modal('show');
        });

    </script>

}
@if (ViewBag.errMsg != null)
{
    <div id="myModal1" class="modal fade modal-error" role="dialog">
        <div class="modal-dialog modal-sm">

            Modal content
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <i class="ion-android-cancel"></i>
                    <h3 class="modal-title">Error Message</h3>
                </div>
                <div class="modal-body">

                    <p>@ViewBag.errMsg</p>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#myModal1').modal('show');
        });

    </script>
}
<div id="popup"></div>
<link href="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/css/bootstrap-select.min.css")" rel="stylesheet" />
<script src="@Url.Content("~/Content/IOASContent/assets/bootstrap-select/js/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>
<script>
    var errMsg = '@ViewBag.errMsg';
    var modelData = '@Html.Raw(Json.Encode(Model))';
    $(document).ready(function () {
        var searchData = { classification : 1};
        applyAutoComplete($('#Project'), $('#SelectProject'), "@Url.Action("LoadProjectList", "CoreAccounts")", undefined, undefined, undefined, searchData);
        //get the relevant form
        //  var form = $('#frmSRB');
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        if (errMsg) {
            //$('#FailedAlert').html(errMsg);
            //$('#Failed').modal('toggle');
            var jsonData = JSON.parse(modelData);
            $('#addnewpage').hide();
            $('#ProjectEnhancement').show();
            $('#saveproject').show();
            $('#updateproject').hide();
            $('#gridlist').hide();
           // $('#viewdoc').hide();
            fillData(jsonData);

        } else {
            $('#gridlist').show();
            $('#ProjectEnhancement').hide();
           // $('#viewdoc').show();
        }
    });
    //$('#gridlist').show();
    //$('#ProjectEnhancement').hide();
    //$('#saveproject').hide();
    //$('#updateproject').hide();
    //// $('#gridsearchlist').hide();
    //$('#viewdoc').hide();
    $('#selectProjecttype').prop("selectedIndex", 0);
    $('#oldduedatepickerid').val("");
    $('#extendduedatepickerid').val("");
    $('#Projectlist').prop("selectedIndex", 0);

    //$('#PresentDueDate').datepicker({ dateFormat: 'dd-MM-yy',minDate:-1,maxDate:-2, changeYear: true });
    $('#ExtendedDueDate').datepicker({ dateFormat: 'dd-MM-yy', changeYear: true });
    $('#PresentDueDate').datepicker({
        dateFormat: 'dd-MM-yy',
        beforeShowDay: function () {
           return false;
        }
    });

    $('#btnViewEnhancements').on('click', function () {
        var projectid = $('input[name="ProjectID"]').val();
        $.ajax({
            type: "GET",
            url: '@Url.Action("_ExtensionandEnhancementHistory", "Project")',
            data: {
                Projectid: projectid
            },
            contentType: "application/x-www-form-urlencoded",
            success: function (data) {
                $("#popup").html(data);
                $('#ViewDetailsModal').modal('toggle');
            }
        });

    });
    $('#oldsanctndvalue,#enhancedsanctnvalue').blur(function () {
        calculateSanctionTotal();
    });
    function calculateSanctionTotal() {
        var oldVal = parseFloat($('#oldsanctndvalue').val()) || 0;
        var newVal = parseFloat($('#enhancedsanctnvalue').val()) || 0;
        var ttlVal = oldVal + newVal;
        $('#lblSanctionTtl').text(ttlVal.toFixed(2));
    }
    $("#selectProjecttype").change(function () {
        var Projecttype = $(this).val();
        var searchData = {type :Projecttype, classification : 1}
        applyAutoComplete($('#Project'), $('#SelectProject'), "@Url.Action("LoadProjectList", "CoreAccounts")", undefined, undefined, undefined, searchData);
        @*$.getJSON("@Url.Action("Loadprojectdetailsbytype", "Project")", { projecttype: Projecttype },
                    function (locationdata) {
                        var select = $("#Projectlist");
                        select.empty();

                        $.each(locationdata, function (index, itemData) {

                            select.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name

                            }));
                        });
                        select.selectpicker('refresh');
                    });*@

    });
    // $(".selectpicker").selectpicker("refresh");
    $("#btnselectproject").click(function () {

        var PrjType = $("#selectProjecttype").val();
        var projectid = $("#SelectProject").val();
        var IsValid = true;
        if (projectid == "") {
            IsValid = false;
            $("#alert").text("Please select project");
            $('#Validation').modal('show');
            $("#Project").focus();
            return false;
        }
        var ProjectenhanceDetails = 'LoadProjectdetailsforenhance';
        if (IsValid == true)
            $.ajax({

                type: "POST",
                url: ProjectenhanceDetails,
                data: { ProjectId: projectid },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",

                success: function (result) {
                    $('input[name="ProjectID"]').val(result.ProjectID);
                    $("#projectnum").val(result.ProjectNumber);
                    $("#projecttitle").val(result.Projecttitle);
                    var dueDate = new Date(parseInt(result.PresentDueDate.replace(/(^.*\()|([+-].*$)/g, '')));
                    $("#PresentDueDate").datepicker('setDate', dueDate);
                    $("#ExtendedDueDate").datepicker("option", "minDate", dueDate);
                    $('#oldsanctndvalue').val(result.OldSanctionValue);
                    $('input[name=Extension_Qust_1][value=Yes]').attr('checked', false);
                    $('#extensiondetail').css("display", "none");
                    var AllocateId = result.AllocationId;
                    var AllocateHead = result.Allocationhead;
                    var OldAllocationvalue = result.OldAllocationvalue;

                    //    $('#divAllocateContent #primaryAllocateDiv').not(':first').remove();
                    document.getElementsByName('Allocationhead')[0].value = "";
                    document.getElementsByName('OldAllocationvalue')[0].value = "";
                    document.getElementsByName('AllocationId')[0].value = "";
                    document.getElementsByName('HeadwiseTotalAllocationvalue')[0].value = "";
                    document.getElementsByName('Allochead')[0].value = "";
                    $.each(AllocateHead, function (i, val) {
                        if (i == 0) {
                            document.getElementsByName('AllocationId')[0].value = AllocateId[0];
                            document.getElementsByName('Allocationhead')[0].value = AllocateHead[0];
                            document.getElementsByName('OldAllocationvalue')[0].value = OldAllocationvalue[0];
                            document.getElementsByName('HeadwiseTotalAllocationvalue')[0].value = OldAllocationvalue[0];
                            document.getElementsByName('Allochead')[0].value = AllocateHead[0];
                        } else {
                            var cln = $("#primaryAllocateDiv").clone().find("input").val("").end();
                            //$(cln).find('.dis-none').removeClass('dis-none');
                            $('#divAllocateContent').append(cln)
                            document.getElementsByName('AllocationId')[i].value = AllocateId[i];
                            document.getElementsByName('Allocationhead')[i].value = AllocateHead[i];
                            document.getElementsByName('OldAllocationvalue')[i].value = OldAllocationvalue[i];
                            document.getElementsByName('HeadwiseTotalAllocationvalue')[i].value = OldAllocationvalue[i];
                            document.getElementsByName('Allochead')[i].value = AllocateHead[i];
                        }
                    });
                    if (AllocateHead == "") {
                        var alloc = $("#primaryAllocateDiv").find("input").val("").end();
                        $(alloc).find('.allochead').removeAttr("disabled");
                        $(alloc).find('.oldalloc').val(0);
                    }
                    var docname = result.AttachmentName
                    var path = result.AttachmentPath
                    if (docname != null) {
                        document.getElementsByClassName('link1')[0].text = docname;
                        document.getElementsByClassName('link1')[0].href = "ShowDocument?file=" + path + "&filepath=~%2FContent%2FSupportDocuments%2F";
                    }
                    totalSum();
                },
                error: function (err) {
                    console.log("error1 : " + err);
                }
            });
        $("#AddNewEntryModel").modal('hide');
        $("#ProjectEnhancement").show();
        $("#gridlist").hide();
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function calculateallocationSum() {
        var oldallocatevalue = [];
        var enhanceallocatevalue = [];
        var headwisetotalvalue = [];

        $('input[name="OldAllocationvalue"]').each(function (idx, val) { oldallocatevalue.push($(val).val()); });
        $('input[name="EnhancedAllocationvalue"]').each(function (idx, val) { enhanceallocatevalue.push($(val).val()); });
        $('input[name="HeadwiseTotalAllocationvalue"]').each(function (idx, val) { headwisetotalvalue.push($(val).val()); });
        oldallocatevalue.sort();
        enhanceallocatevalue.sort();
        headwisetotalvalue.sort();
        //alert(oldallocatevalue);
        $.each(oldallocatevalue, function (i, val) {
            var txtoldallocValue = parseFloat(document.getElementsByName('OldAllocationvalue')[i].value);
            var txtenhanceallocValue = parseFloat(document.getElementsByName('EnhancedAllocationvalue')[i].value);
            if (isNaN(txtoldallocValue))
                txtoldallocValue = 0;
            if (isNaN(txtenhanceallocValue))
                txtenhanceallocValue = 0;
            var result = txtoldallocValue + txtenhanceallocValue;
            if (!isNaN(result)) {
                document.getElementsByName('HeadwiseTotalAllocationvalue')[i].value = result;
            }
        });
    }


    function totalSum() {
        var oldallocatevalue = [];
        var enhanceallocatevalue = [];
        var headwisetotalvalue = [];

        $('input[name="OldAllocationvalue"]').each(function (idx, val) { oldallocatevalue.push($(val).val()); });
        $('input[name="EnhancedAllocationvalue"]').each(function (idx, val) { enhanceallocatevalue.push($(val).val()); });
        $('input[name="HeadwiseTotalAllocationvalue"]').each(function (idx, val) { headwisetotalvalue.push($(val).val()); });
        oldallocatevalue.sort();
        enhanceallocatevalue.sort();
        headwisetotalvalue.sort();
        var result = 0;
        var allocateresult = 0;
        $.each(enhanceallocatevalue, function (i, val) {
            var txtenhanceallocValue = parseFloat(document.getElementsByName('EnhancedAllocationvalue')[i].value);
            var headwisetotalvalue = parseFloat(document.getElementsByName('HeadwiseTotalAllocationvalue')[i].value);
            if (!isNaN(txtenhanceallocValue))
                result += txtenhanceallocValue;
            if (!isNaN(headwisetotalvalue))
                allocateresult += headwisetotalvalue;
            if (!isNaN(result)) {
                $("#totalenhanced").val(result.toFixed(0));
                // document.getElementsByName('TotalEnhancedAllocationvalue')[i].value = result;
            }
            if (!isNaN(result)) {
                $("#totalallocated").val(allocateresult.toFixed(0));
                // document.getElementsByName('TotalEnhancedAllocationvalue')[0].value = result;
            }
        });
    }


    $('#btnAddAllocationhead').click(function () {
        var cln = $("#primaryAllocateDiv").clone().find("input").val("").end();
        $(cln).find('.dis-none').removeClass('dis-none');
        $('#divAllocateContent').append(cln)
        $(cln).find('.allochead').removeAttr("disabled");
        $(cln).find('.oldalloc').val(0);
    });
    $(document).on('click', '#divAllocateContent button', function () {
        $(this).parent().parent("Div").remove();
        totalSum();
        calculateallocationSum();
    });

    $('[id^="Enhancement_"]').change(function () {
        var ID = $(this).attr("id");
        var qustType = ID.substr(ID.lastIndexOf("_") + 1);
        var qustNo = ID.substring(ID.indexOf("_") + 1, ID.lastIndexOf("_"));

        if (qustType === "yes") {
            $('#divEnhancement').css("display", "block");
        }
        else {
            $('#divEnhancement').css("display", "none");
        }
    });
    $('[id^="Extension_"]').change(function () {
        var ID = $(this).attr("id");
        var qustType = ID.substr(ID.lastIndexOf("_") + 1);
        var qustNo = ID.substring(ID.indexOf("_") + 1, ID.lastIndexOf("_"));

        if (qustType === "yes") {
            $('#extensiondetail').css("display", "block");
        }
        else {
            $('#extensiondetail').css("display", "none");
        }
    });


    $('#btnaddnew').on('click', function () {
        $('#addnewpage').hide();
        $('#ProjectEnhancement').hide();
        $('#gridlist').hide();
        $('#saveproject').show();
        $('#updateproject').hide();
        $('#viewdoc').hide();
    });


    $('#btnSave').on('click', function (d) {
        d.preventDefault();
        var isValid = $('#formPEH').valid();
        if (!isValid)
            return false;
        var newenhance = $('#enhancedsanctnvalue').val();
        var totalenhance = $('#totalenhanced').val();
        var enhanceordernum = $('#docrefnum').val();

        var enhanceAns = $('input[name=Enhancement_Qust_1]:checked').val();
        var extendAns = $('input[name=Extension_Qust_1]:checked').val();
        if (enhanceAns == "No" && extendAns == "No") {
            $('#alert').html("At least do anyone of these actions enhancement or extension.");
            $('#Validation').modal('toggle');
            return false;
        }
        if (newenhance != totalenhance && enhanceAns == "Yes" && document.getElementsByName('Allochead')[0].value != "")
        {
            $('#alert').html("The enhanced sanction value is not equal to enhanced allocation value. Please check the values.");
            $('#Validation').modal('toggle');
            return false;
        }
        if (enhanceAns == "Yes") {
            //duplicate check
            var allocateheads = [];
            $('select[name="Allocationhead"]').each(function (idx, val) { allocateheads.push($(val).val()); });
            allocateheads.sort();
            for (var k = 1; k < allocateheads.length; ++k) {
                if (allocateheads[k] == allocateheads[k - 1]) {
                    $('#alert').html("Allocation head already exist. Please select a different allocation head.");
                    $('#Validation').modal('toggle');
                    return false;
                }
                isValid = true;
            }
            //for (var k = 0; k < allocateheads.length; ++k) {

            //    if (allocateheads[k] == null || allocateheads[k] == "") {
            //        $('#alert').html("Allocation head cannot be left unselected. Please select allocation head.");
            //        $('#Validation').modal('toggle');
            //        return false;
            //    }
            //    isValid = true;
            //}
        }
        $('#addnewpage').hide();
        $('#projectopening').hide();
        $('#gridlist').hide();
        //$('#createuserid').hide();

        if (isValid)
            $('#formPEH').submit();

    });
    $('#btnupdate').on('click', function (d) {

        d.preventDefault();

        var isValid = $('#formPEH').valid();
        if (!isValid)
            return false;
        $('#addnewpage').hide();
        $('#projectopening').hide();
        $('#gridlist').hide();
        //$('#createuserid').hide();

        if (isValid)
            $('#formPEH').submit();

    });


    $(document).on('click', '#divContent button[name="removeButton"]', function () {
        $(this).parent().parent("Div").remove();

    });


    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function noedit() {
        return false;
    }


</script>
