@model IOAS.Models.AgencySalaryModel

@{
    ViewBag.Title = "Agency Salary";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}

@using (Html.BeginForm("AgencySalary", "StaffPayment", FormMethod.Post, new { @class = "", role = "form", @id = "formAS", enctype = "multipart/form-data" }))
{

    <div class="row hd-tt-bg">
        <div class="col-md-12">
            <h4><b>Agency Salary</b> </h4>
        </div>
    </div>

    <div class="row">
        <div class="white-bg ad-navbar">
            <div class="col-md-3 col-md-offset-9">
                <div class="reg-no custom-reg-no">
                    <div class="form-group custom-form-group">
                        <label>Payment Number</label>
                        <h4>@Html.DisplayFor(m => m.PaymentNo)</h4>
                        @Html.HiddenFor(m => m.AgencySalaryID, new { @id = "hdnAgencyId" })
                        @Html.HiddenFor(m => m.SubCode)
                        @Html.Hidden("TransactionTypeCode", "SAL")
                        @Html.HiddenFor(m => m.NeedUpdateTransDetail)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="page-wrapper">
            <div class="col-md-12 mt30">
                <ul class="nav nav-pills custom-nav-pills">
                    <li class="active"><a href="javascript:void(0)"><span>01</span>Salary Details</a></li>
                    <li><a href="javascript:void(0)"><span>02</span>Commitment Details</a></li>
                    <li><a href="javascript:void(0)"><span>03</span>Transaction Details</a></li>
                    <li><a href="javascript:void(0)"><span>04</span>CheckList Details</a></li>
                    <li><a href="javascript:void(0)"><span>05</span>Document Details</a></li>
                </ul>

                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="row">
                            <div class="page-wrapper">
                                <div class="col-md-12">
                                    <div class="white-bg">
                                        <div class="row mb30">
                                            <div class="col-md-4">
                                                <label class="required">Month & Year:</label>
                                                @if (Model.AgencySalaryID > 0)
                                                {@Html.DropDownListFor(m => m.MonthYear, new SelectList(ViewBag.months, "Value", "Value"), new { @class = "form-control required", @disabled = "disabled" })
                                                }
                                                else
                                                {@Html.DropDownListFor(m => m.MonthYear, new SelectList(ViewBag.months, "Value", "Value"), new { @class = "form-control required" })
                                                }
                                                @Html.ValidationMessageFor(m => m.MonthYear)
                                            </div>
                                            <div class="col-md-4">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <ul class="nav nav-tabs">
                                                <li class="active"><a id="tab_Employee" data-toggle="tab" href="#Employee">Staff Details</a></li>
                                                <li><a id="tab_Verified" data-toggle="tab" href="#Verified">Verified Profile</a></li>
                                            </ul>
                                            <div class="tab-content">
                                                <div id="Employee" class="tab-pane fade in active">
                                                    <div class="col-md-12">
                                                        <div class="gray-bg br-rd">
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <div class="row m-b-sm">
                                                                        <div class="col-md-6">
                                                                            <h3 class="mt-xs">Salary Details</h3>
                                                                        </div>
                                                                        <div class="col-md-2 col-md-offset-4">
                                                                            <button type="button" class="btn btn-default" id="btnVerifyAll">Verify all</button>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-12" id="gridData">
                                                                        @Html.Partial("_AgencySalaryStaffDetailsPartial", Model)
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div id="Verified" class="tab-pane fade">
                                                    <div class="col-md-12">
                                                        <div class="gray-bg br-rd">
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <div class="row m-b-sm">
                                                                        <div class="col-md-12">
                                                                            <h3 class="mt-xs">Verified Profile</h3>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-12" id="gridVerified">

                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="row">
                                                    <div class="col-md-6">

                                                    </div>
                                                    <div class="col-md-6">                                                     

                                                        <div class="col-md-12">                                                          
                                                            <div class="col-md-6 col-md-offset-6">
                                                                <div class="form-group custom-form-group">
                                                                    <label>Total salary:</label>@Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                                <div class="form-group custom-form-group">
                                                                    <label>Service charge(1.6%):</label>@Html.TextBoxFor(m => m.ServiceCharge, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                                <div class="form-group custom-form-group">
                                                                    <label>Net salary:</label>@Html.TextBoxFor(m => m.NetAmount, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                                <div class="form-group custom-form-group">
                                                                    <label>CGST:</label>@Html.TextBoxFor(m => m.CGST, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                                <div class="form-group custom-form-group">
                                                                    <label>SGST:</label>@Html.TextBoxFor(m => m.SGST, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                                <div class="form-group custom-form-group">
                                                                    <label>Net payable:</label>@Html.TextBoxFor(m => m.NetPayable, new { @class = "form-control", @readonly = "readonly" })
                                                                </div>
                                                            </div>

                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">

                    <div class="row">
                        <div class="col-md-12" id="gridCommitment">

                        </div>                        
                    </div>
                    <div class="row mt-lg">
                        @Html.Partial("_CommitmentDetails", Model.CommitmentDetail)
                    </div>
                    <div class="row">
                        <div class="col-md-4 col-md-offset-8">
                            <div class="form-group custom-form-group ">
                                <label>Net Value :</label>
                                @Html.TextBox("NetCommitmentAmount", "", new { @class = "form-control", @autocomplete = "off", @readonly = "readonly" })
                                @Html.ValidationMessage("NetCommitmentAmount")
                            </div>
                        </div>
                    </div>
                  </div>
                <div class="tab">
                    @Html.Partial("_TransactionDetails", Model)
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_CheckListDetail", Model.CheckListDetail)
                        </div>
                        <div>
                            @Html.HiddenFor(m => m.CheckListVerified_By)
                            @Html.HiddenFor(m => m.CheckListVerifierName)
                            <div class="col-md-3 col-md-offset-9">
                                <div class="form-group custom-form-group">
                                    <label>Verified by</label>
                                    <h4 id="Verified_ByName">@Html.DisplayFor(m => m.CheckListVerifierName)</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab">
                    <div class="col-md-12 col-sm-12 m-b-sm">
                        <div class="">
                            @Html.Partial("_DocumentDetail", Model.DocumentDetail)
                        </div>
                    </div>
                </div>

                <div class="custom-nav-btn text-right">
                    <button type="button" class="btn btn-default pull-left" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" class="btn btn-primary pull-right" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    <button type="button" class="btn btn-default pull-right" onclick="window.location.href='@Url.Action("AgencySalaryList", "StaffPayment")';">Close</button>
                </div>

            </div>

        </div>
    </div>

}

@Html.AntiForgeryToken()
<div id="popup"></div>

<script>
    $('#SourceEmailDate, #srchFromDate, #srchToDate,#InvoiceDate,#PODate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true });
    $('#srchToDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", "0");
    var defaultFromDate = moment(new Date()).add(-10, 'days').toDate();
    $('#srchFromDate').datepicker({ maxDate: 0, dateFormat: 'dd-MM-yy', changeYear: true }).datepicker("setDate", defaultFromDate);

    var errMsg = '@TempData["errMsg"]';
    var SuccMsg = '@TempData["succMsg"]';
    var reqRunning = false;
    $(document).ready(function () {
        if (errMsg != '') {
            $('#FailedAlert').html(errMsg);
            $('#Failed').modal('toggle');
        }
        if (SuccMsg != '') {
            $('#alertSuccess').html(succMsg);
            $('#Success').modal('toggle');
        }
        $('.selectpicker').selectpicker({
            liveSearch: true
        });
        CalculateDeductionTotal();
        CalculatePaymentValue()
        calculateCommitmentTotal();
        $('#NeedUpdateTransDetail').val('false');
    });

    function ValidateTransaction() {
        var msg = 'valid';
        var netCrAmt = parseFloat($('#CreditorAmount').val()) || 0;
        var ttlExpAmt = parseFloat($('#ExpenseAmount').val()) || 0;
        var ttldeductAmt = parseFloat($('#DeductionAmount').val()) || 0;
        var crAmt = parseFloat($('#ttlCr').val()) || 0;
        var payable = parseFloat($('#NetPayable').val()) || 0;
        var netDrAmt = (ttlExpAmt + ttldeductAmt).toFixed(2);
        if (netDrAmt != crAmt || netCrAmt != crAmt) {
            msg = 'Not a valid entry. Credit and Debit value are not equal.';
        } else if (payable != netCrAmt) {
            msg = 'Not a valid entry. Net payable and transaction value are not equal.';
        }
        
        var hdList = [];
        $('#tbodyExpenseList tr').find('select[name$=".AccountHeadId"]').each(function (idx, val) { hdList.push($(val).val()); });
        hdList.sort();
        // duplicate check
        for (var k = 1; k < hdList.length; ++k) {
            if (hdList[k] == hdList[k - 1]) {
                msg = "Duplicate account head exist in expense details. Please select a different head.";
            }
        }
        return msg;
    }
    function ValidateCommitment() {
        var msg = 'valid';
        var commitmentAmt = parseFloat($('#NetCommitmentAmount').val()) || 0;
        var netSalAmt = parseFloat($('#NetAmount').val()) || 0;
        var payableAmt = parseFloat($('#NetPayable').val()) || 0;
        $("#tbodyCommitmentSelList tr").each(function () {
            var elePayment = $(this).find("input[name$='.PaymentAmount']");
            var eleAvlBal = $(this).find('input[name$=".AvailableAmount"]');
            var parseVal = parseFloat($(elePayment).val()) || 0;
            var avlBal = parseFloat($(eleAvlBal).val()) || 0;
            if (parseVal > avlBal)
                msg = "Commitment payment value should not be greater than available balance."
        });
        if (netSalAmt > commitmentAmt || payableAmt < commitmentAmt) {
            msg = 'There is a mismatch between the requested advance value and allocated commitment value. Please update the value to continue.';
        }
        return msg;
    }

    function formSave() {
        var isValid = $('#formAS').valid();
        if (!isValid)
            return false;
        var doctypevalues = [];
        $('select[name$=".DocumentType"]').each(function (idx, val) { doctypevalues.push($(val).val()); });
        doctypevalues.sort();
        // duplicate check
        for (var k = 1; k < doctypevalues.length; ++k) {
            if (doctypevalues[k] == doctypevalues[k - 1]) {
                $('#alert').html("Selected attachment type already exist. Please select a different attachment type.");
                $('#Validation').modal('toggle');
                return false;
            }
            isValid = true;
        }

        if (isValid)
            $('#formAS').submit();

    }

    function AddNewExpense() {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAddNewExpenseDetails", "CoreAccounts")",
            data: { "typeCode": "SAL", "tSubCode": "1" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    var cln = $('#tbodyExpenseList tr:first').clone().find("select,input").val("").end();
                    $(cln).find('a.dis-none').removeClass('dis-none');
                    var index = $('#tbodyExpenseList tr:last').find("input[name='ExpenseDetail.Index']").val();
                    index = parseInt(index) + 1;
                    $(cln).find("input[name='ExpenseDetail.Index']").val(index);
                    $(cln).find('input[name$=".TransactionType"]').val(item.TransactionType);
                    $(cln).find('#lblTransType').text(item.TransactionType);
                    $(cln).find('input[name$=".IsJV"]').val(item.IsJV);
                    $(cln).find("input, select").each(function () {
                        $(this).attr("name", $(this).attr("name").replace(/\d+/, index));
                        $(this).attr("id", $(this).attr("id").replace(/\d+/, index));
                    });
                    $(cln).find("span[data-valmsg-for]").each(function () {
                        $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, index));
                    });

                    var selectGroup = $(cln).find("select[name$='.AccountGroupId']");
                    selectGroup.empty();
                    $.each(item.AccountGroupList, function (index, itemData) {
                        selectGroup.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });

                    var selectHead = $(cln).find("select[name$='.AccountHeadId']");
                    selectHead.empty();
                    $.each(item.AccountHeadList, function (index, itemData) {
                        selectHead.append($('<option/>', {
                            value: itemData.id,
                            text: itemData.name,
                        }));
                    });
                    $('#tbodyExpenseList').append(cln);
                });
            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    function GetTransactionDetails() {
        EmptyExpenseDeductionDetails();
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetTransactionDetails", "CoreAccounts")",
            data: { "typeCode": "SAL", "tSubCode": "1" },
            traditional: true,
            dataType: "json",
            success: function (result) {
                $.each(result.ExpenseDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyExpenseList tr:first');
                        $(trEle).find('input[name$=".Amount"]').val('');
                        $(trEle).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEle).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEle).find('#lblTransType').text(item.TransactionType);
                        $(trEle).find("input[name='ExpenseDetail.Index']").val(i);

                        var selectGroup = $(trEle).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEle).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                    } else {
                        var trEleNew = $('#tbodyExpenseList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find('input[name$=".Amount"]').val('');
                        $(trEleNew).find("input[name='ExpenseDetail.Index']").val(i);
                        $(trEleNew).find('input[name$=".TransactionType"]').val(item.TransactionType);
                        $(trEleNew).find('input[name$=".IsJV"]').val(item.IsJV);
                        $(trEleNew).find('#lblTransType').text(item.TransactionType);
                        $(trEleNew).find("input,Select").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });

                        var selectGroup = $(trEleNew).find('select[name$=".AccountGroupId"]');
                        selectGroup.empty();
                        $.each(item.AccountGroupList, function (index, itemData) {
                            selectGroup.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });

                        var selectHead = $(trEleNew).find('select[name$=".AccountHeadId"]');
                        selectHead.empty();
                        $.each(item.AccountHeadList, function (index, itemData) {
                            selectHead.append($('<option/>', {
                                value: itemData.id,
                                text: itemData.name,
                            }));
                        });
                        $('#tbodyExpenseList').append(trEleNew);
                    }
                });
                $.each(result.DeductionDetail, function (i, item) {
                    if (i == 0) {
                        var trEle = $('#tbodyDeductionList tr:first');
                        $(trEle).find('input').val('');
                        var amtEle = $(trEle).find('input[name$=".Amount"]');
                        amtEle.removeClass('required');
                        $(trEle).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEle).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEle).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEle).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEle).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEle).find('td:nth-child(2)').html(item.DeductionHead);
                    } else {
                        var trEleNew = $('#tbodyDeductionList tr:first').clone().find('input').val('').end();
                        $(trEleNew).find("input").each(function () {
                            $(this).attr("name", $(this).attr("name").replace(/\d+/, i));
                            $(this).attr("id", $(this).attr("id").replace(/\d+/, i));
                        });
                        $(trEleNew).find("span[data-valmsg-for]").each(function () {
                            $(this).attr("data-valmsg-for", $(this).attr("data-valmsg-for").replace(/\d+/, i));
                        });
                        var amtEle = $(trEleNew).find('input[name$=".Amount"]');

                        amtEle.removeClass('required');
                        $(trEleNew).find('input[name$=".AccountGroupId"]').val(item.AccountGroupId);
                        $(trEleNew).find('input[name$=".DeductionHeadId"]').val(item.DeductionHeadId);
                        $(trEleNew).find('input[name$=".DeductionHead"]').val(item.DeductionHead);
                        $(trEleNew).find('input[name$=".AccountGroup"]').val(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(1)').html(item.AccountGroup);
                        $(trEleNew).find('td:nth-child(2)').html(item.DeductionHead);
                        $('#tbodyDeductionList').append(trEleNew);
                    }
                });
                $('#NeedUpdateTransDetail').val('false');
                CalculateDeductionTotal();

            },
            error: function (err) {
                console.log("error : " + err);
            }
        });
    }

    /* Tab Sections Start*/
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab
    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        $(".custom-nav-pills li:eq(" + n + ")").addClass("active");
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        //fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n > 0 && !validateForm(n)) return false;
        if (currentTab + n < x.length) {
            // Hide the current tab:
            x[currentTab].style.display = "none";
            $(".custom-nav-pills li:eq(" + currentTab + ")").removeClass("active");
        } else {
            // ... the form gets submitted:
            formSave();
            return false;
        }
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;

        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm(n) {

        // This function deals with validation of the form fields
        var isValid = false;
        var hadError = false;
        var tabs = $(".tab");
        var currentTabEle = tabs[currentTab];
        var inputs = $(":input, textarea, select"); // get all the form inputs and selects
        var stepElements = $(currentTabEle).find(inputs); // get inputs for current step
        var count = stepElements.length; // check that there are inputs
        if (count <= 0) {                // if there are not no reason to loop them
            return true;                 // this can be used to perform other action if there are no steps
        } else if (currentTab == 0) {
            var content = $('#tbodyCommitmentSrchList tr td:last').html();
            if (content == '') {
                searchCommitment()
            }
            calculateCommitmentTotal();
        }
        else if (currentTab == 1) {
            var validationMsg = ValidateCommitment()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            } else {
                if ($('#NeedUpdateTransDetail').val() == 'true') {
                    GetTransactionDetails();
                }
                CalculateDeductionTotal();
                $("#CreditorAmount").val($('#NetPayable').val());
            }
        }
        else if (currentTab == 2) {
            var validationMsg = ValidateTransaction()
            if (validationMsg != 'valid') {
                hadError = true;
                $("#alert").text(validationMsg);
                $('#Validation').modal('show');
            }
        }
        else if (currentTab == 3) {
            if ($('#CheckListVerified_By').val() == '') {
                hadError = true;
                $("#alert").text('Checklist is not verified.');
                $('#Validation').modal('show');
            }
        }

        $(stepElements).each(function (idx, ele) {

            if (!$(ele).is(':radio') && !$(ele).is(':checkbox') && !$(ele).is(':password')) {
                isValid = $(ele).valid();//$(document.forms[0]).validate().element($(this)); // check that the input is valid. This can also be used on a per input basis to perform another action if the field is not valid.
                if (!isValid) { hadError = true; } // set our flag if there was an error
            }

        });
        return !hadError; // return the valid status

    }
    $('#MonthYear').change(function () {
        $("#hdnAgencyId").val('');
        getDataEmp(1);
        getData();
        getCommitmentData();
        $("#SGST").val('');
        $("#CGST").val('');
        $("#ServiceCharge").val('');
        $("#NetAmount").val('');
        $("#NetPayable").val('');
        $("#CommitmentAmount").val('');
    });
    $('#btnVerifyAll').click(function () {
        if (reqRunning)
            return false;
        var AgencySalId = $("#hdnAgencyId").val() || 0;
        var monthYear = AgencySalId == 0 ? $('#MonthYear').val() : '';
        var token = $("input[name=__RequestVerificationToken]").val();
        var searchdata = { "__RequestVerificationToken": token, "AgencySalaryID": AgencySalId, "MonthYear": monthYear };
        var ajaxOpts = {
            url: '@Url.Action("VerifyAllEmployeeDetails", "StaffPayment")',
            type: "POST",
            contentType: "application/x-www-form-urlencoded",
            data: searchdata,
            success: function (data) {
                if (data.Status == "success") {
                    messageBox("Verification has been done successfully", "success");
                    if (AgencySalId == 0) {
                        $("#hdnAgencyId").val(data.AgencySalaryID);
                        $("#MonthYear").attr("disabled", "disabled");
                    }
                    getDataEmp(1);
                    getData();
                    getCommitmentData();
                    fillCalcDetail(data);
                } else if (data.Status == "error") {
                    messageBox("Something went wrong please contact administrator", "error");
                } else {
                    messageBox(data.Status, "error");
                }
            },
            error: function (xhr, status, error) {
                var err = JSON.parse(xhr.responseText);
                messageBox(err.Message, "warning");
                reqRunning = false;
                $('.loading-bg').addClass('dis-none');
            },
            complete: function () {
                reqRunning = false;
                $('.loading-bg').addClass('dis-none');
            }
        };
        reqRunning = true;
        $('.loading-bg').removeClass('dis-none');
        $.ajax(ajaxOpts);
        return false;
    });
    
    function verifyEmpDetail(Employeeid, AgencySalid, arrBrkup) {
        if (reqRunning)
            return false;
        var token = $("input[name=__RequestVerificationToken]").val();
        var monthYear = AgencySalid == 0 ? $('#MonthYear').val() : '';
        var data = { "AgencySalaryID": AgencySalid, "MonthYear": monthYear, "EmployeeId": Employeeid, "buDetail": arrBrkup };
        var searchdata = { "__RequestVerificationToken": token, stringify: JSON.stringify(data) };
        var ajaxOpts = {
            url: '@Url.Action("VerifyEmployeeDetails", "StaffPayment")',
            type: "POST",
            traditional: true,
            contentType: "application/x-www-form-urlencoded",
            data: searchdata,
            success: function (data) {
                if (data.Status == "success") {
                    $("#AgencySalaryDetailsModal").modal("toggle");
                    messageBox("Employee has been verified successfully", "success");
                    if (AgencySalid == 0) {
                        $("#hdnAgencyId").val(data.AgencySalaryID);
                        $("#MonthYear").attr("disabled", "disabled");
                    }
                    getDataEmp(1);
                    getData();
                    getCommitmentData();
                    fillCalcDetail(data);
                } else {
                    messageBox(data.msg, "error");
                }
            },
            error: function (xhr, status, error) {
                var err = JSON.parse(xhr.responseText);
                messageBox(err.Message, "warning");
                reqRunning = false;
            },
            complete: function () {
                reqRunning = false;
            }
        };
        reqRunning = true;
        $.ajax(ajaxOpts);
        return false;
    }
    function getDataEmp(page) {
        var AgencySalId = $("#hdnAgencyId").val() || 0;
        var monthYear = AgencySalId == 0 ? $('#MonthYear').val() : '';
        var token = $("input[name=__RequestVerificationToken]").val();
        var searchdata = { "__RequestVerificationToken": token, "Page": page, "AgencySalaryID": AgencySalId, "MonthYear": monthYear };
        $.ajax({
            url: '@Url.Action("_AgencySalaryStaffDetailsPartial", "StaffPayment")',
            type: "POST",
            contentType: "application/x-www-form-urlencoded",
            data: searchdata,
            success: function (data) {

                $("#gridData").html(data);
            }
        });
    }
    function getEmployeeDetails(ID) {
        var AgencySalId = $("#hdnAgencyId").val() || 0;
        var monthYear = AgencySalId == 0 ? $('#MonthYear').val() : '';
        var searchdata = { "EmployeeID": ID, "AgencySalaryID": AgencySalId, "MonthYear": monthYear };
        $.ajax({
            url: '@Url.Action("PopupEmployeeDetails", "StaffPayment")',
            type: 'POST',
            contentType: "application/x-www-form-urlencoded",
            data: searchdata,
            success: function (data) {
                $('#popup').html(data);
                $("#AgencySalaryDetailsModal").modal("toggle");
            }, error: function (xhr, status, error) {
                //var err = eval("(" + xhr.responseText + ")");
                messageBox(error, "warning");
            }
        });
    }
    function getData() {
        var token = $("input[name=__RequestVerificationToken]").val();
        var AgencySalId = $("#hdnAgencyId").val() || 0;
        var searchData = { "__RequestVerificationToken": token, "pageIndex": 1, "pageSize": 5, "AgencySalaryId": AgencySalId };
        $("#gridVerified").jsGrid("search", searchData);
    }
    function getCommitmentData() {
        var token = $("input[name=__RequestVerificationToken]").val();
        var AgencySalId = $("#hdnAgencyId").val() || 0;
        var searchData = { "__RequestVerificationToken": token, "pageIndex": 1, "pageSize": 5, "AgencySalaryId": AgencySalId };
        $("#gridCommitment").jsGrid("search", searchData);
    }
    function fillCalcDetail(data) {
        $("#TotalAmount").val(data.TotalAmount);
        $("#SGST").val(data.SGST);
        $("#CGST").val(data.CGST);
        $("#ServiceCharge").val(data.ServiceCharge);
        $("#NetAmount").val(data.NetAmount);
        $("#NetPayable").val(data.NetPayable);
        $('#NeedUpdateTransDetail').val('true');
        //$("#CommitmentAmount").val(data.CommitmentAmount);
    }
    $('#CommitmentAmount').change(function () {
        calculateCommitmentTotal();
    });
    function calculateCommitmentTotal() {
        var ttlAmt = parseFloat($("#TotalAmount").val()) || 0;
        var cmtAmt = parseFloat($("#CommitmentAmount").val()) || 0;
        var netAmt = (ttlAmt + cmtAmt).toFixed(2);
        $('#NetCommitmentAmount').val(netAmt);
    }
    function calculateNetSalary() {
        var ttlAmt = parseFloat($("#TotalAmount").val()) || 0
        var GST = 0, CGST = 0;
        if (ttlAmt > 0) {
            GST = ttlAmt * (18 / 100);
            CGST = GST / 2;
        }
        var Total = (ttlAmt + GST).toFixed(2);
        $("#CGST").val(CGST.toFixed(2));
        $("#SGST").val(CGST.toFixed(2));
        $("#CreditorAmount").val(Total);
        $("#NetAmount").val(Total);
    }

    var DateField = function (config) {
        jsGrid.Field.call(this, config);
    };

    DateField.prototype = new jsGrid.Field({
        sorter: function (date1, date2) {
            return new Date(date1) - new Date(date2);
        },

        itemTemplate: function (value) {
            return new Date(value).toDateString();
        },

        filterTemplate: function () {
            var now = new Date();
            this._fromPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() - 1), dateFormat: 'dd-MM-yy', changeYear: true });
            this._toPicker = $("<input>").datepicker({ defaultDate: now.setFullYear(now.getFullYear() + 1), dateFormat: 'dd-MM-yy', changeYear: true });
            return $("<div>").append(this._fromPicker).append(this._toPicker);
        },

        insertTemplate: function (value) {
            return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
        },

        editTemplate: function (value) {
            return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
        },

        insertValue: function () {
            return this._insertPicker.datepicker("getDate").toISOString();
        },

        editValue: function () {
            return this._editPicker.datepicker("getDate").toISOString();
        },

        filterValue: function () {
            return {
                from: this._fromPicker.datepicker("getDate"),
                to: this._toPicker.datepicker("getDate")
            };
        }
    });
    jsGrid.fields.date = DateField;
    $("#gridVerified").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        pageLoading: true,
        autoload: true,
        editing: false,
        filtering: true,
        controller: {
            loadData: function (filter) {
                var deferred = $.Deferred();
                var token = $("input[name=__RequestVerificationToken]").val();
                var AgencySalId = $("#hdnAgencyId").val() || 0;
                filter.__RequestVerificationToken = token;
                filter.AgencySalaryId = AgencySalId;
                $.ajax({
                    type: "post",
                    url: 'SearchAgencySalaryVerifiedList',
                    data: filter,
                    dataType: "json",
                    success: function (datas) {
                        var da = {
                            data: datas.Data,
                            itemsCount: datas.TotalRecords
                        }

                        deferred.resolve(da);
                    }
                });
                return deferred.promise();

            }

        },
        fields: [
            { name: "SlNo", title: "S.No", editing: false, width: 60 },
            { type: "text", name: "AgencySalaryID", title: "AgencySalaryID", visible: false },
            { type: "text", name: "VerifiedSalaryId", title: "VerifiedSalaryId", visible: false },
            { type: "text", name: "EmployeeId", title: "Employee Id", editing: false },
            { type: "text", name: "Name", title: "Employee Name", editing: false },
            { name: "NetSalary", title: "Net Amt", editing: false },

            {
                type: "control", width: 100,
                _createFilterSwitchButton: function () {
                    return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false)
                },
                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                    var $customButton = $("<button>")
                        .attr("type", "button")
                        .attr("class", "ion ion-ios-trash")
                        .click(function (e) {
                            var choice = confirm("Do you want to remove this employee?");
                            if (choice === true) {
                                var token = $("input[name=__RequestVerificationToken]").val();
                                $.ajax({
                                    type: "POST",
                                    url: 'DeleteVerifiedEmployee',
                                    data: { __RequestVerificationToken: token, VerifiedSalaryId: item.VerifiedSalaryId },
                                    success: function (data) {
                                        if (data.Status == "success") {
                                            messageBox("Verified employee has been removed successfully", "success");
                                            getDataEmp(1);
                                            getData();
                                            getCommitmentData();
                                            fillCalcDetail(data);
                                        } else {
                                            messageBox("Something went wrong please contact administrator", "error");
                                        }
                                    },
                                    error: function (err) {
                                        console.log("error1 : " + err);
                                    }
                                });
                            }
                            e.stopPropagation();
                        });

                    var $customButtonEdit = $("<button>")

                   .attr("class", "ion-edit")
                   .click(function (e) {
                       $.ajax({
                           type: "GET",
                           url: getOutwardForEdit,
                           data: { "TapalId": item.TapalId, "UserId": item.CreateUserId },
                           success: function (result) {
                               if (result == -1) {
                                   $("#FailedAlert").text('Error. Try again!');
                                   $('#Failed').modal('show');
                               } else {
                                   $("#popup").html(result);
                                   $('#EditOutwardModal').modal('toggle');
                               }
                           },
                           error: function (err) {
                               console.log("error1 : " + err);
                           }
                       });
                       e.stopPropagation();
                   });
                    /***** Temporary Hide this $customButtonEdit*******/
                    $customButtonEdit.hide();

                    // return $result.add($customButton);
                    return $("<div>").append($customButton).append($customButtonEdit);
                }
            }
        ],
    });
    $("#gridVerified").jsGrid("option", "filtering", false);

    $("#gridCommitment").jsGrid({
        paging: true,
        pageIndex: 1,
        pageSize: 5,
        pageLoading: true,
        autoload: true,
        editing: false,
        filtering: true,
        controller: {
            loadData: function (filter) {
                var deferred = $.Deferred();
                var token = $("input[name=__RequestVerificationToken]").val();
                var AgencySalId = $("#hdnAgencyId").val() || 0;
                filter.__RequestVerificationToken = token;
                filter.AgencySalaryId = AgencySalId;
                $.ajax({
                    type: "post",
                    url: 'SearchAgencySalaryCommitmentList',
                    data: filter,
                    dataType: "json",
                    success: function (datas) {
                        var da = {
                            data: datas.Data,
                            itemsCount: datas.TotalRecords
                        }

                        deferred.resolve(da);
                    }
                });
                return deferred.promise();

            }

        },
        fields: [
            { name: "SlNo", title: "S.No", editing: false, width: 60 },
            { type: "text", name: "CommitmentNumber", title: "Commitment Number", editing: false },
            { type: "text", name: "ProjectNumber", title: "Project Number", editing: false },
            { type: "text", name: "AvailableAmount", title: "Available Balance", editing: false },
            { type: "text", name: "HeadName", title: "Head", editing: false },
            { name: "PaymentAmount", title: "Payment Value", editing: false },

        ],
    });
    $("#gridCommitment").jsGrid("option", "filtering", false);
</script>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/FoolProof/mvcfoolproof.unobtrusive.min.js")" type="text/javascript"></script>

